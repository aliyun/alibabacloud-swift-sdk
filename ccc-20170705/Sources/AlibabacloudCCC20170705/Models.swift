import Foundation
import Tea
import TeaUtils
import AlibabacloudOpenApi
import AlibabaCloudOpenApiUtil
import AlibabacloudEndpointUtil

public class AddAgentDeviceRequest : Tea.TeaModel {
    public var browserVersion: String?

    public var clientIp: String?

    public var clientPort: String?

    public var instanceId: String?

    public var remark: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.browserVersion != nil {
            map["BrowserVersion"] = self.browserVersion!
        }
        if self.clientIp != nil {
            map["ClientIp"] = self.clientIp!
        }
        if self.clientPort != nil {
            map["ClientPort"] = self.clientPort!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.remark != nil {
            map["Remark"] = self.remark!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("BrowserVersion") {
            self.browserVersion = dict["BrowserVersion"] as! String
        }
        if dict.keys.contains("ClientIp") {
            self.clientIp = dict["ClientIp"] as! String
        }
        if dict.keys.contains("ClientPort") {
            self.clientPort = dict["ClientPort"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("Remark") {
            self.remark = dict["Remark"] as! String
        }
    }
}

public class AddAgentDeviceResponseBody : Tea.TeaModel {
    public var agentDeviceId: Int64?

    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentDeviceId != nil {
            map["AgentDeviceId"] = self.agentDeviceId!
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("AgentDeviceId") {
            self.agentDeviceId = dict["AgentDeviceId"] as! Int64
        }
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class AddAgentDeviceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddAgentDeviceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = AddAgentDeviceResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class AddBulkPhoneNumbersRequest : Tea.TeaModel {
    public var contactFlowId: String?

    public var instanceId: String?

    public var phoneNumber: [String]?

    public var skillGroupId: [String]?

    public var usage: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactFlowId != nil {
            map["ContactFlowId"] = self.contactFlowId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.phoneNumber != nil {
            map["PhoneNumber"] = self.phoneNumber!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        if self.usage != nil {
            map["Usage"] = self.usage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("ContactFlowId") {
            self.contactFlowId = dict["ContactFlowId"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("PhoneNumber") {
            self.phoneNumber = dict["PhoneNumber"] as! [String]
        }
        if dict.keys.contains("SkillGroupId") {
            self.skillGroupId = dict["SkillGroupId"] as! [String]
        }
        if dict.keys.contains("Usage") {
            self.usage = dict["Usage"] as! String
        }
    }
}

public class AddBulkPhoneNumbersResponseBody : Tea.TeaModel {
    public class ArrearagePhoneNumbers : Tea.TeaModel {
        public var arrearagePhoneNumber: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.arrearagePhoneNumber != nil {
                map["ArrearagePhoneNumber"] = self.arrearagePhoneNumber!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("ArrearagePhoneNumber") {
                self.arrearagePhoneNumber = dict["ArrearagePhoneNumber"] as! [String]
            }
        }
    }
    public class FailedPhoneNumbers : Tea.TeaModel {
        public var failedPhoneNumber: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.failedPhoneNumber != nil {
                map["FailedPhoneNumber"] = self.failedPhoneNumber!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("FailedPhoneNumber") {
                self.failedPhoneNumber = dict["FailedPhoneNumber"] as! [String]
            }
        }
    }
    public class PhoneNumbers : Tea.TeaModel {
        public class PhoneNumber : Tea.TeaModel {
            public class ContactFlow : Tea.TeaModel {
                public var contactFlowDescription: String?

                public var contactFlowId: String?

                public var contactFlowName: String?

                public var instanceId: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.contactFlowDescription != nil {
                        map["ContactFlowDescription"] = self.contactFlowDescription!
                    }
                    if self.contactFlowId != nil {
                        map["ContactFlowId"] = self.contactFlowId!
                    }
                    if self.contactFlowName != nil {
                        map["ContactFlowName"] = self.contactFlowName!
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("ContactFlowDescription") {
                        self.contactFlowDescription = dict["ContactFlowDescription"] as! String
                    }
                    if dict.keys.contains("ContactFlowId") {
                        self.contactFlowId = dict["ContactFlowId"] as! String
                    }
                    if dict.keys.contains("ContactFlowName") {
                        self.contactFlowName = dict["ContactFlowName"] as! String
                    }
                    if dict.keys.contains("InstanceId") {
                        self.instanceId = dict["InstanceId"] as! String
                    }
                    if dict.keys.contains("Type") {
                        self.type = dict["Type"] as! String
                    }
                }
            }
            public class SkillGroups : Tea.TeaModel {
                public class SkillGroup : Tea.TeaModel {
                    public var skillGroupId: String?

                    public var skillGroupName: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.skillGroupId != nil {
                            map["SkillGroupId"] = self.skillGroupId!
                        }
                        if self.skillGroupName != nil {
                            map["SkillGroupName"] = self.skillGroupName!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("SkillGroupId") {
                            self.skillGroupId = dict["SkillGroupId"] as! String
                        }
                        if dict.keys.contains("SkillGroupName") {
                            self.skillGroupName = dict["SkillGroupName"] as! String
                        }
                    }
                }
                public var skillGroup: [AddBulkPhoneNumbersResponseBody.PhoneNumbers.PhoneNumber.SkillGroups.SkillGroup]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.skillGroup != nil {
                        var tmp : [Any] = []
                        for k in self.skillGroup! {
                            tmp.append(k.toMap())
                        }
                        map["SkillGroup"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("SkillGroup") {
                        self.skillGroup = dict["SkillGroup"] as! [AddBulkPhoneNumbersResponseBody.PhoneNumbers.PhoneNumber.SkillGroups.SkillGroup]
                    }
                }
            }
            public var allowOutbound: Bool?

            public var contactFlow: AddBulkPhoneNumbersResponseBody.PhoneNumbers.PhoneNumber.ContactFlow?

            public var instanceId: String?

            public var number: String?

            public var phoneNumberDescription: String?

            public var phoneNumberId: String?

            public var remainingTime: Int32?

            public var skillGroups: AddBulkPhoneNumbersResponseBody.PhoneNumbers.PhoneNumber.SkillGroups?

            public var testOnly: Bool?

            public var trunks: Int32?

            public var usage: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.contactFlow?.validate()
                try self.skillGroups?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.allowOutbound != nil {
                    map["AllowOutbound"] = self.allowOutbound!
                }
                if self.contactFlow != nil {
                    map["ContactFlow"] = self.contactFlow?.toMap()
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.number != nil {
                    map["Number"] = self.number!
                }
                if self.phoneNumberDescription != nil {
                    map["PhoneNumberDescription"] = self.phoneNumberDescription!
                }
                if self.phoneNumberId != nil {
                    map["PhoneNumberId"] = self.phoneNumberId!
                }
                if self.remainingTime != nil {
                    map["RemainingTime"] = self.remainingTime!
                }
                if self.skillGroups != nil {
                    map["SkillGroups"] = self.skillGroups?.toMap()
                }
                if self.testOnly != nil {
                    map["TestOnly"] = self.testOnly!
                }
                if self.trunks != nil {
                    map["Trunks"] = self.trunks!
                }
                if self.usage != nil {
                    map["Usage"] = self.usage!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("AllowOutbound") {
                    self.allowOutbound = dict["AllowOutbound"] as! Bool
                }
                if dict.keys.contains("ContactFlow") {
                    var model = AddBulkPhoneNumbersResponseBody.PhoneNumbers.PhoneNumber.ContactFlow()
                    model.fromMap(dict["ContactFlow"] as! [String: Any])
                    self.contactFlow = model
                }
                if dict.keys.contains("InstanceId") {
                    self.instanceId = dict["InstanceId"] as! String
                }
                if dict.keys.contains("Number") {
                    self.number = dict["Number"] as! String
                }
                if dict.keys.contains("PhoneNumberDescription") {
                    self.phoneNumberDescription = dict["PhoneNumberDescription"] as! String
                }
                if dict.keys.contains("PhoneNumberId") {
                    self.phoneNumberId = dict["PhoneNumberId"] as! String
                }
                if dict.keys.contains("RemainingTime") {
                    self.remainingTime = dict["RemainingTime"] as! Int32
                }
                if dict.keys.contains("SkillGroups") {
                    var model = AddBulkPhoneNumbersResponseBody.PhoneNumbers.PhoneNumber.SkillGroups()
                    model.fromMap(dict["SkillGroups"] as! [String: Any])
                    self.skillGroups = model
                }
                if dict.keys.contains("TestOnly") {
                    self.testOnly = dict["TestOnly"] as! Bool
                }
                if dict.keys.contains("Trunks") {
                    self.trunks = dict["Trunks"] as! Int32
                }
                if dict.keys.contains("Usage") {
                    self.usage = dict["Usage"] as! String
                }
            }
        }
        public var phoneNumber: [AddBulkPhoneNumbersResponseBody.PhoneNumbers.PhoneNumber]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.phoneNumber != nil {
                var tmp : [Any] = []
                for k in self.phoneNumber! {
                    tmp.append(k.toMap())
                }
                map["PhoneNumber"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("PhoneNumber") {
                self.phoneNumber = dict["PhoneNumber"] as! [AddBulkPhoneNumbersResponseBody.PhoneNumbers.PhoneNumber]
            }
        }
    }
    public class UserdPhoneNumbers : Tea.TeaModel {
        public var userdPhoneNumber: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.userdPhoneNumber != nil {
                map["UserdPhoneNumber"] = self.userdPhoneNumber!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("UserdPhoneNumber") {
                self.userdPhoneNumber = dict["UserdPhoneNumber"] as! [String]
            }
        }
    }
    public var arrearagePhoneNumbers: AddBulkPhoneNumbersResponseBody.ArrearagePhoneNumbers?

    public var code: String?

    public var failedPhoneNumbers: AddBulkPhoneNumbersResponseBody.FailedPhoneNumbers?

    public var httpStatusCode: Int32?

    public var message: String?

    public var phoneNumbers: AddBulkPhoneNumbersResponseBody.PhoneNumbers?

    public var requestId: String?

    public var success: Bool?

    public var userdPhoneNumbers: AddBulkPhoneNumbersResponseBody.UserdPhoneNumbers?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.arrearagePhoneNumbers?.validate()
        try self.failedPhoneNumbers?.validate()
        try self.phoneNumbers?.validate()
        try self.userdPhoneNumbers?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.arrearagePhoneNumbers != nil {
            map["ArrearagePhoneNumbers"] = self.arrearagePhoneNumbers?.toMap()
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.failedPhoneNumbers != nil {
            map["FailedPhoneNumbers"] = self.failedPhoneNumbers?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.phoneNumbers != nil {
            map["PhoneNumbers"] = self.phoneNumbers?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.userdPhoneNumbers != nil {
            map["UserdPhoneNumbers"] = self.userdPhoneNumbers?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("ArrearagePhoneNumbers") {
            var model = AddBulkPhoneNumbersResponseBody.ArrearagePhoneNumbers()
            model.fromMap(dict["ArrearagePhoneNumbers"] as! [String: Any])
            self.arrearagePhoneNumbers = model
        }
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("FailedPhoneNumbers") {
            var model = AddBulkPhoneNumbersResponseBody.FailedPhoneNumbers()
            model.fromMap(dict["FailedPhoneNumbers"] as! [String: Any])
            self.failedPhoneNumbers = model
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("PhoneNumbers") {
            var model = AddBulkPhoneNumbersResponseBody.PhoneNumbers()
            model.fromMap(dict["PhoneNumbers"] as! [String: Any])
            self.phoneNumbers = model
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
        if dict.keys.contains("UserdPhoneNumbers") {
            var model = AddBulkPhoneNumbersResponseBody.UserdPhoneNumbers()
            model.fromMap(dict["UserdPhoneNumbers"] as! [String: Any])
            self.userdPhoneNumbers = model
        }
    }
}

public class AddBulkPhoneNumbersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddBulkPhoneNumbersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = AddBulkPhoneNumbersResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class AddPhoneNumberRequest : Tea.TeaModel {
    public var contactFlowId: String?

    public var instanceId: String?

    public var phoneNumber: String?

    public var usage: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactFlowId != nil {
            map["ContactFlowId"] = self.contactFlowId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.phoneNumber != nil {
            map["PhoneNumber"] = self.phoneNumber!
        }
        if self.usage != nil {
            map["Usage"] = self.usage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("ContactFlowId") {
            self.contactFlowId = dict["ContactFlowId"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("PhoneNumber") {
            self.phoneNumber = dict["PhoneNumber"] as! String
        }
        if dict.keys.contains("Usage") {
            self.usage = dict["Usage"] as! String
        }
    }
}

public class AddPhoneNumberResponseBody : Tea.TeaModel {
    public class PhoneNumber : Tea.TeaModel {
        public class ContactFlow : Tea.TeaModel {
            public var contactFlowDescription: String?

            public var contactFlowId: String?

            public var contactFlowName: String?

            public var instanceId: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.contactFlowDescription != nil {
                    map["ContactFlowDescription"] = self.contactFlowDescription!
                }
                if self.contactFlowId != nil {
                    map["ContactFlowId"] = self.contactFlowId!
                }
                if self.contactFlowName != nil {
                    map["ContactFlowName"] = self.contactFlowName!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("ContactFlowDescription") {
                    self.contactFlowDescription = dict["ContactFlowDescription"] as! String
                }
                if dict.keys.contains("ContactFlowId") {
                    self.contactFlowId = dict["ContactFlowId"] as! String
                }
                if dict.keys.contains("ContactFlowName") {
                    self.contactFlowName = dict["ContactFlowName"] as! String
                }
                if dict.keys.contains("InstanceId") {
                    self.instanceId = dict["InstanceId"] as! String
                }
                if dict.keys.contains("Type") {
                    self.type = dict["Type"] as! String
                }
            }
        }
        public var allowOutbound: Bool?

        public var contactFlow: AddPhoneNumberResponseBody.PhoneNumber.ContactFlow?

        public var instanceId: String?

        public var number: String?

        public var phoneNumberDescription: String?

        public var phoneNumberId: String?

        public var remainingTime: Int32?

        public var testOnly: Bool?

        public var trunks: Int32?

        public var usage: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.contactFlow?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.allowOutbound != nil {
                map["AllowOutbound"] = self.allowOutbound!
            }
            if self.contactFlow != nil {
                map["ContactFlow"] = self.contactFlow?.toMap()
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.number != nil {
                map["Number"] = self.number!
            }
            if self.phoneNumberDescription != nil {
                map["PhoneNumberDescription"] = self.phoneNumberDescription!
            }
            if self.phoneNumberId != nil {
                map["PhoneNumberId"] = self.phoneNumberId!
            }
            if self.remainingTime != nil {
                map["RemainingTime"] = self.remainingTime!
            }
            if self.testOnly != nil {
                map["TestOnly"] = self.testOnly!
            }
            if self.trunks != nil {
                map["Trunks"] = self.trunks!
            }
            if self.usage != nil {
                map["Usage"] = self.usage!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("AllowOutbound") {
                self.allowOutbound = dict["AllowOutbound"] as! Bool
            }
            if dict.keys.contains("ContactFlow") {
                var model = AddPhoneNumberResponseBody.PhoneNumber.ContactFlow()
                model.fromMap(dict["ContactFlow"] as! [String: Any])
                self.contactFlow = model
            }
            if dict.keys.contains("InstanceId") {
                self.instanceId = dict["InstanceId"] as! String
            }
            if dict.keys.contains("Number") {
                self.number = dict["Number"] as! String
            }
            if dict.keys.contains("PhoneNumberDescription") {
                self.phoneNumberDescription = dict["PhoneNumberDescription"] as! String
            }
            if dict.keys.contains("PhoneNumberId") {
                self.phoneNumberId = dict["PhoneNumberId"] as! String
            }
            if dict.keys.contains("RemainingTime") {
                self.remainingTime = dict["RemainingTime"] as! Int32
            }
            if dict.keys.contains("TestOnly") {
                self.testOnly = dict["TestOnly"] as! Bool
            }
            if dict.keys.contains("Trunks") {
                self.trunks = dict["Trunks"] as! Int32
            }
            if dict.keys.contains("Usage") {
                self.usage = dict["Usage"] as! String
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var phoneNumber: AddPhoneNumberResponseBody.PhoneNumber?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.phoneNumber?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.phoneNumber != nil {
            map["PhoneNumber"] = self.phoneNumber?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("PhoneNumber") {
            var model = AddPhoneNumberResponseBody.PhoneNumber()
            model.fromMap(dict["PhoneNumber"] as! [String: Any])
            self.phoneNumber = model
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class AddPhoneNumberResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddPhoneNumberResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = AddPhoneNumberResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class AddPhoneTagsRequest : Tea.TeaModel {
    public var concurrency: Int32?

    public var instanceId: String?

    public var phoneNumberList: [String]?

    public var provider: String?

    public var regionNameCity: String?

    public var regionNameProvince: String?

    public var serviceTag: String?

    public var sipTag: String?

    public var type: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.concurrency != nil {
            map["Concurrency"] = self.concurrency!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.phoneNumberList != nil {
            map["PhoneNumberList"] = self.phoneNumberList!
        }
        if self.provider != nil {
            map["Provider"] = self.provider!
        }
        if self.regionNameCity != nil {
            map["RegionNameCity"] = self.regionNameCity!
        }
        if self.regionNameProvince != nil {
            map["RegionNameProvince"] = self.regionNameProvince!
        }
        if self.serviceTag != nil {
            map["ServiceTag"] = self.serviceTag!
        }
        if self.sipTag != nil {
            map["SipTag"] = self.sipTag!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Concurrency") {
            self.concurrency = dict["Concurrency"] as! Int32
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("PhoneNumberList") {
            self.phoneNumberList = dict["PhoneNumberList"] as! [String]
        }
        if dict.keys.contains("Provider") {
            self.provider = dict["Provider"] as! String
        }
        if dict.keys.contains("RegionNameCity") {
            self.regionNameCity = dict["RegionNameCity"] as! String
        }
        if dict.keys.contains("RegionNameProvince") {
            self.regionNameProvince = dict["RegionNameProvince"] as! String
        }
        if dict.keys.contains("ServiceTag") {
            self.serviceTag = dict["ServiceTag"] as! String
        }
        if dict.keys.contains("SipTag") {
            self.sipTag = dict["SipTag"] as! String
        }
        if dict.keys.contains("Type") {
            self.type = dict["Type"] as! Int32
        }
    }
}

public class AddPhoneTagsResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class AddPhoneTagsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddPhoneTagsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = AddPhoneTagsResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class AssignUsersRequest : Tea.TeaModel {
    public var instanceId: String?

    public var roleId: [String]?

    public var skillGroupId: [String]?

    public var skillLevel: [Int32]?

    public var userRamId: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.roleId != nil {
            map["RoleId"] = self.roleId!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        if self.skillLevel != nil {
            map["SkillLevel"] = self.skillLevel!
        }
        if self.userRamId != nil {
            map["UserRamId"] = self.userRamId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("RoleId") {
            self.roleId = dict["RoleId"] as! [String]
        }
        if dict.keys.contains("SkillGroupId") {
            self.skillGroupId = dict["SkillGroupId"] as! [String]
        }
        if dict.keys.contains("SkillLevel") {
            self.skillLevel = dict["SkillLevel"] as! [Int32]
        }
        if dict.keys.contains("UserRamId") {
            self.userRamId = dict["UserRamId"] as! [String]
        }
    }
}

public class AssignUsersResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class User : Tea.TeaModel {
            public var instanceId: String?

            public var primary: Bool?

            public var ramId: String?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.primary != nil {
                    map["Primary"] = self.primary!
                }
                if self.ramId != nil {
                    map["RamId"] = self.ramId!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("InstanceId") {
                    self.instanceId = dict["InstanceId"] as! String
                }
                if dict.keys.contains("Primary") {
                    self.primary = dict["Primary"] as! Bool
                }
                if dict.keys.contains("RamId") {
                    self.ramId = dict["RamId"] as! String
                }
                if dict.keys.contains("UserId") {
                    self.userId = dict["UserId"] as! String
                }
            }
        }
        public var user: [AssignUsersResponseBody.Data.User]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.user != nil {
                var tmp : [Any] = []
                for k in self.user! {
                    tmp.append(k.toMap())
                }
                map["User"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("User") {
                self.user = dict["User"] as! [AssignUsersResponseBody.Data.User]
            }
        }
    }
    public var code: String?

    public var data: AssignUsersResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("Data") {
            var model = AssignUsersResponseBody.Data()
            model.fromMap(dict["Data"] as! [String: Any])
            self.data = model
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class AssignUsersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AssignUsersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = AssignUsersResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class CallOnlinePrivacyNumberRequest : Tea.TeaModel {
    public var instanceId: String?

    public var telA: String?

    public var telB: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.telA != nil {
            map["TelA"] = self.telA!
        }
        if self.telB != nil {
            map["TelB"] = self.telB!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("TelA") {
            self.telA = dict["TelA"] as! String
        }
        if dict.keys.contains("TelB") {
            self.telB = dict["TelB"] as! String
        }
    }
}

public class CallOnlinePrivacyNumberResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var callId: String?

        public var dateCreated: String?

        public var represent: String?

        public var statusCode: String?

        public var telX: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callId != nil {
                map["CallId"] = self.callId!
            }
            if self.dateCreated != nil {
                map["DateCreated"] = self.dateCreated!
            }
            if self.represent != nil {
                map["Represent"] = self.represent!
            }
            if self.statusCode != nil {
                map["StatusCode"] = self.statusCode!
            }
            if self.telX != nil {
                map["TelX"] = self.telX!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("CallId") {
                self.callId = dict["CallId"] as! String
            }
            if dict.keys.contains("DateCreated") {
                self.dateCreated = dict["DateCreated"] as! String
            }
            if dict.keys.contains("Represent") {
                self.represent = dict["Represent"] as! String
            }
            if dict.keys.contains("StatusCode") {
                self.statusCode = dict["StatusCode"] as! String
            }
            if dict.keys.contains("TelX") {
                self.telX = dict["TelX"] as! String
            }
        }
    }
    public var code: String?

    public var data: CallOnlinePrivacyNumberResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("Data") {
            var model = CallOnlinePrivacyNumberResponseBody.Data()
            model.fromMap(dict["Data"] as! [String: Any])
            self.data = model
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class CallOnlinePrivacyNumberResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CallOnlinePrivacyNumberResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = CallOnlinePrivacyNumberResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class CheckNumberAvaliableRequest : Tea.TeaModel {
    public var callee: String?

    public var caller: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.callee != nil {
            map["Callee"] = self.callee!
        }
        if self.caller != nil {
            map["Caller"] = self.caller!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Callee") {
            self.callee = dict["Callee"] as! String
        }
        if dict.keys.contains("Caller") {
            self.caller = dict["Caller"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
    }
}

public class CheckNumberAvaliableResponseBody : Tea.TeaModel {
    public class CalleeAvaliable : Tea.TeaModel {
        public var avaliable: Bool?

        public var reason: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.avaliable != nil {
                map["Avaliable"] = self.avaliable!
            }
            if self.reason != nil {
                map["Reason"] = self.reason!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("Avaliable") {
                self.avaliable = dict["Avaliable"] as! Bool
            }
            if dict.keys.contains("Reason") {
                self.reason = dict["Reason"] as! String
            }
        }
    }
    public class CallerAvaliable : Tea.TeaModel {
        public var avaliable: Bool?

        public var reason: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.avaliable != nil {
                map["Avaliable"] = self.avaliable!
            }
            if self.reason != nil {
                map["Reason"] = self.reason!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("Avaliable") {
                self.avaliable = dict["Avaliable"] as! Bool
            }
            if dict.keys.contains("Reason") {
                self.reason = dict["Reason"] as! String
            }
        }
    }
    public var calleeAvaliable: CheckNumberAvaliableResponseBody.CalleeAvaliable?

    public var callerAvaliable: CheckNumberAvaliableResponseBody.CallerAvaliable?

    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.calleeAvaliable?.validate()
        try self.callerAvaliable?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.calleeAvaliable != nil {
            map["CalleeAvaliable"] = self.calleeAvaliable?.toMap()
        }
        if self.callerAvaliable != nil {
            map["CallerAvaliable"] = self.callerAvaliable?.toMap()
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("CalleeAvaliable") {
            var model = CheckNumberAvaliableResponseBody.CalleeAvaliable()
            model.fromMap(dict["CalleeAvaliable"] as! [String: Any])
            self.calleeAvaliable = model
        }
        if dict.keys.contains("CallerAvaliable") {
            var model = CheckNumberAvaliableResponseBody.CallerAvaliable()
            model.fromMap(dict["CallerAvaliable"] as! [String: Any])
            self.callerAvaliable = model
        }
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class CheckNumberAvaliableResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CheckNumberAvaliableResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = CheckNumberAvaliableResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class CommitContactFlowVersionModificationRequest : Tea.TeaModel {
    public var canvas: String?

    public var contactFlowVersionId: String?

    public var content: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.canvas != nil {
            map["Canvas"] = self.canvas!
        }
        if self.contactFlowVersionId != nil {
            map["ContactFlowVersionId"] = self.contactFlowVersionId!
        }
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Canvas") {
            self.canvas = dict["Canvas"] as! String
        }
        if dict.keys.contains("ContactFlowVersionId") {
            self.contactFlowVersionId = dict["ContactFlowVersionId"] as! String
        }
        if dict.keys.contains("Content") {
            self.content = dict["Content"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
    }
}

public class CommitContactFlowVersionModificationResponseBody : Tea.TeaModel {
    public class ContactFlowVersion : Tea.TeaModel {
        public var canvas: String?

        public var contactFlowVersionDescription: String?

        public var contactFlowVersionId: String?

        public var content: String?

        public var lastModified: String?

        public var lastModifiedBy: String?

        public var lockedBy: String?

        public var status: String?

        public var version: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.canvas != nil {
                map["Canvas"] = self.canvas!
            }
            if self.contactFlowVersionDescription != nil {
                map["ContactFlowVersionDescription"] = self.contactFlowVersionDescription!
            }
            if self.contactFlowVersionId != nil {
                map["ContactFlowVersionId"] = self.contactFlowVersionId!
            }
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.lastModified != nil {
                map["LastModified"] = self.lastModified!
            }
            if self.lastModifiedBy != nil {
                map["LastModifiedBy"] = self.lastModifiedBy!
            }
            if self.lockedBy != nil {
                map["LockedBy"] = self.lockedBy!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("Canvas") {
                self.canvas = dict["Canvas"] as! String
            }
            if dict.keys.contains("ContactFlowVersionDescription") {
                self.contactFlowVersionDescription = dict["ContactFlowVersionDescription"] as! String
            }
            if dict.keys.contains("ContactFlowVersionId") {
                self.contactFlowVersionId = dict["ContactFlowVersionId"] as! String
            }
            if dict.keys.contains("Content") {
                self.content = dict["Content"] as! String
            }
            if dict.keys.contains("LastModified") {
                self.lastModified = dict["LastModified"] as! String
            }
            if dict.keys.contains("LastModifiedBy") {
                self.lastModifiedBy = dict["LastModifiedBy"] as! String
            }
            if dict.keys.contains("LockedBy") {
                self.lockedBy = dict["LockedBy"] as! String
            }
            if dict.keys.contains("Status") {
                self.status = dict["Status"] as! String
            }
            if dict.keys.contains("Version") {
                self.version = dict["Version"] as! String
            }
        }
    }
    public var code: String?

    public var contactFlowVersion: CommitContactFlowVersionModificationResponseBody.ContactFlowVersion?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.contactFlowVersion?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.contactFlowVersion != nil {
            map["ContactFlowVersion"] = self.contactFlowVersion?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("ContactFlowVersion") {
            var model = CommitContactFlowVersionModificationResponseBody.ContactFlowVersion()
            model.fromMap(dict["ContactFlowVersion"] as! [String: Any])
            self.contactFlowVersion = model
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class CommitContactFlowVersionModificationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CommitContactFlowVersionModificationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = CommitContactFlowVersionModificationResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class CreateContactFlowRequest : Tea.TeaModel {
    public var canvas: String?

    public var content: String?

    public var description_: String?

    public var instanceId: String?

    public var name: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.canvas != nil {
            map["Canvas"] = self.canvas!
        }
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Canvas") {
            self.canvas = dict["Canvas"] as! String
        }
        if dict.keys.contains("Content") {
            self.content = dict["Content"] as! String
        }
        if dict.keys.contains("Description") {
            self.description_ = dict["Description"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("Name") {
            self.name = dict["Name"] as! String
        }
        if dict.keys.contains("Type") {
            self.type = dict["Type"] as! String
        }
    }
}

public class CreateContactFlowResponseBody : Tea.TeaModel {
    public class ContactFlow : Tea.TeaModel {
        public class PhoneNumbers : Tea.TeaModel {
            public class PhoneNumber : Tea.TeaModel {
                public var allowOutbound: Bool?

                public var instanceId: String?

                public var number: String?

                public var phoneNumberDescription: String?

                public var phoneNumberId: String?

                public var remainingTime: Int32?

                public var testOnly: Bool?

                public var trunks: Int32?

                public var usage: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.allowOutbound != nil {
                        map["AllowOutbound"] = self.allowOutbound!
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.number != nil {
                        map["Number"] = self.number!
                    }
                    if self.phoneNumberDescription != nil {
                        map["PhoneNumberDescription"] = self.phoneNumberDescription!
                    }
                    if self.phoneNumberId != nil {
                        map["PhoneNumberId"] = self.phoneNumberId!
                    }
                    if self.remainingTime != nil {
                        map["RemainingTime"] = self.remainingTime!
                    }
                    if self.testOnly != nil {
                        map["TestOnly"] = self.testOnly!
                    }
                    if self.trunks != nil {
                        map["Trunks"] = self.trunks!
                    }
                    if self.usage != nil {
                        map["Usage"] = self.usage!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("AllowOutbound") {
                        self.allowOutbound = dict["AllowOutbound"] as! Bool
                    }
                    if dict.keys.contains("InstanceId") {
                        self.instanceId = dict["InstanceId"] as! String
                    }
                    if dict.keys.contains("Number") {
                        self.number = dict["Number"] as! String
                    }
                    if dict.keys.contains("PhoneNumberDescription") {
                        self.phoneNumberDescription = dict["PhoneNumberDescription"] as! String
                    }
                    if dict.keys.contains("PhoneNumberId") {
                        self.phoneNumberId = dict["PhoneNumberId"] as! String
                    }
                    if dict.keys.contains("RemainingTime") {
                        self.remainingTime = dict["RemainingTime"] as! Int32
                    }
                    if dict.keys.contains("TestOnly") {
                        self.testOnly = dict["TestOnly"] as! Bool
                    }
                    if dict.keys.contains("Trunks") {
                        self.trunks = dict["Trunks"] as! Int32
                    }
                    if dict.keys.contains("Usage") {
                        self.usage = dict["Usage"] as! String
                    }
                }
            }
            public var phoneNumber: [CreateContactFlowResponseBody.ContactFlow.PhoneNumbers.PhoneNumber]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.phoneNumber != nil {
                    var tmp : [Any] = []
                    for k in self.phoneNumber! {
                        tmp.append(k.toMap())
                    }
                    map["PhoneNumber"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("PhoneNumber") {
                    self.phoneNumber = dict["PhoneNumber"] as! [CreateContactFlowResponseBody.ContactFlow.PhoneNumbers.PhoneNumber]
                }
            }
        }
        public class Versions : Tea.TeaModel {
            public class ContactFlowVersion : Tea.TeaModel {
                public var canvas: String?

                public var contactFlowVersionDescription: String?

                public var contactFlowVersionId: String?

                public var content: String?

                public var lastModified: String?

                public var lastModifiedBy: String?

                public var lockedBy: String?

                public var status: String?

                public var version: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.canvas != nil {
                        map["Canvas"] = self.canvas!
                    }
                    if self.contactFlowVersionDescription != nil {
                        map["ContactFlowVersionDescription"] = self.contactFlowVersionDescription!
                    }
                    if self.contactFlowVersionId != nil {
                        map["ContactFlowVersionId"] = self.contactFlowVersionId!
                    }
                    if self.content != nil {
                        map["Content"] = self.content!
                    }
                    if self.lastModified != nil {
                        map["LastModified"] = self.lastModified!
                    }
                    if self.lastModifiedBy != nil {
                        map["LastModifiedBy"] = self.lastModifiedBy!
                    }
                    if self.lockedBy != nil {
                        map["LockedBy"] = self.lockedBy!
                    }
                    if self.status != nil {
                        map["Status"] = self.status!
                    }
                    if self.version != nil {
                        map["Version"] = self.version!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("Canvas") {
                        self.canvas = dict["Canvas"] as! String
                    }
                    if dict.keys.contains("ContactFlowVersionDescription") {
                        self.contactFlowVersionDescription = dict["ContactFlowVersionDescription"] as! String
                    }
                    if dict.keys.contains("ContactFlowVersionId") {
                        self.contactFlowVersionId = dict["ContactFlowVersionId"] as! String
                    }
                    if dict.keys.contains("Content") {
                        self.content = dict["Content"] as! String
                    }
                    if dict.keys.contains("LastModified") {
                        self.lastModified = dict["LastModified"] as! String
                    }
                    if dict.keys.contains("LastModifiedBy") {
                        self.lastModifiedBy = dict["LastModifiedBy"] as! String
                    }
                    if dict.keys.contains("LockedBy") {
                        self.lockedBy = dict["LockedBy"] as! String
                    }
                    if dict.keys.contains("Status") {
                        self.status = dict["Status"] as! String
                    }
                    if dict.keys.contains("Version") {
                        self.version = dict["Version"] as! String
                    }
                }
            }
            public var contactFlowVersion: [CreateContactFlowResponseBody.ContactFlow.Versions.ContactFlowVersion]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.contactFlowVersion != nil {
                    var tmp : [Any] = []
                    for k in self.contactFlowVersion! {
                        tmp.append(k.toMap())
                    }
                    map["ContactFlowVersion"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("ContactFlowVersion") {
                    self.contactFlowVersion = dict["ContactFlowVersion"] as! [CreateContactFlowResponseBody.ContactFlow.Versions.ContactFlowVersion]
                }
            }
        }
        public var appliedVersion: String?

        public var contactFlowDescription: String?

        public var contactFlowId: String?

        public var contactFlowName: String?

        public var instanceId: String?

        public var phoneNumbers: CreateContactFlowResponseBody.ContactFlow.PhoneNumbers?

        public var type: String?

        public var versions: CreateContactFlowResponseBody.ContactFlow.Versions?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.phoneNumbers?.validate()
            try self.versions?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appliedVersion != nil {
                map["AppliedVersion"] = self.appliedVersion!
            }
            if self.contactFlowDescription != nil {
                map["ContactFlowDescription"] = self.contactFlowDescription!
            }
            if self.contactFlowId != nil {
                map["ContactFlowId"] = self.contactFlowId!
            }
            if self.contactFlowName != nil {
                map["ContactFlowName"] = self.contactFlowName!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.phoneNumbers != nil {
                map["PhoneNumbers"] = self.phoneNumbers?.toMap()
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.versions != nil {
                map["Versions"] = self.versions?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("AppliedVersion") {
                self.appliedVersion = dict["AppliedVersion"] as! String
            }
            if dict.keys.contains("ContactFlowDescription") {
                self.contactFlowDescription = dict["ContactFlowDescription"] as! String
            }
            if dict.keys.contains("ContactFlowId") {
                self.contactFlowId = dict["ContactFlowId"] as! String
            }
            if dict.keys.contains("ContactFlowName") {
                self.contactFlowName = dict["ContactFlowName"] as! String
            }
            if dict.keys.contains("InstanceId") {
                self.instanceId = dict["InstanceId"] as! String
            }
            if dict.keys.contains("PhoneNumbers") {
                var model = CreateContactFlowResponseBody.ContactFlow.PhoneNumbers()
                model.fromMap(dict["PhoneNumbers"] as! [String: Any])
                self.phoneNumbers = model
            }
            if dict.keys.contains("Type") {
                self.type = dict["Type"] as! String
            }
            if dict.keys.contains("Versions") {
                var model = CreateContactFlowResponseBody.ContactFlow.Versions()
                model.fromMap(dict["Versions"] as! [String: Any])
                self.versions = model
            }
        }
    }
    public var code: String?

    public var contactFlow: CreateContactFlowResponseBody.ContactFlow?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.contactFlow?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.contactFlow != nil {
            map["ContactFlow"] = self.contactFlow?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("ContactFlow") {
            var model = CreateContactFlowResponseBody.ContactFlow()
            model.fromMap(dict["ContactFlow"] as! [String: Any])
            self.contactFlow = model
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class CreateContactFlowResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateContactFlowResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = CreateContactFlowResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class CreateFaultRequest : Tea.TeaModel {
    public var agentFilePath: String?

    public var agentId: Int64?

    public var agentOssFileName: String?

    public var browserVersion: String?

    public var clientIp: String?

    public var clientPort: String?

    public var connectId: String?

    public var customFilePath: String?

    public var customOssFileName: String?

    public var description_: String?

    public var endTime: Int64?

    public var instanceId: String?

    public var microphoneEquipment: String?

    public var microphoneList: String?

    public var operatingSystemVersion: String?

    public var serviceIp: String?

    public var servicePort: String?

    public var speakerEquipment: String?

    public var speakerList: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentFilePath != nil {
            map["AgentFilePath"] = self.agentFilePath!
        }
        if self.agentId != nil {
            map["AgentId"] = self.agentId!
        }
        if self.agentOssFileName != nil {
            map["AgentOssFileName"] = self.agentOssFileName!
        }
        if self.browserVersion != nil {
            map["BrowserVersion"] = self.browserVersion!
        }
        if self.clientIp != nil {
            map["ClientIp"] = self.clientIp!
        }
        if self.clientPort != nil {
            map["ClientPort"] = self.clientPort!
        }
        if self.connectId != nil {
            map["ConnectId"] = self.connectId!
        }
        if self.customFilePath != nil {
            map["CustomFilePath"] = self.customFilePath!
        }
        if self.customOssFileName != nil {
            map["CustomOssFileName"] = self.customOssFileName!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.microphoneEquipment != nil {
            map["MicrophoneEquipment"] = self.microphoneEquipment!
        }
        if self.microphoneList != nil {
            map["MicrophoneList"] = self.microphoneList!
        }
        if self.operatingSystemVersion != nil {
            map["OperatingSystemVersion"] = self.operatingSystemVersion!
        }
        if self.serviceIp != nil {
            map["ServiceIp"] = self.serviceIp!
        }
        if self.servicePort != nil {
            map["ServicePort"] = self.servicePort!
        }
        if self.speakerEquipment != nil {
            map["SpeakerEquipment"] = self.speakerEquipment!
        }
        if self.speakerList != nil {
            map["SpeakerList"] = self.speakerList!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("AgentFilePath") {
            self.agentFilePath = dict["AgentFilePath"] as! String
        }
        if dict.keys.contains("AgentId") {
            self.agentId = dict["AgentId"] as! Int64
        }
        if dict.keys.contains("AgentOssFileName") {
            self.agentOssFileName = dict["AgentOssFileName"] as! String
        }
        if dict.keys.contains("BrowserVersion") {
            self.browserVersion = dict["BrowserVersion"] as! String
        }
        if dict.keys.contains("ClientIp") {
            self.clientIp = dict["ClientIp"] as! String
        }
        if dict.keys.contains("ClientPort") {
            self.clientPort = dict["ClientPort"] as! String
        }
        if dict.keys.contains("ConnectId") {
            self.connectId = dict["ConnectId"] as! String
        }
        if dict.keys.contains("CustomFilePath") {
            self.customFilePath = dict["CustomFilePath"] as! String
        }
        if dict.keys.contains("CustomOssFileName") {
            self.customOssFileName = dict["CustomOssFileName"] as! String
        }
        if dict.keys.contains("Description") {
            self.description_ = dict["Description"] as! String
        }
        if dict.keys.contains("EndTime") {
            self.endTime = dict["EndTime"] as! Int64
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("MicrophoneEquipment") {
            self.microphoneEquipment = dict["MicrophoneEquipment"] as! String
        }
        if dict.keys.contains("MicrophoneList") {
            self.microphoneList = dict["MicrophoneList"] as! String
        }
        if dict.keys.contains("OperatingSystemVersion") {
            self.operatingSystemVersion = dict["OperatingSystemVersion"] as! String
        }
        if dict.keys.contains("ServiceIp") {
            self.serviceIp = dict["ServiceIp"] as! String
        }
        if dict.keys.contains("ServicePort") {
            self.servicePort = dict["ServicePort"] as! String
        }
        if dict.keys.contains("SpeakerEquipment") {
            self.speakerEquipment = dict["SpeakerEquipment"] as! String
        }
        if dict.keys.contains("SpeakerList") {
            self.speakerList = dict["SpeakerList"] as! String
        }
        if dict.keys.contains("StartTime") {
            self.startTime = dict["StartTime"] as! Int64
        }
    }
}

public class CreateFaultResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class CreateFaultResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateFaultResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = CreateFaultResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class CreateInstanceRequest : Tea.TeaModel {
    public var adminRamId: [String]?

    public var description_: String?

    public var directoryId: String?

    public var domainName: String?

    public var name: String?

    public var phoneNumber: String?

    public var phoneNumbers: [String]?

    public var storageMaxDays: Int32?

    public var storageMaxSize: Int32?

    public var userObject: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.adminRamId != nil {
            map["AdminRamId"] = self.adminRamId!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.directoryId != nil {
            map["DirectoryId"] = self.directoryId!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.phoneNumber != nil {
            map["PhoneNumber"] = self.phoneNumber!
        }
        if self.phoneNumbers != nil {
            map["PhoneNumbers"] = self.phoneNumbers!
        }
        if self.storageMaxDays != nil {
            map["StorageMaxDays"] = self.storageMaxDays!
        }
        if self.storageMaxSize != nil {
            map["StorageMaxSize"] = self.storageMaxSize!
        }
        if self.userObject != nil {
            map["UserObject"] = self.userObject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("AdminRamId") {
            self.adminRamId = dict["AdminRamId"] as! [String]
        }
        if dict.keys.contains("Description") {
            self.description_ = dict["Description"] as! String
        }
        if dict.keys.contains("DirectoryId") {
            self.directoryId = dict["DirectoryId"] as! String
        }
        if dict.keys.contains("DomainName") {
            self.domainName = dict["DomainName"] as! String
        }
        if dict.keys.contains("Name") {
            self.name = dict["Name"] as! String
        }
        if dict.keys.contains("PhoneNumber") {
            self.phoneNumber = dict["PhoneNumber"] as! String
        }
        if dict.keys.contains("PhoneNumbers") {
            self.phoneNumbers = dict["PhoneNumbers"] as! [String]
        }
        if dict.keys.contains("StorageMaxDays") {
            self.storageMaxDays = dict["StorageMaxDays"] as! Int32
        }
        if dict.keys.contains("StorageMaxSize") {
            self.storageMaxSize = dict["StorageMaxSize"] as! Int32
        }
        if dict.keys.contains("UserObject") {
            self.userObject = dict["UserObject"] as! [String]
        }
    }
}

public class CreateInstanceResponseBody : Tea.TeaModel {
    public class Instance : Tea.TeaModel {
        public class Admin : Tea.TeaModel {
            public class User : Tea.TeaModel {
                public class Detail : Tea.TeaModel {
                    public var department: String?

                    public var displayName: String?

                    public var email: String?

                    public var loginName: String?

                    public var phone: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.department != nil {
                            map["Department"] = self.department!
                        }
                        if self.displayName != nil {
                            map["DisplayName"] = self.displayName!
                        }
                        if self.email != nil {
                            map["Email"] = self.email!
                        }
                        if self.loginName != nil {
                            map["LoginName"] = self.loginName!
                        }
                        if self.phone != nil {
                            map["Phone"] = self.phone!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("Department") {
                            self.department = dict["Department"] as! String
                        }
                        if dict.keys.contains("DisplayName") {
                            self.displayName = dict["DisplayName"] as! String
                        }
                        if dict.keys.contains("Email") {
                            self.email = dict["Email"] as! String
                        }
                        if dict.keys.contains("LoginName") {
                            self.loginName = dict["LoginName"] as! String
                        }
                        if dict.keys.contains("Phone") {
                            self.phone = dict["Phone"] as! String
                        }
                    }
                }
                public var detail: CreateInstanceResponseBody.Instance.Admin.User.Detail?

                public var instanceId: String?

                public var ramId: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.detail?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.detail != nil {
                        map["Detail"] = self.detail?.toMap()
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.ramId != nil {
                        map["RamId"] = self.ramId!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("Detail") {
                        var model = CreateInstanceResponseBody.Instance.Admin.User.Detail()
                        model.fromMap(dict["Detail"] as! [String: Any])
                        self.detail = model
                    }
                    if dict.keys.contains("InstanceId") {
                        self.instanceId = dict["InstanceId"] as! String
                    }
                    if dict.keys.contains("RamId") {
                        self.ramId = dict["RamId"] as! String
                    }
                    if dict.keys.contains("UserId") {
                        self.userId = dict["UserId"] as! String
                    }
                }
            }
            public var user: [CreateInstanceResponseBody.Instance.Admin.User]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.user != nil {
                    var tmp : [Any] = []
                    for k in self.user! {
                        tmp.append(k.toMap())
                    }
                    map["User"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("User") {
                    self.user = dict["User"] as! [CreateInstanceResponseBody.Instance.Admin.User]
                }
            }
        }
        public class FailLoginNames : Tea.TeaModel {
            public var failLoginName: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.failLoginName != nil {
                    map["FailLoginName"] = self.failLoginName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("FailLoginName") {
                    self.failLoginName = dict["FailLoginName"] as! [String]
                }
            }
        }
        public class FailPhoneNumbers : Tea.TeaModel {
            public var failPhoneNumber: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.failPhoneNumber != nil {
                    map["FailPhoneNumber"] = self.failPhoneNumber!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("FailPhoneNumber") {
                    self.failPhoneNumber = dict["FailPhoneNumber"] as! [String]
                }
            }
        }
        public class PhoneNumbers : Tea.TeaModel {
            public class PhoneNumber : Tea.TeaModel {
                public var allowOutbound: Bool?

                public var instanceId: String?

                public var number: String?

                public var phoneNumberDescription: String?

                public var phoneNumberId: String?

                public var remainingTime: Int32?

                public var testOnly: Bool?

                public var trunks: Int32?

                public var usage: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.allowOutbound != nil {
                        map["AllowOutbound"] = self.allowOutbound!
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.number != nil {
                        map["Number"] = self.number!
                    }
                    if self.phoneNumberDescription != nil {
                        map["PhoneNumberDescription"] = self.phoneNumberDescription!
                    }
                    if self.phoneNumberId != nil {
                        map["PhoneNumberId"] = self.phoneNumberId!
                    }
                    if self.remainingTime != nil {
                        map["RemainingTime"] = self.remainingTime!
                    }
                    if self.testOnly != nil {
                        map["TestOnly"] = self.testOnly!
                    }
                    if self.trunks != nil {
                        map["Trunks"] = self.trunks!
                    }
                    if self.usage != nil {
                        map["Usage"] = self.usage!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("AllowOutbound") {
                        self.allowOutbound = dict["AllowOutbound"] as! Bool
                    }
                    if dict.keys.contains("InstanceId") {
                        self.instanceId = dict["InstanceId"] as! String
                    }
                    if dict.keys.contains("Number") {
                        self.number = dict["Number"] as! String
                    }
                    if dict.keys.contains("PhoneNumberDescription") {
                        self.phoneNumberDescription = dict["PhoneNumberDescription"] as! String
                    }
                    if dict.keys.contains("PhoneNumberId") {
                        self.phoneNumberId = dict["PhoneNumberId"] as! String
                    }
                    if dict.keys.contains("RemainingTime") {
                        self.remainingTime = dict["RemainingTime"] as! Int32
                    }
                    if dict.keys.contains("TestOnly") {
                        self.testOnly = dict["TestOnly"] as! Bool
                    }
                    if dict.keys.contains("Trunks") {
                        self.trunks = dict["Trunks"] as! Int32
                    }
                    if dict.keys.contains("Usage") {
                        self.usage = dict["Usage"] as! String
                    }
                }
            }
            public var phoneNumber: [CreateInstanceResponseBody.Instance.PhoneNumbers.PhoneNumber]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.phoneNumber != nil {
                    var tmp : [Any] = []
                    for k in self.phoneNumber! {
                        tmp.append(k.toMap())
                    }
                    map["PhoneNumber"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("PhoneNumber") {
                    self.phoneNumber = dict["PhoneNumber"] as! [CreateInstanceResponseBody.Instance.PhoneNumbers.PhoneNumber]
                }
            }
        }
        public class SuccessLoginNames : Tea.TeaModel {
            public var successLoginName: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.successLoginName != nil {
                    map["SuccessLoginName"] = self.successLoginName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("SuccessLoginName") {
                    self.successLoginName = dict["SuccessLoginName"] as! [String]
                }
            }
        }
        public class SuccessPhoneNumbers : Tea.TeaModel {
            public var successPhoneNumber: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.successPhoneNumber != nil {
                    map["SuccessPhoneNumber"] = self.successPhoneNumber!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("SuccessPhoneNumber") {
                    self.successPhoneNumber = dict["SuccessPhoneNumber"] as! [String]
                }
            }
        }
        public var admin: CreateInstanceResponseBody.Instance.Admin?

        public var consoleUrl: String?

        public var createdTime: Int64?

        public var directoryId: String?

        public var domainName: String?

        public var failLoginNames: CreateInstanceResponseBody.Instance.FailLoginNames?

        public var failPhoneNumbers: CreateInstanceResponseBody.Instance.FailPhoneNumbers?

        public var instanceDescription: String?

        public var instanceId: String?

        public var instanceName: String?

        public var maxOnlineAgents: Int32?

        public var owner: String?

        public var phoneNumbers: CreateInstanceResponseBody.Instance.PhoneNumbers?

        public var status: String?

        public var storageBucket: String?

        public var storageMaxDays: Int32?

        public var storageMaxSize: Int32?

        public var successLoginNames: CreateInstanceResponseBody.Instance.SuccessLoginNames?

        public var successPhoneNumbers: CreateInstanceResponseBody.Instance.SuccessPhoneNumbers?

        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.admin?.validate()
            try self.failLoginNames?.validate()
            try self.failPhoneNumbers?.validate()
            try self.phoneNumbers?.validate()
            try self.successLoginNames?.validate()
            try self.successPhoneNumbers?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.admin != nil {
                map["Admin"] = self.admin?.toMap()
            }
            if self.consoleUrl != nil {
                map["ConsoleUrl"] = self.consoleUrl!
            }
            if self.createdTime != nil {
                map["CreatedTime"] = self.createdTime!
            }
            if self.directoryId != nil {
                map["DirectoryId"] = self.directoryId!
            }
            if self.domainName != nil {
                map["DomainName"] = self.domainName!
            }
            if self.failLoginNames != nil {
                map["FailLoginNames"] = self.failLoginNames?.toMap()
            }
            if self.failPhoneNumbers != nil {
                map["FailPhoneNumbers"] = self.failPhoneNumbers?.toMap()
            }
            if self.instanceDescription != nil {
                map["InstanceDescription"] = self.instanceDescription!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.instanceName != nil {
                map["InstanceName"] = self.instanceName!
            }
            if self.maxOnlineAgents != nil {
                map["MaxOnlineAgents"] = self.maxOnlineAgents!
            }
            if self.owner != nil {
                map["Owner"] = self.owner!
            }
            if self.phoneNumbers != nil {
                map["PhoneNumbers"] = self.phoneNumbers?.toMap()
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.storageBucket != nil {
                map["StorageBucket"] = self.storageBucket!
            }
            if self.storageMaxDays != nil {
                map["StorageMaxDays"] = self.storageMaxDays!
            }
            if self.storageMaxSize != nil {
                map["StorageMaxSize"] = self.storageMaxSize!
            }
            if self.successLoginNames != nil {
                map["SuccessLoginNames"] = self.successLoginNames?.toMap()
            }
            if self.successPhoneNumbers != nil {
                map["SuccessPhoneNumbers"] = self.successPhoneNumbers?.toMap()
            }
            if self.tenantId != nil {
                map["TenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("Admin") {
                var model = CreateInstanceResponseBody.Instance.Admin()
                model.fromMap(dict["Admin"] as! [String: Any])
                self.admin = model
            }
            if dict.keys.contains("ConsoleUrl") {
                self.consoleUrl = dict["ConsoleUrl"] as! String
            }
            if dict.keys.contains("CreatedTime") {
                self.createdTime = dict["CreatedTime"] as! Int64
            }
            if dict.keys.contains("DirectoryId") {
                self.directoryId = dict["DirectoryId"] as! String
            }
            if dict.keys.contains("DomainName") {
                self.domainName = dict["DomainName"] as! String
            }
            if dict.keys.contains("FailLoginNames") {
                var model = CreateInstanceResponseBody.Instance.FailLoginNames()
                model.fromMap(dict["FailLoginNames"] as! [String: Any])
                self.failLoginNames = model
            }
            if dict.keys.contains("FailPhoneNumbers") {
                var model = CreateInstanceResponseBody.Instance.FailPhoneNumbers()
                model.fromMap(dict["FailPhoneNumbers"] as! [String: Any])
                self.failPhoneNumbers = model
            }
            if dict.keys.contains("InstanceDescription") {
                self.instanceDescription = dict["InstanceDescription"] as! String
            }
            if dict.keys.contains("InstanceId") {
                self.instanceId = dict["InstanceId"] as! String
            }
            if dict.keys.contains("InstanceName") {
                self.instanceName = dict["InstanceName"] as! String
            }
            if dict.keys.contains("MaxOnlineAgents") {
                self.maxOnlineAgents = dict["MaxOnlineAgents"] as! Int32
            }
            if dict.keys.contains("Owner") {
                self.owner = dict["Owner"] as! String
            }
            if dict.keys.contains("PhoneNumbers") {
                var model = CreateInstanceResponseBody.Instance.PhoneNumbers()
                model.fromMap(dict["PhoneNumbers"] as! [String: Any])
                self.phoneNumbers = model
            }
            if dict.keys.contains("Status") {
                self.status = dict["Status"] as! String
            }
            if dict.keys.contains("StorageBucket") {
                self.storageBucket = dict["StorageBucket"] as! String
            }
            if dict.keys.contains("StorageMaxDays") {
                self.storageMaxDays = dict["StorageMaxDays"] as! Int32
            }
            if dict.keys.contains("StorageMaxSize") {
                self.storageMaxSize = dict["StorageMaxSize"] as! Int32
            }
            if dict.keys.contains("SuccessLoginNames") {
                var model = CreateInstanceResponseBody.Instance.SuccessLoginNames()
                model.fromMap(dict["SuccessLoginNames"] as! [String: Any])
                self.successLoginNames = model
            }
            if dict.keys.contains("SuccessPhoneNumbers") {
                var model = CreateInstanceResponseBody.Instance.SuccessPhoneNumbers()
                model.fromMap(dict["SuccessPhoneNumbers"] as! [String: Any])
                self.successPhoneNumbers = model
            }
            if dict.keys.contains("TenantId") {
                self.tenantId = dict["TenantId"] as! String
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var instance: CreateInstanceResponseBody.Instance?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.instance?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.instance != nil {
            map["Instance"] = self.instance?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Instance") {
            var model = CreateInstanceResponseBody.Instance()
            model.fromMap(dict["Instance"] as! [String: Any])
            self.instance = model
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class CreateInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = CreateInstanceResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class CreateMediaRequest : Tea.TeaModel {
    public var content: String?

    public var description_: String?

    public var fileName: String?

    public var instanceId: String?

    public var name: String?

    public var ossFileName: String?

    public var ossFilePath: String?

    public var type: String?

    public var uploadResult: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.fileName != nil {
            map["FileName"] = self.fileName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.ossFileName != nil {
            map["OssFileName"] = self.ossFileName!
        }
        if self.ossFilePath != nil {
            map["OssFilePath"] = self.ossFilePath!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        if self.uploadResult != nil {
            map["UploadResult"] = self.uploadResult!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Content") {
            self.content = dict["Content"] as! String
        }
        if dict.keys.contains("Description") {
            self.description_ = dict["Description"] as! String
        }
        if dict.keys.contains("FileName") {
            self.fileName = dict["FileName"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("Name") {
            self.name = dict["Name"] as! String
        }
        if dict.keys.contains("OssFileName") {
            self.ossFileName = dict["OssFileName"] as! String
        }
        if dict.keys.contains("OssFilePath") {
            self.ossFilePath = dict["OssFilePath"] as! String
        }
        if dict.keys.contains("Type") {
            self.type = dict["Type"] as! String
        }
        if dict.keys.contains("UploadResult") {
            self.uploadResult = dict["UploadResult"] as! String
        }
    }
}

public class CreateMediaResponseBody : Tea.TeaModel {
    public class MediaUploadParam : Tea.TeaModel {
        public var fileName: String?

        public var id: String?

        public var instance: String?

        public var name: String?

        public var ossFileName: String?

        public var ossFilePath: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fileName != nil {
                map["FileName"] = self.fileName!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.instance != nil {
                map["Instance"] = self.instance!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.ossFileName != nil {
                map["OssFileName"] = self.ossFileName!
            }
            if self.ossFilePath != nil {
                map["OssFilePath"] = self.ossFilePath!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("FileName") {
                self.fileName = dict["FileName"] as! String
            }
            if dict.keys.contains("Id") {
                self.id = dict["Id"] as! String
            }
            if dict.keys.contains("Instance") {
                self.instance = dict["Instance"] as! String
            }
            if dict.keys.contains("Name") {
                self.name = dict["Name"] as! String
            }
            if dict.keys.contains("OssFileName") {
                self.ossFileName = dict["OssFileName"] as! String
            }
            if dict.keys.contains("OssFilePath") {
                self.ossFilePath = dict["OssFilePath"] as! String
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var mediaUploadParam: CreateMediaResponseBody.MediaUploadParam?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.mediaUploadParam?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.mediaUploadParam != nil {
            map["MediaUploadParam"] = self.mediaUploadParam?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("MediaUploadParam") {
            var model = CreateMediaResponseBody.MediaUploadParam()
            model.fromMap(dict["MediaUploadParam"] as! [String: Any])
            self.mediaUploadParam = model
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class CreateMediaResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateMediaResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = CreateMediaResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class CreateSkillGroupRequest : Tea.TeaModel {
    public var allowPrivateOutboundNumber: Bool?

    public var description_: String?

    public var instanceId: String?

    public var name: String?

    public var outboundPhoneNumberId: [String]?

    public var routingStrategy: String?

    public var skillLevel: [Int32]?

    public var userId: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.allowPrivateOutboundNumber != nil {
            map["AllowPrivateOutboundNumber"] = self.allowPrivateOutboundNumber!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.outboundPhoneNumberId != nil {
            map["OutboundPhoneNumberId"] = self.outboundPhoneNumberId!
        }
        if self.routingStrategy != nil {
            map["RoutingStrategy"] = self.routingStrategy!
        }
        if self.skillLevel != nil {
            map["SkillLevel"] = self.skillLevel!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("AllowPrivateOutboundNumber") {
            self.allowPrivateOutboundNumber = dict["AllowPrivateOutboundNumber"] as! Bool
        }
        if dict.keys.contains("Description") {
            self.description_ = dict["Description"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("Name") {
            self.name = dict["Name"] as! String
        }
        if dict.keys.contains("OutboundPhoneNumberId") {
            self.outboundPhoneNumberId = dict["OutboundPhoneNumberId"] as! [String]
        }
        if dict.keys.contains("RoutingStrategy") {
            self.routingStrategy = dict["RoutingStrategy"] as! String
        }
        if dict.keys.contains("SkillLevel") {
            self.skillLevel = dict["SkillLevel"] as! [Int32]
        }
        if dict.keys.contains("UserId") {
            self.userId = dict["UserId"] as! [String]
        }
    }
}

public class CreateSkillGroupResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var skillGroupId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("SkillGroupId") {
            self.skillGroupId = dict["SkillGroupId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class CreateSkillGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSkillGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = CreateSkillGroupResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class CreateUserRequest : Tea.TeaModel {
    public var displayName: String?

    public var email: String?

    public var instanceId: String?

    public var loginName: String?

    public var phone: String?

    public var privateOutboundNumberId: String?

    public var roleId: [String]?

    public var skillGroupId: [String]?

    public var skillLevel: [Int32]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.displayName != nil {
            map["DisplayName"] = self.displayName!
        }
        if self.email != nil {
            map["Email"] = self.email!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.loginName != nil {
            map["LoginName"] = self.loginName!
        }
        if self.phone != nil {
            map["Phone"] = self.phone!
        }
        if self.privateOutboundNumberId != nil {
            map["PrivateOutboundNumberId"] = self.privateOutboundNumberId!
        }
        if self.roleId != nil {
            map["RoleId"] = self.roleId!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        if self.skillLevel != nil {
            map["SkillLevel"] = self.skillLevel!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("DisplayName") {
            self.displayName = dict["DisplayName"] as! String
        }
        if dict.keys.contains("Email") {
            self.email = dict["Email"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("LoginName") {
            self.loginName = dict["LoginName"] as! String
        }
        if dict.keys.contains("Phone") {
            self.phone = dict["Phone"] as! String
        }
        if dict.keys.contains("PrivateOutboundNumberId") {
            self.privateOutboundNumberId = dict["PrivateOutboundNumberId"] as! String
        }
        if dict.keys.contains("RoleId") {
            self.roleId = dict["RoleId"] as! [String]
        }
        if dict.keys.contains("SkillGroupId") {
            self.skillGroupId = dict["SkillGroupId"] as! [String]
        }
        if dict.keys.contains("SkillLevel") {
            self.skillLevel = dict["SkillLevel"] as! [Int32]
        }
    }
}

public class CreateUserResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
        if dict.keys.contains("UserId") {
            self.userId = dict["UserId"] as! String
        }
    }
}

public class CreateUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = CreateUserResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class CreateVoiceAppraiseRequest : Tea.TeaModel {
    public var contactFlowVersionId: String?

    public var content: String?

    public var instanceId: String?

    public var isAppraise: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactFlowVersionId != nil {
            map["ContactFlowVersionId"] = self.contactFlowVersionId!
        }
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.isAppraise != nil {
            map["IsAppraise"] = self.isAppraise!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("ContactFlowVersionId") {
            self.contactFlowVersionId = dict["ContactFlowVersionId"] as! String
        }
        if dict.keys.contains("Content") {
            self.content = dict["Content"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("IsAppraise") {
            self.isAppraise = dict["IsAppraise"] as! Bool
        }
    }
}

public class CreateVoiceAppraiseResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class CreateVoiceAppraiseResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateVoiceAppraiseResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = CreateVoiceAppraiseResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class DeleteInstanceRequest : Tea.TeaModel {
    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
    }
}

public class DeleteInstanceResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class DeleteInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = DeleteInstanceResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class DeleteMediaRequest : Tea.TeaModel {
    public var instanceId: String?

    public var name: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("Name") {
            self.name = dict["Name"] as! String
        }
    }
}

public class DeleteMediaResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class DeleteMediaResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteMediaResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = DeleteMediaResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class DeletePhoneTagsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var phoneNumberList: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.phoneNumberList != nil {
            map["PhoneNumberList"] = self.phoneNumberList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("PhoneNumberList") {
            self.phoneNumberList = dict["PhoneNumberList"] as! [String]
        }
    }
}

public class DeletePhoneTagsResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class DeletePhoneTagsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeletePhoneTagsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = DeletePhoneTagsResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class DeleteSkillGroupRequest : Tea.TeaModel {
    public var instanceId: String?

    public var skillGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("SkillGroupId") {
            self.skillGroupId = dict["SkillGroupId"] as! String
        }
    }
}

public class DeleteSkillGroupResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class DeleteSkillGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteSkillGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = DeleteSkillGroupResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class DialExRequest : Tea.TeaModel {
    public var answerMode: Int32?

    public var callee: String?

    public var caller: String?

    public var instanceId: String?

    public var provider: String?

    public var routPoint: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.answerMode != nil {
            map["AnswerMode"] = self.answerMode!
        }
        if self.callee != nil {
            map["Callee"] = self.callee!
        }
        if self.caller != nil {
            map["Caller"] = self.caller!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.provider != nil {
            map["Provider"] = self.provider!
        }
        if self.routPoint != nil {
            map["RoutPoint"] = self.routPoint!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("AnswerMode") {
            self.answerMode = dict["AnswerMode"] as! Int32
        }
        if dict.keys.contains("Callee") {
            self.callee = dict["Callee"] as! String
        }
        if dict.keys.contains("Caller") {
            self.caller = dict["Caller"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("Provider") {
            self.provider = dict["Provider"] as! String
        }
        if dict.keys.contains("RoutPoint") {
            self.routPoint = dict["RoutPoint"] as! String
        }
    }
}

public class DialExResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var statusCode: String?

    public var statusDesc: String?

    public var success: Bool?

    public var taskId: String?

    public var timeStamp: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.statusCode != nil {
            map["StatusCode"] = self.statusCode!
        }
        if self.statusDesc != nil {
            map["StatusDesc"] = self.statusDesc!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.timeStamp != nil {
            map["TimeStamp"] = self.timeStamp!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("StatusCode") {
            self.statusCode = dict["StatusCode"] as! String
        }
        if dict.keys.contains("StatusDesc") {
            self.statusDesc = dict["StatusDesc"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
        if dict.keys.contains("TaskId") {
            self.taskId = dict["TaskId"] as! String
        }
        if dict.keys.contains("TimeStamp") {
            self.timeStamp = dict["TimeStamp"] as! String
        }
    }
}

public class DialExResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DialExResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = DialExResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class DisableTrunkProvidersRequest : Tea.TeaModel {
    public var providerName: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.providerName != nil {
            map["ProviderName"] = self.providerName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("ProviderName") {
            self.providerName = dict["ProviderName"] as! [String]
        }
    }
}

public class DisableTrunkProvidersResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class DisableTrunkProvidersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DisableTrunkProvidersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = DisableTrunkProvidersResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class DownloadAllTypeRecordingRequest : Tea.TeaModel {
    public var channel: String?

    public var contactId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.channel != nil {
            map["Channel"] = self.channel!
        }
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Channel") {
            self.channel = dict["Channel"] as! String
        }
        if dict.keys.contains("ContactId") {
            self.contactId = dict["ContactId"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
    }
}

public class DownloadAllTypeRecordingResponseBody : Tea.TeaModel {
    public class MediaDownloadParamList : Tea.TeaModel {
        public class MediaDownloadParam : Tea.TeaModel {
            public var fileName: String?

            public var signatureUrl: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fileName != nil {
                    map["FileName"] = self.fileName!
                }
                if self.signatureUrl != nil {
                    map["SignatureUrl"] = self.signatureUrl!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("FileName") {
                    self.fileName = dict["FileName"] as! String
                }
                if dict.keys.contains("SignatureUrl") {
                    self.signatureUrl = dict["SignatureUrl"] as! String
                }
            }
        }
        public var mediaDownloadParam: [DownloadAllTypeRecordingResponseBody.MediaDownloadParamList.MediaDownloadParam]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.mediaDownloadParam != nil {
                var tmp : [Any] = []
                for k in self.mediaDownloadParam! {
                    tmp.append(k.toMap())
                }
                map["MediaDownloadParam"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("MediaDownloadParam") {
                self.mediaDownloadParam = dict["MediaDownloadParam"] as! [DownloadAllTypeRecordingResponseBody.MediaDownloadParamList.MediaDownloadParam]
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var mediaDownloadParamList: DownloadAllTypeRecordingResponseBody.MediaDownloadParamList?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.mediaDownloadParamList?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.mediaDownloadParamList != nil {
            map["MediaDownloadParamList"] = self.mediaDownloadParamList?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("MediaDownloadParamList") {
            var model = DownloadAllTypeRecordingResponseBody.MediaDownloadParamList()
            model.fromMap(dict["MediaDownloadParamList"] as! [String: Any])
            self.mediaDownloadParamList = model
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class DownloadAllTypeRecordingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DownloadAllTypeRecordingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = DownloadAllTypeRecordingResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class DownloadRecordingRequest : Tea.TeaModel {
    public var channel: String?

    public var fileName: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.channel != nil {
            map["Channel"] = self.channel!
        }
        if self.fileName != nil {
            map["FileName"] = self.fileName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Channel") {
            self.channel = dict["Channel"] as! String
        }
        if dict.keys.contains("FileName") {
            self.fileName = dict["FileName"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
    }
}

public class DownloadRecordingResponseBody : Tea.TeaModel {
    public class MediaDownloadParam : Tea.TeaModel {
        public var fileName: String?

        public var signatureUrl: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fileName != nil {
                map["FileName"] = self.fileName!
            }
            if self.signatureUrl != nil {
                map["SignatureUrl"] = self.signatureUrl!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("FileName") {
                self.fileName = dict["FileName"] as! String
            }
            if dict.keys.contains("SignatureUrl") {
                self.signatureUrl = dict["SignatureUrl"] as! String
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var mediaDownloadParam: DownloadRecordingResponseBody.MediaDownloadParam?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.mediaDownloadParam?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.mediaDownloadParam != nil {
            map["MediaDownloadParam"] = self.mediaDownloadParam?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("MediaDownloadParam") {
            var model = DownloadRecordingResponseBody.MediaDownloadParam()
            model.fromMap(dict["MediaDownloadParam"] as! [String: Any])
            self.mediaDownloadParam = model
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class DownloadRecordingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DownloadRecordingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = DownloadRecordingResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class FindUsersRequest : Tea.TeaModel {
    public var criteria: String?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.criteria != nil {
            map["Criteria"] = self.criteria!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Criteria") {
            self.criteria = dict["Criteria"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("PageNumber") {
            self.pageNumber = dict["PageNumber"] as! Int32
        }
        if dict.keys.contains("PageSize") {
            self.pageSize = dict["PageSize"] as! Int32
        }
    }
}

public class FindUsersResponseBody : Tea.TeaModel {
    public class Users : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class User : Tea.TeaModel {
                public class Detail : Tea.TeaModel {
                    public var department: String?

                    public var displayName: String?

                    public var email: String?

                    public var loginName: String?

                    public var phone: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.department != nil {
                            map["Department"] = self.department!
                        }
                        if self.displayName != nil {
                            map["DisplayName"] = self.displayName!
                        }
                        if self.email != nil {
                            map["Email"] = self.email!
                        }
                        if self.loginName != nil {
                            map["LoginName"] = self.loginName!
                        }
                        if self.phone != nil {
                            map["Phone"] = self.phone!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("Department") {
                            self.department = dict["Department"] as! String
                        }
                        if dict.keys.contains("DisplayName") {
                            self.displayName = dict["DisplayName"] as! String
                        }
                        if dict.keys.contains("Email") {
                            self.email = dict["Email"] as! String
                        }
                        if dict.keys.contains("LoginName") {
                            self.loginName = dict["LoginName"] as! String
                        }
                        if dict.keys.contains("Phone") {
                            self.phone = dict["Phone"] as! String
                        }
                    }
                }
                public class Roles : Tea.TeaModel {
                    public class Role : Tea.TeaModel {
                        public var instanceId: String?

                        public var roleDescription: String?

                        public var roleId: String?

                        public var roleName: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.instanceId != nil {
                                map["InstanceId"] = self.instanceId!
                            }
                            if self.roleDescription != nil {
                                map["RoleDescription"] = self.roleDescription!
                            }
                            if self.roleId != nil {
                                map["RoleId"] = self.roleId!
                            }
                            if self.roleName != nil {
                                map["RoleName"] = self.roleName!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("InstanceId") {
                                self.instanceId = dict["InstanceId"] as! String
                            }
                            if dict.keys.contains("RoleDescription") {
                                self.roleDescription = dict["RoleDescription"] as! String
                            }
                            if dict.keys.contains("RoleId") {
                                self.roleId = dict["RoleId"] as! String
                            }
                            if dict.keys.contains("RoleName") {
                                self.roleName = dict["RoleName"] as! String
                            }
                        }
                    }
                    public var role: [FindUsersResponseBody.Users.List.User.Roles.Role]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.role != nil {
                            var tmp : [Any] = []
                            for k in self.role! {
                                tmp.append(k.toMap())
                            }
                            map["Role"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("Role") {
                            self.role = dict["Role"] as! [FindUsersResponseBody.Users.List.User.Roles.Role]
                        }
                    }
                }
                public class SkillLevels : Tea.TeaModel {
                    public class SkillLevel : Tea.TeaModel {
                        public class Skill : Tea.TeaModel {
                            public var instanceId: String?

                            public var skillGroupDescription: String?

                            public var skillGroupId: String?

                            public var skillGroupName: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.instanceId != nil {
                                    map["InstanceId"] = self.instanceId!
                                }
                                if self.skillGroupDescription != nil {
                                    map["SkillGroupDescription"] = self.skillGroupDescription!
                                }
                                if self.skillGroupId != nil {
                                    map["SkillGroupId"] = self.skillGroupId!
                                }
                                if self.skillGroupName != nil {
                                    map["SkillGroupName"] = self.skillGroupName!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("InstanceId") {
                                    self.instanceId = dict["InstanceId"] as! String
                                }
                                if dict.keys.contains("SkillGroupDescription") {
                                    self.skillGroupDescription = dict["SkillGroupDescription"] as! String
                                }
                                if dict.keys.contains("SkillGroupId") {
                                    self.skillGroupId = dict["SkillGroupId"] as! String
                                }
                                if dict.keys.contains("SkillGroupName") {
                                    self.skillGroupName = dict["SkillGroupName"] as! String
                                }
                            }
                        }
                        public var level: Int32?

                        public var skill: FindUsersResponseBody.Users.List.User.SkillLevels.SkillLevel.Skill?

                        public var skillLevelId: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                            try self.skill?.validate()
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.level != nil {
                                map["Level"] = self.level!
                            }
                            if self.skill != nil {
                                map["Skill"] = self.skill?.toMap()
                            }
                            if self.skillLevelId != nil {
                                map["SkillLevelId"] = self.skillLevelId!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("Level") {
                                self.level = dict["Level"] as! Int32
                            }
                            if dict.keys.contains("Skill") {
                                var model = FindUsersResponseBody.Users.List.User.SkillLevels.SkillLevel.Skill()
                                model.fromMap(dict["Skill"] as! [String: Any])
                                self.skill = model
                            }
                            if dict.keys.contains("SkillLevelId") {
                                self.skillLevelId = dict["SkillLevelId"] as! String
                            }
                        }
                    }
                    public var skillLevel: [FindUsersResponseBody.Users.List.User.SkillLevels.SkillLevel]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.skillLevel != nil {
                            var tmp : [Any] = []
                            for k in self.skillLevel! {
                                tmp.append(k.toMap())
                            }
                            map["SkillLevel"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("SkillLevel") {
                            self.skillLevel = dict["SkillLevel"] as! [FindUsersResponseBody.Users.List.User.SkillLevels.SkillLevel]
                        }
                    }
                }
                public var detail: FindUsersResponseBody.Users.List.User.Detail?

                public var instanceId: String?

                public var privateOutboundNumberId: String?

                public var ramId: String?

                public var roles: FindUsersResponseBody.Users.List.User.Roles?

                public var skillLevels: FindUsersResponseBody.Users.List.User.SkillLevels?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.detail?.validate()
                    try self.roles?.validate()
                    try self.skillLevels?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.detail != nil {
                        map["Detail"] = self.detail?.toMap()
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.privateOutboundNumberId != nil {
                        map["PrivateOutboundNumberId"] = self.privateOutboundNumberId!
                    }
                    if self.ramId != nil {
                        map["RamId"] = self.ramId!
                    }
                    if self.roles != nil {
                        map["Roles"] = self.roles?.toMap()
                    }
                    if self.skillLevels != nil {
                        map["SkillLevels"] = self.skillLevels?.toMap()
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("Detail") {
                        var model = FindUsersResponseBody.Users.List.User.Detail()
                        model.fromMap(dict["Detail"] as! [String: Any])
                        self.detail = model
                    }
                    if dict.keys.contains("InstanceId") {
                        self.instanceId = dict["InstanceId"] as! String
                    }
                    if dict.keys.contains("PrivateOutboundNumberId") {
                        self.privateOutboundNumberId = dict["PrivateOutboundNumberId"] as! String
                    }
                    if dict.keys.contains("RamId") {
                        self.ramId = dict["RamId"] as! String
                    }
                    if dict.keys.contains("Roles") {
                        var model = FindUsersResponseBody.Users.List.User.Roles()
                        model.fromMap(dict["Roles"] as! [String: Any])
                        self.roles = model
                    }
                    if dict.keys.contains("SkillLevels") {
                        var model = FindUsersResponseBody.Users.List.User.SkillLevels()
                        model.fromMap(dict["SkillLevels"] as! [String: Any])
                        self.skillLevels = model
                    }
                    if dict.keys.contains("UserId") {
                        self.userId = dict["UserId"] as! String
                    }
                }
            }
            public var user: [FindUsersResponseBody.Users.List.User]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.user != nil {
                    var tmp : [Any] = []
                    for k in self.user! {
                        tmp.append(k.toMap())
                    }
                    map["User"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("User") {
                    self.user = dict["User"] as! [FindUsersResponseBody.Users.List.User]
                }
            }
        }
        public var list: FindUsersResponseBody.Users.List?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.list?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                map["List"] = self.list?.toMap()
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("List") {
                var model = FindUsersResponseBody.Users.List()
                model.fromMap(dict["List"] as! [String: Any])
                self.list = model
            }
            if dict.keys.contains("PageNumber") {
                self.pageNumber = dict["PageNumber"] as! Int32
            }
            if dict.keys.contains("PageSize") {
                self.pageSize = dict["PageSize"] as! Int32
            }
            if dict.keys.contains("TotalCount") {
                self.totalCount = dict["TotalCount"] as! Int32
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var users: FindUsersResponseBody.Users?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.users?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.users != nil {
            map["Users"] = self.users?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
        if dict.keys.contains("Users") {
            var model = FindUsersResponseBody.Users()
            model.fromMap(dict["Users"] as! [String: Any])
            self.users = model
        }
    }
}

public class FindUsersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FindUsersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = FindUsersResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class GenerateAgentStatisticReportRequest : Tea.TeaModel {
    public var agentId: String?

    public var endDate: String?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var startDate: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentId != nil {
            map["AgentId"] = self.agentId!
        }
        if self.endDate != nil {
            map["EndDate"] = self.endDate!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.startDate != nil {
            map["StartDate"] = self.startDate!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("AgentId") {
            self.agentId = dict["AgentId"] as! String
        }
        if dict.keys.contains("EndDate") {
            self.endDate = dict["EndDate"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("PageNumber") {
            self.pageNumber = dict["PageNumber"] as! Int32
        }
        if dict.keys.contains("PageSize") {
            self.pageSize = dict["PageSize"] as! Int32
        }
        if dict.keys.contains("StartDate") {
            self.startDate = dict["StartDate"] as! String
        }
    }
}

public class GenerateAgentStatisticReportResponseBody : Tea.TeaModel {
    public class DataList : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class GenerateAgentStatistic : Tea.TeaModel {
                public class Inbound : Tea.TeaModel {
                    public var averageHoldTime: Int64?

                    public var averageRingTime: Int64?

                    public var averageTalkTime: Int64?

                    public var averageWorkTime: Int64?

                    public var callsHandled: Int64?

                    public var callsOffered: Int64?

                    public var handleRate: Double?

                    public var maxHoldTime: Int64?

                    public var maxRingTime: Int64?

                    public var maxTalkTime: Int64?

                    public var maxWorkTime: Int64?

                    public var satisfactionIndex: Double?

                    public var satisfactionSurveysOffered: Int64?

                    public var satisfactionSurveysResponded: Int64?

                    public var totalHoldTime: Int64?

                    public var totalRingTime: Int64?

                    public var totalTalkTime: Int64?

                    public var totalWorkTime: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.averageHoldTime != nil {
                            map["AverageHoldTime"] = self.averageHoldTime!
                        }
                        if self.averageRingTime != nil {
                            map["AverageRingTime"] = self.averageRingTime!
                        }
                        if self.averageTalkTime != nil {
                            map["AverageTalkTime"] = self.averageTalkTime!
                        }
                        if self.averageWorkTime != nil {
                            map["AverageWorkTime"] = self.averageWorkTime!
                        }
                        if self.callsHandled != nil {
                            map["CallsHandled"] = self.callsHandled!
                        }
                        if self.callsOffered != nil {
                            map["CallsOffered"] = self.callsOffered!
                        }
                        if self.handleRate != nil {
                            map["HandleRate"] = self.handleRate!
                        }
                        if self.maxHoldTime != nil {
                            map["MaxHoldTime"] = self.maxHoldTime!
                        }
                        if self.maxRingTime != nil {
                            map["MaxRingTime"] = self.maxRingTime!
                        }
                        if self.maxTalkTime != nil {
                            map["MaxTalkTime"] = self.maxTalkTime!
                        }
                        if self.maxWorkTime != nil {
                            map["MaxWorkTime"] = self.maxWorkTime!
                        }
                        if self.satisfactionIndex != nil {
                            map["SatisfactionIndex"] = self.satisfactionIndex!
                        }
                        if self.satisfactionSurveysOffered != nil {
                            map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                        }
                        if self.satisfactionSurveysResponded != nil {
                            map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                        }
                        if self.totalHoldTime != nil {
                            map["TotalHoldTime"] = self.totalHoldTime!
                        }
                        if self.totalRingTime != nil {
                            map["TotalRingTime"] = self.totalRingTime!
                        }
                        if self.totalTalkTime != nil {
                            map["TotalTalkTime"] = self.totalTalkTime!
                        }
                        if self.totalWorkTime != nil {
                            map["TotalWorkTime"] = self.totalWorkTime!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("AverageHoldTime") {
                            self.averageHoldTime = dict["AverageHoldTime"] as! Int64
                        }
                        if dict.keys.contains("AverageRingTime") {
                            self.averageRingTime = dict["AverageRingTime"] as! Int64
                        }
                        if dict.keys.contains("AverageTalkTime") {
                            self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                        }
                        if dict.keys.contains("AverageWorkTime") {
                            self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                        }
                        if dict.keys.contains("CallsHandled") {
                            self.callsHandled = dict["CallsHandled"] as! Int64
                        }
                        if dict.keys.contains("CallsOffered") {
                            self.callsOffered = dict["CallsOffered"] as! Int64
                        }
                        if dict.keys.contains("HandleRate") {
                            self.handleRate = dict["HandleRate"] as! Double
                        }
                        if dict.keys.contains("MaxHoldTime") {
                            self.maxHoldTime = dict["MaxHoldTime"] as! Int64
                        }
                        if dict.keys.contains("MaxRingTime") {
                            self.maxRingTime = dict["MaxRingTime"] as! Int64
                        }
                        if dict.keys.contains("MaxTalkTime") {
                            self.maxTalkTime = dict["MaxTalkTime"] as! Int64
                        }
                        if dict.keys.contains("MaxWorkTime") {
                            self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionIndex") {
                            self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                        }
                        if dict.keys.contains("SatisfactionSurveysOffered") {
                            self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionSurveysResponded") {
                            self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                        }
                        if dict.keys.contains("TotalHoldTime") {
                            self.totalHoldTime = dict["TotalHoldTime"] as! Int64
                        }
                        if dict.keys.contains("TotalRingTime") {
                            self.totalRingTime = dict["TotalRingTime"] as! Int64
                        }
                        if dict.keys.contains("TotalTalkTime") {
                            self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                        }
                        if dict.keys.contains("TotalWorkTime") {
                            self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                        }
                    }
                }
                public class Outbound : Tea.TeaModel {
                    public var answerRate: Double?

                    public var averageDialingTime: Int64?

                    public var averageHoldTime: Int64?

                    public var averageTalkTime: Int64?

                    public var averageWorkTime: Int64?

                    public var callsAnswered: Int64?

                    public var callsDialed: Int64?

                    public var maxDialingTime: Int64?

                    public var maxHoldTime: Int64?

                    public var maxTalkTime: Int64?

                    public var maxWorkTime: Int64?

                    public var satisfactionIndex: Double?

                    public var satisfactionSurveysOffered: Int64?

                    public var satisfactionSurveysResponded: Int64?

                    public var totalDialingTime: Int64?

                    public var totalHoldTime: Int64?

                    public var totalTalkTime: Int64?

                    public var totalWorkTime: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.answerRate != nil {
                            map["AnswerRate"] = self.answerRate!
                        }
                        if self.averageDialingTime != nil {
                            map["AverageDialingTime"] = self.averageDialingTime!
                        }
                        if self.averageHoldTime != nil {
                            map["AverageHoldTime"] = self.averageHoldTime!
                        }
                        if self.averageTalkTime != nil {
                            map["AverageTalkTime"] = self.averageTalkTime!
                        }
                        if self.averageWorkTime != nil {
                            map["AverageWorkTime"] = self.averageWorkTime!
                        }
                        if self.callsAnswered != nil {
                            map["CallsAnswered"] = self.callsAnswered!
                        }
                        if self.callsDialed != nil {
                            map["CallsDialed"] = self.callsDialed!
                        }
                        if self.maxDialingTime != nil {
                            map["MaxDialingTime"] = self.maxDialingTime!
                        }
                        if self.maxHoldTime != nil {
                            map["MaxHoldTime"] = self.maxHoldTime!
                        }
                        if self.maxTalkTime != nil {
                            map["MaxTalkTime"] = self.maxTalkTime!
                        }
                        if self.maxWorkTime != nil {
                            map["MaxWorkTime"] = self.maxWorkTime!
                        }
                        if self.satisfactionIndex != nil {
                            map["SatisfactionIndex"] = self.satisfactionIndex!
                        }
                        if self.satisfactionSurveysOffered != nil {
                            map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                        }
                        if self.satisfactionSurveysResponded != nil {
                            map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                        }
                        if self.totalDialingTime != nil {
                            map["TotalDialingTime"] = self.totalDialingTime!
                        }
                        if self.totalHoldTime != nil {
                            map["TotalHoldTime"] = self.totalHoldTime!
                        }
                        if self.totalTalkTime != nil {
                            map["TotalTalkTime"] = self.totalTalkTime!
                        }
                        if self.totalWorkTime != nil {
                            map["TotalWorkTime"] = self.totalWorkTime!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("AnswerRate") {
                            self.answerRate = dict["AnswerRate"] as! Double
                        }
                        if dict.keys.contains("AverageDialingTime") {
                            self.averageDialingTime = dict["AverageDialingTime"] as! Int64
                        }
                        if dict.keys.contains("AverageHoldTime") {
                            self.averageHoldTime = dict["AverageHoldTime"] as! Int64
                        }
                        if dict.keys.contains("AverageTalkTime") {
                            self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                        }
                        if dict.keys.contains("AverageWorkTime") {
                            self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                        }
                        if dict.keys.contains("CallsAnswered") {
                            self.callsAnswered = dict["CallsAnswered"] as! Int64
                        }
                        if dict.keys.contains("CallsDialed") {
                            self.callsDialed = dict["CallsDialed"] as! Int64
                        }
                        if dict.keys.contains("MaxDialingTime") {
                            self.maxDialingTime = dict["MaxDialingTime"] as! Int64
                        }
                        if dict.keys.contains("MaxHoldTime") {
                            self.maxHoldTime = dict["MaxHoldTime"] as! Int64
                        }
                        if dict.keys.contains("MaxTalkTime") {
                            self.maxTalkTime = dict["MaxTalkTime"] as! Int64
                        }
                        if dict.keys.contains("MaxWorkTime") {
                            self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionIndex") {
                            self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                        }
                        if dict.keys.contains("SatisfactionSurveysOffered") {
                            self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionSurveysResponded") {
                            self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                        }
                        if dict.keys.contains("TotalDialingTime") {
                            self.totalDialingTime = dict["TotalDialingTime"] as! Int64
                        }
                        if dict.keys.contains("TotalHoldTime") {
                            self.totalHoldTime = dict["TotalHoldTime"] as! Int64
                        }
                        if dict.keys.contains("TotalTalkTime") {
                            self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                        }
                        if dict.keys.contains("TotalWorkTime") {
                            self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                        }
                    }
                }
                public class Overall : Tea.TeaModel {
                    public var averageHoldTime: Int64?

                    public var averageTalkTime: Int64?

                    public var averageWorkTime: Int64?

                    public var maxHoldTime: Int64?

                    public var maxTalkTime: Int64?

                    public var maxWorkTime: Int64?

                    public var satisfactionIndex: Double?

                    public var satisfactionSurveysOffered: Int64?

                    public var satisfactionSurveysResponded: Int64?

                    public var totalCalls: Int64?

                    public var totalHoldTime: Int64?

                    public var totalTalkTime: Int64?

                    public var totalWorkTime: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.averageHoldTime != nil {
                            map["AverageHoldTime"] = self.averageHoldTime!
                        }
                        if self.averageTalkTime != nil {
                            map["AverageTalkTime"] = self.averageTalkTime!
                        }
                        if self.averageWorkTime != nil {
                            map["AverageWorkTime"] = self.averageWorkTime!
                        }
                        if self.maxHoldTime != nil {
                            map["MaxHoldTime"] = self.maxHoldTime!
                        }
                        if self.maxTalkTime != nil {
                            map["MaxTalkTime"] = self.maxTalkTime!
                        }
                        if self.maxWorkTime != nil {
                            map["MaxWorkTime"] = self.maxWorkTime!
                        }
                        if self.satisfactionIndex != nil {
                            map["SatisfactionIndex"] = self.satisfactionIndex!
                        }
                        if self.satisfactionSurveysOffered != nil {
                            map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                        }
                        if self.satisfactionSurveysResponded != nil {
                            map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                        }
                        if self.totalCalls != nil {
                            map["TotalCalls"] = self.totalCalls!
                        }
                        if self.totalHoldTime != nil {
                            map["TotalHoldTime"] = self.totalHoldTime!
                        }
                        if self.totalTalkTime != nil {
                            map["TotalTalkTime"] = self.totalTalkTime!
                        }
                        if self.totalWorkTime != nil {
                            map["TotalWorkTime"] = self.totalWorkTime!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("AverageHoldTime") {
                            self.averageHoldTime = dict["AverageHoldTime"] as! Int64
                        }
                        if dict.keys.contains("AverageTalkTime") {
                            self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                        }
                        if dict.keys.contains("AverageWorkTime") {
                            self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                        }
                        if dict.keys.contains("MaxHoldTime") {
                            self.maxHoldTime = dict["MaxHoldTime"] as! Int64
                        }
                        if dict.keys.contains("MaxTalkTime") {
                            self.maxTalkTime = dict["MaxTalkTime"] as! Int64
                        }
                        if dict.keys.contains("MaxWorkTime") {
                            self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionIndex") {
                            self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                        }
                        if dict.keys.contains("SatisfactionSurveysOffered") {
                            self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionSurveysResponded") {
                            self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                        }
                        if dict.keys.contains("TotalCalls") {
                            self.totalCalls = dict["TotalCalls"] as! Int64
                        }
                        if dict.keys.contains("TotalHoldTime") {
                            self.totalHoldTime = dict["TotalHoldTime"] as! Int64
                        }
                        if dict.keys.contains("TotalTalkTime") {
                            self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                        }
                        if dict.keys.contains("TotalWorkTime") {
                            self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                        }
                    }
                }
                public var agentId: String?

                public var agentName: String?

                public var averageReadyTime: Int64?

                public var inbound: GenerateAgentStatisticReportResponseBody.DataList.List.GenerateAgentStatistic.Inbound?

                public var instanceId: String?

                public var loginName: String?

                public var maxReadyTime: Int64?

                public var occupancyRate: Double?

                public var outbound: GenerateAgentStatisticReportResponseBody.DataList.List.GenerateAgentStatistic.Outbound?

                public var overall: GenerateAgentStatisticReportResponseBody.DataList.List.GenerateAgentStatistic.Overall?

                public var recordDate: String?

                public var skillGroupIds: String?

                public var skillGroupNames: String?

                public var totalBreakTime: Int64?

                public var totalLoggedInTime: Int64?

                public var totalReadyTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.inbound?.validate()
                    try self.outbound?.validate()
                    try self.overall?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.agentId != nil {
                        map["AgentId"] = self.agentId!
                    }
                    if self.agentName != nil {
                        map["AgentName"] = self.agentName!
                    }
                    if self.averageReadyTime != nil {
                        map["AverageReadyTime"] = self.averageReadyTime!
                    }
                    if self.inbound != nil {
                        map["Inbound"] = self.inbound?.toMap()
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.loginName != nil {
                        map["LoginName"] = self.loginName!
                    }
                    if self.maxReadyTime != nil {
                        map["MaxReadyTime"] = self.maxReadyTime!
                    }
                    if self.occupancyRate != nil {
                        map["OccupancyRate"] = self.occupancyRate!
                    }
                    if self.outbound != nil {
                        map["Outbound"] = self.outbound?.toMap()
                    }
                    if self.overall != nil {
                        map["Overall"] = self.overall?.toMap()
                    }
                    if self.recordDate != nil {
                        map["RecordDate"] = self.recordDate!
                    }
                    if self.skillGroupIds != nil {
                        map["SkillGroupIds"] = self.skillGroupIds!
                    }
                    if self.skillGroupNames != nil {
                        map["SkillGroupNames"] = self.skillGroupNames!
                    }
                    if self.totalBreakTime != nil {
                        map["TotalBreakTime"] = self.totalBreakTime!
                    }
                    if self.totalLoggedInTime != nil {
                        map["TotalLoggedInTime"] = self.totalLoggedInTime!
                    }
                    if self.totalReadyTime != nil {
                        map["TotalReadyTime"] = self.totalReadyTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("AgentId") {
                        self.agentId = dict["AgentId"] as! String
                    }
                    if dict.keys.contains("AgentName") {
                        self.agentName = dict["AgentName"] as! String
                    }
                    if dict.keys.contains("AverageReadyTime") {
                        self.averageReadyTime = dict["AverageReadyTime"] as! Int64
                    }
                    if dict.keys.contains("Inbound") {
                        var model = GenerateAgentStatisticReportResponseBody.DataList.List.GenerateAgentStatistic.Inbound()
                        model.fromMap(dict["Inbound"] as! [String: Any])
                        self.inbound = model
                    }
                    if dict.keys.contains("InstanceId") {
                        self.instanceId = dict["InstanceId"] as! String
                    }
                    if dict.keys.contains("LoginName") {
                        self.loginName = dict["LoginName"] as! String
                    }
                    if dict.keys.contains("MaxReadyTime") {
                        self.maxReadyTime = dict["MaxReadyTime"] as! Int64
                    }
                    if dict.keys.contains("OccupancyRate") {
                        self.occupancyRate = dict["OccupancyRate"] as! Double
                    }
                    if dict.keys.contains("Outbound") {
                        var model = GenerateAgentStatisticReportResponseBody.DataList.List.GenerateAgentStatistic.Outbound()
                        model.fromMap(dict["Outbound"] as! [String: Any])
                        self.outbound = model
                    }
                    if dict.keys.contains("Overall") {
                        var model = GenerateAgentStatisticReportResponseBody.DataList.List.GenerateAgentStatistic.Overall()
                        model.fromMap(dict["Overall"] as! [String: Any])
                        self.overall = model
                    }
                    if dict.keys.contains("RecordDate") {
                        self.recordDate = dict["RecordDate"] as! String
                    }
                    if dict.keys.contains("SkillGroupIds") {
                        self.skillGroupIds = dict["SkillGroupIds"] as! String
                    }
                    if dict.keys.contains("SkillGroupNames") {
                        self.skillGroupNames = dict["SkillGroupNames"] as! String
                    }
                    if dict.keys.contains("TotalBreakTime") {
                        self.totalBreakTime = dict["TotalBreakTime"] as! Int64
                    }
                    if dict.keys.contains("TotalLoggedInTime") {
                        self.totalLoggedInTime = dict["TotalLoggedInTime"] as! Int64
                    }
                    if dict.keys.contains("TotalReadyTime") {
                        self.totalReadyTime = dict["TotalReadyTime"] as! Int64
                    }
                }
            }
            public var generateAgentStatistic: [GenerateAgentStatisticReportResponseBody.DataList.List.GenerateAgentStatistic]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.generateAgentStatistic != nil {
                    var tmp : [Any] = []
                    for k in self.generateAgentStatistic! {
                        tmp.append(k.toMap())
                    }
                    map["GenerateAgentStatistic"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("GenerateAgentStatistic") {
                    self.generateAgentStatistic = dict["GenerateAgentStatistic"] as! [GenerateAgentStatisticReportResponseBody.DataList.List.GenerateAgentStatistic]
                }
            }
        }
        public var list: GenerateAgentStatisticReportResponseBody.DataList.List?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.list?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                map["List"] = self.list?.toMap()
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("List") {
                var model = GenerateAgentStatisticReportResponseBody.DataList.List()
                model.fromMap(dict["List"] as! [String: Any])
                self.list = model
            }
            if dict.keys.contains("PageNumber") {
                self.pageNumber = dict["PageNumber"] as! Int32
            }
            if dict.keys.contains("PageSize") {
                self.pageSize = dict["PageSize"] as! Int32
            }
            if dict.keys.contains("TotalCount") {
                self.totalCount = dict["TotalCount"] as! Int32
            }
        }
    }
    public var code: String?

    public var dataList: GenerateAgentStatisticReportResponseBody.DataList?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.dataList?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.dataList != nil {
            map["DataList"] = self.dataList?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("DataList") {
            var model = GenerateAgentStatisticReportResponseBody.DataList()
            model.fromMap(dict["DataList"] as! [String: Any])
            self.dataList = model
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class GenerateAgentStatisticReportResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GenerateAgentStatisticReportResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = GenerateAgentStatisticReportResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class GetAgentDataRequest : Tea.TeaModel {
    public var endDay: String?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var startDay: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endDay != nil {
            map["EndDay"] = self.endDay!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.startDay != nil {
            map["StartDay"] = self.startDay!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("EndDay") {
            self.endDay = dict["EndDay"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("PageNumber") {
            self.pageNumber = dict["PageNumber"] as! Int32
        }
        if dict.keys.contains("PageSize") {
            self.pageSize = dict["PageSize"] as! Int32
        }
        if dict.keys.contains("StartDay") {
            self.startDay = dict["StartDay"] as! String
        }
        if dict.keys.contains("UserId") {
            self.userId = dict["UserId"] as! String
        }
    }
}

public class GetAgentDataResponseBody : Tea.TeaModel {
    public class DataList : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class Inbound : Tea.TeaModel {
                public var averageHoldTime: Int64?

                public var averageRingTime: Int64?

                public var averageTalkTime: Int64?

                public var averageWorkTime: Int64?

                public var callsHandled: Int64?

                public var callsOffered: Int64?

                public var handleRate: Double?

                public var maxHoldTime: Int64?

                public var maxRingTime: Int64?

                public var maxTalkTime: Int64?

                public var maxWorkTime: Int64?

                public var satisfactionIndex: Double?

                public var satisfactionSurveysOffered: Int64?

                public var satisfactionSurveysResponded: Int64?

                public var totalHoldTime: Int64?

                public var totalRingTime: Int64?

                public var totalTalkTime: Int64?

                public var totalWorkTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.averageHoldTime != nil {
                        map["AverageHoldTime"] = self.averageHoldTime!
                    }
                    if self.averageRingTime != nil {
                        map["AverageRingTime"] = self.averageRingTime!
                    }
                    if self.averageTalkTime != nil {
                        map["AverageTalkTime"] = self.averageTalkTime!
                    }
                    if self.averageWorkTime != nil {
                        map["AverageWorkTime"] = self.averageWorkTime!
                    }
                    if self.callsHandled != nil {
                        map["CallsHandled"] = self.callsHandled!
                    }
                    if self.callsOffered != nil {
                        map["CallsOffered"] = self.callsOffered!
                    }
                    if self.handleRate != nil {
                        map["HandleRate"] = self.handleRate!
                    }
                    if self.maxHoldTime != nil {
                        map["MaxHoldTime"] = self.maxHoldTime!
                    }
                    if self.maxRingTime != nil {
                        map["MaxRingTime"] = self.maxRingTime!
                    }
                    if self.maxTalkTime != nil {
                        map["MaxTalkTime"] = self.maxTalkTime!
                    }
                    if self.maxWorkTime != nil {
                        map["MaxWorkTime"] = self.maxWorkTime!
                    }
                    if self.satisfactionIndex != nil {
                        map["SatisfactionIndex"] = self.satisfactionIndex!
                    }
                    if self.satisfactionSurveysOffered != nil {
                        map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                    }
                    if self.satisfactionSurveysResponded != nil {
                        map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                    }
                    if self.totalHoldTime != nil {
                        map["TotalHoldTime"] = self.totalHoldTime!
                    }
                    if self.totalRingTime != nil {
                        map["TotalRingTime"] = self.totalRingTime!
                    }
                    if self.totalTalkTime != nil {
                        map["TotalTalkTime"] = self.totalTalkTime!
                    }
                    if self.totalWorkTime != nil {
                        map["TotalWorkTime"] = self.totalWorkTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("AverageHoldTime") {
                        self.averageHoldTime = dict["AverageHoldTime"] as! Int64
                    }
                    if dict.keys.contains("AverageRingTime") {
                        self.averageRingTime = dict["AverageRingTime"] as! Int64
                    }
                    if dict.keys.contains("AverageTalkTime") {
                        self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                    }
                    if dict.keys.contains("AverageWorkTime") {
                        self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                    }
                    if dict.keys.contains("CallsHandled") {
                        self.callsHandled = dict["CallsHandled"] as! Int64
                    }
                    if dict.keys.contains("CallsOffered") {
                        self.callsOffered = dict["CallsOffered"] as! Int64
                    }
                    if dict.keys.contains("HandleRate") {
                        self.handleRate = dict["HandleRate"] as! Double
                    }
                    if dict.keys.contains("MaxHoldTime") {
                        self.maxHoldTime = dict["MaxHoldTime"] as! Int64
                    }
                    if dict.keys.contains("MaxRingTime") {
                        self.maxRingTime = dict["MaxRingTime"] as! Int64
                    }
                    if dict.keys.contains("MaxTalkTime") {
                        self.maxTalkTime = dict["MaxTalkTime"] as! Int64
                    }
                    if dict.keys.contains("MaxWorkTime") {
                        self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                    }
                    if dict.keys.contains("SatisfactionIndex") {
                        self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                    }
                    if dict.keys.contains("SatisfactionSurveysOffered") {
                        self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                    }
                    if dict.keys.contains("SatisfactionSurveysResponded") {
                        self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                    }
                    if dict.keys.contains("TotalHoldTime") {
                        self.totalHoldTime = dict["TotalHoldTime"] as! Int64
                    }
                    if dict.keys.contains("TotalRingTime") {
                        self.totalRingTime = dict["TotalRingTime"] as! Int64
                    }
                    if dict.keys.contains("TotalTalkTime") {
                        self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                    }
                    if dict.keys.contains("TotalWorkTime") {
                        self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                    }
                }
            }
            public class Outbound : Tea.TeaModel {
                public var answerRate: Double?

                public var averageDialingTime: Int64?

                public var averageHoldTime: Int64?

                public var averageTalkTime: Int64?

                public var averageWorkTime: Int64?

                public var callsAnswered: Int64?

                public var callsDialed: Int64?

                public var maxDialingTime: Int64?

                public var maxHoldTime: Int64?

                public var maxTalkTime: Int64?

                public var maxWorkTime: Int64?

                public var satisfactionIndex: Double?

                public var satisfactionSurveysOffered: Int64?

                public var satisfactionSurveysResponded: Int64?

                public var totalDialingTime: Int64?

                public var totalHoldTime: Int64?

                public var totalTalkTime: Int64?

                public var totalWorkTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.answerRate != nil {
                        map["AnswerRate"] = self.answerRate!
                    }
                    if self.averageDialingTime != nil {
                        map["AverageDialingTime"] = self.averageDialingTime!
                    }
                    if self.averageHoldTime != nil {
                        map["AverageHoldTime"] = self.averageHoldTime!
                    }
                    if self.averageTalkTime != nil {
                        map["AverageTalkTime"] = self.averageTalkTime!
                    }
                    if self.averageWorkTime != nil {
                        map["AverageWorkTime"] = self.averageWorkTime!
                    }
                    if self.callsAnswered != nil {
                        map["CallsAnswered"] = self.callsAnswered!
                    }
                    if self.callsDialed != nil {
                        map["CallsDialed"] = self.callsDialed!
                    }
                    if self.maxDialingTime != nil {
                        map["MaxDialingTime"] = self.maxDialingTime!
                    }
                    if self.maxHoldTime != nil {
                        map["MaxHoldTime"] = self.maxHoldTime!
                    }
                    if self.maxTalkTime != nil {
                        map["MaxTalkTime"] = self.maxTalkTime!
                    }
                    if self.maxWorkTime != nil {
                        map["MaxWorkTime"] = self.maxWorkTime!
                    }
                    if self.satisfactionIndex != nil {
                        map["SatisfactionIndex"] = self.satisfactionIndex!
                    }
                    if self.satisfactionSurveysOffered != nil {
                        map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                    }
                    if self.satisfactionSurveysResponded != nil {
                        map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                    }
                    if self.totalDialingTime != nil {
                        map["TotalDialingTime"] = self.totalDialingTime!
                    }
                    if self.totalHoldTime != nil {
                        map["TotalHoldTime"] = self.totalHoldTime!
                    }
                    if self.totalTalkTime != nil {
                        map["TotalTalkTime"] = self.totalTalkTime!
                    }
                    if self.totalWorkTime != nil {
                        map["TotalWorkTime"] = self.totalWorkTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("AnswerRate") {
                        self.answerRate = dict["AnswerRate"] as! Double
                    }
                    if dict.keys.contains("AverageDialingTime") {
                        self.averageDialingTime = dict["AverageDialingTime"] as! Int64
                    }
                    if dict.keys.contains("AverageHoldTime") {
                        self.averageHoldTime = dict["AverageHoldTime"] as! Int64
                    }
                    if dict.keys.contains("AverageTalkTime") {
                        self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                    }
                    if dict.keys.contains("AverageWorkTime") {
                        self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                    }
                    if dict.keys.contains("CallsAnswered") {
                        self.callsAnswered = dict["CallsAnswered"] as! Int64
                    }
                    if dict.keys.contains("CallsDialed") {
                        self.callsDialed = dict["CallsDialed"] as! Int64
                    }
                    if dict.keys.contains("MaxDialingTime") {
                        self.maxDialingTime = dict["MaxDialingTime"] as! Int64
                    }
                    if dict.keys.contains("MaxHoldTime") {
                        self.maxHoldTime = dict["MaxHoldTime"] as! Int64
                    }
                    if dict.keys.contains("MaxTalkTime") {
                        self.maxTalkTime = dict["MaxTalkTime"] as! Int64
                    }
                    if dict.keys.contains("MaxWorkTime") {
                        self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                    }
                    if dict.keys.contains("SatisfactionIndex") {
                        self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                    }
                    if dict.keys.contains("SatisfactionSurveysOffered") {
                        self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                    }
                    if dict.keys.contains("SatisfactionSurveysResponded") {
                        self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                    }
                    if dict.keys.contains("TotalDialingTime") {
                        self.totalDialingTime = dict["TotalDialingTime"] as! Int64
                    }
                    if dict.keys.contains("TotalHoldTime") {
                        self.totalHoldTime = dict["TotalHoldTime"] as! Int64
                    }
                    if dict.keys.contains("TotalTalkTime") {
                        self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                    }
                    if dict.keys.contains("TotalWorkTime") {
                        self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                    }
                }
            }
            public class Overall : Tea.TeaModel {
                public var averageHoldTime: Int64?

                public var averageTalkTime: Int64?

                public var averageWorkTime: Int64?

                public var maxHoldTime: Int64?

                public var maxTalkTime: Int64?

                public var maxWorkTime: Int64?

                public var satisfactionIndex: Double?

                public var satisfactionSurveysOffered: Int64?

                public var satisfactionSurveysResponded: Int64?

                public var totalCalls: Int64?

                public var totalHoldTime: Int64?

                public var totalTalkTime: Int64?

                public var totalWorkTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.averageHoldTime != nil {
                        map["AverageHoldTime"] = self.averageHoldTime!
                    }
                    if self.averageTalkTime != nil {
                        map["AverageTalkTime"] = self.averageTalkTime!
                    }
                    if self.averageWorkTime != nil {
                        map["AverageWorkTime"] = self.averageWorkTime!
                    }
                    if self.maxHoldTime != nil {
                        map["MaxHoldTime"] = self.maxHoldTime!
                    }
                    if self.maxTalkTime != nil {
                        map["MaxTalkTime"] = self.maxTalkTime!
                    }
                    if self.maxWorkTime != nil {
                        map["MaxWorkTime"] = self.maxWorkTime!
                    }
                    if self.satisfactionIndex != nil {
                        map["SatisfactionIndex"] = self.satisfactionIndex!
                    }
                    if self.satisfactionSurveysOffered != nil {
                        map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                    }
                    if self.satisfactionSurveysResponded != nil {
                        map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                    }
                    if self.totalCalls != nil {
                        map["TotalCalls"] = self.totalCalls!
                    }
                    if self.totalHoldTime != nil {
                        map["TotalHoldTime"] = self.totalHoldTime!
                    }
                    if self.totalTalkTime != nil {
                        map["TotalTalkTime"] = self.totalTalkTime!
                    }
                    if self.totalWorkTime != nil {
                        map["TotalWorkTime"] = self.totalWorkTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("AverageHoldTime") {
                        self.averageHoldTime = dict["AverageHoldTime"] as! Int64
                    }
                    if dict.keys.contains("AverageTalkTime") {
                        self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                    }
                    if dict.keys.contains("AverageWorkTime") {
                        self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                    }
                    if dict.keys.contains("MaxHoldTime") {
                        self.maxHoldTime = dict["MaxHoldTime"] as! Int64
                    }
                    if dict.keys.contains("MaxTalkTime") {
                        self.maxTalkTime = dict["MaxTalkTime"] as! Int64
                    }
                    if dict.keys.contains("MaxWorkTime") {
                        self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                    }
                    if dict.keys.contains("SatisfactionIndex") {
                        self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                    }
                    if dict.keys.contains("SatisfactionSurveysOffered") {
                        self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                    }
                    if dict.keys.contains("SatisfactionSurveysResponded") {
                        self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                    }
                    if dict.keys.contains("TotalCalls") {
                        self.totalCalls = dict["TotalCalls"] as! Int64
                    }
                    if dict.keys.contains("TotalHoldTime") {
                        self.totalHoldTime = dict["TotalHoldTime"] as! Int64
                    }
                    if dict.keys.contains("TotalTalkTime") {
                        self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                    }
                    if dict.keys.contains("TotalWorkTime") {
                        self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                    }
                }
            }
            public var agentId: String?

            public var agentName: String?

            public var averageReadyTime: Int64?

            public var inbound: GetAgentDataResponseBody.DataList.List.Inbound?

            public var instanceId: String?

            public var loginName: String?

            public var maxReadyTime: Int64?

            public var occupancyRate: Double?

            public var outbound: GetAgentDataResponseBody.DataList.List.Outbound?

            public var overall: GetAgentDataResponseBody.DataList.List.Overall?

            public var recordDate: String?

            public var skillGroupIds: String?

            public var skillGroupNames: String?

            public var totalBreakTime: Int64?

            public var totalLoggedInTime: Int64?

            public var totalReadyTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.inbound?.validate()
                try self.outbound?.validate()
                try self.overall?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.agentId != nil {
                    map["AgentId"] = self.agentId!
                }
                if self.agentName != nil {
                    map["AgentName"] = self.agentName!
                }
                if self.averageReadyTime != nil {
                    map["AverageReadyTime"] = self.averageReadyTime!
                }
                if self.inbound != nil {
                    map["Inbound"] = self.inbound?.toMap()
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.loginName != nil {
                    map["LoginName"] = self.loginName!
                }
                if self.maxReadyTime != nil {
                    map["MaxReadyTime"] = self.maxReadyTime!
                }
                if self.occupancyRate != nil {
                    map["OccupancyRate"] = self.occupancyRate!
                }
                if self.outbound != nil {
                    map["Outbound"] = self.outbound?.toMap()
                }
                if self.overall != nil {
                    map["Overall"] = self.overall?.toMap()
                }
                if self.recordDate != nil {
                    map["RecordDate"] = self.recordDate!
                }
                if self.skillGroupIds != nil {
                    map["SkillGroupIds"] = self.skillGroupIds!
                }
                if self.skillGroupNames != nil {
                    map["SkillGroupNames"] = self.skillGroupNames!
                }
                if self.totalBreakTime != nil {
                    map["TotalBreakTime"] = self.totalBreakTime!
                }
                if self.totalLoggedInTime != nil {
                    map["TotalLoggedInTime"] = self.totalLoggedInTime!
                }
                if self.totalReadyTime != nil {
                    map["TotalReadyTime"] = self.totalReadyTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("AgentId") {
                    self.agentId = dict["AgentId"] as! String
                }
                if dict.keys.contains("AgentName") {
                    self.agentName = dict["AgentName"] as! String
                }
                if dict.keys.contains("AverageReadyTime") {
                    self.averageReadyTime = dict["AverageReadyTime"] as! Int64
                }
                if dict.keys.contains("Inbound") {
                    var model = GetAgentDataResponseBody.DataList.List.Inbound()
                    model.fromMap(dict["Inbound"] as! [String: Any])
                    self.inbound = model
                }
                if dict.keys.contains("InstanceId") {
                    self.instanceId = dict["InstanceId"] as! String
                }
                if dict.keys.contains("LoginName") {
                    self.loginName = dict["LoginName"] as! String
                }
                if dict.keys.contains("MaxReadyTime") {
                    self.maxReadyTime = dict["MaxReadyTime"] as! Int64
                }
                if dict.keys.contains("OccupancyRate") {
                    self.occupancyRate = dict["OccupancyRate"] as! Double
                }
                if dict.keys.contains("Outbound") {
                    var model = GetAgentDataResponseBody.DataList.List.Outbound()
                    model.fromMap(dict["Outbound"] as! [String: Any])
                    self.outbound = model
                }
                if dict.keys.contains("Overall") {
                    var model = GetAgentDataResponseBody.DataList.List.Overall()
                    model.fromMap(dict["Overall"] as! [String: Any])
                    self.overall = model
                }
                if dict.keys.contains("RecordDate") {
                    self.recordDate = dict["RecordDate"] as! String
                }
                if dict.keys.contains("SkillGroupIds") {
                    self.skillGroupIds = dict["SkillGroupIds"] as! String
                }
                if dict.keys.contains("SkillGroupNames") {
                    self.skillGroupNames = dict["SkillGroupNames"] as! String
                }
                if dict.keys.contains("TotalBreakTime") {
                    self.totalBreakTime = dict["TotalBreakTime"] as! Int64
                }
                if dict.keys.contains("TotalLoggedInTime") {
                    self.totalLoggedInTime = dict["TotalLoggedInTime"] as! Int64
                }
                if dict.keys.contains("TotalReadyTime") {
                    self.totalReadyTime = dict["TotalReadyTime"] as! Int64
                }
            }
        }
        public var list: [GetAgentDataResponseBody.DataList.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("List") {
                self.list = dict["List"] as! [GetAgentDataResponseBody.DataList.List]
            }
            if dict.keys.contains("PageNumber") {
                self.pageNumber = dict["PageNumber"] as! Int32
            }
            if dict.keys.contains("PageSize") {
                self.pageSize = dict["PageSize"] as! Int32
            }
            if dict.keys.contains("TotalCount") {
                self.totalCount = dict["TotalCount"] as! Int32
            }
        }
    }
    public var code: String?

    public var dataList: GetAgentDataResponseBody.DataList?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.dataList?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.dataList != nil {
            map["DataList"] = self.dataList?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("DataList") {
            var model = GetAgentDataResponseBody.DataList()
            model.fromMap(dict["DataList"] as! [String: Any])
            self.dataList = model
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class GetAgentDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetAgentDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = GetAgentDataResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class GetCallMeasureSummaryReportRequest : Tea.TeaModel {
    public var day: Int32?

    public var intervalType: String?

    public var month: Int32?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var year: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.day != nil {
            map["Day"] = self.day!
        }
        if self.intervalType != nil {
            map["IntervalType"] = self.intervalType!
        }
        if self.month != nil {
            map["Month"] = self.month!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.year != nil {
            map["Year"] = self.year!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Day") {
            self.day = dict["Day"] as! Int32
        }
        if dict.keys.contains("IntervalType") {
            self.intervalType = dict["IntervalType"] as! String
        }
        if dict.keys.contains("Month") {
            self.month = dict["Month"] as! Int32
        }
        if dict.keys.contains("PageNumber") {
            self.pageNumber = dict["PageNumber"] as! Int32
        }
        if dict.keys.contains("PageSize") {
            self.pageSize = dict["PageSize"] as! Int32
        }
        if dict.keys.contains("Year") {
            self.year = dict["Year"] as! Int32
        }
    }
}

public class GetCallMeasureSummaryReportResponseBody : Tea.TeaModel {
    public class NumberReports : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class NumberReport : Tea.TeaModel {
                public var day: Int32?

                public var inboundCount: Int64?

                public var inboundDurationByMinute: Int64?

                public var month: Int32?

                public var number: String?

                public var outboundCount: Int64?

                public var outboundDurationByMinute: Int64?

                public var year: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.day != nil {
                        map["Day"] = self.day!
                    }
                    if self.inboundCount != nil {
                        map["InboundCount"] = self.inboundCount!
                    }
                    if self.inboundDurationByMinute != nil {
                        map["InboundDurationByMinute"] = self.inboundDurationByMinute!
                    }
                    if self.month != nil {
                        map["Month"] = self.month!
                    }
                    if self.number != nil {
                        map["Number"] = self.number!
                    }
                    if self.outboundCount != nil {
                        map["OutboundCount"] = self.outboundCount!
                    }
                    if self.outboundDurationByMinute != nil {
                        map["OutboundDurationByMinute"] = self.outboundDurationByMinute!
                    }
                    if self.year != nil {
                        map["Year"] = self.year!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("Day") {
                        self.day = dict["Day"] as! Int32
                    }
                    if dict.keys.contains("InboundCount") {
                        self.inboundCount = dict["InboundCount"] as! Int64
                    }
                    if dict.keys.contains("InboundDurationByMinute") {
                        self.inboundDurationByMinute = dict["InboundDurationByMinute"] as! Int64
                    }
                    if dict.keys.contains("Month") {
                        self.month = dict["Month"] as! Int32
                    }
                    if dict.keys.contains("Number") {
                        self.number = dict["Number"] as! String
                    }
                    if dict.keys.contains("OutboundCount") {
                        self.outboundCount = dict["OutboundCount"] as! Int64
                    }
                    if dict.keys.contains("OutboundDurationByMinute") {
                        self.outboundDurationByMinute = dict["OutboundDurationByMinute"] as! Int64
                    }
                    if dict.keys.contains("Year") {
                        self.year = dict["Year"] as! Int32
                    }
                }
            }
            public var numberReport: [GetCallMeasureSummaryReportResponseBody.NumberReports.List.NumberReport]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.numberReport != nil {
                    var tmp : [Any] = []
                    for k in self.numberReport! {
                        tmp.append(k.toMap())
                    }
                    map["NumberReport"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("NumberReport") {
                    self.numberReport = dict["NumberReport"] as! [GetCallMeasureSummaryReportResponseBody.NumberReports.List.NumberReport]
                }
            }
        }
        public var list: GetCallMeasureSummaryReportResponseBody.NumberReports.List?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.list?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                map["List"] = self.list?.toMap()
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("List") {
                var model = GetCallMeasureSummaryReportResponseBody.NumberReports.List()
                model.fromMap(dict["List"] as! [String: Any])
                self.list = model
            }
            if dict.keys.contains("PageNumber") {
                self.pageNumber = dict["PageNumber"] as! Int32
            }
            if dict.keys.contains("PageSize") {
                self.pageSize = dict["PageSize"] as! Int32
            }
            if dict.keys.contains("TotalCount") {
                self.totalCount = dict["TotalCount"] as! Int32
            }
        }
    }
    public class SummaryReport : Tea.TeaModel {
        public var day: Int32?

        public var inboundCount: Int64?

        public var inboundDurationByMinute: Int64?

        public var month: Int32?

        public var outboundCount: Int64?

        public var outboundDurationByMinute: Int64?

        public var year: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.day != nil {
                map["Day"] = self.day!
            }
            if self.inboundCount != nil {
                map["InboundCount"] = self.inboundCount!
            }
            if self.inboundDurationByMinute != nil {
                map["InboundDurationByMinute"] = self.inboundDurationByMinute!
            }
            if self.month != nil {
                map["Month"] = self.month!
            }
            if self.outboundCount != nil {
                map["OutboundCount"] = self.outboundCount!
            }
            if self.outboundDurationByMinute != nil {
                map["OutboundDurationByMinute"] = self.outboundDurationByMinute!
            }
            if self.year != nil {
                map["Year"] = self.year!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("Day") {
                self.day = dict["Day"] as! Int32
            }
            if dict.keys.contains("InboundCount") {
                self.inboundCount = dict["InboundCount"] as! Int64
            }
            if dict.keys.contains("InboundDurationByMinute") {
                self.inboundDurationByMinute = dict["InboundDurationByMinute"] as! Int64
            }
            if dict.keys.contains("Month") {
                self.month = dict["Month"] as! Int32
            }
            if dict.keys.contains("OutboundCount") {
                self.outboundCount = dict["OutboundCount"] as! Int64
            }
            if dict.keys.contains("OutboundDurationByMinute") {
                self.outboundDurationByMinute = dict["OutboundDurationByMinute"] as! Int64
            }
            if dict.keys.contains("Year") {
                self.year = dict["Year"] as! Int32
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var numberReports: GetCallMeasureSummaryReportResponseBody.NumberReports?

    public var requestId: String?

    public var success: Bool?

    public var summaryReport: GetCallMeasureSummaryReportResponseBody.SummaryReport?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.numberReports?.validate()
        try self.summaryReport?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.numberReports != nil {
            map["NumberReports"] = self.numberReports?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.summaryReport != nil {
            map["SummaryReport"] = self.summaryReport?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("NumberReports") {
            var model = GetCallMeasureSummaryReportResponseBody.NumberReports()
            model.fromMap(dict["NumberReports"] as! [String: Any])
            self.numberReports = model
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
        if dict.keys.contains("SummaryReport") {
            var model = GetCallMeasureSummaryReportResponseBody.SummaryReport()
            model.fromMap(dict["SummaryReport"] as! [String: Any])
            self.summaryReport = model
        }
    }
}

public class GetCallMeasureSummaryReportResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetCallMeasureSummaryReportResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = GetCallMeasureSummaryReportResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class GetConfigRequest : Tea.TeaModel {
    public var instanceId: String?

    public var name: String?

    public var objectId: String?

    public var objectType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.objectId != nil {
            map["ObjectId"] = self.objectId!
        }
        if self.objectType != nil {
            map["ObjectType"] = self.objectType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("Name") {
            self.name = dict["Name"] as! String
        }
        if dict.keys.contains("ObjectId") {
            self.objectId = dict["ObjectId"] as! String
        }
        if dict.keys.contains("ObjectType") {
            self.objectType = dict["ObjectType"] as! String
        }
    }
}

public class GetConfigResponseBody : Tea.TeaModel {
    public class ConfigItem : Tea.TeaModel {
        public var name: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("Name") {
                self.name = dict["Name"] as! String
            }
            if dict.keys.contains("Value") {
                self.value = dict["Value"] as! String
            }
        }
    }
    public var code: String?

    public var configItem: GetConfigResponseBody.ConfigItem?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.configItem?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.configItem != nil {
            map["ConfigItem"] = self.configItem?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("ConfigItem") {
            var model = GetConfigResponseBody.ConfigItem()
            model.fromMap(dict["ConfigItem"] as! [String: Any])
            self.configItem = model
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class GetConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = GetConfigResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class GetConversationDetailByContactIdRequest : Tea.TeaModel {
    public var contactId: String?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("ContactId") {
            self.contactId = dict["ContactId"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("PageNumber") {
            self.pageNumber = dict["PageNumber"] as! Int32
        }
        if dict.keys.contains("PageSize") {
            self.pageSize = dict["PageSize"] as! Int32
        }
    }
}

public class GetConversationDetailByContactIdResponseBody : Tea.TeaModel {
    public class DataList : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class QualityCheckPhrase : Tea.TeaModel {
                public var begin: Int64?

                public var end: Int64?

                public var identity: String?

                public var role: String?

                public var words: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.begin != nil {
                        map["Begin"] = self.begin!
                    }
                    if self.end != nil {
                        map["End"] = self.end!
                    }
                    if self.identity != nil {
                        map["Identity"] = self.identity!
                    }
                    if self.role != nil {
                        map["Role"] = self.role!
                    }
                    if self.words != nil {
                        map["Words"] = self.words!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("Begin") {
                        self.begin = dict["Begin"] as! Int64
                    }
                    if dict.keys.contains("End") {
                        self.end = dict["End"] as! Int64
                    }
                    if dict.keys.contains("Identity") {
                        self.identity = dict["Identity"] as! String
                    }
                    if dict.keys.contains("Role") {
                        self.role = dict["Role"] as! String
                    }
                    if dict.keys.contains("Words") {
                        self.words = dict["Words"] as! String
                    }
                }
            }
            public var qualityCheckPhrase: [GetConversationDetailByContactIdResponseBody.DataList.List.QualityCheckPhrase]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.qualityCheckPhrase != nil {
                    var tmp : [Any] = []
                    for k in self.qualityCheckPhrase! {
                        tmp.append(k.toMap())
                    }
                    map["QualityCheckPhrase"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("QualityCheckPhrase") {
                    self.qualityCheckPhrase = dict["QualityCheckPhrase"] as! [GetConversationDetailByContactIdResponseBody.DataList.List.QualityCheckPhrase]
                }
            }
        }
        public var list: GetConversationDetailByContactIdResponseBody.DataList.List?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.list?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                map["List"] = self.list?.toMap()
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("List") {
                var model = GetConversationDetailByContactIdResponseBody.DataList.List()
                model.fromMap(dict["List"] as! [String: Any])
                self.list = model
            }
            if dict.keys.contains("PageNumber") {
                self.pageNumber = dict["PageNumber"] as! Int32
            }
            if dict.keys.contains("PageSize") {
                self.pageSize = dict["PageSize"] as! Int32
            }
            if dict.keys.contains("TotalCount") {
                self.totalCount = dict["TotalCount"] as! Int32
            }
        }
    }
    public var code: String?

    public var dataList: GetConversationDetailByContactIdResponseBody.DataList?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.dataList?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.dataList != nil {
            map["DataList"] = self.dataList?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("DataList") {
            var model = GetConversationDetailByContactIdResponseBody.DataList()
            model.fromMap(dict["DataList"] as! [String: Any])
            self.dataList = model
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class GetConversationDetailByContactIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetConversationDetailByContactIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = GetConversationDetailByContactIdResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class GetInstanceRequest : Tea.TeaModel {
    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
    }
}

public class GetInstanceResponseBody : Tea.TeaModel {
    public class Instance : Tea.TeaModel {
        public class Admin : Tea.TeaModel {
            public class User : Tea.TeaModel {
                public class Detail : Tea.TeaModel {
                    public var department: String?

                    public var displayName: String?

                    public var email: String?

                    public var loginName: String?

                    public var phone: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.department != nil {
                            map["Department"] = self.department!
                        }
                        if self.displayName != nil {
                            map["DisplayName"] = self.displayName!
                        }
                        if self.email != nil {
                            map["Email"] = self.email!
                        }
                        if self.loginName != nil {
                            map["LoginName"] = self.loginName!
                        }
                        if self.phone != nil {
                            map["Phone"] = self.phone!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("Department") {
                            self.department = dict["Department"] as! String
                        }
                        if dict.keys.contains("DisplayName") {
                            self.displayName = dict["DisplayName"] as! String
                        }
                        if dict.keys.contains("Email") {
                            self.email = dict["Email"] as! String
                        }
                        if dict.keys.contains("LoginName") {
                            self.loginName = dict["LoginName"] as! String
                        }
                        if dict.keys.contains("Phone") {
                            self.phone = dict["Phone"] as! String
                        }
                    }
                }
                public var detail: GetInstanceResponseBody.Instance.Admin.User.Detail?

                public var instanceId: String?

                public var ramId: String?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.detail?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.detail != nil {
                        map["Detail"] = self.detail?.toMap()
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.ramId != nil {
                        map["RamId"] = self.ramId!
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("Detail") {
                        var model = GetInstanceResponseBody.Instance.Admin.User.Detail()
                        model.fromMap(dict["Detail"] as! [String: Any])
                        self.detail = model
                    }
                    if dict.keys.contains("InstanceId") {
                        self.instanceId = dict["InstanceId"] as! String
                    }
                    if dict.keys.contains("RamId") {
                        self.ramId = dict["RamId"] as! String
                    }
                    if dict.keys.contains("UserId") {
                        self.userId = dict["UserId"] as! String
                    }
                }
            }
            public var user: [GetInstanceResponseBody.Instance.Admin.User]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.user != nil {
                    var tmp : [Any] = []
                    for k in self.user! {
                        tmp.append(k.toMap())
                    }
                    map["User"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("User") {
                    self.user = dict["User"] as! [GetInstanceResponseBody.Instance.Admin.User]
                }
            }
        }
        public class PhoneNumbers : Tea.TeaModel {
            public class PhoneNumber : Tea.TeaModel {
                public var allowOutbound: Bool?

                public var instanceId: String?

                public var number: String?

                public var phoneNumberDescription: String?

                public var phoneNumberId: String?

                public var remainingTime: Int32?

                public var testOnly: Bool?

                public var trunks: Int32?

                public var usage: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.allowOutbound != nil {
                        map["AllowOutbound"] = self.allowOutbound!
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.number != nil {
                        map["Number"] = self.number!
                    }
                    if self.phoneNumberDescription != nil {
                        map["PhoneNumberDescription"] = self.phoneNumberDescription!
                    }
                    if self.phoneNumberId != nil {
                        map["PhoneNumberId"] = self.phoneNumberId!
                    }
                    if self.remainingTime != nil {
                        map["RemainingTime"] = self.remainingTime!
                    }
                    if self.testOnly != nil {
                        map["TestOnly"] = self.testOnly!
                    }
                    if self.trunks != nil {
                        map["Trunks"] = self.trunks!
                    }
                    if self.usage != nil {
                        map["Usage"] = self.usage!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("AllowOutbound") {
                        self.allowOutbound = dict["AllowOutbound"] as! Bool
                    }
                    if dict.keys.contains("InstanceId") {
                        self.instanceId = dict["InstanceId"] as! String
                    }
                    if dict.keys.contains("Number") {
                        self.number = dict["Number"] as! String
                    }
                    if dict.keys.contains("PhoneNumberDescription") {
                        self.phoneNumberDescription = dict["PhoneNumberDescription"] as! String
                    }
                    if dict.keys.contains("PhoneNumberId") {
                        self.phoneNumberId = dict["PhoneNumberId"] as! String
                    }
                    if dict.keys.contains("RemainingTime") {
                        self.remainingTime = dict["RemainingTime"] as! Int32
                    }
                    if dict.keys.contains("TestOnly") {
                        self.testOnly = dict["TestOnly"] as! Bool
                    }
                    if dict.keys.contains("Trunks") {
                        self.trunks = dict["Trunks"] as! Int32
                    }
                    if dict.keys.contains("Usage") {
                        self.usage = dict["Usage"] as! String
                    }
                }
            }
            public var phoneNumber: [GetInstanceResponseBody.Instance.PhoneNumbers.PhoneNumber]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.phoneNumber != nil {
                    var tmp : [Any] = []
                    for k in self.phoneNumber! {
                        tmp.append(k.toMap())
                    }
                    map["PhoneNumber"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("PhoneNumber") {
                    self.phoneNumber = dict["PhoneNumber"] as! [GetInstanceResponseBody.Instance.PhoneNumbers.PhoneNumber]
                }
            }
        }
        public var admin: GetInstanceResponseBody.Instance.Admin?

        public var consoleUrl: String?

        public var createdTime: Int64?

        public var directoryId: String?

        public var domainName: String?

        public var instanceDescription: String?

        public var instanceId: String?

        public var instanceName: String?

        public var maxOnlineAgents: Int32?

        public var owner: String?

        public var phoneNumbers: GetInstanceResponseBody.Instance.PhoneNumbers?

        public var status: String?

        public var storageBucket: String?

        public var storageMaxDays: Int32?

        public var storageMaxSize: Int32?

        public var tenantId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.admin?.validate()
            try self.phoneNumbers?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.admin != nil {
                map["Admin"] = self.admin?.toMap()
            }
            if self.consoleUrl != nil {
                map["ConsoleUrl"] = self.consoleUrl!
            }
            if self.createdTime != nil {
                map["CreatedTime"] = self.createdTime!
            }
            if self.directoryId != nil {
                map["DirectoryId"] = self.directoryId!
            }
            if self.domainName != nil {
                map["DomainName"] = self.domainName!
            }
            if self.instanceDescription != nil {
                map["InstanceDescription"] = self.instanceDescription!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.instanceName != nil {
                map["InstanceName"] = self.instanceName!
            }
            if self.maxOnlineAgents != nil {
                map["MaxOnlineAgents"] = self.maxOnlineAgents!
            }
            if self.owner != nil {
                map["Owner"] = self.owner!
            }
            if self.phoneNumbers != nil {
                map["PhoneNumbers"] = self.phoneNumbers?.toMap()
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.storageBucket != nil {
                map["StorageBucket"] = self.storageBucket!
            }
            if self.storageMaxDays != nil {
                map["StorageMaxDays"] = self.storageMaxDays!
            }
            if self.storageMaxSize != nil {
                map["StorageMaxSize"] = self.storageMaxSize!
            }
            if self.tenantId != nil {
                map["TenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("Admin") {
                var model = GetInstanceResponseBody.Instance.Admin()
                model.fromMap(dict["Admin"] as! [String: Any])
                self.admin = model
            }
            if dict.keys.contains("ConsoleUrl") {
                self.consoleUrl = dict["ConsoleUrl"] as! String
            }
            if dict.keys.contains("CreatedTime") {
                self.createdTime = dict["CreatedTime"] as! Int64
            }
            if dict.keys.contains("DirectoryId") {
                self.directoryId = dict["DirectoryId"] as! String
            }
            if dict.keys.contains("DomainName") {
                self.domainName = dict["DomainName"] as! String
            }
            if dict.keys.contains("InstanceDescription") {
                self.instanceDescription = dict["InstanceDescription"] as! String
            }
            if dict.keys.contains("InstanceId") {
                self.instanceId = dict["InstanceId"] as! String
            }
            if dict.keys.contains("InstanceName") {
                self.instanceName = dict["InstanceName"] as! String
            }
            if dict.keys.contains("MaxOnlineAgents") {
                self.maxOnlineAgents = dict["MaxOnlineAgents"] as! Int32
            }
            if dict.keys.contains("Owner") {
                self.owner = dict["Owner"] as! String
            }
            if dict.keys.contains("PhoneNumbers") {
                var model = GetInstanceResponseBody.Instance.PhoneNumbers()
                model.fromMap(dict["PhoneNumbers"] as! [String: Any])
                self.phoneNumbers = model
            }
            if dict.keys.contains("Status") {
                self.status = dict["Status"] as! String
            }
            if dict.keys.contains("StorageBucket") {
                self.storageBucket = dict["StorageBucket"] as! String
            }
            if dict.keys.contains("StorageMaxDays") {
                self.storageMaxDays = dict["StorageMaxDays"] as! Int32
            }
            if dict.keys.contains("StorageMaxSize") {
                self.storageMaxSize = dict["StorageMaxSize"] as! Int32
            }
            if dict.keys.contains("TenantId") {
                self.tenantId = dict["TenantId"] as! String
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var instance: GetInstanceResponseBody.Instance?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.instance?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.instance != nil {
            map["Instance"] = self.instance?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Instance") {
            var model = GetInstanceResponseBody.Instance()
            model.fromMap(dict["Instance"] as! [String: Any])
            self.instance = model
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class GetInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = GetInstanceResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class GetInstanceStateRequest : Tea.TeaModel {
    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
    }
}

public class GetInstanceStateResponseBody : Tea.TeaModel {
    public class RealTimeInstanceState : Tea.TeaModel {
        public class AgentStateDistributions : Tea.TeaModel {
            public class AgentStateCount : Tea.TeaModel {
                public var count: Int64?

                public var state: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.count != nil {
                        map["Count"] = self.count!
                    }
                    if self.state != nil {
                        map["State"] = self.state!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("Count") {
                        self.count = dict["Count"] as! Int64
                    }
                    if dict.keys.contains("State") {
                        self.state = dict["State"] as! String
                    }
                }
            }
            public var agentStateCount: [GetInstanceStateResponseBody.RealTimeInstanceState.AgentStateDistributions.AgentStateCount]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.agentStateCount != nil {
                    var tmp : [Any] = []
                    for k in self.agentStateCount! {
                        tmp.append(k.toMap())
                    }
                    map["AgentStateCount"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("AgentStateCount") {
                    self.agentStateCount = dict["AgentStateCount"] as! [GetInstanceStateResponseBody.RealTimeInstanceState.AgentStateDistributions.AgentStateCount]
                }
            }
        }
        public var agentStateDistributions: GetInstanceStateResponseBody.RealTimeInstanceState.AgentStateDistributions?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.agentStateDistributions?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.agentStateDistributions != nil {
                map["AgentStateDistributions"] = self.agentStateDistributions?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("AgentStateDistributions") {
                var model = GetInstanceStateResponseBody.RealTimeInstanceState.AgentStateDistributions()
                model.fromMap(dict["AgentStateDistributions"] as! [String: Any])
                self.agentStateDistributions = model
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var realTimeInstanceState: GetInstanceStateResponseBody.RealTimeInstanceState?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.realTimeInstanceState?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.realTimeInstanceState != nil {
            map["RealTimeInstanceState"] = self.realTimeInstanceState?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RealTimeInstanceState") {
            var model = GetInstanceStateResponseBody.RealTimeInstanceState()
            model.fromMap(dict["RealTimeInstanceState"] as! [String: Any])
            self.realTimeInstanceState = model
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class GetInstanceStateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetInstanceStateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = GetInstanceStateResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class GetInstanceSummaryReportRequest : Tea.TeaModel {
    public var endTime: String?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("EndTime") {
            self.endTime = dict["EndTime"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("PageNumber") {
            self.pageNumber = dict["PageNumber"] as! Int32
        }
        if dict.keys.contains("PageSize") {
            self.pageSize = dict["PageSize"] as! Int32
        }
        if dict.keys.contains("StartTime") {
            self.startTime = dict["StartTime"] as! String
        }
    }
}

public class GetInstanceSummaryReportResponseBody : Tea.TeaModel {
    public class InstanceSummaryReport : Tea.TeaModel {
        public class Inbound : Tea.TeaModel {
            public var averageRingTime: Int64?

            public var averageTalkTime: Int64?

            public var averageWaitTime: Int64?

            public var averageWorkTime: Int64?

            public var callsAbandonedInIVR: Int64?

            public var callsAbandonedInQueue: Int64?

            public var callsHandled: Int64?

            public var callsIncomingIVR: Int64?

            public var callsIncomingLine: Int64?

            public var callsIncomingQueue: Int64?

            public var callsOffered: Int64?

            public var handleRate: Double?

            public var maxRingTime: Int64?

            public var maxTalkTime: String?

            public var maxWaitTime: Int64?

            public var maxWorkTime: Int64?

            public var satisfactionIndex: Double?

            public var satisfactionSurveysOffered: Int64?

            public var satisfactionSurveysResponded: Int64?

            public var serviceLevel20: Double?

            public var totalRingTime: Int64?

            public var totalTalkTime: Int64?

            public var totalWaitTime: Int64?

            public var totalWorkTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.averageRingTime != nil {
                    map["AverageRingTime"] = self.averageRingTime!
                }
                if self.averageTalkTime != nil {
                    map["AverageTalkTime"] = self.averageTalkTime!
                }
                if self.averageWaitTime != nil {
                    map["AverageWaitTime"] = self.averageWaitTime!
                }
                if self.averageWorkTime != nil {
                    map["AverageWorkTime"] = self.averageWorkTime!
                }
                if self.callsAbandonedInIVR != nil {
                    map["CallsAbandonedInIVR"] = self.callsAbandonedInIVR!
                }
                if self.callsAbandonedInQueue != nil {
                    map["CallsAbandonedInQueue"] = self.callsAbandonedInQueue!
                }
                if self.callsHandled != nil {
                    map["CallsHandled"] = self.callsHandled!
                }
                if self.callsIncomingIVR != nil {
                    map["CallsIncomingIVR"] = self.callsIncomingIVR!
                }
                if self.callsIncomingLine != nil {
                    map["CallsIncomingLine"] = self.callsIncomingLine!
                }
                if self.callsIncomingQueue != nil {
                    map["CallsIncomingQueue"] = self.callsIncomingQueue!
                }
                if self.callsOffered != nil {
                    map["CallsOffered"] = self.callsOffered!
                }
                if self.handleRate != nil {
                    map["HandleRate"] = self.handleRate!
                }
                if self.maxRingTime != nil {
                    map["MaxRingTime"] = self.maxRingTime!
                }
                if self.maxTalkTime != nil {
                    map["MaxTalkTime"] = self.maxTalkTime!
                }
                if self.maxWaitTime != nil {
                    map["MaxWaitTime"] = self.maxWaitTime!
                }
                if self.maxWorkTime != nil {
                    map["MaxWorkTime"] = self.maxWorkTime!
                }
                if self.satisfactionIndex != nil {
                    map["SatisfactionIndex"] = self.satisfactionIndex!
                }
                if self.satisfactionSurveysOffered != nil {
                    map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                }
                if self.satisfactionSurveysResponded != nil {
                    map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                }
                if self.serviceLevel20 != nil {
                    map["ServiceLevel20"] = self.serviceLevel20!
                }
                if self.totalRingTime != nil {
                    map["TotalRingTime"] = self.totalRingTime!
                }
                if self.totalTalkTime != nil {
                    map["TotalTalkTime"] = self.totalTalkTime!
                }
                if self.totalWaitTime != nil {
                    map["TotalWaitTime"] = self.totalWaitTime!
                }
                if self.totalWorkTime != nil {
                    map["TotalWorkTime"] = self.totalWorkTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("AverageRingTime") {
                    self.averageRingTime = dict["AverageRingTime"] as! Int64
                }
                if dict.keys.contains("AverageTalkTime") {
                    self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                }
                if dict.keys.contains("AverageWaitTime") {
                    self.averageWaitTime = dict["AverageWaitTime"] as! Int64
                }
                if dict.keys.contains("AverageWorkTime") {
                    self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                }
                if dict.keys.contains("CallsAbandonedInIVR") {
                    self.callsAbandonedInIVR = dict["CallsAbandonedInIVR"] as! Int64
                }
                if dict.keys.contains("CallsAbandonedInQueue") {
                    self.callsAbandonedInQueue = dict["CallsAbandonedInQueue"] as! Int64
                }
                if dict.keys.contains("CallsHandled") {
                    self.callsHandled = dict["CallsHandled"] as! Int64
                }
                if dict.keys.contains("CallsIncomingIVR") {
                    self.callsIncomingIVR = dict["CallsIncomingIVR"] as! Int64
                }
                if dict.keys.contains("CallsIncomingLine") {
                    self.callsIncomingLine = dict["CallsIncomingLine"] as! Int64
                }
                if dict.keys.contains("CallsIncomingQueue") {
                    self.callsIncomingQueue = dict["CallsIncomingQueue"] as! Int64
                }
                if dict.keys.contains("CallsOffered") {
                    self.callsOffered = dict["CallsOffered"] as! Int64
                }
                if dict.keys.contains("HandleRate") {
                    self.handleRate = dict["HandleRate"] as! Double
                }
                if dict.keys.contains("MaxRingTime") {
                    self.maxRingTime = dict["MaxRingTime"] as! Int64
                }
                if dict.keys.contains("MaxTalkTime") {
                    self.maxTalkTime = dict["MaxTalkTime"] as! String
                }
                if dict.keys.contains("MaxWaitTime") {
                    self.maxWaitTime = dict["MaxWaitTime"] as! Int64
                }
                if dict.keys.contains("MaxWorkTime") {
                    self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                }
                if dict.keys.contains("SatisfactionIndex") {
                    self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                }
                if dict.keys.contains("SatisfactionSurveysOffered") {
                    self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                }
                if dict.keys.contains("SatisfactionSurveysResponded") {
                    self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                }
                if dict.keys.contains("ServiceLevel20") {
                    self.serviceLevel20 = dict["ServiceLevel20"] as! Double
                }
                if dict.keys.contains("TotalRingTime") {
                    self.totalRingTime = dict["TotalRingTime"] as! Int64
                }
                if dict.keys.contains("TotalTalkTime") {
                    self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                }
                if dict.keys.contains("TotalWaitTime") {
                    self.totalWaitTime = dict["TotalWaitTime"] as! Int64
                }
                if dict.keys.contains("TotalWorkTime") {
                    self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                }
            }
        }
        public class Outbound : Tea.TeaModel {
            public var answerRate: Double?

            public var averageDialingTime: Int64?

            public var averageTalkTime: Int64?

            public var averageWorkTime: Int64?

            public var callsAnswered: Int64?

            public var callsDialed: Int64?

            public var maxDialingTime: Int64?

            public var maxTalkTime: Int64?

            public var maxWorkTime: Int64?

            public var satisfactionIndex: Double?

            public var satisfactionSurveysOffered: Int64?

            public var satisfactionSurveysResponded: Int64?

            public var totalDialingTime: Int64?

            public var totalTalkTime: Int64?

            public var totalWorkTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.answerRate != nil {
                    map["AnswerRate"] = self.answerRate!
                }
                if self.averageDialingTime != nil {
                    map["AverageDialingTime"] = self.averageDialingTime!
                }
                if self.averageTalkTime != nil {
                    map["AverageTalkTime"] = self.averageTalkTime!
                }
                if self.averageWorkTime != nil {
                    map["AverageWorkTime"] = self.averageWorkTime!
                }
                if self.callsAnswered != nil {
                    map["CallsAnswered"] = self.callsAnswered!
                }
                if self.callsDialed != nil {
                    map["CallsDialed"] = self.callsDialed!
                }
                if self.maxDialingTime != nil {
                    map["MaxDialingTime"] = self.maxDialingTime!
                }
                if self.maxTalkTime != nil {
                    map["MaxTalkTime"] = self.maxTalkTime!
                }
                if self.maxWorkTime != nil {
                    map["MaxWorkTime"] = self.maxWorkTime!
                }
                if self.satisfactionIndex != nil {
                    map["SatisfactionIndex"] = self.satisfactionIndex!
                }
                if self.satisfactionSurveysOffered != nil {
                    map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                }
                if self.satisfactionSurveysResponded != nil {
                    map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                }
                if self.totalDialingTime != nil {
                    map["TotalDialingTime"] = self.totalDialingTime!
                }
                if self.totalTalkTime != nil {
                    map["TotalTalkTime"] = self.totalTalkTime!
                }
                if self.totalWorkTime != nil {
                    map["TotalWorkTime"] = self.totalWorkTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("AnswerRate") {
                    self.answerRate = dict["AnswerRate"] as! Double
                }
                if dict.keys.contains("AverageDialingTime") {
                    self.averageDialingTime = dict["AverageDialingTime"] as! Int64
                }
                if dict.keys.contains("AverageTalkTime") {
                    self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                }
                if dict.keys.contains("AverageWorkTime") {
                    self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                }
                if dict.keys.contains("CallsAnswered") {
                    self.callsAnswered = dict["CallsAnswered"] as! Int64
                }
                if dict.keys.contains("CallsDialed") {
                    self.callsDialed = dict["CallsDialed"] as! Int64
                }
                if dict.keys.contains("MaxDialingTime") {
                    self.maxDialingTime = dict["MaxDialingTime"] as! Int64
                }
                if dict.keys.contains("MaxTalkTime") {
                    self.maxTalkTime = dict["MaxTalkTime"] as! Int64
                }
                if dict.keys.contains("MaxWorkTime") {
                    self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                }
                if dict.keys.contains("SatisfactionIndex") {
                    self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                }
                if dict.keys.contains("SatisfactionSurveysOffered") {
                    self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                }
                if dict.keys.contains("SatisfactionSurveysResponded") {
                    self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                }
                if dict.keys.contains("TotalDialingTime") {
                    self.totalDialingTime = dict["TotalDialingTime"] as! Int64
                }
                if dict.keys.contains("TotalTalkTime") {
                    self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                }
                if dict.keys.contains("TotalWorkTime") {
                    self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                }
            }
        }
        public class Overall : Tea.TeaModel {
            public var averageReadyTime: Int64?

            public var averageTalkTime: Int64?

            public var averageWorkTime: Int64?

            public var maxReadyTime: Int64?

            public var maxTalkTime: Int64?

            public var maxWorkTime: Int64?

            public var occupancyRate: Double?

            public var satisfactionIndex: Double?

            public var satisfactionSurveysOffered: Int64?

            public var satisfactionSurveysResponded: Int64?

            public var totalBreakTime: Int64?

            public var totalCalls: Int64?

            public var totalLoggedInTime: Int64?

            public var totalReadyTime: Int64?

            public var totalTalkTime: Int64?

            public var totalWorkTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.averageReadyTime != nil {
                    map["AverageReadyTime"] = self.averageReadyTime!
                }
                if self.averageTalkTime != nil {
                    map["AverageTalkTime"] = self.averageTalkTime!
                }
                if self.averageWorkTime != nil {
                    map["AverageWorkTime"] = self.averageWorkTime!
                }
                if self.maxReadyTime != nil {
                    map["MaxReadyTime"] = self.maxReadyTime!
                }
                if self.maxTalkTime != nil {
                    map["MaxTalkTime"] = self.maxTalkTime!
                }
                if self.maxWorkTime != nil {
                    map["MaxWorkTime"] = self.maxWorkTime!
                }
                if self.occupancyRate != nil {
                    map["OccupancyRate"] = self.occupancyRate!
                }
                if self.satisfactionIndex != nil {
                    map["SatisfactionIndex"] = self.satisfactionIndex!
                }
                if self.satisfactionSurveysOffered != nil {
                    map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                }
                if self.satisfactionSurveysResponded != nil {
                    map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                }
                if self.totalBreakTime != nil {
                    map["TotalBreakTime"] = self.totalBreakTime!
                }
                if self.totalCalls != nil {
                    map["TotalCalls"] = self.totalCalls!
                }
                if self.totalLoggedInTime != nil {
                    map["TotalLoggedInTime"] = self.totalLoggedInTime!
                }
                if self.totalReadyTime != nil {
                    map["TotalReadyTime"] = self.totalReadyTime!
                }
                if self.totalTalkTime != nil {
                    map["TotalTalkTime"] = self.totalTalkTime!
                }
                if self.totalWorkTime != nil {
                    map["TotalWorkTime"] = self.totalWorkTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("AverageReadyTime") {
                    self.averageReadyTime = dict["AverageReadyTime"] as! Int64
                }
                if dict.keys.contains("AverageTalkTime") {
                    self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                }
                if dict.keys.contains("AverageWorkTime") {
                    self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                }
                if dict.keys.contains("MaxReadyTime") {
                    self.maxReadyTime = dict["MaxReadyTime"] as! Int64
                }
                if dict.keys.contains("MaxTalkTime") {
                    self.maxTalkTime = dict["MaxTalkTime"] as! Int64
                }
                if dict.keys.contains("MaxWorkTime") {
                    self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                }
                if dict.keys.contains("OccupancyRate") {
                    self.occupancyRate = dict["OccupancyRate"] as! Double
                }
                if dict.keys.contains("SatisfactionIndex") {
                    self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                }
                if dict.keys.contains("SatisfactionSurveysOffered") {
                    self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                }
                if dict.keys.contains("SatisfactionSurveysResponded") {
                    self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                }
                if dict.keys.contains("TotalBreakTime") {
                    self.totalBreakTime = dict["TotalBreakTime"] as! Int64
                }
                if dict.keys.contains("TotalCalls") {
                    self.totalCalls = dict["TotalCalls"] as! Int64
                }
                if dict.keys.contains("TotalLoggedInTime") {
                    self.totalLoggedInTime = dict["TotalLoggedInTime"] as! Int64
                }
                if dict.keys.contains("TotalReadyTime") {
                    self.totalReadyTime = dict["TotalReadyTime"] as! Int64
                }
                if dict.keys.contains("TotalTalkTime") {
                    self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                }
                if dict.keys.contains("TotalWorkTime") {
                    self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                }
            }
        }
        public var inbound: GetInstanceSummaryReportResponseBody.InstanceSummaryReport.Inbound?

        public var instanceId: String?

        public var outbound: GetInstanceSummaryReportResponseBody.InstanceSummaryReport.Outbound?

        public var overall: GetInstanceSummaryReportResponseBody.InstanceSummaryReport.Overall?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.inbound?.validate()
            try self.outbound?.validate()
            try self.overall?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.inbound != nil {
                map["Inbound"] = self.inbound?.toMap()
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.outbound != nil {
                map["Outbound"] = self.outbound?.toMap()
            }
            if self.overall != nil {
                map["Overall"] = self.overall?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("Inbound") {
                var model = GetInstanceSummaryReportResponseBody.InstanceSummaryReport.Inbound()
                model.fromMap(dict["Inbound"] as! [String: Any])
                self.inbound = model
            }
            if dict.keys.contains("InstanceId") {
                self.instanceId = dict["InstanceId"] as! String
            }
            if dict.keys.contains("Outbound") {
                var model = GetInstanceSummaryReportResponseBody.InstanceSummaryReport.Outbound()
                model.fromMap(dict["Outbound"] as! [String: Any])
                self.outbound = model
            }
            if dict.keys.contains("Overall") {
                var model = GetInstanceSummaryReportResponseBody.InstanceSummaryReport.Overall()
                model.fromMap(dict["Overall"] as! [String: Any])
                self.overall = model
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var instanceSummaryReport: GetInstanceSummaryReportResponseBody.InstanceSummaryReport?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.instanceSummaryReport?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.instanceSummaryReport != nil {
            map["InstanceSummaryReport"] = self.instanceSummaryReport?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("InstanceSummaryReport") {
            var model = GetInstanceSummaryReportResponseBody.InstanceSummaryReport()
            model.fromMap(dict["InstanceSummaryReport"] as! [String: Any])
            self.instanceSummaryReport = model
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class GetInstanceSummaryReportResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetInstanceSummaryReportResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = GetInstanceSummaryReportResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class GetInstanceSummaryReportByIntervalRequest : Tea.TeaModel {
    public var endTime: String?

    public var instanceId: String?

    public var interval: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("EndTime") {
            self.endTime = dict["EndTime"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("Interval") {
            self.interval = dict["Interval"] as! String
        }
        if dict.keys.contains("PageNumber") {
            self.pageNumber = dict["PageNumber"] as! Int32
        }
        if dict.keys.contains("PageSize") {
            self.pageSize = dict["PageSize"] as! Int32
        }
        if dict.keys.contains("StartTime") {
            self.startTime = dict["StartTime"] as! String
        }
    }
}

public class GetInstanceSummaryReportByIntervalResponseBody : Tea.TeaModel {
    public class InstanceTimeIntervalReport : Tea.TeaModel {
        public class IntervalList : Tea.TeaModel {
            public class InstanceSummaryReport : Tea.TeaModel {
                public class Inbound : Tea.TeaModel {
                    public var averageRingTime: Int64?

                    public var averageTalkTime: Int64?

                    public var averageWaitTime: Int64?

                    public var averageWorkTime: Int64?

                    public var callsAbandonedInIVR: Int64?

                    public var callsAbandonedInQueue: Int64?

                    public var callsHandled: Int64?

                    public var callsIncomingIVR: Int64?

                    public var callsIncomingLine: Int64?

                    public var callsIncomingQueue: Int64?

                    public var callsOffered: Int64?

                    public var handleRate: Double?

                    public var maxRingTime: Int64?

                    public var maxTalkTime: String?

                    public var maxWaitTime: Int64?

                    public var maxWorkTime: Int64?

                    public var satisfactionIndex: Double?

                    public var satisfactionSurveysOffered: Int64?

                    public var satisfactionSurveysResponded: Int64?

                    public var serviceLevel20: Double?

                    public var totalRingTime: Int64?

                    public var totalTalkTime: Int64?

                    public var totalWaitTime: Int64?

                    public var totalWorkTime: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.averageRingTime != nil {
                            map["AverageRingTime"] = self.averageRingTime!
                        }
                        if self.averageTalkTime != nil {
                            map["AverageTalkTime"] = self.averageTalkTime!
                        }
                        if self.averageWaitTime != nil {
                            map["AverageWaitTime"] = self.averageWaitTime!
                        }
                        if self.averageWorkTime != nil {
                            map["AverageWorkTime"] = self.averageWorkTime!
                        }
                        if self.callsAbandonedInIVR != nil {
                            map["CallsAbandonedInIVR"] = self.callsAbandonedInIVR!
                        }
                        if self.callsAbandonedInQueue != nil {
                            map["CallsAbandonedInQueue"] = self.callsAbandonedInQueue!
                        }
                        if self.callsHandled != nil {
                            map["CallsHandled"] = self.callsHandled!
                        }
                        if self.callsIncomingIVR != nil {
                            map["CallsIncomingIVR"] = self.callsIncomingIVR!
                        }
                        if self.callsIncomingLine != nil {
                            map["CallsIncomingLine"] = self.callsIncomingLine!
                        }
                        if self.callsIncomingQueue != nil {
                            map["CallsIncomingQueue"] = self.callsIncomingQueue!
                        }
                        if self.callsOffered != nil {
                            map["CallsOffered"] = self.callsOffered!
                        }
                        if self.handleRate != nil {
                            map["HandleRate"] = self.handleRate!
                        }
                        if self.maxRingTime != nil {
                            map["MaxRingTime"] = self.maxRingTime!
                        }
                        if self.maxTalkTime != nil {
                            map["MaxTalkTime"] = self.maxTalkTime!
                        }
                        if self.maxWaitTime != nil {
                            map["MaxWaitTime"] = self.maxWaitTime!
                        }
                        if self.maxWorkTime != nil {
                            map["MaxWorkTime"] = self.maxWorkTime!
                        }
                        if self.satisfactionIndex != nil {
                            map["SatisfactionIndex"] = self.satisfactionIndex!
                        }
                        if self.satisfactionSurveysOffered != nil {
                            map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                        }
                        if self.satisfactionSurveysResponded != nil {
                            map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                        }
                        if self.serviceLevel20 != nil {
                            map["ServiceLevel20"] = self.serviceLevel20!
                        }
                        if self.totalRingTime != nil {
                            map["TotalRingTime"] = self.totalRingTime!
                        }
                        if self.totalTalkTime != nil {
                            map["TotalTalkTime"] = self.totalTalkTime!
                        }
                        if self.totalWaitTime != nil {
                            map["TotalWaitTime"] = self.totalWaitTime!
                        }
                        if self.totalWorkTime != nil {
                            map["TotalWorkTime"] = self.totalWorkTime!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("AverageRingTime") {
                            self.averageRingTime = dict["AverageRingTime"] as! Int64
                        }
                        if dict.keys.contains("AverageTalkTime") {
                            self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                        }
                        if dict.keys.contains("AverageWaitTime") {
                            self.averageWaitTime = dict["AverageWaitTime"] as! Int64
                        }
                        if dict.keys.contains("AverageWorkTime") {
                            self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                        }
                        if dict.keys.contains("CallsAbandonedInIVR") {
                            self.callsAbandonedInIVR = dict["CallsAbandonedInIVR"] as! Int64
                        }
                        if dict.keys.contains("CallsAbandonedInQueue") {
                            self.callsAbandonedInQueue = dict["CallsAbandonedInQueue"] as! Int64
                        }
                        if dict.keys.contains("CallsHandled") {
                            self.callsHandled = dict["CallsHandled"] as! Int64
                        }
                        if dict.keys.contains("CallsIncomingIVR") {
                            self.callsIncomingIVR = dict["CallsIncomingIVR"] as! Int64
                        }
                        if dict.keys.contains("CallsIncomingLine") {
                            self.callsIncomingLine = dict["CallsIncomingLine"] as! Int64
                        }
                        if dict.keys.contains("CallsIncomingQueue") {
                            self.callsIncomingQueue = dict["CallsIncomingQueue"] as! Int64
                        }
                        if dict.keys.contains("CallsOffered") {
                            self.callsOffered = dict["CallsOffered"] as! Int64
                        }
                        if dict.keys.contains("HandleRate") {
                            self.handleRate = dict["HandleRate"] as! Double
                        }
                        if dict.keys.contains("MaxRingTime") {
                            self.maxRingTime = dict["MaxRingTime"] as! Int64
                        }
                        if dict.keys.contains("MaxTalkTime") {
                            self.maxTalkTime = dict["MaxTalkTime"] as! String
                        }
                        if dict.keys.contains("MaxWaitTime") {
                            self.maxWaitTime = dict["MaxWaitTime"] as! Int64
                        }
                        if dict.keys.contains("MaxWorkTime") {
                            self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionIndex") {
                            self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                        }
                        if dict.keys.contains("SatisfactionSurveysOffered") {
                            self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionSurveysResponded") {
                            self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                        }
                        if dict.keys.contains("ServiceLevel20") {
                            self.serviceLevel20 = dict["ServiceLevel20"] as! Double
                        }
                        if dict.keys.contains("TotalRingTime") {
                            self.totalRingTime = dict["TotalRingTime"] as! Int64
                        }
                        if dict.keys.contains("TotalTalkTime") {
                            self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                        }
                        if dict.keys.contains("TotalWaitTime") {
                            self.totalWaitTime = dict["TotalWaitTime"] as! Int64
                        }
                        if dict.keys.contains("TotalWorkTime") {
                            self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                        }
                    }
                }
                public class Outbound : Tea.TeaModel {
                    public var answerRate: Double?

                    public var averageDialingTime: Int64?

                    public var averageTalkTime: Int64?

                    public var averageWorkTime: Int64?

                    public var callsAnswered: Int64?

                    public var callsDialed: Int64?

                    public var maxDialingTime: Int64?

                    public var maxTalkTime: Int64?

                    public var maxWorkTime: Int64?

                    public var satisfactionIndex: Double?

                    public var satisfactionSurveysOffered: Int64?

                    public var satisfactionSurveysResponded: Int64?

                    public var totalDialingTime: Int64?

                    public var totalTalkTime: Int64?

                    public var totalWorkTime: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.answerRate != nil {
                            map["AnswerRate"] = self.answerRate!
                        }
                        if self.averageDialingTime != nil {
                            map["AverageDialingTime"] = self.averageDialingTime!
                        }
                        if self.averageTalkTime != nil {
                            map["AverageTalkTime"] = self.averageTalkTime!
                        }
                        if self.averageWorkTime != nil {
                            map["AverageWorkTime"] = self.averageWorkTime!
                        }
                        if self.callsAnswered != nil {
                            map["CallsAnswered"] = self.callsAnswered!
                        }
                        if self.callsDialed != nil {
                            map["CallsDialed"] = self.callsDialed!
                        }
                        if self.maxDialingTime != nil {
                            map["MaxDialingTime"] = self.maxDialingTime!
                        }
                        if self.maxTalkTime != nil {
                            map["MaxTalkTime"] = self.maxTalkTime!
                        }
                        if self.maxWorkTime != nil {
                            map["MaxWorkTime"] = self.maxWorkTime!
                        }
                        if self.satisfactionIndex != nil {
                            map["SatisfactionIndex"] = self.satisfactionIndex!
                        }
                        if self.satisfactionSurveysOffered != nil {
                            map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                        }
                        if self.satisfactionSurveysResponded != nil {
                            map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                        }
                        if self.totalDialingTime != nil {
                            map["TotalDialingTime"] = self.totalDialingTime!
                        }
                        if self.totalTalkTime != nil {
                            map["TotalTalkTime"] = self.totalTalkTime!
                        }
                        if self.totalWorkTime != nil {
                            map["TotalWorkTime"] = self.totalWorkTime!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("AnswerRate") {
                            self.answerRate = dict["AnswerRate"] as! Double
                        }
                        if dict.keys.contains("AverageDialingTime") {
                            self.averageDialingTime = dict["AverageDialingTime"] as! Int64
                        }
                        if dict.keys.contains("AverageTalkTime") {
                            self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                        }
                        if dict.keys.contains("AverageWorkTime") {
                            self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                        }
                        if dict.keys.contains("CallsAnswered") {
                            self.callsAnswered = dict["CallsAnswered"] as! Int64
                        }
                        if dict.keys.contains("CallsDialed") {
                            self.callsDialed = dict["CallsDialed"] as! Int64
                        }
                        if dict.keys.contains("MaxDialingTime") {
                            self.maxDialingTime = dict["MaxDialingTime"] as! Int64
                        }
                        if dict.keys.contains("MaxTalkTime") {
                            self.maxTalkTime = dict["MaxTalkTime"] as! Int64
                        }
                        if dict.keys.contains("MaxWorkTime") {
                            self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionIndex") {
                            self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                        }
                        if dict.keys.contains("SatisfactionSurveysOffered") {
                            self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionSurveysResponded") {
                            self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                        }
                        if dict.keys.contains("TotalDialingTime") {
                            self.totalDialingTime = dict["TotalDialingTime"] as! Int64
                        }
                        if dict.keys.contains("TotalTalkTime") {
                            self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                        }
                        if dict.keys.contains("TotalWorkTime") {
                            self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                        }
                    }
                }
                public class Overall : Tea.TeaModel {
                    public var averageReadyTime: Int64?

                    public var averageTalkTime: Int64?

                    public var averageWorkTime: Int64?

                    public var maxReadyTime: Int64?

                    public var maxTalkTime: Int64?

                    public var maxWorkTime: Int64?

                    public var occupancyRate: Double?

                    public var satisfactionIndex: Double?

                    public var satisfactionSurveysOffered: Int64?

                    public var satisfactionSurveysResponded: Int64?

                    public var totalBreakTime: Int64?

                    public var totalCalls: Int64?

                    public var totalLoggedInTime: Int64?

                    public var totalReadyTime: Int64?

                    public var totalTalkTime: Int64?

                    public var totalWorkTime: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.averageReadyTime != nil {
                            map["AverageReadyTime"] = self.averageReadyTime!
                        }
                        if self.averageTalkTime != nil {
                            map["AverageTalkTime"] = self.averageTalkTime!
                        }
                        if self.averageWorkTime != nil {
                            map["AverageWorkTime"] = self.averageWorkTime!
                        }
                        if self.maxReadyTime != nil {
                            map["MaxReadyTime"] = self.maxReadyTime!
                        }
                        if self.maxTalkTime != nil {
                            map["MaxTalkTime"] = self.maxTalkTime!
                        }
                        if self.maxWorkTime != nil {
                            map["MaxWorkTime"] = self.maxWorkTime!
                        }
                        if self.occupancyRate != nil {
                            map["OccupancyRate"] = self.occupancyRate!
                        }
                        if self.satisfactionIndex != nil {
                            map["SatisfactionIndex"] = self.satisfactionIndex!
                        }
                        if self.satisfactionSurveysOffered != nil {
                            map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                        }
                        if self.satisfactionSurveysResponded != nil {
                            map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                        }
                        if self.totalBreakTime != nil {
                            map["TotalBreakTime"] = self.totalBreakTime!
                        }
                        if self.totalCalls != nil {
                            map["TotalCalls"] = self.totalCalls!
                        }
                        if self.totalLoggedInTime != nil {
                            map["TotalLoggedInTime"] = self.totalLoggedInTime!
                        }
                        if self.totalReadyTime != nil {
                            map["TotalReadyTime"] = self.totalReadyTime!
                        }
                        if self.totalTalkTime != nil {
                            map["TotalTalkTime"] = self.totalTalkTime!
                        }
                        if self.totalWorkTime != nil {
                            map["TotalWorkTime"] = self.totalWorkTime!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("AverageReadyTime") {
                            self.averageReadyTime = dict["AverageReadyTime"] as! Int64
                        }
                        if dict.keys.contains("AverageTalkTime") {
                            self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                        }
                        if dict.keys.contains("AverageWorkTime") {
                            self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                        }
                        if dict.keys.contains("MaxReadyTime") {
                            self.maxReadyTime = dict["MaxReadyTime"] as! Int64
                        }
                        if dict.keys.contains("MaxTalkTime") {
                            self.maxTalkTime = dict["MaxTalkTime"] as! Int64
                        }
                        if dict.keys.contains("MaxWorkTime") {
                            self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                        }
                        if dict.keys.contains("OccupancyRate") {
                            self.occupancyRate = dict["OccupancyRate"] as! Double
                        }
                        if dict.keys.contains("SatisfactionIndex") {
                            self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                        }
                        if dict.keys.contains("SatisfactionSurveysOffered") {
                            self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionSurveysResponded") {
                            self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                        }
                        if dict.keys.contains("TotalBreakTime") {
                            self.totalBreakTime = dict["TotalBreakTime"] as! Int64
                        }
                        if dict.keys.contains("TotalCalls") {
                            self.totalCalls = dict["TotalCalls"] as! Int64
                        }
                        if dict.keys.contains("TotalLoggedInTime") {
                            self.totalLoggedInTime = dict["TotalLoggedInTime"] as! Int64
                        }
                        if dict.keys.contains("TotalReadyTime") {
                            self.totalReadyTime = dict["TotalReadyTime"] as! Int64
                        }
                        if dict.keys.contains("TotalTalkTime") {
                            self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                        }
                        if dict.keys.contains("TotalWorkTime") {
                            self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                        }
                    }
                }
                public var inbound: GetInstanceSummaryReportByIntervalResponseBody.InstanceTimeIntervalReport.IntervalList.InstanceSummaryReport.Inbound?

                public var instanceId: String?

                public var outbound: GetInstanceSummaryReportByIntervalResponseBody.InstanceTimeIntervalReport.IntervalList.InstanceSummaryReport.Outbound?

                public var overall: GetInstanceSummaryReportByIntervalResponseBody.InstanceTimeIntervalReport.IntervalList.InstanceSummaryReport.Overall?

                public var timestamp: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.inbound?.validate()
                    try self.outbound?.validate()
                    try self.overall?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.inbound != nil {
                        map["Inbound"] = self.inbound?.toMap()
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.outbound != nil {
                        map["Outbound"] = self.outbound?.toMap()
                    }
                    if self.overall != nil {
                        map["Overall"] = self.overall?.toMap()
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("Inbound") {
                        var model = GetInstanceSummaryReportByIntervalResponseBody.InstanceTimeIntervalReport.IntervalList.InstanceSummaryReport.Inbound()
                        model.fromMap(dict["Inbound"] as! [String: Any])
                        self.inbound = model
                    }
                    if dict.keys.contains("InstanceId") {
                        self.instanceId = dict["InstanceId"] as! String
                    }
                    if dict.keys.contains("Outbound") {
                        var model = GetInstanceSummaryReportByIntervalResponseBody.InstanceTimeIntervalReport.IntervalList.InstanceSummaryReport.Outbound()
                        model.fromMap(dict["Outbound"] as! [String: Any])
                        self.outbound = model
                    }
                    if dict.keys.contains("Overall") {
                        var model = GetInstanceSummaryReportByIntervalResponseBody.InstanceTimeIntervalReport.IntervalList.InstanceSummaryReport.Overall()
                        model.fromMap(dict["Overall"] as! [String: Any])
                        self.overall = model
                    }
                    if dict.keys.contains("Timestamp") {
                        self.timestamp = dict["Timestamp"] as! String
                    }
                }
            }
            public var instanceSummaryReport: [GetInstanceSummaryReportByIntervalResponseBody.InstanceTimeIntervalReport.IntervalList.InstanceSummaryReport]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.instanceSummaryReport != nil {
                    var tmp : [Any] = []
                    for k in self.instanceSummaryReport! {
                        tmp.append(k.toMap())
                    }
                    map["InstanceSummaryReport"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("InstanceSummaryReport") {
                    self.instanceSummaryReport = dict["InstanceSummaryReport"] as! [GetInstanceSummaryReportByIntervalResponseBody.InstanceTimeIntervalReport.IntervalList.InstanceSummaryReport]
                }
            }
        }
        public var instanceId: String?

        public var intervalList: GetInstanceSummaryReportByIntervalResponseBody.InstanceTimeIntervalReport.IntervalList?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.intervalList?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.intervalList != nil {
                map["IntervalList"] = self.intervalList?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("InstanceId") {
                self.instanceId = dict["InstanceId"] as! String
            }
            if dict.keys.contains("IntervalList") {
                var model = GetInstanceSummaryReportByIntervalResponseBody.InstanceTimeIntervalReport.IntervalList()
                model.fromMap(dict["IntervalList"] as! [String: Any])
                self.intervalList = model
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var instanceTimeIntervalReport: GetInstanceSummaryReportByIntervalResponseBody.InstanceTimeIntervalReport?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.instanceTimeIntervalReport?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.instanceTimeIntervalReport != nil {
            map["InstanceTimeIntervalReport"] = self.instanceTimeIntervalReport?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("InstanceTimeIntervalReport") {
            var model = GetInstanceSummaryReportByIntervalResponseBody.InstanceTimeIntervalReport()
            model.fromMap(dict["InstanceTimeIntervalReport"] as! [String: Any])
            self.instanceTimeIntervalReport = model
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class GetInstanceSummaryReportByIntervalResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetInstanceSummaryReportByIntervalResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = GetInstanceSummaryReportByIntervalResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class GetInstanceSummaryReportSinceMidnightRequest : Tea.TeaModel {
    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("PageNumber") {
            self.pageNumber = dict["PageNumber"] as! Int32
        }
        if dict.keys.contains("PageSize") {
            self.pageSize = dict["PageSize"] as! Int32
        }
    }
}

public class GetInstanceSummaryReportSinceMidnightResponseBody : Tea.TeaModel {
    public class InstanceSummaryReport : Tea.TeaModel {
        public class Inbound : Tea.TeaModel {
            public var averageRingTime: Int64?

            public var averageTalkTime: Int64?

            public var averageWaitTime: Int64?

            public var averageWorkTime: Int64?

            public var callsAbandonedInIVR: Int64?

            public var callsAbandonedInQueue: Int64?

            public var callsHandled: Int64?

            public var callsIncomingIVR: Int64?

            public var callsIncomingLine: Int64?

            public var callsIncomingQueue: Int64?

            public var callsOffered: Int64?

            public var handleRate: Double?

            public var maxRingTime: Int64?

            public var maxTalkTime: String?

            public var maxWaitTime: Int64?

            public var maxWorkTime: Int64?

            public var satisfactionIndex: Double?

            public var satisfactionSurveysOffered: Int64?

            public var satisfactionSurveysResponded: Int64?

            public var serviceLevel20: Double?

            public var totalRingTime: Int64?

            public var totalTalkTime: Int64?

            public var totalWaitTime: Int64?

            public var totalWorkTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.averageRingTime != nil {
                    map["AverageRingTime"] = self.averageRingTime!
                }
                if self.averageTalkTime != nil {
                    map["AverageTalkTime"] = self.averageTalkTime!
                }
                if self.averageWaitTime != nil {
                    map["AverageWaitTime"] = self.averageWaitTime!
                }
                if self.averageWorkTime != nil {
                    map["AverageWorkTime"] = self.averageWorkTime!
                }
                if self.callsAbandonedInIVR != nil {
                    map["CallsAbandonedInIVR"] = self.callsAbandonedInIVR!
                }
                if self.callsAbandonedInQueue != nil {
                    map["CallsAbandonedInQueue"] = self.callsAbandonedInQueue!
                }
                if self.callsHandled != nil {
                    map["CallsHandled"] = self.callsHandled!
                }
                if self.callsIncomingIVR != nil {
                    map["CallsIncomingIVR"] = self.callsIncomingIVR!
                }
                if self.callsIncomingLine != nil {
                    map["CallsIncomingLine"] = self.callsIncomingLine!
                }
                if self.callsIncomingQueue != nil {
                    map["CallsIncomingQueue"] = self.callsIncomingQueue!
                }
                if self.callsOffered != nil {
                    map["CallsOffered"] = self.callsOffered!
                }
                if self.handleRate != nil {
                    map["HandleRate"] = self.handleRate!
                }
                if self.maxRingTime != nil {
                    map["MaxRingTime"] = self.maxRingTime!
                }
                if self.maxTalkTime != nil {
                    map["MaxTalkTime"] = self.maxTalkTime!
                }
                if self.maxWaitTime != nil {
                    map["MaxWaitTime"] = self.maxWaitTime!
                }
                if self.maxWorkTime != nil {
                    map["MaxWorkTime"] = self.maxWorkTime!
                }
                if self.satisfactionIndex != nil {
                    map["SatisfactionIndex"] = self.satisfactionIndex!
                }
                if self.satisfactionSurveysOffered != nil {
                    map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                }
                if self.satisfactionSurveysResponded != nil {
                    map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                }
                if self.serviceLevel20 != nil {
                    map["ServiceLevel20"] = self.serviceLevel20!
                }
                if self.totalRingTime != nil {
                    map["TotalRingTime"] = self.totalRingTime!
                }
                if self.totalTalkTime != nil {
                    map["TotalTalkTime"] = self.totalTalkTime!
                }
                if self.totalWaitTime != nil {
                    map["TotalWaitTime"] = self.totalWaitTime!
                }
                if self.totalWorkTime != nil {
                    map["TotalWorkTime"] = self.totalWorkTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("AverageRingTime") {
                    self.averageRingTime = dict["AverageRingTime"] as! Int64
                }
                if dict.keys.contains("AverageTalkTime") {
                    self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                }
                if dict.keys.contains("AverageWaitTime") {
                    self.averageWaitTime = dict["AverageWaitTime"] as! Int64
                }
                if dict.keys.contains("AverageWorkTime") {
                    self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                }
                if dict.keys.contains("CallsAbandonedInIVR") {
                    self.callsAbandonedInIVR = dict["CallsAbandonedInIVR"] as! Int64
                }
                if dict.keys.contains("CallsAbandonedInQueue") {
                    self.callsAbandonedInQueue = dict["CallsAbandonedInQueue"] as! Int64
                }
                if dict.keys.contains("CallsHandled") {
                    self.callsHandled = dict["CallsHandled"] as! Int64
                }
                if dict.keys.contains("CallsIncomingIVR") {
                    self.callsIncomingIVR = dict["CallsIncomingIVR"] as! Int64
                }
                if dict.keys.contains("CallsIncomingLine") {
                    self.callsIncomingLine = dict["CallsIncomingLine"] as! Int64
                }
                if dict.keys.contains("CallsIncomingQueue") {
                    self.callsIncomingQueue = dict["CallsIncomingQueue"] as! Int64
                }
                if dict.keys.contains("CallsOffered") {
                    self.callsOffered = dict["CallsOffered"] as! Int64
                }
                if dict.keys.contains("HandleRate") {
                    self.handleRate = dict["HandleRate"] as! Double
                }
                if dict.keys.contains("MaxRingTime") {
                    self.maxRingTime = dict["MaxRingTime"] as! Int64
                }
                if dict.keys.contains("MaxTalkTime") {
                    self.maxTalkTime = dict["MaxTalkTime"] as! String
                }
                if dict.keys.contains("MaxWaitTime") {
                    self.maxWaitTime = dict["MaxWaitTime"] as! Int64
                }
                if dict.keys.contains("MaxWorkTime") {
                    self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                }
                if dict.keys.contains("SatisfactionIndex") {
                    self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                }
                if dict.keys.contains("SatisfactionSurveysOffered") {
                    self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                }
                if dict.keys.contains("SatisfactionSurveysResponded") {
                    self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                }
                if dict.keys.contains("ServiceLevel20") {
                    self.serviceLevel20 = dict["ServiceLevel20"] as! Double
                }
                if dict.keys.contains("TotalRingTime") {
                    self.totalRingTime = dict["TotalRingTime"] as! Int64
                }
                if dict.keys.contains("TotalTalkTime") {
                    self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                }
                if dict.keys.contains("TotalWaitTime") {
                    self.totalWaitTime = dict["TotalWaitTime"] as! Int64
                }
                if dict.keys.contains("TotalWorkTime") {
                    self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                }
            }
        }
        public class Outbound : Tea.TeaModel {
            public var answerRate: Double?

            public var averageDialingTime: Int64?

            public var averageTalkTime: Int64?

            public var averageWorkTime: Int64?

            public var callsAnswered: Int64?

            public var callsDialed: Int64?

            public var maxDialingTime: Int64?

            public var maxTalkTime: Int64?

            public var maxWorkTime: Int64?

            public var satisfactionIndex: Double?

            public var satisfactionSurveysOffered: Int64?

            public var satisfactionSurveysResponded: Int64?

            public var totalDialingTime: Int64?

            public var totalTalkTime: Int64?

            public var totalWorkTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.answerRate != nil {
                    map["AnswerRate"] = self.answerRate!
                }
                if self.averageDialingTime != nil {
                    map["AverageDialingTime"] = self.averageDialingTime!
                }
                if self.averageTalkTime != nil {
                    map["AverageTalkTime"] = self.averageTalkTime!
                }
                if self.averageWorkTime != nil {
                    map["AverageWorkTime"] = self.averageWorkTime!
                }
                if self.callsAnswered != nil {
                    map["CallsAnswered"] = self.callsAnswered!
                }
                if self.callsDialed != nil {
                    map["CallsDialed"] = self.callsDialed!
                }
                if self.maxDialingTime != nil {
                    map["MaxDialingTime"] = self.maxDialingTime!
                }
                if self.maxTalkTime != nil {
                    map["MaxTalkTime"] = self.maxTalkTime!
                }
                if self.maxWorkTime != nil {
                    map["MaxWorkTime"] = self.maxWorkTime!
                }
                if self.satisfactionIndex != nil {
                    map["SatisfactionIndex"] = self.satisfactionIndex!
                }
                if self.satisfactionSurveysOffered != nil {
                    map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                }
                if self.satisfactionSurveysResponded != nil {
                    map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                }
                if self.totalDialingTime != nil {
                    map["TotalDialingTime"] = self.totalDialingTime!
                }
                if self.totalTalkTime != nil {
                    map["TotalTalkTime"] = self.totalTalkTime!
                }
                if self.totalWorkTime != nil {
                    map["TotalWorkTime"] = self.totalWorkTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("AnswerRate") {
                    self.answerRate = dict["AnswerRate"] as! Double
                }
                if dict.keys.contains("AverageDialingTime") {
                    self.averageDialingTime = dict["AverageDialingTime"] as! Int64
                }
                if dict.keys.contains("AverageTalkTime") {
                    self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                }
                if dict.keys.contains("AverageWorkTime") {
                    self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                }
                if dict.keys.contains("CallsAnswered") {
                    self.callsAnswered = dict["CallsAnswered"] as! Int64
                }
                if dict.keys.contains("CallsDialed") {
                    self.callsDialed = dict["CallsDialed"] as! Int64
                }
                if dict.keys.contains("MaxDialingTime") {
                    self.maxDialingTime = dict["MaxDialingTime"] as! Int64
                }
                if dict.keys.contains("MaxTalkTime") {
                    self.maxTalkTime = dict["MaxTalkTime"] as! Int64
                }
                if dict.keys.contains("MaxWorkTime") {
                    self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                }
                if dict.keys.contains("SatisfactionIndex") {
                    self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                }
                if dict.keys.contains("SatisfactionSurveysOffered") {
                    self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                }
                if dict.keys.contains("SatisfactionSurveysResponded") {
                    self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                }
                if dict.keys.contains("TotalDialingTime") {
                    self.totalDialingTime = dict["TotalDialingTime"] as! Int64
                }
                if dict.keys.contains("TotalTalkTime") {
                    self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                }
                if dict.keys.contains("TotalWorkTime") {
                    self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                }
            }
        }
        public class Overall : Tea.TeaModel {
            public var averageReadyTime: Int64?

            public var averageTalkTime: Int64?

            public var averageWorkTime: Int64?

            public var maxReadyTime: Int64?

            public var maxTalkTime: Int64?

            public var maxWorkTime: Int64?

            public var occupancyRate: Double?

            public var satisfactionIndex: Double?

            public var satisfactionSurveysOffered: Int64?

            public var satisfactionSurveysResponded: Int64?

            public var totalBreakTime: Int64?

            public var totalCalls: Int64?

            public var totalLoggedInTime: Int64?

            public var totalReadyTime: Int64?

            public var totalTalkTime: Int64?

            public var totalWorkTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.averageReadyTime != nil {
                    map["AverageReadyTime"] = self.averageReadyTime!
                }
                if self.averageTalkTime != nil {
                    map["AverageTalkTime"] = self.averageTalkTime!
                }
                if self.averageWorkTime != nil {
                    map["AverageWorkTime"] = self.averageWorkTime!
                }
                if self.maxReadyTime != nil {
                    map["MaxReadyTime"] = self.maxReadyTime!
                }
                if self.maxTalkTime != nil {
                    map["MaxTalkTime"] = self.maxTalkTime!
                }
                if self.maxWorkTime != nil {
                    map["MaxWorkTime"] = self.maxWorkTime!
                }
                if self.occupancyRate != nil {
                    map["OccupancyRate"] = self.occupancyRate!
                }
                if self.satisfactionIndex != nil {
                    map["SatisfactionIndex"] = self.satisfactionIndex!
                }
                if self.satisfactionSurveysOffered != nil {
                    map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                }
                if self.satisfactionSurveysResponded != nil {
                    map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                }
                if self.totalBreakTime != nil {
                    map["TotalBreakTime"] = self.totalBreakTime!
                }
                if self.totalCalls != nil {
                    map["TotalCalls"] = self.totalCalls!
                }
                if self.totalLoggedInTime != nil {
                    map["TotalLoggedInTime"] = self.totalLoggedInTime!
                }
                if self.totalReadyTime != nil {
                    map["TotalReadyTime"] = self.totalReadyTime!
                }
                if self.totalTalkTime != nil {
                    map["TotalTalkTime"] = self.totalTalkTime!
                }
                if self.totalWorkTime != nil {
                    map["TotalWorkTime"] = self.totalWorkTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("AverageReadyTime") {
                    self.averageReadyTime = dict["AverageReadyTime"] as! Int64
                }
                if dict.keys.contains("AverageTalkTime") {
                    self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                }
                if dict.keys.contains("AverageWorkTime") {
                    self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                }
                if dict.keys.contains("MaxReadyTime") {
                    self.maxReadyTime = dict["MaxReadyTime"] as! Int64
                }
                if dict.keys.contains("MaxTalkTime") {
                    self.maxTalkTime = dict["MaxTalkTime"] as! Int64
                }
                if dict.keys.contains("MaxWorkTime") {
                    self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                }
                if dict.keys.contains("OccupancyRate") {
                    self.occupancyRate = dict["OccupancyRate"] as! Double
                }
                if dict.keys.contains("SatisfactionIndex") {
                    self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                }
                if dict.keys.contains("SatisfactionSurveysOffered") {
                    self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                }
                if dict.keys.contains("SatisfactionSurveysResponded") {
                    self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                }
                if dict.keys.contains("TotalBreakTime") {
                    self.totalBreakTime = dict["TotalBreakTime"] as! Int64
                }
                if dict.keys.contains("TotalCalls") {
                    self.totalCalls = dict["TotalCalls"] as! Int64
                }
                if dict.keys.contains("TotalLoggedInTime") {
                    self.totalLoggedInTime = dict["TotalLoggedInTime"] as! Int64
                }
                if dict.keys.contains("TotalReadyTime") {
                    self.totalReadyTime = dict["TotalReadyTime"] as! Int64
                }
                if dict.keys.contains("TotalTalkTime") {
                    self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                }
                if dict.keys.contains("TotalWorkTime") {
                    self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                }
            }
        }
        public var inbound: GetInstanceSummaryReportSinceMidnightResponseBody.InstanceSummaryReport.Inbound?

        public var instanceId: String?

        public var outbound: GetInstanceSummaryReportSinceMidnightResponseBody.InstanceSummaryReport.Outbound?

        public var overall: GetInstanceSummaryReportSinceMidnightResponseBody.InstanceSummaryReport.Overall?

        public var timestamp: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.inbound?.validate()
            try self.outbound?.validate()
            try self.overall?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.inbound != nil {
                map["Inbound"] = self.inbound?.toMap()
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.outbound != nil {
                map["Outbound"] = self.outbound?.toMap()
            }
            if self.overall != nil {
                map["Overall"] = self.overall?.toMap()
            }
            if self.timestamp != nil {
                map["Timestamp"] = self.timestamp!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("Inbound") {
                var model = GetInstanceSummaryReportSinceMidnightResponseBody.InstanceSummaryReport.Inbound()
                model.fromMap(dict["Inbound"] as! [String: Any])
                self.inbound = model
            }
            if dict.keys.contains("InstanceId") {
                self.instanceId = dict["InstanceId"] as! String
            }
            if dict.keys.contains("Outbound") {
                var model = GetInstanceSummaryReportSinceMidnightResponseBody.InstanceSummaryReport.Outbound()
                model.fromMap(dict["Outbound"] as! [String: Any])
                self.outbound = model
            }
            if dict.keys.contains("Overall") {
                var model = GetInstanceSummaryReportSinceMidnightResponseBody.InstanceSummaryReport.Overall()
                model.fromMap(dict["Overall"] as! [String: Any])
                self.overall = model
            }
            if dict.keys.contains("Timestamp") {
                self.timestamp = dict["Timestamp"] as! String
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var instanceSummaryReport: GetInstanceSummaryReportSinceMidnightResponseBody.InstanceSummaryReport?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.instanceSummaryReport?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.instanceSummaryReport != nil {
            map["InstanceSummaryReport"] = self.instanceSummaryReport?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("InstanceSummaryReport") {
            var model = GetInstanceSummaryReportSinceMidnightResponseBody.InstanceSummaryReport()
            model.fromMap(dict["InstanceSummaryReport"] as! [String: Any])
            self.instanceSummaryReport = model
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class GetInstanceSummaryReportSinceMidnightResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetInstanceSummaryReportSinceMidnightResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = GetInstanceSummaryReportSinceMidnightResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class GetNumberRegionInfoRequest : Tea.TeaModel {
    public var instanceId: String?

    public var number: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.number != nil {
            map["Number"] = self.number!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("Number") {
            self.number = dict["Number"] as! String
        }
    }
}

public class GetNumberRegionInfoResponseBody : Tea.TeaModel {
    public class PhoneNumber : Tea.TeaModel {
        public var city: String?

        public var number: String?

        public var province: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.city != nil {
                map["City"] = self.city!
            }
            if self.number != nil {
                map["Number"] = self.number!
            }
            if self.province != nil {
                map["Province"] = self.province!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("City") {
                self.city = dict["City"] as! String
            }
            if dict.keys.contains("Number") {
                self.number = dict["Number"] as! String
            }
            if dict.keys.contains("Province") {
                self.province = dict["Province"] as! String
            }
        }
    }
    public var code: String?

    public var message: String?

    public var phoneNumber: GetNumberRegionInfoResponseBody.PhoneNumber?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.phoneNumber?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.phoneNumber != nil {
            map["PhoneNumber"] = self.phoneNumber?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("PhoneNumber") {
            var model = GetNumberRegionInfoResponseBody.PhoneNumber()
            model.fromMap(dict["PhoneNumber"] as! [String: Any])
            self.phoneNumber = model
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class GetNumberRegionInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetNumberRegionInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = GetNumberRegionInfoResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class GetRecordOssUploadParamRequest : Tea.TeaModel {
    public var fileName: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fileName != nil {
            map["FileName"] = self.fileName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("FileName") {
            self.fileName = dict["FileName"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
    }
}

public class GetRecordOssUploadParamResponseBody : Tea.TeaModel {
    public var code: String?

    public var dir: String?

    public var expires: String?

    public var host: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var ossAccessKeyId: String?

    public var ossFileName: String?

    public var policy: String?

    public var requestId: String?

    public var signature: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.dir != nil {
            map["Dir"] = self.dir!
        }
        if self.expires != nil {
            map["Expires"] = self.expires!
        }
        if self.host != nil {
            map["Host"] = self.host!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.ossAccessKeyId != nil {
            map["OssAccessKeyId"] = self.ossAccessKeyId!
        }
        if self.ossFileName != nil {
            map["OssFileName"] = self.ossFileName!
        }
        if self.policy != nil {
            map["Policy"] = self.policy!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.signature != nil {
            map["Signature"] = self.signature!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("Dir") {
            self.dir = dict["Dir"] as! String
        }
        if dict.keys.contains("Expires") {
            self.expires = dict["Expires"] as! String
        }
        if dict.keys.contains("Host") {
            self.host = dict["Host"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("OssAccessKeyId") {
            self.ossAccessKeyId = dict["OssAccessKeyId"] as! String
        }
        if dict.keys.contains("OssFileName") {
            self.ossFileName = dict["OssFileName"] as! String
        }
        if dict.keys.contains("Policy") {
            self.policy = dict["Policy"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Signature") {
            self.signature = dict["Signature"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class GetRecordOssUploadParamResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRecordOssUploadParamResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = GetRecordOssUploadParamResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class GetRoutePointRequest : Tea.TeaModel {
    public var contactFlowId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactFlowId != nil {
            map["ContactFlowId"] = self.contactFlowId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("ContactFlowId") {
            self.contactFlowId = dict["ContactFlowId"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
    }
}

public class GetRoutePointResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var routePoint: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.routePoint != nil {
            map["RoutePoint"] = self.routePoint!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("RoutePoint") {
            self.routePoint = dict["RoutePoint"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class GetRoutePointResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRoutePointResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = GetRoutePointResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class GetServiceExtensionsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var serviceType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.serviceType != nil {
            map["ServiceType"] = self.serviceType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("ServiceType") {
            self.serviceType = dict["ServiceType"] as! String
        }
    }
}

public class GetServiceExtensionsResponseBody : Tea.TeaModel {
    public class ServiceExtensions : Tea.TeaModel {
        public class ServiceExtension : Tea.TeaModel {
            public var name: String?

            public var number: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.number != nil {
                    map["Number"] = self.number!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("Name") {
                    self.name = dict["Name"] as! String
                }
                if dict.keys.contains("Number") {
                    self.number = dict["Number"] as! String
                }
            }
        }
        public var serviceExtension: [GetServiceExtensionsResponseBody.ServiceExtensions.ServiceExtension]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.serviceExtension != nil {
                var tmp : [Any] = []
                for k in self.serviceExtension! {
                    tmp.append(k.toMap())
                }
                map["ServiceExtension"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("ServiceExtension") {
                self.serviceExtension = dict["ServiceExtension"] as! [GetServiceExtensionsResponseBody.ServiceExtensions.ServiceExtension]
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var serviceExtensions: GetServiceExtensionsResponseBody.ServiceExtensions?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.serviceExtensions?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.serviceExtensions != nil {
            map["ServiceExtensions"] = self.serviceExtensions?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("ServiceExtensions") {
            var model = GetServiceExtensionsResponseBody.ServiceExtensions()
            model.fromMap(dict["ServiceExtensions"] as! [String: Any])
            self.serviceExtensions = model
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class GetServiceExtensionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetServiceExtensionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = GetServiceExtensionsResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class GetSmsConfigRequest : Tea.TeaModel {
    public var instanceId: String?

    public var scenario: [Int32]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.scenario != nil {
            map["Scenario"] = self.scenario!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("Scenario") {
            self.scenario = dict["Scenario"] as! [Int32]
        }
    }
}

public class GetSmsConfigResponseBody : Tea.TeaModel {
    public class SmsConfigs : Tea.TeaModel {
        public class SmsConfig : Tea.TeaModel {
            public var description_: String?

            public var extra: String?

            public var gmtCreate: String?

            public var gmtModified: String?

            public var id: Int64?

            public var instance: String?

            public var name: String?

            public var scenario: Int32?

            public var signName: String?

            public var templateCode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.extra != nil {
                    map["Extra"] = self.extra!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["GmtModified"] = self.gmtModified!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.instance != nil {
                    map["Instance"] = self.instance!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.scenario != nil {
                    map["Scenario"] = self.scenario!
                }
                if self.signName != nil {
                    map["SignName"] = self.signName!
                }
                if self.templateCode != nil {
                    map["TemplateCode"] = self.templateCode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("Description") {
                    self.description_ = dict["Description"] as! String
                }
                if dict.keys.contains("Extra") {
                    self.extra = dict["Extra"] as! String
                }
                if dict.keys.contains("GmtCreate") {
                    self.gmtCreate = dict["GmtCreate"] as! String
                }
                if dict.keys.contains("GmtModified") {
                    self.gmtModified = dict["GmtModified"] as! String
                }
                if dict.keys.contains("Id") {
                    self.id = dict["Id"] as! Int64
                }
                if dict.keys.contains("Instance") {
                    self.instance = dict["Instance"] as! String
                }
                if dict.keys.contains("Name") {
                    self.name = dict["Name"] as! String
                }
                if dict.keys.contains("Scenario") {
                    self.scenario = dict["Scenario"] as! Int32
                }
                if dict.keys.contains("SignName") {
                    self.signName = dict["SignName"] as! String
                }
                if dict.keys.contains("TemplateCode") {
                    self.templateCode = dict["TemplateCode"] as! String
                }
            }
        }
        public var smsConfig: [GetSmsConfigResponseBody.SmsConfigs.SmsConfig]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.smsConfig != nil {
                var tmp : [Any] = []
                for k in self.smsConfig! {
                    tmp.append(k.toMap())
                }
                map["SmsConfig"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("SmsConfig") {
                self.smsConfig = dict["SmsConfig"] as! [GetSmsConfigResponseBody.SmsConfigs.SmsConfig]
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var smsConfigs: GetSmsConfigResponseBody.SmsConfigs?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.smsConfigs?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.smsConfigs != nil {
            map["SmsConfigs"] = self.smsConfigs?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("SmsConfigs") {
            var model = GetSmsConfigResponseBody.SmsConfigs()
            model.fromMap(dict["SmsConfigs"] as! [String: Any])
            self.smsConfigs = model
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class GetSmsConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSmsConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = GetSmsConfigResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class GetTURNCredentialsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var userName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.userName != nil {
            map["UserName"] = self.userName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("UserName") {
            self.userName = dict["UserName"] as! String
        }
    }
}

public class GetTURNCredentialsResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var password: String?

    public var requestId: String?

    public var success: Bool?

    public var username: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.password != nil {
            map["Password"] = self.password!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.username != nil {
            map["Username"] = self.username!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("Password") {
            self.password = dict["Password"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
        if dict.keys.contains("Username") {
            self.username = dict["Username"] as! String
        }
    }
}

public class GetTURNCredentialsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetTURNCredentialsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = GetTURNCredentialsResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class GetTURNServerListRequest : Tea.TeaModel {
    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
    }
}

public class GetTURNServerListResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var turnServerListConfig: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.turnServerListConfig != nil {
            map["TurnServerListConfig"] = self.turnServerListConfig!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
        if dict.keys.contains("TurnServerListConfig") {
            self.turnServerListConfig = dict["TurnServerListConfig"] as! String
        }
    }
}

public class GetTURNServerListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetTURNServerListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = GetTURNServerListResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class GetUserRequest : Tea.TeaModel {
    public var instanceId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("UserId") {
            self.userId = dict["UserId"] as! String
        }
    }
}

public class GetUserResponseBody : Tea.TeaModel {
    public class User : Tea.TeaModel {
        public class Detail : Tea.TeaModel {
            public var department: String?

            public var displayName: String?

            public var email: String?

            public var loginName: String?

            public var phone: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.department != nil {
                    map["Department"] = self.department!
                }
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.email != nil {
                    map["Email"] = self.email!
                }
                if self.loginName != nil {
                    map["LoginName"] = self.loginName!
                }
                if self.phone != nil {
                    map["Phone"] = self.phone!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("Department") {
                    self.department = dict["Department"] as! String
                }
                if dict.keys.contains("DisplayName") {
                    self.displayName = dict["DisplayName"] as! String
                }
                if dict.keys.contains("Email") {
                    self.email = dict["Email"] as! String
                }
                if dict.keys.contains("LoginName") {
                    self.loginName = dict["LoginName"] as! String
                }
                if dict.keys.contains("Phone") {
                    self.phone = dict["Phone"] as! String
                }
            }
        }
        public class Roles : Tea.TeaModel {
            public class Role : Tea.TeaModel {
                public var instanceId: String?

                public var roleDescription: String?

                public var roleId: String?

                public var roleName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.roleDescription != nil {
                        map["RoleDescription"] = self.roleDescription!
                    }
                    if self.roleId != nil {
                        map["RoleId"] = self.roleId!
                    }
                    if self.roleName != nil {
                        map["RoleName"] = self.roleName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("InstanceId") {
                        self.instanceId = dict["InstanceId"] as! String
                    }
                    if dict.keys.contains("RoleDescription") {
                        self.roleDescription = dict["RoleDescription"] as! String
                    }
                    if dict.keys.contains("RoleId") {
                        self.roleId = dict["RoleId"] as! String
                    }
                    if dict.keys.contains("RoleName") {
                        self.roleName = dict["RoleName"] as! String
                    }
                }
            }
            public var role: [GetUserResponseBody.User.Roles.Role]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.role != nil {
                    var tmp : [Any] = []
                    for k in self.role! {
                        tmp.append(k.toMap())
                    }
                    map["Role"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("Role") {
                    self.role = dict["Role"] as! [GetUserResponseBody.User.Roles.Role]
                }
            }
        }
        public class SkillLevels : Tea.TeaModel {
            public class SkillLevel : Tea.TeaModel {
                public class Skill : Tea.TeaModel {
                    public var instanceId: String?

                    public var skillGroupDescription: String?

                    public var skillGroupId: String?

                    public var skillGroupName: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.instanceId != nil {
                            map["InstanceId"] = self.instanceId!
                        }
                        if self.skillGroupDescription != nil {
                            map["SkillGroupDescription"] = self.skillGroupDescription!
                        }
                        if self.skillGroupId != nil {
                            map["SkillGroupId"] = self.skillGroupId!
                        }
                        if self.skillGroupName != nil {
                            map["SkillGroupName"] = self.skillGroupName!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("InstanceId") {
                            self.instanceId = dict["InstanceId"] as! String
                        }
                        if dict.keys.contains("SkillGroupDescription") {
                            self.skillGroupDescription = dict["SkillGroupDescription"] as! String
                        }
                        if dict.keys.contains("SkillGroupId") {
                            self.skillGroupId = dict["SkillGroupId"] as! String
                        }
                        if dict.keys.contains("SkillGroupName") {
                            self.skillGroupName = dict["SkillGroupName"] as! String
                        }
                    }
                }
                public var level: Int32?

                public var skill: GetUserResponseBody.User.SkillLevels.SkillLevel.Skill?

                public var skillLevelId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.skill?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.level != nil {
                        map["Level"] = self.level!
                    }
                    if self.skill != nil {
                        map["Skill"] = self.skill?.toMap()
                    }
                    if self.skillLevelId != nil {
                        map["SkillLevelId"] = self.skillLevelId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("Level") {
                        self.level = dict["Level"] as! Int32
                    }
                    if dict.keys.contains("Skill") {
                        var model = GetUserResponseBody.User.SkillLevels.SkillLevel.Skill()
                        model.fromMap(dict["Skill"] as! [String: Any])
                        self.skill = model
                    }
                    if dict.keys.contains("SkillLevelId") {
                        self.skillLevelId = dict["SkillLevelId"] as! String
                    }
                }
            }
            public var skillLevel: [GetUserResponseBody.User.SkillLevels.SkillLevel]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.skillLevel != nil {
                    var tmp : [Any] = []
                    for k in self.skillLevel! {
                        tmp.append(k.toMap())
                    }
                    map["SkillLevel"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("SkillLevel") {
                    self.skillLevel = dict["SkillLevel"] as! [GetUserResponseBody.User.SkillLevels.SkillLevel]
                }
            }
        }
        public var detail: GetUserResponseBody.User.Detail?

        public var instanceId: String?

        public var ramId: String?

        public var roles: GetUserResponseBody.User.Roles?

        public var skillLevels: GetUserResponseBody.User.SkillLevels?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.detail?.validate()
            try self.roles?.validate()
            try self.skillLevels?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.detail != nil {
                map["Detail"] = self.detail?.toMap()
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.ramId != nil {
                map["RamId"] = self.ramId!
            }
            if self.roles != nil {
                map["Roles"] = self.roles?.toMap()
            }
            if self.skillLevels != nil {
                map["SkillLevels"] = self.skillLevels?.toMap()
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("Detail") {
                var model = GetUserResponseBody.User.Detail()
                model.fromMap(dict["Detail"] as! [String: Any])
                self.detail = model
            }
            if dict.keys.contains("InstanceId") {
                self.instanceId = dict["InstanceId"] as! String
            }
            if dict.keys.contains("RamId") {
                self.ramId = dict["RamId"] as! String
            }
            if dict.keys.contains("Roles") {
                var model = GetUserResponseBody.User.Roles()
                model.fromMap(dict["Roles"] as! [String: Any])
                self.roles = model
            }
            if dict.keys.contains("SkillLevels") {
                var model = GetUserResponseBody.User.SkillLevels()
                model.fromMap(dict["SkillLevels"] as! [String: Any])
                self.skillLevels = model
            }
            if dict.keys.contains("UserId") {
                self.userId = dict["UserId"] as! String
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var user: GetUserResponseBody.User?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.user?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.user != nil {
            map["User"] = self.user?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
        if dict.keys.contains("User") {
            var model = GetUserResponseBody.User()
            model.fromMap(dict["User"] as! [String: Any])
            self.user = model
        }
    }
}

public class GetUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = GetUserResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class GetUserByExtensionRequest : Tea.TeaModel {
    public var extension_: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.extension_ != nil {
            map["Extension"] = self.extension_!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Extension") {
            self.extension_ = dict["Extension"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
    }
}

public class GetUserByExtensionResponseBody : Tea.TeaModel {
    public class User : Tea.TeaModel {
        public class Detail : Tea.TeaModel {
            public var department: String?

            public var displayName: String?

            public var email: String?

            public var extension_: String?

            public var loginName: String?

            public var phone: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.department != nil {
                    map["Department"] = self.department!
                }
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.email != nil {
                    map["Email"] = self.email!
                }
                if self.extension_ != nil {
                    map["Extension"] = self.extension_!
                }
                if self.loginName != nil {
                    map["LoginName"] = self.loginName!
                }
                if self.phone != nil {
                    map["Phone"] = self.phone!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("Department") {
                    self.department = dict["Department"] as! String
                }
                if dict.keys.contains("DisplayName") {
                    self.displayName = dict["DisplayName"] as! String
                }
                if dict.keys.contains("Email") {
                    self.email = dict["Email"] as! String
                }
                if dict.keys.contains("Extension") {
                    self.extension_ = dict["Extension"] as! String
                }
                if dict.keys.contains("LoginName") {
                    self.loginName = dict["LoginName"] as! String
                }
                if dict.keys.contains("Phone") {
                    self.phone = dict["Phone"] as! String
                }
            }
        }
        public class Roles : Tea.TeaModel {
            public var instanceId: String?

            public var roleDescription: String?

            public var roleId: String?

            public var roleName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.roleDescription != nil {
                    map["RoleDescription"] = self.roleDescription!
                }
                if self.roleId != nil {
                    map["RoleId"] = self.roleId!
                }
                if self.roleName != nil {
                    map["RoleName"] = self.roleName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("InstanceId") {
                    self.instanceId = dict["InstanceId"] as! String
                }
                if dict.keys.contains("RoleDescription") {
                    self.roleDescription = dict["RoleDescription"] as! String
                }
                if dict.keys.contains("RoleId") {
                    self.roleId = dict["RoleId"] as! String
                }
                if dict.keys.contains("RoleName") {
                    self.roleName = dict["RoleName"] as! String
                }
            }
        }
        public class SkillLevels : Tea.TeaModel {
            public class Skill : Tea.TeaModel {
                public var instanceId: String?

                public var skillGroupDescription: String?

                public var skillGroupId: String?

                public var skillGroupName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.skillGroupDescription != nil {
                        map["SkillGroupDescription"] = self.skillGroupDescription!
                    }
                    if self.skillGroupId != nil {
                        map["SkillGroupId"] = self.skillGroupId!
                    }
                    if self.skillGroupName != nil {
                        map["SkillGroupName"] = self.skillGroupName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("InstanceId") {
                        self.instanceId = dict["InstanceId"] as! String
                    }
                    if dict.keys.contains("SkillGroupDescription") {
                        self.skillGroupDescription = dict["SkillGroupDescription"] as! String
                    }
                    if dict.keys.contains("SkillGroupId") {
                        self.skillGroupId = dict["SkillGroupId"] as! String
                    }
                    if dict.keys.contains("SkillGroupName") {
                        self.skillGroupName = dict["SkillGroupName"] as! String
                    }
                }
            }
            public var level: Int32?

            public var skill: GetUserByExtensionResponseBody.User.SkillLevels.Skill?

            public var skillLevelId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.skill?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.level != nil {
                    map["Level"] = self.level!
                }
                if self.skill != nil {
                    map["Skill"] = self.skill?.toMap()
                }
                if self.skillLevelId != nil {
                    map["SkillLevelId"] = self.skillLevelId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("Level") {
                    self.level = dict["Level"] as! Int32
                }
                if dict.keys.contains("Skill") {
                    var model = GetUserByExtensionResponseBody.User.SkillLevels.Skill()
                    model.fromMap(dict["Skill"] as! [String: Any])
                    self.skill = model
                }
                if dict.keys.contains("SkillLevelId") {
                    self.skillLevelId = dict["SkillLevelId"] as! String
                }
            }
        }
        public var detail: GetUserByExtensionResponseBody.User.Detail?

        public var instanceId: String?

        public var ramId: String?

        public var roles: [GetUserByExtensionResponseBody.User.Roles]?

        public var skillLevels: [GetUserByExtensionResponseBody.User.SkillLevels]?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.detail?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.detail != nil {
                map["Detail"] = self.detail?.toMap()
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.ramId != nil {
                map["RamId"] = self.ramId!
            }
            if self.roles != nil {
                var tmp : [Any] = []
                for k in self.roles! {
                    tmp.append(k.toMap())
                }
                map["Roles"] = tmp
            }
            if self.skillLevels != nil {
                var tmp : [Any] = []
                for k in self.skillLevels! {
                    tmp.append(k.toMap())
                }
                map["SkillLevels"] = tmp
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("Detail") {
                var model = GetUserByExtensionResponseBody.User.Detail()
                model.fromMap(dict["Detail"] as! [String: Any])
                self.detail = model
            }
            if dict.keys.contains("InstanceId") {
                self.instanceId = dict["InstanceId"] as! String
            }
            if dict.keys.contains("RamId") {
                self.ramId = dict["RamId"] as! String
            }
            if dict.keys.contains("Roles") {
                self.roles = dict["Roles"] as! [GetUserByExtensionResponseBody.User.Roles]
            }
            if dict.keys.contains("SkillLevels") {
                self.skillLevels = dict["SkillLevels"] as! [GetUserByExtensionResponseBody.User.SkillLevels]
            }
            if dict.keys.contains("UserId") {
                self.userId = dict["UserId"] as! String
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var user: GetUserByExtensionResponseBody.User?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.user?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.user != nil {
            map["User"] = self.user?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
        if dict.keys.contains("User") {
            var model = GetUserByExtensionResponseBody.User()
            model.fromMap(dict["User"] as! [String: Any])
            self.user = model
        }
    }
}

public class GetUserByExtensionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetUserByExtensionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = GetUserByExtensionResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class LaunchAppraiseRequest : Tea.TeaModel {
    public var acid: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.acid != nil {
            map["Acid"] = self.acid!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Acid") {
            self.acid = dict["Acid"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
    }
}

public class LaunchAppraiseResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class LaunchAppraiseResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: LaunchAppraiseResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = LaunchAppraiseResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class LaunchShortMessageAppraiseRequest : Tea.TeaModel {
    public var acid: String?

    public var contactType: Int32?

    public var instanceId: String?

    public var phoneNumbers: String?

    public var skillGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.acid != nil {
            map["Acid"] = self.acid!
        }
        if self.contactType != nil {
            map["ContactType"] = self.contactType!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.phoneNumbers != nil {
            map["PhoneNumbers"] = self.phoneNumbers!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Acid") {
            self.acid = dict["Acid"] as! String
        }
        if dict.keys.contains("ContactType") {
            self.contactType = dict["ContactType"] as! Int32
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("PhoneNumbers") {
            self.phoneNumbers = dict["PhoneNumbers"] as! String
        }
        if dict.keys.contains("SkillGroupId") {
            self.skillGroupId = dict["SkillGroupId"] as! String
        }
    }
}

public class LaunchShortMessageAppraiseResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class LaunchShortMessageAppraiseResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: LaunchShortMessageAppraiseResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = LaunchShortMessageAppraiseResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListAgentDevicesRequest : Tea.TeaModel {
    public var instanceId: String?

    public var ramIds: String?

    public var startTime: Int64?

    public var stopTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ramIds != nil {
            map["RamIds"] = self.ramIds!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.stopTime != nil {
            map["StopTime"] = self.stopTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("RamIds") {
            self.ramIds = dict["RamIds"] as! String
        }
        if dict.keys.contains("StartTime") {
            self.startTime = dict["StartTime"] as! Int64
        }
        if dict.keys.contains("StopTime") {
            self.stopTime = dict["StopTime"] as! Int64
        }
    }
}

public class ListAgentDevicesResponseBody : Tea.TeaModel {
    public class AgentDeviceList : Tea.TeaModel {
        public class AgentDevice : Tea.TeaModel {
            public var browserVersion: String?

            public var clientIp: String?

            public var clientPort: String?

            public var instanceId: String?

            public var isLogin: Int32?

            public var loginTime: Int64?

            public var ramId: Int64?

            public var remark: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.browserVersion != nil {
                    map["BrowserVersion"] = self.browserVersion!
                }
                if self.clientIp != nil {
                    map["ClientIp"] = self.clientIp!
                }
                if self.clientPort != nil {
                    map["ClientPort"] = self.clientPort!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.isLogin != nil {
                    map["IsLogin"] = self.isLogin!
                }
                if self.loginTime != nil {
                    map["LoginTime"] = self.loginTime!
                }
                if self.ramId != nil {
                    map["RamId"] = self.ramId!
                }
                if self.remark != nil {
                    map["Remark"] = self.remark!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("BrowserVersion") {
                    self.browserVersion = dict["BrowserVersion"] as! String
                }
                if dict.keys.contains("ClientIp") {
                    self.clientIp = dict["ClientIp"] as! String
                }
                if dict.keys.contains("ClientPort") {
                    self.clientPort = dict["ClientPort"] as! String
                }
                if dict.keys.contains("InstanceId") {
                    self.instanceId = dict["InstanceId"] as! String
                }
                if dict.keys.contains("IsLogin") {
                    self.isLogin = dict["IsLogin"] as! Int32
                }
                if dict.keys.contains("LoginTime") {
                    self.loginTime = dict["LoginTime"] as! Int64
                }
                if dict.keys.contains("RamId") {
                    self.ramId = dict["RamId"] as! Int64
                }
                if dict.keys.contains("Remark") {
                    self.remark = dict["Remark"] as! String
                }
            }
        }
        public var agentDevice: [ListAgentDevicesResponseBody.AgentDeviceList.AgentDevice]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.agentDevice != nil {
                var tmp : [Any] = []
                for k in self.agentDevice! {
                    tmp.append(k.toMap())
                }
                map["AgentDevice"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("AgentDevice") {
                self.agentDevice = dict["AgentDevice"] as! [ListAgentDevicesResponseBody.AgentDeviceList.AgentDevice]
            }
        }
    }
    public var agentDeviceList: ListAgentDevicesResponseBody.AgentDeviceList?

    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.agentDeviceList?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentDeviceList != nil {
            map["AgentDeviceList"] = self.agentDeviceList?.toMap()
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("AgentDeviceList") {
            var model = ListAgentDevicesResponseBody.AgentDeviceList()
            model.fromMap(dict["AgentDeviceList"] as! [String: Any])
            self.agentDeviceList = model
        }
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListAgentDevicesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAgentDevicesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListAgentDevicesResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListAgentEventsRequest : Tea.TeaModel {
    public var event: [String]?

    public var instanceId: String?

    public var ramId: [String]?

    public var startTime: Int64?

    public var stopTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.event != nil {
            map["Event"] = self.event!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ramId != nil {
            map["RamId"] = self.ramId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.stopTime != nil {
            map["StopTime"] = self.stopTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Event") {
            self.event = dict["Event"] as! [String]
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("RamId") {
            self.ramId = dict["RamId"] as! [String]
        }
        if dict.keys.contains("StartTime") {
            self.startTime = dict["StartTime"] as! Int64
        }
        if dict.keys.contains("StopTime") {
            self.stopTime = dict["StopTime"] as! Int64
        }
    }
}

public class ListAgentEventsResponseBody : Tea.TeaModel {
    public class AgentEventList : Tea.TeaModel {
        public class AgentEvent : Tea.TeaModel {
            public class SkillGroupIds : Tea.TeaModel {
                public class SkillGroup : Tea.TeaModel {
                    public var skillGroupId: String?

                    public var skillGroupName: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.skillGroupId != nil {
                            map["SkillGroupId"] = self.skillGroupId!
                        }
                        if self.skillGroupName != nil {
                            map["SkillGroupName"] = self.skillGroupName!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("SkillGroupId") {
                            self.skillGroupId = dict["SkillGroupId"] as! String
                        }
                        if dict.keys.contains("SkillGroupName") {
                            self.skillGroupName = dict["SkillGroupName"] as! String
                        }
                    }
                }
                public var skillGroup: [ListAgentEventsResponseBody.AgentEventList.AgentEvent.SkillGroupIds.SkillGroup]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.skillGroup != nil {
                        var tmp : [Any] = []
                        for k in self.skillGroup! {
                            tmp.append(k.toMap())
                        }
                        map["SkillGroup"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("SkillGroup") {
                        self.skillGroup = dict["SkillGroup"] as! [ListAgentEventsResponseBody.AgentEventList.AgentEvent.SkillGroupIds.SkillGroup]
                    }
                }
            }
            public var event: String?

            public var eventTime: Int64?

            public var instanceId: String?

            public var loginName: String?

            public var ramId: Int64?

            public var skillGroupIds: ListAgentEventsResponseBody.AgentEventList.AgentEvent.SkillGroupIds?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.skillGroupIds?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.event != nil {
                    map["Event"] = self.event!
                }
                if self.eventTime != nil {
                    map["EventTime"] = self.eventTime!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.loginName != nil {
                    map["LoginName"] = self.loginName!
                }
                if self.ramId != nil {
                    map["RamId"] = self.ramId!
                }
                if self.skillGroupIds != nil {
                    map["SkillGroupIds"] = self.skillGroupIds?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("Event") {
                    self.event = dict["Event"] as! String
                }
                if dict.keys.contains("EventTime") {
                    self.eventTime = dict["EventTime"] as! Int64
                }
                if dict.keys.contains("InstanceId") {
                    self.instanceId = dict["InstanceId"] as! String
                }
                if dict.keys.contains("LoginName") {
                    self.loginName = dict["LoginName"] as! String
                }
                if dict.keys.contains("RamId") {
                    self.ramId = dict["RamId"] as! Int64
                }
                if dict.keys.contains("SkillGroupIds") {
                    var model = ListAgentEventsResponseBody.AgentEventList.AgentEvent.SkillGroupIds()
                    model.fromMap(dict["SkillGroupIds"] as! [String: Any])
                    self.skillGroupIds = model
                }
            }
        }
        public var agentEvent: [ListAgentEventsResponseBody.AgentEventList.AgentEvent]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.agentEvent != nil {
                var tmp : [Any] = []
                for k in self.agentEvent! {
                    tmp.append(k.toMap())
                }
                map["AgentEvent"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("AgentEvent") {
                self.agentEvent = dict["AgentEvent"] as! [ListAgentEventsResponseBody.AgentEventList.AgentEvent]
            }
        }
    }
    public var agentEventList: ListAgentEventsResponseBody.AgentEventList?

    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.agentEventList?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentEventList != nil {
            map["AgentEventList"] = self.agentEventList?.toMap()
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("AgentEventList") {
            var model = ListAgentEventsResponseBody.AgentEventList()
            model.fromMap(dict["AgentEventList"] as! [String: Any])
            self.agentEventList = model
        }
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListAgentEventsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAgentEventsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListAgentEventsResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListAgentStateLogsRequest : Tea.TeaModel {
    public var endTime: Int64?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var ramId: Int64?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.ramId != nil {
            map["RamId"] = self.ramId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("EndTime") {
            self.endTime = dict["EndTime"] as! Int64
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("PageNumber") {
            self.pageNumber = dict["PageNumber"] as! Int32
        }
        if dict.keys.contains("PageSize") {
            self.pageSize = dict["PageSize"] as! Int32
        }
        if dict.keys.contains("RamId") {
            self.ramId = dict["RamId"] as! Int64
        }
        if dict.keys.contains("StartTime") {
            self.startTime = dict["StartTime"] as! Int64
        }
    }
}

public class ListAgentStateLogsResponseBody : Tea.TeaModel {
    public class AgentStateLogPage : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var connectId: String?

            public var contactId: String?

            public var counterParty: String?

            public var instanceId: String?

            public var ramId: Int64?

            public var skillGroupIds: String?

            public var state: String?

            public var stateCode: String?

            public var stateTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.connectId != nil {
                    map["ConnectId"] = self.connectId!
                }
                if self.contactId != nil {
                    map["ContactId"] = self.contactId!
                }
                if self.counterParty != nil {
                    map["CounterParty"] = self.counterParty!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.ramId != nil {
                    map["RamId"] = self.ramId!
                }
                if self.skillGroupIds != nil {
                    map["SkillGroupIds"] = self.skillGroupIds!
                }
                if self.state != nil {
                    map["State"] = self.state!
                }
                if self.stateCode != nil {
                    map["StateCode"] = self.stateCode!
                }
                if self.stateTime != nil {
                    map["StateTime"] = self.stateTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("ConnectId") {
                    self.connectId = dict["ConnectId"] as! String
                }
                if dict.keys.contains("ContactId") {
                    self.contactId = dict["ContactId"] as! String
                }
                if dict.keys.contains("CounterParty") {
                    self.counterParty = dict["CounterParty"] as! String
                }
                if dict.keys.contains("InstanceId") {
                    self.instanceId = dict["InstanceId"] as! String
                }
                if dict.keys.contains("RamId") {
                    self.ramId = dict["RamId"] as! Int64
                }
                if dict.keys.contains("SkillGroupIds") {
                    self.skillGroupIds = dict["SkillGroupIds"] as! String
                }
                if dict.keys.contains("State") {
                    self.state = dict["State"] as! String
                }
                if dict.keys.contains("StateCode") {
                    self.stateCode = dict["StateCode"] as! String
                }
                if dict.keys.contains("StateTime") {
                    self.stateTime = dict["StateTime"] as! Int64
                }
            }
        }
        public var list: [ListAgentStateLogsResponseBody.AgentStateLogPage.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("List") {
                self.list = dict["List"] as! [ListAgentStateLogsResponseBody.AgentStateLogPage.List]
            }
            if dict.keys.contains("PageNumber") {
                self.pageNumber = dict["PageNumber"] as! Int32
            }
            if dict.keys.contains("PageSize") {
                self.pageSize = dict["PageSize"] as! Int32
            }
            if dict.keys.contains("TotalCount") {
                self.totalCount = dict["TotalCount"] as! Int32
            }
        }
    }
    public var agentStateLogPage: ListAgentStateLogsResponseBody.AgentStateLogPage?

    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.agentStateLogPage?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentStateLogPage != nil {
            map["AgentStateLogPage"] = self.agentStateLogPage?.toMap()
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("AgentStateLogPage") {
            var model = ListAgentStateLogsResponseBody.AgentStateLogPage()
            model.fromMap(dict["AgentStateLogPage"] as! [String: Any])
            self.agentStateLogPage = model
        }
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListAgentStateLogsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAgentStateLogsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListAgentStateLogsResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListAgentStatesRequest : Tea.TeaModel {
    public var agentIds: String?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var skillGroupId: String?

    public var state: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentIds != nil {
            map["AgentIds"] = self.agentIds!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        if self.state != nil {
            map["State"] = self.state!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("AgentIds") {
            self.agentIds = dict["AgentIds"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("PageNumber") {
            self.pageNumber = dict["PageNumber"] as! Int32
        }
        if dict.keys.contains("PageSize") {
            self.pageSize = dict["PageSize"] as! Int32
        }
        if dict.keys.contains("SkillGroupId") {
            self.skillGroupId = dict["SkillGroupId"] as! String
        }
        if dict.keys.contains("State") {
            self.state = dict["State"] as! String
        }
    }
}

public class ListAgentStatesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class RealTimeAgentState : Tea.TeaModel {
                public var agentId: String?

                public var agentName: String?

                public var dn: String?

                public var instanceId: String?

                public var loginName: String?

                public var state: String?

                public var stateDuration: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.agentId != nil {
                        map["AgentId"] = self.agentId!
                    }
                    if self.agentName != nil {
                        map["AgentName"] = self.agentName!
                    }
                    if self.dn != nil {
                        map["Dn"] = self.dn!
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.loginName != nil {
                        map["LoginName"] = self.loginName!
                    }
                    if self.state != nil {
                        map["State"] = self.state!
                    }
                    if self.stateDuration != nil {
                        map["StateDuration"] = self.stateDuration!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("AgentId") {
                        self.agentId = dict["AgentId"] as! String
                    }
                    if dict.keys.contains("AgentName") {
                        self.agentName = dict["AgentName"] as! String
                    }
                    if dict.keys.contains("Dn") {
                        self.dn = dict["Dn"] as! String
                    }
                    if dict.keys.contains("InstanceId") {
                        self.instanceId = dict["InstanceId"] as! String
                    }
                    if dict.keys.contains("LoginName") {
                        self.loginName = dict["LoginName"] as! String
                    }
                    if dict.keys.contains("State") {
                        self.state = dict["State"] as! String
                    }
                    if dict.keys.contains("StateDuration") {
                        self.stateDuration = dict["StateDuration"] as! String
                    }
                }
            }
            public var realTimeAgentState: [ListAgentStatesResponseBody.Data.List.RealTimeAgentState]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.realTimeAgentState != nil {
                    var tmp : [Any] = []
                    for k in self.realTimeAgentState! {
                        tmp.append(k.toMap())
                    }
                    map["RealTimeAgentState"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("RealTimeAgentState") {
                    self.realTimeAgentState = dict["RealTimeAgentState"] as! [ListAgentStatesResponseBody.Data.List.RealTimeAgentState]
                }
            }
        }
        public var list: ListAgentStatesResponseBody.Data.List?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.list?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                map["List"] = self.list?.toMap()
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("List") {
                var model = ListAgentStatesResponseBody.Data.List()
                model.fromMap(dict["List"] as! [String: Any])
                self.list = model
            }
            if dict.keys.contains("PageNumber") {
                self.pageNumber = dict["PageNumber"] as! Int32
            }
            if dict.keys.contains("PageSize") {
                self.pageSize = dict["PageSize"] as! Int32
            }
            if dict.keys.contains("TotalCount") {
                self.totalCount = dict["TotalCount"] as! Int32
            }
        }
    }
    public var code: String?

    public var data: ListAgentStatesResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("Data") {
            var model = ListAgentStatesResponseBody.Data()
            model.fromMap(dict["Data"] as! [String: Any])
            self.data = model
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListAgentStatesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAgentStatesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListAgentStatesResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListAgentSummaryReportsRequest : Tea.TeaModel {
    public var agentIds: String?

    public var endTime: String?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var skillGroupId: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentIds != nil {
            map["AgentIds"] = self.agentIds!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("AgentIds") {
            self.agentIds = dict["AgentIds"] as! String
        }
        if dict.keys.contains("EndTime") {
            self.endTime = dict["EndTime"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("PageNumber") {
            self.pageNumber = dict["PageNumber"] as! Int32
        }
        if dict.keys.contains("PageSize") {
            self.pageSize = dict["PageSize"] as! Int32
        }
        if dict.keys.contains("SkillGroupId") {
            self.skillGroupId = dict["SkillGroupId"] as! String
        }
        if dict.keys.contains("StartTime") {
            self.startTime = dict["StartTime"] as! String
        }
    }
}

public class ListAgentSummaryReportsResponseBody : Tea.TeaModel {
    public class PagedAgentSummaryReport : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class AgentSummaryReport : Tea.TeaModel {
                public class Inbound : Tea.TeaModel {
                    public var averageRingTime: Int64?

                    public var averageTalkTime: Int64?

                    public var averageWorkTime: Int64?

                    public var callsHandled: Int64?

                    public var callsOffered: Int64?

                    public var handleRate: Double?

                    public var maxRingTime: Int64?

                    public var maxTalkTime: Int64?

                    public var maxWorkTime: Int64?

                    public var satisfactionIndex: Double?

                    public var satisfactionSurveysOffered: Int64?

                    public var satisfactionSurveysResponded: Int64?

                    public var serviceLevel20: Double?

                    public var totalRingTime: Int64?

                    public var totalTalkTime: Int64?

                    public var totalWorkTime: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.averageRingTime != nil {
                            map["AverageRingTime"] = self.averageRingTime!
                        }
                        if self.averageTalkTime != nil {
                            map["AverageTalkTime"] = self.averageTalkTime!
                        }
                        if self.averageWorkTime != nil {
                            map["AverageWorkTime"] = self.averageWorkTime!
                        }
                        if self.callsHandled != nil {
                            map["CallsHandled"] = self.callsHandled!
                        }
                        if self.callsOffered != nil {
                            map["CallsOffered"] = self.callsOffered!
                        }
                        if self.handleRate != nil {
                            map["HandleRate"] = self.handleRate!
                        }
                        if self.maxRingTime != nil {
                            map["MaxRingTime"] = self.maxRingTime!
                        }
                        if self.maxTalkTime != nil {
                            map["MaxTalkTime"] = self.maxTalkTime!
                        }
                        if self.maxWorkTime != nil {
                            map["MaxWorkTime"] = self.maxWorkTime!
                        }
                        if self.satisfactionIndex != nil {
                            map["SatisfactionIndex"] = self.satisfactionIndex!
                        }
                        if self.satisfactionSurveysOffered != nil {
                            map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                        }
                        if self.satisfactionSurveysResponded != nil {
                            map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                        }
                        if self.serviceLevel20 != nil {
                            map["ServiceLevel20"] = self.serviceLevel20!
                        }
                        if self.totalRingTime != nil {
                            map["TotalRingTime"] = self.totalRingTime!
                        }
                        if self.totalTalkTime != nil {
                            map["TotalTalkTime"] = self.totalTalkTime!
                        }
                        if self.totalWorkTime != nil {
                            map["TotalWorkTime"] = self.totalWorkTime!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("AverageRingTime") {
                            self.averageRingTime = dict["AverageRingTime"] as! Int64
                        }
                        if dict.keys.contains("AverageTalkTime") {
                            self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                        }
                        if dict.keys.contains("AverageWorkTime") {
                            self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                        }
                        if dict.keys.contains("CallsHandled") {
                            self.callsHandled = dict["CallsHandled"] as! Int64
                        }
                        if dict.keys.contains("CallsOffered") {
                            self.callsOffered = dict["CallsOffered"] as! Int64
                        }
                        if dict.keys.contains("HandleRate") {
                            self.handleRate = dict["HandleRate"] as! Double
                        }
                        if dict.keys.contains("MaxRingTime") {
                            self.maxRingTime = dict["MaxRingTime"] as! Int64
                        }
                        if dict.keys.contains("MaxTalkTime") {
                            self.maxTalkTime = dict["MaxTalkTime"] as! Int64
                        }
                        if dict.keys.contains("MaxWorkTime") {
                            self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionIndex") {
                            self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                        }
                        if dict.keys.contains("SatisfactionSurveysOffered") {
                            self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionSurveysResponded") {
                            self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                        }
                        if dict.keys.contains("ServiceLevel20") {
                            self.serviceLevel20 = dict["ServiceLevel20"] as! Double
                        }
                        if dict.keys.contains("TotalRingTime") {
                            self.totalRingTime = dict["TotalRingTime"] as! Int64
                        }
                        if dict.keys.contains("TotalTalkTime") {
                            self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                        }
                        if dict.keys.contains("TotalWorkTime") {
                            self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                        }
                    }
                }
                public class Outbound : Tea.TeaModel {
                    public var answerRate: Double?

                    public var averageDialingTime: Int64?

                    public var averageTalkTime: Int64?

                    public var averageWorkTime: Int64?

                    public var callsAnswered: Int64?

                    public var callsDialed: Int64?

                    public var maxDialingTime: Int64?

                    public var maxTalkTime: Int64?

                    public var maxWorkTime: String?

                    public var satisfactionIndex: Double?

                    public var satisfactionSurveysOffered: Int64?

                    public var satisfactionSurveysResponded: Int64?

                    public var totalDialingTime: Int64?

                    public var totalTalkTime: Int64?

                    public var totalWorkTime: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.answerRate != nil {
                            map["AnswerRate"] = self.answerRate!
                        }
                        if self.averageDialingTime != nil {
                            map["AverageDialingTime"] = self.averageDialingTime!
                        }
                        if self.averageTalkTime != nil {
                            map["AverageTalkTime"] = self.averageTalkTime!
                        }
                        if self.averageWorkTime != nil {
                            map["AverageWorkTime"] = self.averageWorkTime!
                        }
                        if self.callsAnswered != nil {
                            map["CallsAnswered"] = self.callsAnswered!
                        }
                        if self.callsDialed != nil {
                            map["CallsDialed"] = self.callsDialed!
                        }
                        if self.maxDialingTime != nil {
                            map["MaxDialingTime"] = self.maxDialingTime!
                        }
                        if self.maxTalkTime != nil {
                            map["MaxTalkTime"] = self.maxTalkTime!
                        }
                        if self.maxWorkTime != nil {
                            map["MaxWorkTime"] = self.maxWorkTime!
                        }
                        if self.satisfactionIndex != nil {
                            map["SatisfactionIndex"] = self.satisfactionIndex!
                        }
                        if self.satisfactionSurveysOffered != nil {
                            map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                        }
                        if self.satisfactionSurveysResponded != nil {
                            map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                        }
                        if self.totalDialingTime != nil {
                            map["TotalDialingTime"] = self.totalDialingTime!
                        }
                        if self.totalTalkTime != nil {
                            map["TotalTalkTime"] = self.totalTalkTime!
                        }
                        if self.totalWorkTime != nil {
                            map["TotalWorkTime"] = self.totalWorkTime!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("AnswerRate") {
                            self.answerRate = dict["AnswerRate"] as! Double
                        }
                        if dict.keys.contains("AverageDialingTime") {
                            self.averageDialingTime = dict["AverageDialingTime"] as! Int64
                        }
                        if dict.keys.contains("AverageTalkTime") {
                            self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                        }
                        if dict.keys.contains("AverageWorkTime") {
                            self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                        }
                        if dict.keys.contains("CallsAnswered") {
                            self.callsAnswered = dict["CallsAnswered"] as! Int64
                        }
                        if dict.keys.contains("CallsDialed") {
                            self.callsDialed = dict["CallsDialed"] as! Int64
                        }
                        if dict.keys.contains("MaxDialingTime") {
                            self.maxDialingTime = dict["MaxDialingTime"] as! Int64
                        }
                        if dict.keys.contains("MaxTalkTime") {
                            self.maxTalkTime = dict["MaxTalkTime"] as! Int64
                        }
                        if dict.keys.contains("MaxWorkTime") {
                            self.maxWorkTime = dict["MaxWorkTime"] as! String
                        }
                        if dict.keys.contains("SatisfactionIndex") {
                            self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                        }
                        if dict.keys.contains("SatisfactionSurveysOffered") {
                            self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionSurveysResponded") {
                            self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                        }
                        if dict.keys.contains("TotalDialingTime") {
                            self.totalDialingTime = dict["TotalDialingTime"] as! Int64
                        }
                        if dict.keys.contains("TotalTalkTime") {
                            self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                        }
                        if dict.keys.contains("TotalWorkTime") {
                            self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                        }
                    }
                }
                public class Overall : Tea.TeaModel {
                    public var averageReadyTime: Int64?

                    public var averageTalkTime: Int64?

                    public var averageWorkTime: Int64?

                    public var firstLogInTime: String?

                    public var lastLogOutTime: String?

                    public var maxReadyTime: Int64?

                    public var maxTalkTime: Int64?

                    public var maxWorkTime: Int64?

                    public var occupancyRate: Double?

                    public var oneTransferCalls: Int64?

                    public var satisfactionIndex: Double?

                    public var satisfactionSurveysOffered: Int64?

                    public var satisfactionSurveysResponded: Int64?

                    public var totalBreakTime: Int64?

                    public var totalCalls: Int64?

                    public var totalLoggedInTime: Int64?

                    public var totalReadyTime: Int64?

                    public var totalTalkTime: Int64?

                    public var totalWorkTime: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.averageReadyTime != nil {
                            map["AverageReadyTime"] = self.averageReadyTime!
                        }
                        if self.averageTalkTime != nil {
                            map["AverageTalkTime"] = self.averageTalkTime!
                        }
                        if self.averageWorkTime != nil {
                            map["AverageWorkTime"] = self.averageWorkTime!
                        }
                        if self.firstLogInTime != nil {
                            map["FirstLogInTime"] = self.firstLogInTime!
                        }
                        if self.lastLogOutTime != nil {
                            map["LastLogOutTime"] = self.lastLogOutTime!
                        }
                        if self.maxReadyTime != nil {
                            map["MaxReadyTime"] = self.maxReadyTime!
                        }
                        if self.maxTalkTime != nil {
                            map["MaxTalkTime"] = self.maxTalkTime!
                        }
                        if self.maxWorkTime != nil {
                            map["MaxWorkTime"] = self.maxWorkTime!
                        }
                        if self.occupancyRate != nil {
                            map["OccupancyRate"] = self.occupancyRate!
                        }
                        if self.oneTransferCalls != nil {
                            map["OneTransferCalls"] = self.oneTransferCalls!
                        }
                        if self.satisfactionIndex != nil {
                            map["SatisfactionIndex"] = self.satisfactionIndex!
                        }
                        if self.satisfactionSurveysOffered != nil {
                            map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                        }
                        if self.satisfactionSurveysResponded != nil {
                            map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                        }
                        if self.totalBreakTime != nil {
                            map["TotalBreakTime"] = self.totalBreakTime!
                        }
                        if self.totalCalls != nil {
                            map["TotalCalls"] = self.totalCalls!
                        }
                        if self.totalLoggedInTime != nil {
                            map["TotalLoggedInTime"] = self.totalLoggedInTime!
                        }
                        if self.totalReadyTime != nil {
                            map["TotalReadyTime"] = self.totalReadyTime!
                        }
                        if self.totalTalkTime != nil {
                            map["TotalTalkTime"] = self.totalTalkTime!
                        }
                        if self.totalWorkTime != nil {
                            map["TotalWorkTime"] = self.totalWorkTime!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("AverageReadyTime") {
                            self.averageReadyTime = dict["AverageReadyTime"] as! Int64
                        }
                        if dict.keys.contains("AverageTalkTime") {
                            self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                        }
                        if dict.keys.contains("AverageWorkTime") {
                            self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                        }
                        if dict.keys.contains("FirstLogInTime") {
                            self.firstLogInTime = dict["FirstLogInTime"] as! String
                        }
                        if dict.keys.contains("LastLogOutTime") {
                            self.lastLogOutTime = dict["LastLogOutTime"] as! String
                        }
                        if dict.keys.contains("MaxReadyTime") {
                            self.maxReadyTime = dict["MaxReadyTime"] as! Int64
                        }
                        if dict.keys.contains("MaxTalkTime") {
                            self.maxTalkTime = dict["MaxTalkTime"] as! Int64
                        }
                        if dict.keys.contains("MaxWorkTime") {
                            self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                        }
                        if dict.keys.contains("OccupancyRate") {
                            self.occupancyRate = dict["OccupancyRate"] as! Double
                        }
                        if dict.keys.contains("OneTransferCalls") {
                            self.oneTransferCalls = dict["OneTransferCalls"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionIndex") {
                            self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                        }
                        if dict.keys.contains("SatisfactionSurveysOffered") {
                            self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionSurveysResponded") {
                            self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                        }
                        if dict.keys.contains("TotalBreakTime") {
                            self.totalBreakTime = dict["TotalBreakTime"] as! Int64
                        }
                        if dict.keys.contains("TotalCalls") {
                            self.totalCalls = dict["TotalCalls"] as! Int64
                        }
                        if dict.keys.contains("TotalLoggedInTime") {
                            self.totalLoggedInTime = dict["TotalLoggedInTime"] as! Int64
                        }
                        if dict.keys.contains("TotalReadyTime") {
                            self.totalReadyTime = dict["TotalReadyTime"] as! Int64
                        }
                        if dict.keys.contains("TotalTalkTime") {
                            self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                        }
                        if dict.keys.contains("TotalWorkTime") {
                            self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                        }
                    }
                }
                public var agentId: String?

                public var agentName: String?

                public var inbound: ListAgentSummaryReportsResponseBody.PagedAgentSummaryReport.List.AgentSummaryReport.Inbound?

                public var instanceId: String?

                public var loginName: String?

                public var outbound: ListAgentSummaryReportsResponseBody.PagedAgentSummaryReport.List.AgentSummaryReport.Outbound?

                public var overall: ListAgentSummaryReportsResponseBody.PagedAgentSummaryReport.List.AgentSummaryReport.Overall?

                public var skillGroupIds: String?

                public var skillGroupNames: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.inbound?.validate()
                    try self.outbound?.validate()
                    try self.overall?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.agentId != nil {
                        map["AgentId"] = self.agentId!
                    }
                    if self.agentName != nil {
                        map["AgentName"] = self.agentName!
                    }
                    if self.inbound != nil {
                        map["Inbound"] = self.inbound?.toMap()
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.loginName != nil {
                        map["LoginName"] = self.loginName!
                    }
                    if self.outbound != nil {
                        map["Outbound"] = self.outbound?.toMap()
                    }
                    if self.overall != nil {
                        map["Overall"] = self.overall?.toMap()
                    }
                    if self.skillGroupIds != nil {
                        map["SkillGroupIds"] = self.skillGroupIds!
                    }
                    if self.skillGroupNames != nil {
                        map["SkillGroupNames"] = self.skillGroupNames!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("AgentId") {
                        self.agentId = dict["AgentId"] as! String
                    }
                    if dict.keys.contains("AgentName") {
                        self.agentName = dict["AgentName"] as! String
                    }
                    if dict.keys.contains("Inbound") {
                        var model = ListAgentSummaryReportsResponseBody.PagedAgentSummaryReport.List.AgentSummaryReport.Inbound()
                        model.fromMap(dict["Inbound"] as! [String: Any])
                        self.inbound = model
                    }
                    if dict.keys.contains("InstanceId") {
                        self.instanceId = dict["InstanceId"] as! String
                    }
                    if dict.keys.contains("LoginName") {
                        self.loginName = dict["LoginName"] as! String
                    }
                    if dict.keys.contains("Outbound") {
                        var model = ListAgentSummaryReportsResponseBody.PagedAgentSummaryReport.List.AgentSummaryReport.Outbound()
                        model.fromMap(dict["Outbound"] as! [String: Any])
                        self.outbound = model
                    }
                    if dict.keys.contains("Overall") {
                        var model = ListAgentSummaryReportsResponseBody.PagedAgentSummaryReport.List.AgentSummaryReport.Overall()
                        model.fromMap(dict["Overall"] as! [String: Any])
                        self.overall = model
                    }
                    if dict.keys.contains("SkillGroupIds") {
                        self.skillGroupIds = dict["SkillGroupIds"] as! String
                    }
                    if dict.keys.contains("SkillGroupNames") {
                        self.skillGroupNames = dict["SkillGroupNames"] as! String
                    }
                }
            }
            public var agentSummaryReport: [ListAgentSummaryReportsResponseBody.PagedAgentSummaryReport.List.AgentSummaryReport]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.agentSummaryReport != nil {
                    var tmp : [Any] = []
                    for k in self.agentSummaryReport! {
                        tmp.append(k.toMap())
                    }
                    map["AgentSummaryReport"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("AgentSummaryReport") {
                    self.agentSummaryReport = dict["AgentSummaryReport"] as! [ListAgentSummaryReportsResponseBody.PagedAgentSummaryReport.List.AgentSummaryReport]
                }
            }
        }
        public var list: ListAgentSummaryReportsResponseBody.PagedAgentSummaryReport.List?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.list?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                map["List"] = self.list?.toMap()
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("List") {
                var model = ListAgentSummaryReportsResponseBody.PagedAgentSummaryReport.List()
                model.fromMap(dict["List"] as! [String: Any])
                self.list = model
            }
            if dict.keys.contains("PageNumber") {
                self.pageNumber = dict["PageNumber"] as! Int32
            }
            if dict.keys.contains("PageSize") {
                self.pageSize = dict["PageSize"] as! Int32
            }
            if dict.keys.contains("TotalCount") {
                self.totalCount = dict["TotalCount"] as! Int32
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pagedAgentSummaryReport: ListAgentSummaryReportsResponseBody.PagedAgentSummaryReport?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pagedAgentSummaryReport?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pagedAgentSummaryReport != nil {
            map["PagedAgentSummaryReport"] = self.pagedAgentSummaryReport?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("PagedAgentSummaryReport") {
            var model = ListAgentSummaryReportsResponseBody.PagedAgentSummaryReport()
            model.fromMap(dict["PagedAgentSummaryReport"] as! [String: Any])
            self.pagedAgentSummaryReport = model
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListAgentSummaryReportsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAgentSummaryReportsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListAgentSummaryReportsResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListAgentSummaryReportsByIntervalRequest : Tea.TeaModel {
    public var agentIds: String?

    public var endTime: String?

    public var instanceId: String?

    public var interval: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var skillGroupId: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentIds != nil {
            map["AgentIds"] = self.agentIds!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("AgentIds") {
            self.agentIds = dict["AgentIds"] as! String
        }
        if dict.keys.contains("EndTime") {
            self.endTime = dict["EndTime"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("Interval") {
            self.interval = dict["Interval"] as! String
        }
        if dict.keys.contains("PageNumber") {
            self.pageNumber = dict["PageNumber"] as! Int32
        }
        if dict.keys.contains("PageSize") {
            self.pageSize = dict["PageSize"] as! Int32
        }
        if dict.keys.contains("SkillGroupId") {
            self.skillGroupId = dict["SkillGroupId"] as! String
        }
        if dict.keys.contains("StartTime") {
            self.startTime = dict["StartTime"] as! String
        }
    }
}

public class ListAgentSummaryReportsByIntervalResponseBody : Tea.TeaModel {
    public class PagedAgentSummaryReport : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class AgentTimeIntervalReport : Tea.TeaModel {
                public class IntervalList : Tea.TeaModel {
                    public class AgentSummaryReport : Tea.TeaModel {
                        public class Inbound : Tea.TeaModel {
                            public var averageRingTime: Int64?

                            public var averageTalkTime: Int64?

                            public var averageWorkTime: Int64?

                            public var callsHandled: Int64?

                            public var callsOffered: Int64?

                            public var handleRate: Double?

                            public var maxRingTime: Int64?

                            public var maxTalkTime: Int64?

                            public var maxWorkTime: Int64?

                            public var satisfactionIndex: Double?

                            public var satisfactionSurveysOffered: Int64?

                            public var satisfactionSurveysResponded: Int64?

                            public var serviceLevel20: Double?

                            public var totalRingTime: Int64?

                            public var totalTalkTime: Int64?

                            public var totalWorkTime: Int64?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.averageRingTime != nil {
                                    map["AverageRingTime"] = self.averageRingTime!
                                }
                                if self.averageTalkTime != nil {
                                    map["AverageTalkTime"] = self.averageTalkTime!
                                }
                                if self.averageWorkTime != nil {
                                    map["AverageWorkTime"] = self.averageWorkTime!
                                }
                                if self.callsHandled != nil {
                                    map["CallsHandled"] = self.callsHandled!
                                }
                                if self.callsOffered != nil {
                                    map["CallsOffered"] = self.callsOffered!
                                }
                                if self.handleRate != nil {
                                    map["HandleRate"] = self.handleRate!
                                }
                                if self.maxRingTime != nil {
                                    map["MaxRingTime"] = self.maxRingTime!
                                }
                                if self.maxTalkTime != nil {
                                    map["MaxTalkTime"] = self.maxTalkTime!
                                }
                                if self.maxWorkTime != nil {
                                    map["MaxWorkTime"] = self.maxWorkTime!
                                }
                                if self.satisfactionIndex != nil {
                                    map["SatisfactionIndex"] = self.satisfactionIndex!
                                }
                                if self.satisfactionSurveysOffered != nil {
                                    map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                                }
                                if self.satisfactionSurveysResponded != nil {
                                    map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                                }
                                if self.serviceLevel20 != nil {
                                    map["ServiceLevel20"] = self.serviceLevel20!
                                }
                                if self.totalRingTime != nil {
                                    map["TotalRingTime"] = self.totalRingTime!
                                }
                                if self.totalTalkTime != nil {
                                    map["TotalTalkTime"] = self.totalTalkTime!
                                }
                                if self.totalWorkTime != nil {
                                    map["TotalWorkTime"] = self.totalWorkTime!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("AverageRingTime") {
                                    self.averageRingTime = dict["AverageRingTime"] as! Int64
                                }
                                if dict.keys.contains("AverageTalkTime") {
                                    self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                                }
                                if dict.keys.contains("AverageWorkTime") {
                                    self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                                }
                                if dict.keys.contains("CallsHandled") {
                                    self.callsHandled = dict["CallsHandled"] as! Int64
                                }
                                if dict.keys.contains("CallsOffered") {
                                    self.callsOffered = dict["CallsOffered"] as! Int64
                                }
                                if dict.keys.contains("HandleRate") {
                                    self.handleRate = dict["HandleRate"] as! Double
                                }
                                if dict.keys.contains("MaxRingTime") {
                                    self.maxRingTime = dict["MaxRingTime"] as! Int64
                                }
                                if dict.keys.contains("MaxTalkTime") {
                                    self.maxTalkTime = dict["MaxTalkTime"] as! Int64
                                }
                                if dict.keys.contains("MaxWorkTime") {
                                    self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                                }
                                if dict.keys.contains("SatisfactionIndex") {
                                    self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                                }
                                if dict.keys.contains("SatisfactionSurveysOffered") {
                                    self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                                }
                                if dict.keys.contains("SatisfactionSurveysResponded") {
                                    self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                                }
                                if dict.keys.contains("ServiceLevel20") {
                                    self.serviceLevel20 = dict["ServiceLevel20"] as! Double
                                }
                                if dict.keys.contains("TotalRingTime") {
                                    self.totalRingTime = dict["TotalRingTime"] as! Int64
                                }
                                if dict.keys.contains("TotalTalkTime") {
                                    self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                                }
                                if dict.keys.contains("TotalWorkTime") {
                                    self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                                }
                            }
                        }
                        public class Outbound : Tea.TeaModel {
                            public var answerRate: Double?

                            public var averageDialingTime: Int64?

                            public var averageTalkTime: Int64?

                            public var averageWorkTime: Int64?

                            public var callsAnswered: Int64?

                            public var callsDialed: Int64?

                            public var maxDialingTime: Int64?

                            public var maxTalkTime: Int64?

                            public var maxWorkTime: Int64?

                            public var satisfactionIndex: Double?

                            public var satisfactionSurveysOffered: Int64?

                            public var satisfactionSurveysResponded: Int64?

                            public var totalDialingTime: Int64?

                            public var totalTalkTime: Int64?

                            public var totalWorkTime: Int64?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.answerRate != nil {
                                    map["AnswerRate"] = self.answerRate!
                                }
                                if self.averageDialingTime != nil {
                                    map["AverageDialingTime"] = self.averageDialingTime!
                                }
                                if self.averageTalkTime != nil {
                                    map["AverageTalkTime"] = self.averageTalkTime!
                                }
                                if self.averageWorkTime != nil {
                                    map["AverageWorkTime"] = self.averageWorkTime!
                                }
                                if self.callsAnswered != nil {
                                    map["CallsAnswered"] = self.callsAnswered!
                                }
                                if self.callsDialed != nil {
                                    map["CallsDialed"] = self.callsDialed!
                                }
                                if self.maxDialingTime != nil {
                                    map["MaxDialingTime"] = self.maxDialingTime!
                                }
                                if self.maxTalkTime != nil {
                                    map["MaxTalkTime"] = self.maxTalkTime!
                                }
                                if self.maxWorkTime != nil {
                                    map["MaxWorkTime"] = self.maxWorkTime!
                                }
                                if self.satisfactionIndex != nil {
                                    map["SatisfactionIndex"] = self.satisfactionIndex!
                                }
                                if self.satisfactionSurveysOffered != nil {
                                    map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                                }
                                if self.satisfactionSurveysResponded != nil {
                                    map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                                }
                                if self.totalDialingTime != nil {
                                    map["TotalDialingTime"] = self.totalDialingTime!
                                }
                                if self.totalTalkTime != nil {
                                    map["TotalTalkTime"] = self.totalTalkTime!
                                }
                                if self.totalWorkTime != nil {
                                    map["TotalWorkTime"] = self.totalWorkTime!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("AnswerRate") {
                                    self.answerRate = dict["AnswerRate"] as! Double
                                }
                                if dict.keys.contains("AverageDialingTime") {
                                    self.averageDialingTime = dict["AverageDialingTime"] as! Int64
                                }
                                if dict.keys.contains("AverageTalkTime") {
                                    self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                                }
                                if dict.keys.contains("AverageWorkTime") {
                                    self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                                }
                                if dict.keys.contains("CallsAnswered") {
                                    self.callsAnswered = dict["CallsAnswered"] as! Int64
                                }
                                if dict.keys.contains("CallsDialed") {
                                    self.callsDialed = dict["CallsDialed"] as! Int64
                                }
                                if dict.keys.contains("MaxDialingTime") {
                                    self.maxDialingTime = dict["MaxDialingTime"] as! Int64
                                }
                                if dict.keys.contains("MaxTalkTime") {
                                    self.maxTalkTime = dict["MaxTalkTime"] as! Int64
                                }
                                if dict.keys.contains("MaxWorkTime") {
                                    self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                                }
                                if dict.keys.contains("SatisfactionIndex") {
                                    self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                                }
                                if dict.keys.contains("SatisfactionSurveysOffered") {
                                    self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                                }
                                if dict.keys.contains("SatisfactionSurveysResponded") {
                                    self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                                }
                                if dict.keys.contains("TotalDialingTime") {
                                    self.totalDialingTime = dict["TotalDialingTime"] as! Int64
                                }
                                if dict.keys.contains("TotalTalkTime") {
                                    self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                                }
                                if dict.keys.contains("TotalWorkTime") {
                                    self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                                }
                            }
                        }
                        public class Overall : Tea.TeaModel {
                            public var averageReadyTime: Int64?

                            public var averageTalkTime: Int64?

                            public var averageWorkTime: Int64?

                            public var firstLogInTime: String?

                            public var lastLogOutTime: String?

                            public var maxReadyTime: Int64?

                            public var maxTalkTime: Int64?

                            public var maxWorkTime: Int64?

                            public var occupancyRate: Double?

                            public var oneTransferCalls: Int64?

                            public var satisfactionIndex: Double?

                            public var satisfactionSurveysOffered: Int64?

                            public var satisfactionSurveysResponded: Int64?

                            public var totalBreakTime: Int64?

                            public var totalCalls: Int64?

                            public var totalLoggedInTime: Int64?

                            public var totalReadyTime: Int64?

                            public var totalTalkTime: Int64?

                            public var totalWorkTime: Int64?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.averageReadyTime != nil {
                                    map["AverageReadyTime"] = self.averageReadyTime!
                                }
                                if self.averageTalkTime != nil {
                                    map["AverageTalkTime"] = self.averageTalkTime!
                                }
                                if self.averageWorkTime != nil {
                                    map["AverageWorkTime"] = self.averageWorkTime!
                                }
                                if self.firstLogInTime != nil {
                                    map["FirstLogInTime"] = self.firstLogInTime!
                                }
                                if self.lastLogOutTime != nil {
                                    map["LastLogOutTime"] = self.lastLogOutTime!
                                }
                                if self.maxReadyTime != nil {
                                    map["MaxReadyTime"] = self.maxReadyTime!
                                }
                                if self.maxTalkTime != nil {
                                    map["MaxTalkTime"] = self.maxTalkTime!
                                }
                                if self.maxWorkTime != nil {
                                    map["MaxWorkTime"] = self.maxWorkTime!
                                }
                                if self.occupancyRate != nil {
                                    map["OccupancyRate"] = self.occupancyRate!
                                }
                                if self.oneTransferCalls != nil {
                                    map["OneTransferCalls"] = self.oneTransferCalls!
                                }
                                if self.satisfactionIndex != nil {
                                    map["SatisfactionIndex"] = self.satisfactionIndex!
                                }
                                if self.satisfactionSurveysOffered != nil {
                                    map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                                }
                                if self.satisfactionSurveysResponded != nil {
                                    map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                                }
                                if self.totalBreakTime != nil {
                                    map["TotalBreakTime"] = self.totalBreakTime!
                                }
                                if self.totalCalls != nil {
                                    map["TotalCalls"] = self.totalCalls!
                                }
                                if self.totalLoggedInTime != nil {
                                    map["TotalLoggedInTime"] = self.totalLoggedInTime!
                                }
                                if self.totalReadyTime != nil {
                                    map["TotalReadyTime"] = self.totalReadyTime!
                                }
                                if self.totalTalkTime != nil {
                                    map["TotalTalkTime"] = self.totalTalkTime!
                                }
                                if self.totalWorkTime != nil {
                                    map["TotalWorkTime"] = self.totalWorkTime!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("AverageReadyTime") {
                                    self.averageReadyTime = dict["AverageReadyTime"] as! Int64
                                }
                                if dict.keys.contains("AverageTalkTime") {
                                    self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                                }
                                if dict.keys.contains("AverageWorkTime") {
                                    self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                                }
                                if dict.keys.contains("FirstLogInTime") {
                                    self.firstLogInTime = dict["FirstLogInTime"] as! String
                                }
                                if dict.keys.contains("LastLogOutTime") {
                                    self.lastLogOutTime = dict["LastLogOutTime"] as! String
                                }
                                if dict.keys.contains("MaxReadyTime") {
                                    self.maxReadyTime = dict["MaxReadyTime"] as! Int64
                                }
                                if dict.keys.contains("MaxTalkTime") {
                                    self.maxTalkTime = dict["MaxTalkTime"] as! Int64
                                }
                                if dict.keys.contains("MaxWorkTime") {
                                    self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                                }
                                if dict.keys.contains("OccupancyRate") {
                                    self.occupancyRate = dict["OccupancyRate"] as! Double
                                }
                                if dict.keys.contains("OneTransferCalls") {
                                    self.oneTransferCalls = dict["OneTransferCalls"] as! Int64
                                }
                                if dict.keys.contains("SatisfactionIndex") {
                                    self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                                }
                                if dict.keys.contains("SatisfactionSurveysOffered") {
                                    self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                                }
                                if dict.keys.contains("SatisfactionSurveysResponded") {
                                    self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                                }
                                if dict.keys.contains("TotalBreakTime") {
                                    self.totalBreakTime = dict["TotalBreakTime"] as! Int64
                                }
                                if dict.keys.contains("TotalCalls") {
                                    self.totalCalls = dict["TotalCalls"] as! Int64
                                }
                                if dict.keys.contains("TotalLoggedInTime") {
                                    self.totalLoggedInTime = dict["TotalLoggedInTime"] as! Int64
                                }
                                if dict.keys.contains("TotalReadyTime") {
                                    self.totalReadyTime = dict["TotalReadyTime"] as! Int64
                                }
                                if dict.keys.contains("TotalTalkTime") {
                                    self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                                }
                                if dict.keys.contains("TotalWorkTime") {
                                    self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                                }
                            }
                        }
                        public var agentId: String?

                        public var agentName: String?

                        public var inbound: ListAgentSummaryReportsByIntervalResponseBody.PagedAgentSummaryReport.List.AgentTimeIntervalReport.IntervalList.AgentSummaryReport.Inbound?

                        public var instanceId: String?

                        public var loginName: String?

                        public var outbound: ListAgentSummaryReportsByIntervalResponseBody.PagedAgentSummaryReport.List.AgentTimeIntervalReport.IntervalList.AgentSummaryReport.Outbound?

                        public var overall: ListAgentSummaryReportsByIntervalResponseBody.PagedAgentSummaryReport.List.AgentTimeIntervalReport.IntervalList.AgentSummaryReport.Overall?

                        public var skillGroupIds: String?

                        public var skillGroupNames: String?

                        public var timestamp: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                            try self.inbound?.validate()
                            try self.outbound?.validate()
                            try self.overall?.validate()
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.agentId != nil {
                                map["AgentId"] = self.agentId!
                            }
                            if self.agentName != nil {
                                map["AgentName"] = self.agentName!
                            }
                            if self.inbound != nil {
                                map["Inbound"] = self.inbound?.toMap()
                            }
                            if self.instanceId != nil {
                                map["InstanceId"] = self.instanceId!
                            }
                            if self.loginName != nil {
                                map["LoginName"] = self.loginName!
                            }
                            if self.outbound != nil {
                                map["Outbound"] = self.outbound?.toMap()
                            }
                            if self.overall != nil {
                                map["Overall"] = self.overall?.toMap()
                            }
                            if self.skillGroupIds != nil {
                                map["SkillGroupIds"] = self.skillGroupIds!
                            }
                            if self.skillGroupNames != nil {
                                map["SkillGroupNames"] = self.skillGroupNames!
                            }
                            if self.timestamp != nil {
                                map["Timestamp"] = self.timestamp!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("AgentId") {
                                self.agentId = dict["AgentId"] as! String
                            }
                            if dict.keys.contains("AgentName") {
                                self.agentName = dict["AgentName"] as! String
                            }
                            if dict.keys.contains("Inbound") {
                                var model = ListAgentSummaryReportsByIntervalResponseBody.PagedAgentSummaryReport.List.AgentTimeIntervalReport.IntervalList.AgentSummaryReport.Inbound()
                                model.fromMap(dict["Inbound"] as! [String: Any])
                                self.inbound = model
                            }
                            if dict.keys.contains("InstanceId") {
                                self.instanceId = dict["InstanceId"] as! String
                            }
                            if dict.keys.contains("LoginName") {
                                self.loginName = dict["LoginName"] as! String
                            }
                            if dict.keys.contains("Outbound") {
                                var model = ListAgentSummaryReportsByIntervalResponseBody.PagedAgentSummaryReport.List.AgentTimeIntervalReport.IntervalList.AgentSummaryReport.Outbound()
                                model.fromMap(dict["Outbound"] as! [String: Any])
                                self.outbound = model
                            }
                            if dict.keys.contains("Overall") {
                                var model = ListAgentSummaryReportsByIntervalResponseBody.PagedAgentSummaryReport.List.AgentTimeIntervalReport.IntervalList.AgentSummaryReport.Overall()
                                model.fromMap(dict["Overall"] as! [String: Any])
                                self.overall = model
                            }
                            if dict.keys.contains("SkillGroupIds") {
                                self.skillGroupIds = dict["SkillGroupIds"] as! String
                            }
                            if dict.keys.contains("SkillGroupNames") {
                                self.skillGroupNames = dict["SkillGroupNames"] as! String
                            }
                            if dict.keys.contains("Timestamp") {
                                self.timestamp = dict["Timestamp"] as! String
                            }
                        }
                    }
                    public var agentSummaryReport: [ListAgentSummaryReportsByIntervalResponseBody.PagedAgentSummaryReport.List.AgentTimeIntervalReport.IntervalList.AgentSummaryReport]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.agentSummaryReport != nil {
                            var tmp : [Any] = []
                            for k in self.agentSummaryReport! {
                                tmp.append(k.toMap())
                            }
                            map["AgentSummaryReport"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("AgentSummaryReport") {
                            self.agentSummaryReport = dict["AgentSummaryReport"] as! [ListAgentSummaryReportsByIntervalResponseBody.PagedAgentSummaryReport.List.AgentTimeIntervalReport.IntervalList.AgentSummaryReport]
                        }
                    }
                }
                public var agentId: String?

                public var intervalList: ListAgentSummaryReportsByIntervalResponseBody.PagedAgentSummaryReport.List.AgentTimeIntervalReport.IntervalList?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.intervalList?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.agentId != nil {
                        map["AgentId"] = self.agentId!
                    }
                    if self.intervalList != nil {
                        map["IntervalList"] = self.intervalList?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("AgentId") {
                        self.agentId = dict["AgentId"] as! String
                    }
                    if dict.keys.contains("IntervalList") {
                        var model = ListAgentSummaryReportsByIntervalResponseBody.PagedAgentSummaryReport.List.AgentTimeIntervalReport.IntervalList()
                        model.fromMap(dict["IntervalList"] as! [String: Any])
                        self.intervalList = model
                    }
                }
            }
            public var agentTimeIntervalReport: [ListAgentSummaryReportsByIntervalResponseBody.PagedAgentSummaryReport.List.AgentTimeIntervalReport]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.agentTimeIntervalReport != nil {
                    var tmp : [Any] = []
                    for k in self.agentTimeIntervalReport! {
                        tmp.append(k.toMap())
                    }
                    map["AgentTimeIntervalReport"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("AgentTimeIntervalReport") {
                    self.agentTimeIntervalReport = dict["AgentTimeIntervalReport"] as! [ListAgentSummaryReportsByIntervalResponseBody.PagedAgentSummaryReport.List.AgentTimeIntervalReport]
                }
            }
        }
        public var list: ListAgentSummaryReportsByIntervalResponseBody.PagedAgentSummaryReport.List?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.list?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                map["List"] = self.list?.toMap()
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("List") {
                var model = ListAgentSummaryReportsByIntervalResponseBody.PagedAgentSummaryReport.List()
                model.fromMap(dict["List"] as! [String: Any])
                self.list = model
            }
            if dict.keys.contains("PageNumber") {
                self.pageNumber = dict["PageNumber"] as! Int32
            }
            if dict.keys.contains("PageSize") {
                self.pageSize = dict["PageSize"] as! Int32
            }
            if dict.keys.contains("TotalCount") {
                self.totalCount = dict["TotalCount"] as! Int32
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pagedAgentSummaryReport: ListAgentSummaryReportsByIntervalResponseBody.PagedAgentSummaryReport?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pagedAgentSummaryReport?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pagedAgentSummaryReport != nil {
            map["PagedAgentSummaryReport"] = self.pagedAgentSummaryReport?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("PagedAgentSummaryReport") {
            var model = ListAgentSummaryReportsByIntervalResponseBody.PagedAgentSummaryReport()
            model.fromMap(dict["PagedAgentSummaryReport"] as! [String: Any])
            self.pagedAgentSummaryReport = model
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListAgentSummaryReportsByIntervalResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAgentSummaryReportsByIntervalResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListAgentSummaryReportsByIntervalResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListAgentSummaryReportsSinceMidnightRequest : Tea.TeaModel {
    public var agentIds: String?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var skillGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentIds != nil {
            map["AgentIds"] = self.agentIds!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("AgentIds") {
            self.agentIds = dict["AgentIds"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("PageNumber") {
            self.pageNumber = dict["PageNumber"] as! Int32
        }
        if dict.keys.contains("PageSize") {
            self.pageSize = dict["PageSize"] as! Int32
        }
        if dict.keys.contains("SkillGroupId") {
            self.skillGroupId = dict["SkillGroupId"] as! String
        }
    }
}

public class ListAgentSummaryReportsSinceMidnightResponseBody : Tea.TeaModel {
    public class PagedAgentSummaryReport : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class AgentSummaryReport : Tea.TeaModel {
                public class Inbound : Tea.TeaModel {
                    public var averageRingTime: Int64?

                    public var averageTalkTime: Int64?

                    public var averageWorkTime: Int64?

                    public var callsHandled: Int64?

                    public var callsOffered: Int64?

                    public var handleRate: Double?

                    public var maxRingTime: Int64?

                    public var maxTalkTime: Int64?

                    public var maxWorkTime: Int64?

                    public var satisfactionIndex: Double?

                    public var satisfactionSurveysOffered: Int64?

                    public var satisfactionSurveysResponded: Int64?

                    public var serviceLevel20: Double?

                    public var totalRingTime: Int64?

                    public var totalTalkTime: Int64?

                    public var totalWorkTime: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.averageRingTime != nil {
                            map["AverageRingTime"] = self.averageRingTime!
                        }
                        if self.averageTalkTime != nil {
                            map["AverageTalkTime"] = self.averageTalkTime!
                        }
                        if self.averageWorkTime != nil {
                            map["AverageWorkTime"] = self.averageWorkTime!
                        }
                        if self.callsHandled != nil {
                            map["CallsHandled"] = self.callsHandled!
                        }
                        if self.callsOffered != nil {
                            map["CallsOffered"] = self.callsOffered!
                        }
                        if self.handleRate != nil {
                            map["HandleRate"] = self.handleRate!
                        }
                        if self.maxRingTime != nil {
                            map["MaxRingTime"] = self.maxRingTime!
                        }
                        if self.maxTalkTime != nil {
                            map["MaxTalkTime"] = self.maxTalkTime!
                        }
                        if self.maxWorkTime != nil {
                            map["MaxWorkTime"] = self.maxWorkTime!
                        }
                        if self.satisfactionIndex != nil {
                            map["SatisfactionIndex"] = self.satisfactionIndex!
                        }
                        if self.satisfactionSurveysOffered != nil {
                            map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                        }
                        if self.satisfactionSurveysResponded != nil {
                            map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                        }
                        if self.serviceLevel20 != nil {
                            map["ServiceLevel20"] = self.serviceLevel20!
                        }
                        if self.totalRingTime != nil {
                            map["TotalRingTime"] = self.totalRingTime!
                        }
                        if self.totalTalkTime != nil {
                            map["TotalTalkTime"] = self.totalTalkTime!
                        }
                        if self.totalWorkTime != nil {
                            map["TotalWorkTime"] = self.totalWorkTime!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("AverageRingTime") {
                            self.averageRingTime = dict["AverageRingTime"] as! Int64
                        }
                        if dict.keys.contains("AverageTalkTime") {
                            self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                        }
                        if dict.keys.contains("AverageWorkTime") {
                            self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                        }
                        if dict.keys.contains("CallsHandled") {
                            self.callsHandled = dict["CallsHandled"] as! Int64
                        }
                        if dict.keys.contains("CallsOffered") {
                            self.callsOffered = dict["CallsOffered"] as! Int64
                        }
                        if dict.keys.contains("HandleRate") {
                            self.handleRate = dict["HandleRate"] as! Double
                        }
                        if dict.keys.contains("MaxRingTime") {
                            self.maxRingTime = dict["MaxRingTime"] as! Int64
                        }
                        if dict.keys.contains("MaxTalkTime") {
                            self.maxTalkTime = dict["MaxTalkTime"] as! Int64
                        }
                        if dict.keys.contains("MaxWorkTime") {
                            self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionIndex") {
                            self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                        }
                        if dict.keys.contains("SatisfactionSurveysOffered") {
                            self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionSurveysResponded") {
                            self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                        }
                        if dict.keys.contains("ServiceLevel20") {
                            self.serviceLevel20 = dict["ServiceLevel20"] as! Double
                        }
                        if dict.keys.contains("TotalRingTime") {
                            self.totalRingTime = dict["TotalRingTime"] as! Int64
                        }
                        if dict.keys.contains("TotalTalkTime") {
                            self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                        }
                        if dict.keys.contains("TotalWorkTime") {
                            self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                        }
                    }
                }
                public class Outbound : Tea.TeaModel {
                    public var answerRate: Double?

                    public var averageDialingTime: Int64?

                    public var averageTalkTime: Int64?

                    public var averageWorkTime: Int64?

                    public var callsAnswered: Int64?

                    public var callsDialed: Int64?

                    public var maxDialingTime: Int64?

                    public var maxTalkTime: Int64?

                    public var maxWorkTime: String?

                    public var satisfactionIndex: Double?

                    public var satisfactionSurveysOffered: Int64?

                    public var satisfactionSurveysResponded: Int64?

                    public var totalDialingTime: Int64?

                    public var totalTalkTime: Int64?

                    public var totalWorkTime: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.answerRate != nil {
                            map["AnswerRate"] = self.answerRate!
                        }
                        if self.averageDialingTime != nil {
                            map["AverageDialingTime"] = self.averageDialingTime!
                        }
                        if self.averageTalkTime != nil {
                            map["AverageTalkTime"] = self.averageTalkTime!
                        }
                        if self.averageWorkTime != nil {
                            map["AverageWorkTime"] = self.averageWorkTime!
                        }
                        if self.callsAnswered != nil {
                            map["CallsAnswered"] = self.callsAnswered!
                        }
                        if self.callsDialed != nil {
                            map["CallsDialed"] = self.callsDialed!
                        }
                        if self.maxDialingTime != nil {
                            map["MaxDialingTime"] = self.maxDialingTime!
                        }
                        if self.maxTalkTime != nil {
                            map["MaxTalkTime"] = self.maxTalkTime!
                        }
                        if self.maxWorkTime != nil {
                            map["MaxWorkTime"] = self.maxWorkTime!
                        }
                        if self.satisfactionIndex != nil {
                            map["SatisfactionIndex"] = self.satisfactionIndex!
                        }
                        if self.satisfactionSurveysOffered != nil {
                            map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                        }
                        if self.satisfactionSurveysResponded != nil {
                            map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                        }
                        if self.totalDialingTime != nil {
                            map["TotalDialingTime"] = self.totalDialingTime!
                        }
                        if self.totalTalkTime != nil {
                            map["TotalTalkTime"] = self.totalTalkTime!
                        }
                        if self.totalWorkTime != nil {
                            map["TotalWorkTime"] = self.totalWorkTime!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("AnswerRate") {
                            self.answerRate = dict["AnswerRate"] as! Double
                        }
                        if dict.keys.contains("AverageDialingTime") {
                            self.averageDialingTime = dict["AverageDialingTime"] as! Int64
                        }
                        if dict.keys.contains("AverageTalkTime") {
                            self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                        }
                        if dict.keys.contains("AverageWorkTime") {
                            self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                        }
                        if dict.keys.contains("CallsAnswered") {
                            self.callsAnswered = dict["CallsAnswered"] as! Int64
                        }
                        if dict.keys.contains("CallsDialed") {
                            self.callsDialed = dict["CallsDialed"] as! Int64
                        }
                        if dict.keys.contains("MaxDialingTime") {
                            self.maxDialingTime = dict["MaxDialingTime"] as! Int64
                        }
                        if dict.keys.contains("MaxTalkTime") {
                            self.maxTalkTime = dict["MaxTalkTime"] as! Int64
                        }
                        if dict.keys.contains("MaxWorkTime") {
                            self.maxWorkTime = dict["MaxWorkTime"] as! String
                        }
                        if dict.keys.contains("SatisfactionIndex") {
                            self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                        }
                        if dict.keys.contains("SatisfactionSurveysOffered") {
                            self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionSurveysResponded") {
                            self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                        }
                        if dict.keys.contains("TotalDialingTime") {
                            self.totalDialingTime = dict["TotalDialingTime"] as! Int64
                        }
                        if dict.keys.contains("TotalTalkTime") {
                            self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                        }
                        if dict.keys.contains("TotalWorkTime") {
                            self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                        }
                    }
                }
                public class Overall : Tea.TeaModel {
                    public var averageReadyTime: Int64?

                    public var averageTalkTime: Int64?

                    public var averageWorkTime: Int64?

                    public var maxReadyTime: Int64?

                    public var maxTalkTime: Int64?

                    public var maxWorkTime: Int64?

                    public var occupancyRate: Double?

                    public var oneTransferCalls: Int64?

                    public var satisfactionIndex: Double?

                    public var satisfactionSurveysOffered: Int64?

                    public var satisfactionSurveysResponded: Int64?

                    public var totalBreakTime: Int64?

                    public var totalCalls: Int64?

                    public var totalLoggedInTime: Int64?

                    public var totalReadyTime: Int64?

                    public var totalTalkTime: Int64?

                    public var totalWorkTime: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.averageReadyTime != nil {
                            map["AverageReadyTime"] = self.averageReadyTime!
                        }
                        if self.averageTalkTime != nil {
                            map["AverageTalkTime"] = self.averageTalkTime!
                        }
                        if self.averageWorkTime != nil {
                            map["AverageWorkTime"] = self.averageWorkTime!
                        }
                        if self.maxReadyTime != nil {
                            map["MaxReadyTime"] = self.maxReadyTime!
                        }
                        if self.maxTalkTime != nil {
                            map["MaxTalkTime"] = self.maxTalkTime!
                        }
                        if self.maxWorkTime != nil {
                            map["MaxWorkTime"] = self.maxWorkTime!
                        }
                        if self.occupancyRate != nil {
                            map["OccupancyRate"] = self.occupancyRate!
                        }
                        if self.oneTransferCalls != nil {
                            map["OneTransferCalls"] = self.oneTransferCalls!
                        }
                        if self.satisfactionIndex != nil {
                            map["SatisfactionIndex"] = self.satisfactionIndex!
                        }
                        if self.satisfactionSurveysOffered != nil {
                            map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                        }
                        if self.satisfactionSurveysResponded != nil {
                            map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                        }
                        if self.totalBreakTime != nil {
                            map["TotalBreakTime"] = self.totalBreakTime!
                        }
                        if self.totalCalls != nil {
                            map["TotalCalls"] = self.totalCalls!
                        }
                        if self.totalLoggedInTime != nil {
                            map["TotalLoggedInTime"] = self.totalLoggedInTime!
                        }
                        if self.totalReadyTime != nil {
                            map["TotalReadyTime"] = self.totalReadyTime!
                        }
                        if self.totalTalkTime != nil {
                            map["TotalTalkTime"] = self.totalTalkTime!
                        }
                        if self.totalWorkTime != nil {
                            map["TotalWorkTime"] = self.totalWorkTime!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("AverageReadyTime") {
                            self.averageReadyTime = dict["AverageReadyTime"] as! Int64
                        }
                        if dict.keys.contains("AverageTalkTime") {
                            self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                        }
                        if dict.keys.contains("AverageWorkTime") {
                            self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                        }
                        if dict.keys.contains("MaxReadyTime") {
                            self.maxReadyTime = dict["MaxReadyTime"] as! Int64
                        }
                        if dict.keys.contains("MaxTalkTime") {
                            self.maxTalkTime = dict["MaxTalkTime"] as! Int64
                        }
                        if dict.keys.contains("MaxWorkTime") {
                            self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                        }
                        if dict.keys.contains("OccupancyRate") {
                            self.occupancyRate = dict["OccupancyRate"] as! Double
                        }
                        if dict.keys.contains("OneTransferCalls") {
                            self.oneTransferCalls = dict["OneTransferCalls"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionIndex") {
                            self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                        }
                        if dict.keys.contains("SatisfactionSurveysOffered") {
                            self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionSurveysResponded") {
                            self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                        }
                        if dict.keys.contains("TotalBreakTime") {
                            self.totalBreakTime = dict["TotalBreakTime"] as! Int64
                        }
                        if dict.keys.contains("TotalCalls") {
                            self.totalCalls = dict["TotalCalls"] as! Int64
                        }
                        if dict.keys.contains("TotalLoggedInTime") {
                            self.totalLoggedInTime = dict["TotalLoggedInTime"] as! Int64
                        }
                        if dict.keys.contains("TotalReadyTime") {
                            self.totalReadyTime = dict["TotalReadyTime"] as! Int64
                        }
                        if dict.keys.contains("TotalTalkTime") {
                            self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                        }
                        if dict.keys.contains("TotalWorkTime") {
                            self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                        }
                    }
                }
                public var agentId: String?

                public var agentName: String?

                public var inbound: ListAgentSummaryReportsSinceMidnightResponseBody.PagedAgentSummaryReport.List.AgentSummaryReport.Inbound?

                public var instanceId: String?

                public var loginName: String?

                public var outbound: ListAgentSummaryReportsSinceMidnightResponseBody.PagedAgentSummaryReport.List.AgentSummaryReport.Outbound?

                public var overall: ListAgentSummaryReportsSinceMidnightResponseBody.PagedAgentSummaryReport.List.AgentSummaryReport.Overall?

                public var skillGroupIds: String?

                public var skillGroupNames: String?

                public var timestamp: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.inbound?.validate()
                    try self.outbound?.validate()
                    try self.overall?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.agentId != nil {
                        map["AgentId"] = self.agentId!
                    }
                    if self.agentName != nil {
                        map["AgentName"] = self.agentName!
                    }
                    if self.inbound != nil {
                        map["Inbound"] = self.inbound?.toMap()
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.loginName != nil {
                        map["LoginName"] = self.loginName!
                    }
                    if self.outbound != nil {
                        map["Outbound"] = self.outbound?.toMap()
                    }
                    if self.overall != nil {
                        map["Overall"] = self.overall?.toMap()
                    }
                    if self.skillGroupIds != nil {
                        map["SkillGroupIds"] = self.skillGroupIds!
                    }
                    if self.skillGroupNames != nil {
                        map["SkillGroupNames"] = self.skillGroupNames!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("AgentId") {
                        self.agentId = dict["AgentId"] as! String
                    }
                    if dict.keys.contains("AgentName") {
                        self.agentName = dict["AgentName"] as! String
                    }
                    if dict.keys.contains("Inbound") {
                        var model = ListAgentSummaryReportsSinceMidnightResponseBody.PagedAgentSummaryReport.List.AgentSummaryReport.Inbound()
                        model.fromMap(dict["Inbound"] as! [String: Any])
                        self.inbound = model
                    }
                    if dict.keys.contains("InstanceId") {
                        self.instanceId = dict["InstanceId"] as! String
                    }
                    if dict.keys.contains("LoginName") {
                        self.loginName = dict["LoginName"] as! String
                    }
                    if dict.keys.contains("Outbound") {
                        var model = ListAgentSummaryReportsSinceMidnightResponseBody.PagedAgentSummaryReport.List.AgentSummaryReport.Outbound()
                        model.fromMap(dict["Outbound"] as! [String: Any])
                        self.outbound = model
                    }
                    if dict.keys.contains("Overall") {
                        var model = ListAgentSummaryReportsSinceMidnightResponseBody.PagedAgentSummaryReport.List.AgentSummaryReport.Overall()
                        model.fromMap(dict["Overall"] as! [String: Any])
                        self.overall = model
                    }
                    if dict.keys.contains("SkillGroupIds") {
                        self.skillGroupIds = dict["SkillGroupIds"] as! String
                    }
                    if dict.keys.contains("SkillGroupNames") {
                        self.skillGroupNames = dict["SkillGroupNames"] as! String
                    }
                    if dict.keys.contains("Timestamp") {
                        self.timestamp = dict["Timestamp"] as! String
                    }
                }
            }
            public var agentSummaryReport: [ListAgentSummaryReportsSinceMidnightResponseBody.PagedAgentSummaryReport.List.AgentSummaryReport]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.agentSummaryReport != nil {
                    var tmp : [Any] = []
                    for k in self.agentSummaryReport! {
                        tmp.append(k.toMap())
                    }
                    map["AgentSummaryReport"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("AgentSummaryReport") {
                    self.agentSummaryReport = dict["AgentSummaryReport"] as! [ListAgentSummaryReportsSinceMidnightResponseBody.PagedAgentSummaryReport.List.AgentSummaryReport]
                }
            }
        }
        public var list: ListAgentSummaryReportsSinceMidnightResponseBody.PagedAgentSummaryReport.List?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.list?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                map["List"] = self.list?.toMap()
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("List") {
                var model = ListAgentSummaryReportsSinceMidnightResponseBody.PagedAgentSummaryReport.List()
                model.fromMap(dict["List"] as! [String: Any])
                self.list = model
            }
            if dict.keys.contains("PageNumber") {
                self.pageNumber = dict["PageNumber"] as! Int32
            }
            if dict.keys.contains("PageSize") {
                self.pageSize = dict["PageSize"] as! Int32
            }
            if dict.keys.contains("TotalCount") {
                self.totalCount = dict["TotalCount"] as! Int32
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pagedAgentSummaryReport: ListAgentSummaryReportsSinceMidnightResponseBody.PagedAgentSummaryReport?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pagedAgentSummaryReport?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pagedAgentSummaryReport != nil {
            map["PagedAgentSummaryReport"] = self.pagedAgentSummaryReport?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("PagedAgentSummaryReport") {
            var model = ListAgentSummaryReportsSinceMidnightResponseBody.PagedAgentSummaryReport()
            model.fromMap(dict["PagedAgentSummaryReport"] as! [String: Any])
            self.pagedAgentSummaryReport = model
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListAgentSummaryReportsSinceMidnightResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAgentSummaryReportsSinceMidnightResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListAgentSummaryReportsSinceMidnightResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListCallDetailRecordsRequest : Tea.TeaModel {
    public var contactDisposition: String?

    public var contactId: String?

    public var contactType: String?

    public var criteria: String?

    public var instanceId: String?

    public var orderBy: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var phoneNumber: String?

    public var startTime: Int64?

    public var stopTime: Int64?

    public var withRecording: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactDisposition != nil {
            map["ContactDisposition"] = self.contactDisposition!
        }
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.contactType != nil {
            map["ContactType"] = self.contactType!
        }
        if self.criteria != nil {
            map["Criteria"] = self.criteria!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.orderBy != nil {
            map["OrderBy"] = self.orderBy!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.phoneNumber != nil {
            map["PhoneNumber"] = self.phoneNumber!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.stopTime != nil {
            map["StopTime"] = self.stopTime!
        }
        if self.withRecording != nil {
            map["WithRecording"] = self.withRecording!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("ContactDisposition") {
            self.contactDisposition = dict["ContactDisposition"] as! String
        }
        if dict.keys.contains("ContactId") {
            self.contactId = dict["ContactId"] as! String
        }
        if dict.keys.contains("ContactType") {
            self.contactType = dict["ContactType"] as! String
        }
        if dict.keys.contains("Criteria") {
            self.criteria = dict["Criteria"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("OrderBy") {
            self.orderBy = dict["OrderBy"] as! String
        }
        if dict.keys.contains("PageNumber") {
            self.pageNumber = dict["PageNumber"] as! Int32
        }
        if dict.keys.contains("PageSize") {
            self.pageSize = dict["PageSize"] as! Int32
        }
        if dict.keys.contains("PhoneNumber") {
            self.phoneNumber = dict["PhoneNumber"] as! String
        }
        if dict.keys.contains("StartTime") {
            self.startTime = dict["StartTime"] as! Int64
        }
        if dict.keys.contains("StopTime") {
            self.stopTime = dict["StopTime"] as! Int64
        }
        if dict.keys.contains("WithRecording") {
            self.withRecording = dict["WithRecording"] as! Bool
        }
    }
}

public class ListCallDetailRecordsResponseBody : Tea.TeaModel {
    public class CallDetailRecords : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class CallDetailRecord : Tea.TeaModel {
                public class Agents : Tea.TeaModel {
                    public class CallDetailAgent : Tea.TeaModel {
                        public var agentId: String?

                        public var feedback: String?

                        public var satisfaction: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.agentId != nil {
                                map["AgentId"] = self.agentId!
                            }
                            if self.feedback != nil {
                                map["Feedback"] = self.feedback!
                            }
                            if self.satisfaction != nil {
                                map["Satisfaction"] = self.satisfaction!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("AgentId") {
                                self.agentId = dict["AgentId"] as! String
                            }
                            if dict.keys.contains("Feedback") {
                                self.feedback = dict["Feedback"] as! String
                            }
                            if dict.keys.contains("Satisfaction") {
                                self.satisfaction = dict["Satisfaction"] as! String
                            }
                        }
                    }
                    public var callDetailAgent: [ListCallDetailRecordsResponseBody.CallDetailRecords.List.CallDetailRecord.Agents.CallDetailAgent]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.callDetailAgent != nil {
                            var tmp : [Any] = []
                            for k in self.callDetailAgent! {
                                tmp.append(k.toMap())
                            }
                            map["CallDetailAgent"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("CallDetailAgent") {
                            self.callDetailAgent = dict["CallDetailAgent"] as! [ListCallDetailRecordsResponseBody.CallDetailRecords.List.CallDetailRecord.Agents.CallDetailAgent]
                        }
                    }
                }
                public class Recordings : Tea.TeaModel {
                    public class Recording : Tea.TeaModel {
                        public var agentId: String?

                        public var agentName: String?

                        public var contactId: String?

                        public var duration: Int32?

                        public var fileDescription: String?

                        public var fileName: String?

                        public var qualityCheckTaskId: String?

                        public var qualityCheckTid: String?

                        public var startTime: Int64?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.agentId != nil {
                                map["AgentId"] = self.agentId!
                            }
                            if self.agentName != nil {
                                map["AgentName"] = self.agentName!
                            }
                            if self.contactId != nil {
                                map["ContactId"] = self.contactId!
                            }
                            if self.duration != nil {
                                map["Duration"] = self.duration!
                            }
                            if self.fileDescription != nil {
                                map["FileDescription"] = self.fileDescription!
                            }
                            if self.fileName != nil {
                                map["FileName"] = self.fileName!
                            }
                            if self.qualityCheckTaskId != nil {
                                map["QualityCheckTaskId"] = self.qualityCheckTaskId!
                            }
                            if self.qualityCheckTid != nil {
                                map["QualityCheckTid"] = self.qualityCheckTid!
                            }
                            if self.startTime != nil {
                                map["StartTime"] = self.startTime!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("AgentId") {
                                self.agentId = dict["AgentId"] as! String
                            }
                            if dict.keys.contains("AgentName") {
                                self.agentName = dict["AgentName"] as! String
                            }
                            if dict.keys.contains("ContactId") {
                                self.contactId = dict["ContactId"] as! String
                            }
                            if dict.keys.contains("Duration") {
                                self.duration = dict["Duration"] as! Int32
                            }
                            if dict.keys.contains("FileDescription") {
                                self.fileDescription = dict["FileDescription"] as! String
                            }
                            if dict.keys.contains("FileName") {
                                self.fileName = dict["FileName"] as! String
                            }
                            if dict.keys.contains("QualityCheckTaskId") {
                                self.qualityCheckTaskId = dict["QualityCheckTaskId"] as! String
                            }
                            if dict.keys.contains("QualityCheckTid") {
                                self.qualityCheckTid = dict["QualityCheckTid"] as! String
                            }
                            if dict.keys.contains("StartTime") {
                                self.startTime = dict["StartTime"] as! Int64
                            }
                        }
                    }
                    public var recording: [ListCallDetailRecordsResponseBody.CallDetailRecords.List.CallDetailRecord.Recordings.Recording]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.recording != nil {
                            var tmp : [Any] = []
                            for k in self.recording! {
                                tmp.append(k.toMap())
                            }
                            map["Recording"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("Recording") {
                            self.recording = dict["Recording"] as! [ListCallDetailRecordsResponseBody.CallDetailRecords.List.CallDetailRecord.Recordings.Recording]
                        }
                    }
                }
                public var agentNames: String?

                public var agents: ListCallDetailRecordsResponseBody.CallDetailRecords.List.CallDetailRecord.Agents?

                public var calledNumber: String?

                public var callingNumber: String?

                public var contactDisposition: String?

                public var contactId: String?

                public var contactType: String?

                public var duration: Int32?

                public var feedback: String?

                public var instanceId: String?

                public var recordings: ListCallDetailRecordsResponseBody.CallDetailRecords.List.CallDetailRecord.Recordings?

                public var satisfaction: Int32?

                public var satisfactionDesc: String?

                public var skillGroupIdList: String?

                public var skillGroupNames: String?

                public var startTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.agents?.validate()
                    try self.recordings?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.agentNames != nil {
                        map["AgentNames"] = self.agentNames!
                    }
                    if self.agents != nil {
                        map["Agents"] = self.agents?.toMap()
                    }
                    if self.calledNumber != nil {
                        map["CalledNumber"] = self.calledNumber!
                    }
                    if self.callingNumber != nil {
                        map["CallingNumber"] = self.callingNumber!
                    }
                    if self.contactDisposition != nil {
                        map["ContactDisposition"] = self.contactDisposition!
                    }
                    if self.contactId != nil {
                        map["ContactId"] = self.contactId!
                    }
                    if self.contactType != nil {
                        map["ContactType"] = self.contactType!
                    }
                    if self.duration != nil {
                        map["Duration"] = self.duration!
                    }
                    if self.feedback != nil {
                        map["Feedback"] = self.feedback!
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.recordings != nil {
                        map["Recordings"] = self.recordings?.toMap()
                    }
                    if self.satisfaction != nil {
                        map["Satisfaction"] = self.satisfaction!
                    }
                    if self.satisfactionDesc != nil {
                        map["SatisfactionDesc"] = self.satisfactionDesc!
                    }
                    if self.skillGroupIdList != nil {
                        map["SkillGroupIdList"] = self.skillGroupIdList!
                    }
                    if self.skillGroupNames != nil {
                        map["SkillGroupNames"] = self.skillGroupNames!
                    }
                    if self.startTime != nil {
                        map["StartTime"] = self.startTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("AgentNames") {
                        self.agentNames = dict["AgentNames"] as! String
                    }
                    if dict.keys.contains("Agents") {
                        var model = ListCallDetailRecordsResponseBody.CallDetailRecords.List.CallDetailRecord.Agents()
                        model.fromMap(dict["Agents"] as! [String: Any])
                        self.agents = model
                    }
                    if dict.keys.contains("CalledNumber") {
                        self.calledNumber = dict["CalledNumber"] as! String
                    }
                    if dict.keys.contains("CallingNumber") {
                        self.callingNumber = dict["CallingNumber"] as! String
                    }
                    if dict.keys.contains("ContactDisposition") {
                        self.contactDisposition = dict["ContactDisposition"] as! String
                    }
                    if dict.keys.contains("ContactId") {
                        self.contactId = dict["ContactId"] as! String
                    }
                    if dict.keys.contains("ContactType") {
                        self.contactType = dict["ContactType"] as! String
                    }
                    if dict.keys.contains("Duration") {
                        self.duration = dict["Duration"] as! Int32
                    }
                    if dict.keys.contains("Feedback") {
                        self.feedback = dict["Feedback"] as! String
                    }
                    if dict.keys.contains("InstanceId") {
                        self.instanceId = dict["InstanceId"] as! String
                    }
                    if dict.keys.contains("Recordings") {
                        var model = ListCallDetailRecordsResponseBody.CallDetailRecords.List.CallDetailRecord.Recordings()
                        model.fromMap(dict["Recordings"] as! [String: Any])
                        self.recordings = model
                    }
                    if dict.keys.contains("Satisfaction") {
                        self.satisfaction = dict["Satisfaction"] as! Int32
                    }
                    if dict.keys.contains("SatisfactionDesc") {
                        self.satisfactionDesc = dict["SatisfactionDesc"] as! String
                    }
                    if dict.keys.contains("SkillGroupIdList") {
                        self.skillGroupIdList = dict["SkillGroupIdList"] as! String
                    }
                    if dict.keys.contains("SkillGroupNames") {
                        self.skillGroupNames = dict["SkillGroupNames"] as! String
                    }
                    if dict.keys.contains("StartTime") {
                        self.startTime = dict["StartTime"] as! Int64
                    }
                }
            }
            public var callDetailRecord: [ListCallDetailRecordsResponseBody.CallDetailRecords.List.CallDetailRecord]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callDetailRecord != nil {
                    var tmp : [Any] = []
                    for k in self.callDetailRecord! {
                        tmp.append(k.toMap())
                    }
                    map["CallDetailRecord"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("CallDetailRecord") {
                    self.callDetailRecord = dict["CallDetailRecord"] as! [ListCallDetailRecordsResponseBody.CallDetailRecords.List.CallDetailRecord]
                }
            }
        }
        public var list: ListCallDetailRecordsResponseBody.CallDetailRecords.List?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.list?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                map["List"] = self.list?.toMap()
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("List") {
                var model = ListCallDetailRecordsResponseBody.CallDetailRecords.List()
                model.fromMap(dict["List"] as! [String: Any])
                self.list = model
            }
            if dict.keys.contains("PageNumber") {
                self.pageNumber = dict["PageNumber"] as! Int32
            }
            if dict.keys.contains("PageSize") {
                self.pageSize = dict["PageSize"] as! Int32
            }
            if dict.keys.contains("TotalCount") {
                self.totalCount = dict["TotalCount"] as! Int32
            }
        }
    }
    public var callDetailRecords: ListCallDetailRecordsResponseBody.CallDetailRecords?

    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.callDetailRecords?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.callDetailRecords != nil {
            map["CallDetailRecords"] = self.callDetailRecords?.toMap()
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("CallDetailRecords") {
            var model = ListCallDetailRecordsResponseBody.CallDetailRecords()
            model.fromMap(dict["CallDetailRecords"] as! [String: Any])
            self.callDetailRecords = model
        }
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListCallDetailRecordsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListCallDetailRecordsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListCallDetailRecordsResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListCallEventDetailByContactIdRequest : Tea.TeaModel {
    public var contactId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("ContactId") {
            self.contactId = dict["ContactId"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
    }
}

public class ListCallEventDetailByContactIdResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Events : Tea.TeaModel {
            public class CallEventDetail : Tea.TeaModel {
                public class DetailData : Tea.TeaModel {
                    public var eventType: String?

                    public var hangUper: String?

                    public var helper: String?

                    public var satisfactionalResearch: String?

                    public var skillGroup: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.eventType != nil {
                            map["EventType"] = self.eventType!
                        }
                        if self.hangUper != nil {
                            map["HangUper"] = self.hangUper!
                        }
                        if self.helper != nil {
                            map["Helper"] = self.helper!
                        }
                        if self.satisfactionalResearch != nil {
                            map["SatisfactionalResearch"] = self.satisfactionalResearch!
                        }
                        if self.skillGroup != nil {
                            map["SkillGroup"] = self.skillGroup!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("EventType") {
                            self.eventType = dict["EventType"] as! String
                        }
                        if dict.keys.contains("HangUper") {
                            self.hangUper = dict["HangUper"] as! String
                        }
                        if dict.keys.contains("Helper") {
                            self.helper = dict["Helper"] as! String
                        }
                        if dict.keys.contains("SatisfactionalResearch") {
                            self.satisfactionalResearch = dict["SatisfactionalResearch"] as! String
                        }
                        if dict.keys.contains("SkillGroup") {
                            self.skillGroup = dict["SkillGroup"] as! String
                        }
                    }
                }
                public var agentName: String?

                public var callMode: String?

                public var detailData: ListCallEventDetailByContactIdResponseBody.Data.Events.CallEventDetail.DetailData?

                public var duration: Int32?

                public var event: String?

                public var status: String?

                public var timeStamp: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.detailData?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.agentName != nil {
                        map["AgentName"] = self.agentName!
                    }
                    if self.callMode != nil {
                        map["CallMode"] = self.callMode!
                    }
                    if self.detailData != nil {
                        map["DetailData"] = self.detailData?.toMap()
                    }
                    if self.duration != nil {
                        map["Duration"] = self.duration!
                    }
                    if self.event != nil {
                        map["Event"] = self.event!
                    }
                    if self.status != nil {
                        map["Status"] = self.status!
                    }
                    if self.timeStamp != nil {
                        map["TimeStamp"] = self.timeStamp!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("AgentName") {
                        self.agentName = dict["AgentName"] as! String
                    }
                    if dict.keys.contains("CallMode") {
                        self.callMode = dict["CallMode"] as! String
                    }
                    if dict.keys.contains("DetailData") {
                        var model = ListCallEventDetailByContactIdResponseBody.Data.Events.CallEventDetail.DetailData()
                        model.fromMap(dict["DetailData"] as! [String: Any])
                        self.detailData = model
                    }
                    if dict.keys.contains("Duration") {
                        self.duration = dict["Duration"] as! Int32
                    }
                    if dict.keys.contains("Event") {
                        self.event = dict["Event"] as! String
                    }
                    if dict.keys.contains("Status") {
                        self.status = dict["Status"] as! String
                    }
                    if dict.keys.contains("TimeStamp") {
                        self.timeStamp = dict["TimeStamp"] as! String
                    }
                }
            }
            public var callEventDetail: [ListCallEventDetailByContactIdResponseBody.Data.Events.CallEventDetail]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callEventDetail != nil {
                    var tmp : [Any] = []
                    for k in self.callEventDetail! {
                        tmp.append(k.toMap())
                    }
                    map["CallEventDetail"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("CallEventDetail") {
                    self.callEventDetail = dict["CallEventDetail"] as! [ListCallEventDetailByContactIdResponseBody.Data.Events.CallEventDetail]
                }
            }
        }
        public var callType: String?

        public var callee: String?

        public var caller: String?

        public var events: ListCallEventDetailByContactIdResponseBody.Data.Events?

        public var privacyNumber: String?

        public var releaseAgent: String?

        public var releaseReason: String?

        public var startTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.events?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callType != nil {
                map["CallType"] = self.callType!
            }
            if self.callee != nil {
                map["Callee"] = self.callee!
            }
            if self.caller != nil {
                map["Caller"] = self.caller!
            }
            if self.events != nil {
                map["Events"] = self.events?.toMap()
            }
            if self.privacyNumber != nil {
                map["PrivacyNumber"] = self.privacyNumber!
            }
            if self.releaseAgent != nil {
                map["ReleaseAgent"] = self.releaseAgent!
            }
            if self.releaseReason != nil {
                map["ReleaseReason"] = self.releaseReason!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("CallType") {
                self.callType = dict["CallType"] as! String
            }
            if dict.keys.contains("Callee") {
                self.callee = dict["Callee"] as! String
            }
            if dict.keys.contains("Caller") {
                self.caller = dict["Caller"] as! String
            }
            if dict.keys.contains("Events") {
                var model = ListCallEventDetailByContactIdResponseBody.Data.Events()
                model.fromMap(dict["Events"] as! [String: Any])
                self.events = model
            }
            if dict.keys.contains("PrivacyNumber") {
                self.privacyNumber = dict["PrivacyNumber"] as! String
            }
            if dict.keys.contains("ReleaseAgent") {
                self.releaseAgent = dict["ReleaseAgent"] as! String
            }
            if dict.keys.contains("ReleaseReason") {
                self.releaseReason = dict["ReleaseReason"] as! String
            }
            if dict.keys.contains("StartTime") {
                self.startTime = dict["StartTime"] as! String
            }
        }
    }
    public var code: String?

    public var data: ListCallEventDetailByContactIdResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("Data") {
            var model = ListCallEventDetailByContactIdResponseBody.Data()
            model.fromMap(dict["Data"] as! [String: Any])
            self.data = model
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListCallEventDetailByContactIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListCallEventDetailByContactIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListCallEventDetailByContactIdResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListCallMeasureSummaryReportsRequest : Tea.TeaModel {
    public var intervalType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.intervalType != nil {
            map["IntervalType"] = self.intervalType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("IntervalType") {
            self.intervalType = dict["IntervalType"] as! String
        }
    }
}

public class ListCallMeasureSummaryReportsResponseBody : Tea.TeaModel {
    public class CallMeasureSummaryReportList : Tea.TeaModel {
        public class CallMeasureSummaryReport : Tea.TeaModel {
            public var day: String?

            public var inboundCount: Int64?

            public var inboundDurationByMinute: Int64?

            public var month: String?

            public var outboundCount: Int64?

            public var outboundDurationByMinute: Int64?

            public var year: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.day != nil {
                    map["Day"] = self.day!
                }
                if self.inboundCount != nil {
                    map["InboundCount"] = self.inboundCount!
                }
                if self.inboundDurationByMinute != nil {
                    map["InboundDurationByMinute"] = self.inboundDurationByMinute!
                }
                if self.month != nil {
                    map["Month"] = self.month!
                }
                if self.outboundCount != nil {
                    map["OutboundCount"] = self.outboundCount!
                }
                if self.outboundDurationByMinute != nil {
                    map["OutboundDurationByMinute"] = self.outboundDurationByMinute!
                }
                if self.year != nil {
                    map["Year"] = self.year!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("Day") {
                    self.day = dict["Day"] as! String
                }
                if dict.keys.contains("InboundCount") {
                    self.inboundCount = dict["InboundCount"] as! Int64
                }
                if dict.keys.contains("InboundDurationByMinute") {
                    self.inboundDurationByMinute = dict["InboundDurationByMinute"] as! Int64
                }
                if dict.keys.contains("Month") {
                    self.month = dict["Month"] as! String
                }
                if dict.keys.contains("OutboundCount") {
                    self.outboundCount = dict["OutboundCount"] as! Int64
                }
                if dict.keys.contains("OutboundDurationByMinute") {
                    self.outboundDurationByMinute = dict["OutboundDurationByMinute"] as! Int64
                }
                if dict.keys.contains("Year") {
                    self.year = dict["Year"] as! String
                }
            }
        }
        public var callMeasureSummaryReport: [ListCallMeasureSummaryReportsResponseBody.CallMeasureSummaryReportList.CallMeasureSummaryReport]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callMeasureSummaryReport != nil {
                var tmp : [Any] = []
                for k in self.callMeasureSummaryReport! {
                    tmp.append(k.toMap())
                }
                map["CallMeasureSummaryReport"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("CallMeasureSummaryReport") {
                self.callMeasureSummaryReport = dict["CallMeasureSummaryReport"] as! [ListCallMeasureSummaryReportsResponseBody.CallMeasureSummaryReportList.CallMeasureSummaryReport]
            }
        }
    }
    public var callMeasureSummaryReportList: ListCallMeasureSummaryReportsResponseBody.CallMeasureSummaryReportList?

    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.callMeasureSummaryReportList?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.callMeasureSummaryReportList != nil {
            map["CallMeasureSummaryReportList"] = self.callMeasureSummaryReportList?.toMap()
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("CallMeasureSummaryReportList") {
            var model = ListCallMeasureSummaryReportsResponseBody.CallMeasureSummaryReportList()
            model.fromMap(dict["CallMeasureSummaryReportList"] as! [String: Any])
            self.callMeasureSummaryReportList = model
        }
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListCallMeasureSummaryReportsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListCallMeasureSummaryReportsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListCallMeasureSummaryReportsResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListConfigRequest : Tea.TeaModel {
    public var configItem: [String]?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configItem != nil {
            map["ConfigItem"] = self.configItem!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("ConfigItem") {
            self.configItem = dict["ConfigItem"] as! [String]
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
    }
}

public class ListConfigResponseBody : Tea.TeaModel {
    public class ConfigItems : Tea.TeaModel {
        public class ConfigItem : Tea.TeaModel {
            public var name: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("Name") {
                    self.name = dict["Name"] as! String
                }
                if dict.keys.contains("Value") {
                    self.value = dict["Value"] as! String
                }
            }
        }
        public var configItem: [ListConfigResponseBody.ConfigItems.ConfigItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.configItem != nil {
                var tmp : [Any] = []
                for k in self.configItem! {
                    tmp.append(k.toMap())
                }
                map["ConfigItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("ConfigItem") {
                self.configItem = dict["ConfigItem"] as! [ListConfigResponseBody.ConfigItems.ConfigItem]
            }
        }
    }
    public var code: String?

    public var configItems: ListConfigResponseBody.ConfigItems?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.configItems?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.configItems != nil {
            map["ConfigItems"] = self.configItems?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("ConfigItems") {
            var model = ListConfigResponseBody.ConfigItems()
            model.fromMap(dict["ConfigItems"] as! [String: Any])
            self.configItems = model
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListConfigResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListContactFlowsRequest : Tea.TeaModel {
    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
    }
}

public class ListContactFlowsResponseBody : Tea.TeaModel {
    public class ContactFlows : Tea.TeaModel {
        public class ContactFlow : Tea.TeaModel {
            public class PhoneNumbers : Tea.TeaModel {
                public class PhoneNumber : Tea.TeaModel {
                    public var allowOutbound: Bool?

                    public var instanceId: String?

                    public var number: String?

                    public var phoneNumberDescription: String?

                    public var phoneNumberId: String?

                    public var remainingTime: Int32?

                    public var testOnly: Bool?

                    public var trunks: Int32?

                    public var usage: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.allowOutbound != nil {
                            map["AllowOutbound"] = self.allowOutbound!
                        }
                        if self.instanceId != nil {
                            map["InstanceId"] = self.instanceId!
                        }
                        if self.number != nil {
                            map["Number"] = self.number!
                        }
                        if self.phoneNumberDescription != nil {
                            map["PhoneNumberDescription"] = self.phoneNumberDescription!
                        }
                        if self.phoneNumberId != nil {
                            map["PhoneNumberId"] = self.phoneNumberId!
                        }
                        if self.remainingTime != nil {
                            map["RemainingTime"] = self.remainingTime!
                        }
                        if self.testOnly != nil {
                            map["TestOnly"] = self.testOnly!
                        }
                        if self.trunks != nil {
                            map["Trunks"] = self.trunks!
                        }
                        if self.usage != nil {
                            map["Usage"] = self.usage!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("AllowOutbound") {
                            self.allowOutbound = dict["AllowOutbound"] as! Bool
                        }
                        if dict.keys.contains("InstanceId") {
                            self.instanceId = dict["InstanceId"] as! String
                        }
                        if dict.keys.contains("Number") {
                            self.number = dict["Number"] as! String
                        }
                        if dict.keys.contains("PhoneNumberDescription") {
                            self.phoneNumberDescription = dict["PhoneNumberDescription"] as! String
                        }
                        if dict.keys.contains("PhoneNumberId") {
                            self.phoneNumberId = dict["PhoneNumberId"] as! String
                        }
                        if dict.keys.contains("RemainingTime") {
                            self.remainingTime = dict["RemainingTime"] as! Int32
                        }
                        if dict.keys.contains("TestOnly") {
                            self.testOnly = dict["TestOnly"] as! Bool
                        }
                        if dict.keys.contains("Trunks") {
                            self.trunks = dict["Trunks"] as! Int32
                        }
                        if dict.keys.contains("Usage") {
                            self.usage = dict["Usage"] as! String
                        }
                    }
                }
                public var phoneNumber: [ListContactFlowsResponseBody.ContactFlows.ContactFlow.PhoneNumbers.PhoneNumber]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.phoneNumber != nil {
                        var tmp : [Any] = []
                        for k in self.phoneNumber! {
                            tmp.append(k.toMap())
                        }
                        map["PhoneNumber"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("PhoneNumber") {
                        self.phoneNumber = dict["PhoneNumber"] as! [ListContactFlowsResponseBody.ContactFlows.ContactFlow.PhoneNumbers.PhoneNumber]
                    }
                }
            }
            public class Versions : Tea.TeaModel {
                public class ContactFlowVersion : Tea.TeaModel {
                    public var contactFlowVersionDescription: String?

                    public var contactFlowVersionId: String?

                    public var lastModified: String?

                    public var lastModifiedBy: String?

                    public var lockedBy: String?

                    public var status: String?

                    public var version: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.contactFlowVersionDescription != nil {
                            map["ContactFlowVersionDescription"] = self.contactFlowVersionDescription!
                        }
                        if self.contactFlowVersionId != nil {
                            map["ContactFlowVersionId"] = self.contactFlowVersionId!
                        }
                        if self.lastModified != nil {
                            map["LastModified"] = self.lastModified!
                        }
                        if self.lastModifiedBy != nil {
                            map["LastModifiedBy"] = self.lastModifiedBy!
                        }
                        if self.lockedBy != nil {
                            map["LockedBy"] = self.lockedBy!
                        }
                        if self.status != nil {
                            map["Status"] = self.status!
                        }
                        if self.version != nil {
                            map["Version"] = self.version!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("ContactFlowVersionDescription") {
                            self.contactFlowVersionDescription = dict["ContactFlowVersionDescription"] as! String
                        }
                        if dict.keys.contains("ContactFlowVersionId") {
                            self.contactFlowVersionId = dict["ContactFlowVersionId"] as! String
                        }
                        if dict.keys.contains("LastModified") {
                            self.lastModified = dict["LastModified"] as! String
                        }
                        if dict.keys.contains("LastModifiedBy") {
                            self.lastModifiedBy = dict["LastModifiedBy"] as! String
                        }
                        if dict.keys.contains("LockedBy") {
                            self.lockedBy = dict["LockedBy"] as! String
                        }
                        if dict.keys.contains("Status") {
                            self.status = dict["Status"] as! String
                        }
                        if dict.keys.contains("Version") {
                            self.version = dict["Version"] as! String
                        }
                    }
                }
                public var contactFlowVersion: [ListContactFlowsResponseBody.ContactFlows.ContactFlow.Versions.ContactFlowVersion]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.contactFlowVersion != nil {
                        var tmp : [Any] = []
                        for k in self.contactFlowVersion! {
                            tmp.append(k.toMap())
                        }
                        map["ContactFlowVersion"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("ContactFlowVersion") {
                        self.contactFlowVersion = dict["ContactFlowVersion"] as! [ListContactFlowsResponseBody.ContactFlows.ContactFlow.Versions.ContactFlowVersion]
                    }
                }
            }
            public var appliedVersion: String?

            public var contactFlowDescription: String?

            public var contactFlowId: String?

            public var contactFlowName: String?

            public var instanceId: String?

            public var phoneNumbers: ListContactFlowsResponseBody.ContactFlows.ContactFlow.PhoneNumbers?

            public var type: String?

            public var versions: ListContactFlowsResponseBody.ContactFlows.ContactFlow.Versions?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.phoneNumbers?.validate()
                try self.versions?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appliedVersion != nil {
                    map["AppliedVersion"] = self.appliedVersion!
                }
                if self.contactFlowDescription != nil {
                    map["ContactFlowDescription"] = self.contactFlowDescription!
                }
                if self.contactFlowId != nil {
                    map["ContactFlowId"] = self.contactFlowId!
                }
                if self.contactFlowName != nil {
                    map["ContactFlowName"] = self.contactFlowName!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.phoneNumbers != nil {
                    map["PhoneNumbers"] = self.phoneNumbers?.toMap()
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.versions != nil {
                    map["Versions"] = self.versions?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("AppliedVersion") {
                    self.appliedVersion = dict["AppliedVersion"] as! String
                }
                if dict.keys.contains("ContactFlowDescription") {
                    self.contactFlowDescription = dict["ContactFlowDescription"] as! String
                }
                if dict.keys.contains("ContactFlowId") {
                    self.contactFlowId = dict["ContactFlowId"] as! String
                }
                if dict.keys.contains("ContactFlowName") {
                    self.contactFlowName = dict["ContactFlowName"] as! String
                }
                if dict.keys.contains("InstanceId") {
                    self.instanceId = dict["InstanceId"] as! String
                }
                if dict.keys.contains("PhoneNumbers") {
                    var model = ListContactFlowsResponseBody.ContactFlows.ContactFlow.PhoneNumbers()
                    model.fromMap(dict["PhoneNumbers"] as! [String: Any])
                    self.phoneNumbers = model
                }
                if dict.keys.contains("Type") {
                    self.type = dict["Type"] as! String
                }
                if dict.keys.contains("Versions") {
                    var model = ListContactFlowsResponseBody.ContactFlows.ContactFlow.Versions()
                    model.fromMap(dict["Versions"] as! [String: Any])
                    self.versions = model
                }
            }
        }
        public var contactFlow: [ListContactFlowsResponseBody.ContactFlows.ContactFlow]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.contactFlow != nil {
                var tmp : [Any] = []
                for k in self.contactFlow! {
                    tmp.append(k.toMap())
                }
                map["ContactFlow"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("ContactFlow") {
                self.contactFlow = dict["ContactFlow"] as! [ListContactFlowsResponseBody.ContactFlows.ContactFlow]
            }
        }
    }
    public var code: String?

    public var contactFlows: ListContactFlowsResponseBody.ContactFlows?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.contactFlows?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.contactFlows != nil {
            map["ContactFlows"] = self.contactFlows?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("ContactFlows") {
            var model = ListContactFlowsResponseBody.ContactFlows()
            model.fromMap(dict["ContactFlows"] as! [String: Any])
            self.contactFlows = model
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListContactFlowsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListContactFlowsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListContactFlowsResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListInstancesOfUserResponseBody : Tea.TeaModel {
    public class Instances : Tea.TeaModel {
        public class CallCenterInstance : Tea.TeaModel {
            public class Admin : Tea.TeaModel {
                public class User : Tea.TeaModel {
                    public class Detail : Tea.TeaModel {
                        public var department: String?

                        public var displayName: String?

                        public var email: String?

                        public var loginName: String?

                        public var phone: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.department != nil {
                                map["Department"] = self.department!
                            }
                            if self.displayName != nil {
                                map["DisplayName"] = self.displayName!
                            }
                            if self.email != nil {
                                map["Email"] = self.email!
                            }
                            if self.loginName != nil {
                                map["LoginName"] = self.loginName!
                            }
                            if self.phone != nil {
                                map["Phone"] = self.phone!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("Department") {
                                self.department = dict["Department"] as! String
                            }
                            if dict.keys.contains("DisplayName") {
                                self.displayName = dict["DisplayName"] as! String
                            }
                            if dict.keys.contains("Email") {
                                self.email = dict["Email"] as! String
                            }
                            if dict.keys.contains("LoginName") {
                                self.loginName = dict["LoginName"] as! String
                            }
                            if dict.keys.contains("Phone") {
                                self.phone = dict["Phone"] as! String
                            }
                        }
                    }
                    public var detail: ListInstancesOfUserResponseBody.Instances.CallCenterInstance.Admin.User.Detail?

                    public var instanceId: String?

                    public var ramId: String?

                    public var userId: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.detail?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.detail != nil {
                            map["Detail"] = self.detail?.toMap()
                        }
                        if self.instanceId != nil {
                            map["InstanceId"] = self.instanceId!
                        }
                        if self.ramId != nil {
                            map["RamId"] = self.ramId!
                        }
                        if self.userId != nil {
                            map["UserId"] = self.userId!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("Detail") {
                            var model = ListInstancesOfUserResponseBody.Instances.CallCenterInstance.Admin.User.Detail()
                            model.fromMap(dict["Detail"] as! [String: Any])
                            self.detail = model
                        }
                        if dict.keys.contains("InstanceId") {
                            self.instanceId = dict["InstanceId"] as! String
                        }
                        if dict.keys.contains("RamId") {
                            self.ramId = dict["RamId"] as! String
                        }
                        if dict.keys.contains("UserId") {
                            self.userId = dict["UserId"] as! String
                        }
                    }
                }
                public var user: [ListInstancesOfUserResponseBody.Instances.CallCenterInstance.Admin.User]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.user != nil {
                        var tmp : [Any] = []
                        for k in self.user! {
                            tmp.append(k.toMap())
                        }
                        map["User"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("User") {
                        self.user = dict["User"] as! [ListInstancesOfUserResponseBody.Instances.CallCenterInstance.Admin.User]
                    }
                }
            }
            public class PhoneNumbers : Tea.TeaModel {
                public class PhoneNumber : Tea.TeaModel {
                    public var allowOutbound: Bool?

                    public var instanceId: String?

                    public var number: String?

                    public var phoneNumberDescription: String?

                    public var phoneNumberId: String?

                    public var remainingTime: Int32?

                    public var testOnly: Bool?

                    public var trunks: Int32?

                    public var usage: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.allowOutbound != nil {
                            map["AllowOutbound"] = self.allowOutbound!
                        }
                        if self.instanceId != nil {
                            map["InstanceId"] = self.instanceId!
                        }
                        if self.number != nil {
                            map["Number"] = self.number!
                        }
                        if self.phoneNumberDescription != nil {
                            map["PhoneNumberDescription"] = self.phoneNumberDescription!
                        }
                        if self.phoneNumberId != nil {
                            map["PhoneNumberId"] = self.phoneNumberId!
                        }
                        if self.remainingTime != nil {
                            map["RemainingTime"] = self.remainingTime!
                        }
                        if self.testOnly != nil {
                            map["TestOnly"] = self.testOnly!
                        }
                        if self.trunks != nil {
                            map["Trunks"] = self.trunks!
                        }
                        if self.usage != nil {
                            map["Usage"] = self.usage!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("AllowOutbound") {
                            self.allowOutbound = dict["AllowOutbound"] as! Bool
                        }
                        if dict.keys.contains("InstanceId") {
                            self.instanceId = dict["InstanceId"] as! String
                        }
                        if dict.keys.contains("Number") {
                            self.number = dict["Number"] as! String
                        }
                        if dict.keys.contains("PhoneNumberDescription") {
                            self.phoneNumberDescription = dict["PhoneNumberDescription"] as! String
                        }
                        if dict.keys.contains("PhoneNumberId") {
                            self.phoneNumberId = dict["PhoneNumberId"] as! String
                        }
                        if dict.keys.contains("RemainingTime") {
                            self.remainingTime = dict["RemainingTime"] as! Int32
                        }
                        if dict.keys.contains("TestOnly") {
                            self.testOnly = dict["TestOnly"] as! Bool
                        }
                        if dict.keys.contains("Trunks") {
                            self.trunks = dict["Trunks"] as! Int32
                        }
                        if dict.keys.contains("Usage") {
                            self.usage = dict["Usage"] as! String
                        }
                    }
                }
                public var phoneNumber: [ListInstancesOfUserResponseBody.Instances.CallCenterInstance.PhoneNumbers.PhoneNumber]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.phoneNumber != nil {
                        var tmp : [Any] = []
                        for k in self.phoneNumber! {
                            tmp.append(k.toMap())
                        }
                        map["PhoneNumber"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("PhoneNumber") {
                        self.phoneNumber = dict["PhoneNumber"] as! [ListInstancesOfUserResponseBody.Instances.CallCenterInstance.PhoneNumbers.PhoneNumber]
                    }
                }
            }
            public var admin: ListInstancesOfUserResponseBody.Instances.CallCenterInstance.Admin?

            public var consoleUrl: String?

            public var createdTime: Int64?

            public var directoryId: String?

            public var domainName: String?

            public var instanceDescription: String?

            public var instanceId: String?

            public var instanceName: String?

            public var maxOnlineAgents: Int32?

            public var owner: String?

            public var phoneNumbers: ListInstancesOfUserResponseBody.Instances.CallCenterInstance.PhoneNumbers?

            public var status: String?

            public var storageBucket: String?

            public var storageMaxDays: Int32?

            public var storageMaxSize: Int32?

            public var tenantId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.admin?.validate()
                try self.phoneNumbers?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.admin != nil {
                    map["Admin"] = self.admin?.toMap()
                }
                if self.consoleUrl != nil {
                    map["ConsoleUrl"] = self.consoleUrl!
                }
                if self.createdTime != nil {
                    map["CreatedTime"] = self.createdTime!
                }
                if self.directoryId != nil {
                    map["DirectoryId"] = self.directoryId!
                }
                if self.domainName != nil {
                    map["DomainName"] = self.domainName!
                }
                if self.instanceDescription != nil {
                    map["InstanceDescription"] = self.instanceDescription!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.instanceName != nil {
                    map["InstanceName"] = self.instanceName!
                }
                if self.maxOnlineAgents != nil {
                    map["MaxOnlineAgents"] = self.maxOnlineAgents!
                }
                if self.owner != nil {
                    map["Owner"] = self.owner!
                }
                if self.phoneNumbers != nil {
                    map["PhoneNumbers"] = self.phoneNumbers?.toMap()
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.storageBucket != nil {
                    map["StorageBucket"] = self.storageBucket!
                }
                if self.storageMaxDays != nil {
                    map["StorageMaxDays"] = self.storageMaxDays!
                }
                if self.storageMaxSize != nil {
                    map["StorageMaxSize"] = self.storageMaxSize!
                }
                if self.tenantId != nil {
                    map["TenantId"] = self.tenantId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("Admin") {
                    var model = ListInstancesOfUserResponseBody.Instances.CallCenterInstance.Admin()
                    model.fromMap(dict["Admin"] as! [String: Any])
                    self.admin = model
                }
                if dict.keys.contains("ConsoleUrl") {
                    self.consoleUrl = dict["ConsoleUrl"] as! String
                }
                if dict.keys.contains("CreatedTime") {
                    self.createdTime = dict["CreatedTime"] as! Int64
                }
                if dict.keys.contains("DirectoryId") {
                    self.directoryId = dict["DirectoryId"] as! String
                }
                if dict.keys.contains("DomainName") {
                    self.domainName = dict["DomainName"] as! String
                }
                if dict.keys.contains("InstanceDescription") {
                    self.instanceDescription = dict["InstanceDescription"] as! String
                }
                if dict.keys.contains("InstanceId") {
                    self.instanceId = dict["InstanceId"] as! String
                }
                if dict.keys.contains("InstanceName") {
                    self.instanceName = dict["InstanceName"] as! String
                }
                if dict.keys.contains("MaxOnlineAgents") {
                    self.maxOnlineAgents = dict["MaxOnlineAgents"] as! Int32
                }
                if dict.keys.contains("Owner") {
                    self.owner = dict["Owner"] as! String
                }
                if dict.keys.contains("PhoneNumbers") {
                    var model = ListInstancesOfUserResponseBody.Instances.CallCenterInstance.PhoneNumbers()
                    model.fromMap(dict["PhoneNumbers"] as! [String: Any])
                    self.phoneNumbers = model
                }
                if dict.keys.contains("Status") {
                    self.status = dict["Status"] as! String
                }
                if dict.keys.contains("StorageBucket") {
                    self.storageBucket = dict["StorageBucket"] as! String
                }
                if dict.keys.contains("StorageMaxDays") {
                    self.storageMaxDays = dict["StorageMaxDays"] as! Int32
                }
                if dict.keys.contains("StorageMaxSize") {
                    self.storageMaxSize = dict["StorageMaxSize"] as! Int32
                }
                if dict.keys.contains("TenantId") {
                    self.tenantId = dict["TenantId"] as! String
                }
            }
        }
        public var callCenterInstance: [ListInstancesOfUserResponseBody.Instances.CallCenterInstance]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callCenterInstance != nil {
                var tmp : [Any] = []
                for k in self.callCenterInstance! {
                    tmp.append(k.toMap())
                }
                map["CallCenterInstance"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("CallCenterInstance") {
                self.callCenterInstance = dict["CallCenterInstance"] as! [ListInstancesOfUserResponseBody.Instances.CallCenterInstance]
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var instances: ListInstancesOfUserResponseBody.Instances?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.instances?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.instances != nil {
            map["Instances"] = self.instances?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Instances") {
            var model = ListInstancesOfUserResponseBody.Instances()
            model.fromMap(dict["Instances"] as! [String: Any])
            self.instances = model
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListInstancesOfUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListInstancesOfUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListInstancesOfUserResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListIvrTrackingDetailRequest : Tea.TeaModel {
    public var calledNumber: String?

    public var callingNumber: String?

    public var contactId: String?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var startTime: Int64?

    public var stopTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.calledNumber != nil {
            map["CalledNumber"] = self.calledNumber!
        }
        if self.callingNumber != nil {
            map["CallingNumber"] = self.callingNumber!
        }
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.stopTime != nil {
            map["StopTime"] = self.stopTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("CalledNumber") {
            self.calledNumber = dict["CalledNumber"] as! String
        }
        if dict.keys.contains("CallingNumber") {
            self.callingNumber = dict["CallingNumber"] as! String
        }
        if dict.keys.contains("ContactId") {
            self.contactId = dict["ContactId"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("PageNumber") {
            self.pageNumber = dict["PageNumber"] as! Int32
        }
        if dict.keys.contains("PageSize") {
            self.pageSize = dict["PageSize"] as! Int32
        }
        if dict.keys.contains("StartTime") {
            self.startTime = dict["StartTime"] as! Int64
        }
        if dict.keys.contains("StopTime") {
            self.stopTime = dict["StopTime"] as! Int64
        }
    }
}

public class ListIvrTrackingDetailResponseBody : Tea.TeaModel {
    public class IvrTrackingDetails : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class IvrTrackingDetail : Tea.TeaModel {
                public var calledNumber: String?

                public var callingNumber: String?

                public var contactId: String?

                public var description_: String?

                public var deviceID: String?

                public var flowName: String?

                public var inputData: String?

                public var nodeName: String?

                public var nodeType: String?

                public var outputData: String?

                public var startTime: Int64?

                public var status: String?

                public var stopTime: Int64?

                public var tenantId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.calledNumber != nil {
                        map["CalledNumber"] = self.calledNumber!
                    }
                    if self.callingNumber != nil {
                        map["CallingNumber"] = self.callingNumber!
                    }
                    if self.contactId != nil {
                        map["ContactId"] = self.contactId!
                    }
                    if self.description_ != nil {
                        map["Description"] = self.description_!
                    }
                    if self.deviceID != nil {
                        map["DeviceID"] = self.deviceID!
                    }
                    if self.flowName != nil {
                        map["FlowName"] = self.flowName!
                    }
                    if self.inputData != nil {
                        map["InputData"] = self.inputData!
                    }
                    if self.nodeName != nil {
                        map["NodeName"] = self.nodeName!
                    }
                    if self.nodeType != nil {
                        map["NodeType"] = self.nodeType!
                    }
                    if self.outputData != nil {
                        map["OutputData"] = self.outputData!
                    }
                    if self.startTime != nil {
                        map["StartTime"] = self.startTime!
                    }
                    if self.status != nil {
                        map["Status"] = self.status!
                    }
                    if self.stopTime != nil {
                        map["StopTime"] = self.stopTime!
                    }
                    if self.tenantId != nil {
                        map["TenantId"] = self.tenantId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("CalledNumber") {
                        self.calledNumber = dict["CalledNumber"] as! String
                    }
                    if dict.keys.contains("CallingNumber") {
                        self.callingNumber = dict["CallingNumber"] as! String
                    }
                    if dict.keys.contains("ContactId") {
                        self.contactId = dict["ContactId"] as! String
                    }
                    if dict.keys.contains("Description") {
                        self.description_ = dict["Description"] as! String
                    }
                    if dict.keys.contains("DeviceID") {
                        self.deviceID = dict["DeviceID"] as! String
                    }
                    if dict.keys.contains("FlowName") {
                        self.flowName = dict["FlowName"] as! String
                    }
                    if dict.keys.contains("InputData") {
                        self.inputData = dict["InputData"] as! String
                    }
                    if dict.keys.contains("NodeName") {
                        self.nodeName = dict["NodeName"] as! String
                    }
                    if dict.keys.contains("NodeType") {
                        self.nodeType = dict["NodeType"] as! String
                    }
                    if dict.keys.contains("OutputData") {
                        self.outputData = dict["OutputData"] as! String
                    }
                    if dict.keys.contains("StartTime") {
                        self.startTime = dict["StartTime"] as! Int64
                    }
                    if dict.keys.contains("Status") {
                        self.status = dict["Status"] as! String
                    }
                    if dict.keys.contains("StopTime") {
                        self.stopTime = dict["StopTime"] as! Int64
                    }
                    if dict.keys.contains("TenantId") {
                        self.tenantId = dict["TenantId"] as! String
                    }
                }
            }
            public var ivrTrackingDetail: [ListIvrTrackingDetailResponseBody.IvrTrackingDetails.List.IvrTrackingDetail]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.ivrTrackingDetail != nil {
                    var tmp : [Any] = []
                    for k in self.ivrTrackingDetail! {
                        tmp.append(k.toMap())
                    }
                    map["IvrTrackingDetail"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("IvrTrackingDetail") {
                    self.ivrTrackingDetail = dict["IvrTrackingDetail"] as! [ListIvrTrackingDetailResponseBody.IvrTrackingDetails.List.IvrTrackingDetail]
                }
            }
        }
        public var list: ListIvrTrackingDetailResponseBody.IvrTrackingDetails.List?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.list?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                map["List"] = self.list?.toMap()
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("List") {
                var model = ListIvrTrackingDetailResponseBody.IvrTrackingDetails.List()
                model.fromMap(dict["List"] as! [String: Any])
                self.list = model
            }
            if dict.keys.contains("PageNumber") {
                self.pageNumber = dict["PageNumber"] as! Int32
            }
            if dict.keys.contains("PageSize") {
                self.pageSize = dict["PageSize"] as! Int32
            }
            if dict.keys.contains("TotalCount") {
                self.totalCount = dict["TotalCount"] as! Int32
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var ivrTrackingDetails: ListIvrTrackingDetailResponseBody.IvrTrackingDetails?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.ivrTrackingDetails?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.ivrTrackingDetails != nil {
            map["IvrTrackingDetails"] = self.ivrTrackingDetails?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("IvrTrackingDetails") {
            var model = ListIvrTrackingDetailResponseBody.IvrTrackingDetails()
            model.fromMap(dict["IvrTrackingDetails"] as! [String: Any])
            self.ivrTrackingDetails = model
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListIvrTrackingDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListIvrTrackingDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListIvrTrackingDetailResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListMediasRequest : Tea.TeaModel {
    public var instanceId: String?

    public var namePrefix: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.namePrefix != nil {
            map["NamePrefix"] = self.namePrefix!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("NamePrefix") {
            self.namePrefix = dict["NamePrefix"] as! String
        }
        if dict.keys.contains("PageNumber") {
            self.pageNumber = dict["PageNumber"] as! Int32
        }
        if dict.keys.contains("PageSize") {
            self.pageSize = dict["PageSize"] as! Int32
        }
    }
}

public class ListMediasResponseBody : Tea.TeaModel {
    public class Medias : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class Media : Tea.TeaModel {
                public var content: String?

                public var description_: String?

                public var fileName: String?

                public var filePath: String?

                public var instance: String?

                public var name: String?

                public var ossFileName: String?

                public var status: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.content != nil {
                        map["Content"] = self.content!
                    }
                    if self.description_ != nil {
                        map["Description"] = self.description_!
                    }
                    if self.fileName != nil {
                        map["FileName"] = self.fileName!
                    }
                    if self.filePath != nil {
                        map["FilePath"] = self.filePath!
                    }
                    if self.instance != nil {
                        map["Instance"] = self.instance!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.ossFileName != nil {
                        map["OssFileName"] = self.ossFileName!
                    }
                    if self.status != nil {
                        map["Status"] = self.status!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("Content") {
                        self.content = dict["Content"] as! String
                    }
                    if dict.keys.contains("Description") {
                        self.description_ = dict["Description"] as! String
                    }
                    if dict.keys.contains("FileName") {
                        self.fileName = dict["FileName"] as! String
                    }
                    if dict.keys.contains("FilePath") {
                        self.filePath = dict["FilePath"] as! String
                    }
                    if dict.keys.contains("Instance") {
                        self.instance = dict["Instance"] as! String
                    }
                    if dict.keys.contains("Name") {
                        self.name = dict["Name"] as! String
                    }
                    if dict.keys.contains("OssFileName") {
                        self.ossFileName = dict["OssFileName"] as! String
                    }
                    if dict.keys.contains("Status") {
                        self.status = dict["Status"] as! String
                    }
                    if dict.keys.contains("Type") {
                        self.type = dict["Type"] as! String
                    }
                }
            }
            public var media: [ListMediasResponseBody.Medias.List.Media]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.media != nil {
                    var tmp : [Any] = []
                    for k in self.media! {
                        tmp.append(k.toMap())
                    }
                    map["Media"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("Media") {
                    self.media = dict["Media"] as! [ListMediasResponseBody.Medias.List.Media]
                }
            }
        }
        public var list: ListMediasResponseBody.Medias.List?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.list?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                map["List"] = self.list?.toMap()
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("List") {
                var model = ListMediasResponseBody.Medias.List()
                model.fromMap(dict["List"] as! [String: Any])
                self.list = model
            }
            if dict.keys.contains("PageNumber") {
                self.pageNumber = dict["PageNumber"] as! Int32
            }
            if dict.keys.contains("PageSize") {
                self.pageSize = dict["PageSize"] as! Int32
            }
            if dict.keys.contains("TotalCount") {
                self.totalCount = dict["TotalCount"] as! Int32
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var medias: ListMediasResponseBody.Medias?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.medias?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.medias != nil {
            map["Medias"] = self.medias?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Medias") {
            var model = ListMediasResponseBody.Medias()
            model.fromMap(dict["Medias"] as! [String: Any])
            self.medias = model
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListMediasResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListMediasResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListMediasResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListOutboundPhoneNumberOfUserRequest : Tea.TeaModel {
    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("PageNumber") {
            self.pageNumber = dict["PageNumber"] as! Int32
        }
        if dict.keys.contains("PageSize") {
            self.pageSize = dict["PageSize"] as! Int32
        }
        if dict.keys.contains("UserId") {
            self.userId = dict["UserId"] as! String
        }
    }
}

public class ListOutboundPhoneNumberOfUserResponseBody : Tea.TeaModel {
    public class NumberList : Tea.TeaModel {
        public var number: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.number != nil {
                map["Number"] = self.number!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("Number") {
                self.number = dict["Number"] as! [String]
            }
        }
    }
    public class OutboundPhoneNumbers : Tea.TeaModel {
        public class PhoneNumber : Tea.TeaModel {
            public class PrivacyNumber : Tea.TeaModel {
                public var bizId: String?

                public var extra: String?

                public var phoneNumber: String?

                public var poolId: String?

                public var poolName: String?

                public var regionNameCity: String?

                public var subId: String?

                public var telX: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.bizId != nil {
                        map["BizId"] = self.bizId!
                    }
                    if self.extra != nil {
                        map["Extra"] = self.extra!
                    }
                    if self.phoneNumber != nil {
                        map["PhoneNumber"] = self.phoneNumber!
                    }
                    if self.poolId != nil {
                        map["PoolId"] = self.poolId!
                    }
                    if self.poolName != nil {
                        map["PoolName"] = self.poolName!
                    }
                    if self.regionNameCity != nil {
                        map["RegionNameCity"] = self.regionNameCity!
                    }
                    if self.subId != nil {
                        map["SubId"] = self.subId!
                    }
                    if self.telX != nil {
                        map["TelX"] = self.telX!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("BizId") {
                        self.bizId = dict["BizId"] as! String
                    }
                    if dict.keys.contains("Extra") {
                        self.extra = dict["Extra"] as! String
                    }
                    if dict.keys.contains("PhoneNumber") {
                        self.phoneNumber = dict["PhoneNumber"] as! String
                    }
                    if dict.keys.contains("PoolId") {
                        self.poolId = dict["PoolId"] as! String
                    }
                    if dict.keys.contains("PoolName") {
                        self.poolName = dict["PoolName"] as! String
                    }
                    if dict.keys.contains("RegionNameCity") {
                        self.regionNameCity = dict["RegionNameCity"] as! String
                    }
                    if dict.keys.contains("SubId") {
                        self.subId = dict["SubId"] as! String
                    }
                    if dict.keys.contains("TelX") {
                        self.telX = dict["TelX"] as! String
                    }
                    if dict.keys.contains("Type") {
                        self.type = dict["Type"] as! String
                    }
                }
            }
            public var allowOutbound: Bool?

            public var city: String?

            public var instanceId: String?

            public var number: String?

            public var phoneNumberDescription: String?

            public var phoneNumberId: String?

            public var privacyNumber: ListOutboundPhoneNumberOfUserResponseBody.OutboundPhoneNumbers.PhoneNumber.PrivacyNumber?

            public var privateFlag: Bool?

            public var province: String?

            public var remainingTime: Int32?

            public var sipTelX: String?

            public var testOnly: Bool?

            public var trunks: Int32?

            public var usage: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.privacyNumber?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.allowOutbound != nil {
                    map["AllowOutbound"] = self.allowOutbound!
                }
                if self.city != nil {
                    map["City"] = self.city!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.number != nil {
                    map["Number"] = self.number!
                }
                if self.phoneNumberDescription != nil {
                    map["PhoneNumberDescription"] = self.phoneNumberDescription!
                }
                if self.phoneNumberId != nil {
                    map["PhoneNumberId"] = self.phoneNumberId!
                }
                if self.privacyNumber != nil {
                    map["PrivacyNumber"] = self.privacyNumber?.toMap()
                }
                if self.privateFlag != nil {
                    map["PrivateFlag"] = self.privateFlag!
                }
                if self.province != nil {
                    map["Province"] = self.province!
                }
                if self.remainingTime != nil {
                    map["RemainingTime"] = self.remainingTime!
                }
                if self.sipTelX != nil {
                    map["SipTelX"] = self.sipTelX!
                }
                if self.testOnly != nil {
                    map["TestOnly"] = self.testOnly!
                }
                if self.trunks != nil {
                    map["Trunks"] = self.trunks!
                }
                if self.usage != nil {
                    map["Usage"] = self.usage!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("AllowOutbound") {
                    self.allowOutbound = dict["AllowOutbound"] as! Bool
                }
                if dict.keys.contains("City") {
                    self.city = dict["City"] as! String
                }
                if dict.keys.contains("InstanceId") {
                    self.instanceId = dict["InstanceId"] as! String
                }
                if dict.keys.contains("Number") {
                    self.number = dict["Number"] as! String
                }
                if dict.keys.contains("PhoneNumberDescription") {
                    self.phoneNumberDescription = dict["PhoneNumberDescription"] as! String
                }
                if dict.keys.contains("PhoneNumberId") {
                    self.phoneNumberId = dict["PhoneNumberId"] as! String
                }
                if dict.keys.contains("PrivacyNumber") {
                    var model = ListOutboundPhoneNumberOfUserResponseBody.OutboundPhoneNumbers.PhoneNumber.PrivacyNumber()
                    model.fromMap(dict["PrivacyNumber"] as! [String: Any])
                    self.privacyNumber = model
                }
                if dict.keys.contains("PrivateFlag") {
                    self.privateFlag = dict["PrivateFlag"] as! Bool
                }
                if dict.keys.contains("Province") {
                    self.province = dict["Province"] as! String
                }
                if dict.keys.contains("RemainingTime") {
                    self.remainingTime = dict["RemainingTime"] as! Int32
                }
                if dict.keys.contains("SipTelX") {
                    self.sipTelX = dict["SipTelX"] as! String
                }
                if dict.keys.contains("TestOnly") {
                    self.testOnly = dict["TestOnly"] as! Bool
                }
                if dict.keys.contains("Trunks") {
                    self.trunks = dict["Trunks"] as! Int32
                }
                if dict.keys.contains("Usage") {
                    self.usage = dict["Usage"] as! String
                }
            }
        }
        public var phoneNumber: [ListOutboundPhoneNumberOfUserResponseBody.OutboundPhoneNumbers.PhoneNumber]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.phoneNumber != nil {
                var tmp : [Any] = []
                for k in self.phoneNumber! {
                    tmp.append(k.toMap())
                }
                map["PhoneNumber"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("PhoneNumber") {
                self.phoneNumber = dict["PhoneNumber"] as! [ListOutboundPhoneNumberOfUserResponseBody.OutboundPhoneNumbers.PhoneNumber]
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var numberList: ListOutboundPhoneNumberOfUserResponseBody.NumberList?

    public var outboundPhoneNumbers: ListOutboundPhoneNumberOfUserResponseBody.OutboundPhoneNumbers?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.numberList?.validate()
        try self.outboundPhoneNumbers?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.numberList != nil {
            map["NumberList"] = self.numberList?.toMap()
        }
        if self.outboundPhoneNumbers != nil {
            map["OutboundPhoneNumbers"] = self.outboundPhoneNumbers?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("NumberList") {
            var model = ListOutboundPhoneNumberOfUserResponseBody.NumberList()
            model.fromMap(dict["NumberList"] as! [String: Any])
            self.numberList = model
        }
        if dict.keys.contains("OutboundPhoneNumbers") {
            var model = ListOutboundPhoneNumberOfUserResponseBody.OutboundPhoneNumbers()
            model.fromMap(dict["OutboundPhoneNumbers"] as! [String: Any])
            self.outboundPhoneNumbers = model
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListOutboundPhoneNumberOfUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListOutboundPhoneNumberOfUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListOutboundPhoneNumberOfUserResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListPhoneNumbersRequest : Tea.TeaModel {
    public var instanceId: String?

    public var outboundOnly: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.outboundOnly != nil {
            map["OutboundOnly"] = self.outboundOnly!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("OutboundOnly") {
            self.outboundOnly = dict["OutboundOnly"] as! Bool
        }
    }
}

public class ListPhoneNumbersResponseBody : Tea.TeaModel {
    public class PhoneNumbers : Tea.TeaModel {
        public class PhoneNumber : Tea.TeaModel {
            public class ContactFlow : Tea.TeaModel {
                public var contactFlowDescription: String?

                public var contactFlowId: String?

                public var contactFlowName: String?

                public var instanceId: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.contactFlowDescription != nil {
                        map["ContactFlowDescription"] = self.contactFlowDescription!
                    }
                    if self.contactFlowId != nil {
                        map["ContactFlowId"] = self.contactFlowId!
                    }
                    if self.contactFlowName != nil {
                        map["ContactFlowName"] = self.contactFlowName!
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("ContactFlowDescription") {
                        self.contactFlowDescription = dict["ContactFlowDescription"] as! String
                    }
                    if dict.keys.contains("ContactFlowId") {
                        self.contactFlowId = dict["ContactFlowId"] as! String
                    }
                    if dict.keys.contains("ContactFlowName") {
                        self.contactFlowName = dict["ContactFlowName"] as! String
                    }
                    if dict.keys.contains("InstanceId") {
                        self.instanceId = dict["InstanceId"] as! String
                    }
                    if dict.keys.contains("Type") {
                        self.type = dict["Type"] as! String
                    }
                }
            }
            public class PrivacyNumber : Tea.TeaModel {
                public var bizId: String?

                public var extra: String?

                public var phoneNumber: String?

                public var poolId: String?

                public var poolName: String?

                public var regionNameCity: String?

                public var subId: String?

                public var telX: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.bizId != nil {
                        map["BizId"] = self.bizId!
                    }
                    if self.extra != nil {
                        map["Extra"] = self.extra!
                    }
                    if self.phoneNumber != nil {
                        map["PhoneNumber"] = self.phoneNumber!
                    }
                    if self.poolId != nil {
                        map["PoolId"] = self.poolId!
                    }
                    if self.poolName != nil {
                        map["PoolName"] = self.poolName!
                    }
                    if self.regionNameCity != nil {
                        map["RegionNameCity"] = self.regionNameCity!
                    }
                    if self.subId != nil {
                        map["SubId"] = self.subId!
                    }
                    if self.telX != nil {
                        map["TelX"] = self.telX!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("BizId") {
                        self.bizId = dict["BizId"] as! String
                    }
                    if dict.keys.contains("Extra") {
                        self.extra = dict["Extra"] as! String
                    }
                    if dict.keys.contains("PhoneNumber") {
                        self.phoneNumber = dict["PhoneNumber"] as! String
                    }
                    if dict.keys.contains("PoolId") {
                        self.poolId = dict["PoolId"] as! String
                    }
                    if dict.keys.contains("PoolName") {
                        self.poolName = dict["PoolName"] as! String
                    }
                    if dict.keys.contains("RegionNameCity") {
                        self.regionNameCity = dict["RegionNameCity"] as! String
                    }
                    if dict.keys.contains("SubId") {
                        self.subId = dict["SubId"] as! String
                    }
                    if dict.keys.contains("TelX") {
                        self.telX = dict["TelX"] as! String
                    }
                    if dict.keys.contains("Type") {
                        self.type = dict["Type"] as! String
                    }
                }
            }
            public class SkillGroups : Tea.TeaModel {
                public class SkillGroup : Tea.TeaModel {
                    public var skillGroupId: String?

                    public var skillGroupName: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.skillGroupId != nil {
                            map["SkillGroupId"] = self.skillGroupId!
                        }
                        if self.skillGroupName != nil {
                            map["SkillGroupName"] = self.skillGroupName!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("SkillGroupId") {
                            self.skillGroupId = dict["SkillGroupId"] as! String
                        }
                        if dict.keys.contains("SkillGroupName") {
                            self.skillGroupName = dict["SkillGroupName"] as! String
                        }
                    }
                }
                public var skillGroup: [ListPhoneNumbersResponseBody.PhoneNumbers.PhoneNumber.SkillGroups.SkillGroup]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.skillGroup != nil {
                        var tmp : [Any] = []
                        for k in self.skillGroup! {
                            tmp.append(k.toMap())
                        }
                        map["SkillGroup"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("SkillGroup") {
                        self.skillGroup = dict["SkillGroup"] as! [ListPhoneNumbersResponseBody.PhoneNumbers.PhoneNumber.SkillGroups.SkillGroup]
                    }
                }
            }
            public var allowOutbound: Bool?

            public var assignee: String?

            public var city: String?

            public var contactFlow: ListPhoneNumbersResponseBody.PhoneNumbers.PhoneNumber.ContactFlow?

            public var instanceId: String?

            public var number: String?

            public var numberCommodityStatus: Int32?

            public var phoneNumberDescription: String?

            public var phoneNumberId: String?

            public var privacyNumber: ListPhoneNumbersResponseBody.PhoneNumbers.PhoneNumber.PrivacyNumber?

            public var province: String?

            public var remainingTime: Int32?

            public var sipTelX: String?

            public var skillGroups: ListPhoneNumbersResponseBody.PhoneNumbers.PhoneNumber.SkillGroups?

            public var testOnly: Bool?

            public var trunks: Int32?

            public var usage: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.contactFlow?.validate()
                try self.privacyNumber?.validate()
                try self.skillGroups?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.allowOutbound != nil {
                    map["AllowOutbound"] = self.allowOutbound!
                }
                if self.assignee != nil {
                    map["Assignee"] = self.assignee!
                }
                if self.city != nil {
                    map["City"] = self.city!
                }
                if self.contactFlow != nil {
                    map["ContactFlow"] = self.contactFlow?.toMap()
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.number != nil {
                    map["Number"] = self.number!
                }
                if self.numberCommodityStatus != nil {
                    map["NumberCommodityStatus"] = self.numberCommodityStatus!
                }
                if self.phoneNumberDescription != nil {
                    map["PhoneNumberDescription"] = self.phoneNumberDescription!
                }
                if self.phoneNumberId != nil {
                    map["PhoneNumberId"] = self.phoneNumberId!
                }
                if self.privacyNumber != nil {
                    map["PrivacyNumber"] = self.privacyNumber?.toMap()
                }
                if self.province != nil {
                    map["Province"] = self.province!
                }
                if self.remainingTime != nil {
                    map["RemainingTime"] = self.remainingTime!
                }
                if self.sipTelX != nil {
                    map["SipTelX"] = self.sipTelX!
                }
                if self.skillGroups != nil {
                    map["SkillGroups"] = self.skillGroups?.toMap()
                }
                if self.testOnly != nil {
                    map["TestOnly"] = self.testOnly!
                }
                if self.trunks != nil {
                    map["Trunks"] = self.trunks!
                }
                if self.usage != nil {
                    map["Usage"] = self.usage!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("AllowOutbound") {
                    self.allowOutbound = dict["AllowOutbound"] as! Bool
                }
                if dict.keys.contains("Assignee") {
                    self.assignee = dict["Assignee"] as! String
                }
                if dict.keys.contains("City") {
                    self.city = dict["City"] as! String
                }
                if dict.keys.contains("ContactFlow") {
                    var model = ListPhoneNumbersResponseBody.PhoneNumbers.PhoneNumber.ContactFlow()
                    model.fromMap(dict["ContactFlow"] as! [String: Any])
                    self.contactFlow = model
                }
                if dict.keys.contains("InstanceId") {
                    self.instanceId = dict["InstanceId"] as! String
                }
                if dict.keys.contains("Number") {
                    self.number = dict["Number"] as! String
                }
                if dict.keys.contains("NumberCommodityStatus") {
                    self.numberCommodityStatus = dict["NumberCommodityStatus"] as! Int32
                }
                if dict.keys.contains("PhoneNumberDescription") {
                    self.phoneNumberDescription = dict["PhoneNumberDescription"] as! String
                }
                if dict.keys.contains("PhoneNumberId") {
                    self.phoneNumberId = dict["PhoneNumberId"] as! String
                }
                if dict.keys.contains("PrivacyNumber") {
                    var model = ListPhoneNumbersResponseBody.PhoneNumbers.PhoneNumber.PrivacyNumber()
                    model.fromMap(dict["PrivacyNumber"] as! [String: Any])
                    self.privacyNumber = model
                }
                if dict.keys.contains("Province") {
                    self.province = dict["Province"] as! String
                }
                if dict.keys.contains("RemainingTime") {
                    self.remainingTime = dict["RemainingTime"] as! Int32
                }
                if dict.keys.contains("SipTelX") {
                    self.sipTelX = dict["SipTelX"] as! String
                }
                if dict.keys.contains("SkillGroups") {
                    var model = ListPhoneNumbersResponseBody.PhoneNumbers.PhoneNumber.SkillGroups()
                    model.fromMap(dict["SkillGroups"] as! [String: Any])
                    self.skillGroups = model
                }
                if dict.keys.contains("TestOnly") {
                    self.testOnly = dict["TestOnly"] as! Bool
                }
                if dict.keys.contains("Trunks") {
                    self.trunks = dict["Trunks"] as! Int32
                }
                if dict.keys.contains("Usage") {
                    self.usage = dict["Usage"] as! String
                }
            }
        }
        public var phoneNumber: [ListPhoneNumbersResponseBody.PhoneNumbers.PhoneNumber]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.phoneNumber != nil {
                var tmp : [Any] = []
                for k in self.phoneNumber! {
                    tmp.append(k.toMap())
                }
                map["PhoneNumber"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("PhoneNumber") {
                self.phoneNumber = dict["PhoneNumber"] as! [ListPhoneNumbersResponseBody.PhoneNumbers.PhoneNumber]
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var phoneNumbers: ListPhoneNumbersResponseBody.PhoneNumbers?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.phoneNumbers?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.phoneNumbers != nil {
            map["PhoneNumbers"] = self.phoneNumbers?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("PhoneNumbers") {
            var model = ListPhoneNumbersResponseBody.PhoneNumbers()
            model.fromMap(dict["PhoneNumbers"] as! [String: Any])
            self.phoneNumbers = model
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListPhoneNumbersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListPhoneNumbersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListPhoneNumbersResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListPhoneTagsRequest : Tea.TeaModel {
    public var currentPage: Int32?

    public var instanceId: String?

    public var number: String?

    public var numberGroupIds: [String]?

    public var outboundOnly: Bool?

    public var pageSize: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.currentPage != nil {
            map["CurrentPage"] = self.currentPage!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.number != nil {
            map["Number"] = self.number!
        }
        if self.numberGroupIds != nil {
            map["NumberGroupIds"] = self.numberGroupIds!
        }
        if self.outboundOnly != nil {
            map["OutboundOnly"] = self.outboundOnly!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("CurrentPage") {
            self.currentPage = dict["CurrentPage"] as! Int32
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("Number") {
            self.number = dict["Number"] as! String
        }
        if dict.keys.contains("NumberGroupIds") {
            self.numberGroupIds = dict["NumberGroupIds"] as! [String]
        }
        if dict.keys.contains("OutboundOnly") {
            self.outboundOnly = dict["OutboundOnly"] as! Bool
        }
        if dict.keys.contains("PageSize") {
            self.pageSize = dict["PageSize"] as! Int32
        }
    }
}

public class ListPhoneTagsResponseBody : Tea.TeaModel {
    public class PhoneNumbers : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var city: String?

            public var concurrency: Int32?

            public var contactFlowId: String?

            public var createTime: Int64?

            public var instanceId: String?

            public var number: String?

            public var phoneNumberDescription: String?

            public var phoneNumberId: String?

            public var provider: String?

            public var province: String?

            public var serviceTag: String?

            public var skillGroupIdList: [String]?

            public var type: Int32?

            public var usage: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.city != nil {
                    map["City"] = self.city!
                }
                if self.concurrency != nil {
                    map["Concurrency"] = self.concurrency!
                }
                if self.contactFlowId != nil {
                    map["ContactFlowId"] = self.contactFlowId!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.number != nil {
                    map["Number"] = self.number!
                }
                if self.phoneNumberDescription != nil {
                    map["PhoneNumberDescription"] = self.phoneNumberDescription!
                }
                if self.phoneNumberId != nil {
                    map["PhoneNumberId"] = self.phoneNumberId!
                }
                if self.provider != nil {
                    map["Provider"] = self.provider!
                }
                if self.province != nil {
                    map["Province"] = self.province!
                }
                if self.serviceTag != nil {
                    map["ServiceTag"] = self.serviceTag!
                }
                if self.skillGroupIdList != nil {
                    map["SkillGroupIdList"] = self.skillGroupIdList!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.usage != nil {
                    map["Usage"] = self.usage!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("City") {
                    self.city = dict["City"] as! String
                }
                if dict.keys.contains("Concurrency") {
                    self.concurrency = dict["Concurrency"] as! Int32
                }
                if dict.keys.contains("ContactFlowId") {
                    self.contactFlowId = dict["ContactFlowId"] as! String
                }
                if dict.keys.contains("CreateTime") {
                    self.createTime = dict["CreateTime"] as! Int64
                }
                if dict.keys.contains("InstanceId") {
                    self.instanceId = dict["InstanceId"] as! String
                }
                if dict.keys.contains("Number") {
                    self.number = dict["Number"] as! String
                }
                if dict.keys.contains("PhoneNumberDescription") {
                    self.phoneNumberDescription = dict["PhoneNumberDescription"] as! String
                }
                if dict.keys.contains("PhoneNumberId") {
                    self.phoneNumberId = dict["PhoneNumberId"] as! String
                }
                if dict.keys.contains("Provider") {
                    self.provider = dict["Provider"] as! String
                }
                if dict.keys.contains("Province") {
                    self.province = dict["Province"] as! String
                }
                if dict.keys.contains("ServiceTag") {
                    self.serviceTag = dict["ServiceTag"] as! String
                }
                if dict.keys.contains("SkillGroupIdList") {
                    self.skillGroupIdList = dict["SkillGroupIdList"] as! [String]
                }
                if dict.keys.contains("Type") {
                    self.type = dict["Type"] as! Int32
                }
                if dict.keys.contains("Usage") {
                    self.usage = dict["Usage"] as! String
                }
            }
        }
        public var list: [ListPhoneTagsResponseBody.PhoneNumbers.List]?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("List") {
                self.list = dict["List"] as! [ListPhoneTagsResponseBody.PhoneNumbers.List]
            }
            if dict.keys.contains("PageNumber") {
                self.pageNumber = dict["PageNumber"] as! Int32
            }
            if dict.keys.contains("PageSize") {
                self.pageSize = dict["PageSize"] as! Int32
            }
            if dict.keys.contains("TotalCount") {
                self.totalCount = dict["TotalCount"] as! Int32
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var phoneNumbers: ListPhoneTagsResponseBody.PhoneNumbers?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.phoneNumbers?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.phoneNumbers != nil {
            map["PhoneNumbers"] = self.phoneNumbers?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("PhoneNumbers") {
            var model = ListPhoneTagsResponseBody.PhoneNumbers()
            model.fromMap(dict["PhoneNumbers"] as! [String: Any])
            self.phoneNumbers = model
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListPhoneTagsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListPhoneTagsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListPhoneTagsResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListRealTimeAgentRequest : Tea.TeaModel {
    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
    }
}

public class ListRealTimeAgentResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class User : Tea.TeaModel {
            public class SkillLevels : Tea.TeaModel {
                public class SkillLevel : Tea.TeaModel {
                    public class Skill : Tea.TeaModel {
                        public var instanceId: String?

                        public var skillGroupDescription: String?

                        public var skillGroupId: String?

                        public var skillGroupName: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.instanceId != nil {
                                map["InstanceId"] = self.instanceId!
                            }
                            if self.skillGroupDescription != nil {
                                map["SkillGroupDescription"] = self.skillGroupDescription!
                            }
                            if self.skillGroupId != nil {
                                map["SkillGroupId"] = self.skillGroupId!
                            }
                            if self.skillGroupName != nil {
                                map["SkillGroupName"] = self.skillGroupName!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("InstanceId") {
                                self.instanceId = dict["InstanceId"] as! String
                            }
                            if dict.keys.contains("SkillGroupDescription") {
                                self.skillGroupDescription = dict["SkillGroupDescription"] as! String
                            }
                            if dict.keys.contains("SkillGroupId") {
                                self.skillGroupId = dict["SkillGroupId"] as! String
                            }
                            if dict.keys.contains("SkillGroupName") {
                                self.skillGroupName = dict["SkillGroupName"] as! String
                            }
                        }
                    }
                    public var level: Int32?

                    public var skill: ListRealTimeAgentResponseBody.Data.User.SkillLevels.SkillLevel.Skill?

                    public var skillLevelId: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.skill?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.level != nil {
                            map["Level"] = self.level!
                        }
                        if self.skill != nil {
                            map["Skill"] = self.skill?.toMap()
                        }
                        if self.skillLevelId != nil {
                            map["SkillLevelId"] = self.skillLevelId!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("Level") {
                            self.level = dict["Level"] as! Int32
                        }
                        if dict.keys.contains("Skill") {
                            var model = ListRealTimeAgentResponseBody.Data.User.SkillLevels.SkillLevel.Skill()
                            model.fromMap(dict["Skill"] as! [String: Any])
                            self.skill = model
                        }
                        if dict.keys.contains("SkillLevelId") {
                            self.skillLevelId = dict["SkillLevelId"] as! String
                        }
                    }
                }
                public var skillLevel: [ListRealTimeAgentResponseBody.Data.User.SkillLevels.SkillLevel]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.skillLevel != nil {
                        var tmp : [Any] = []
                        for k in self.skillLevel! {
                            tmp.append(k.toMap())
                        }
                        map["SkillLevel"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("SkillLevel") {
                        self.skillLevel = dict["SkillLevel"] as! [ListRealTimeAgentResponseBody.Data.User.SkillLevels.SkillLevel]
                    }
                }
            }
            public var displayName: String?

            public var dn: String?

            public var phone: String?

            public var ramId: String?

            public var skillLevels: ListRealTimeAgentResponseBody.Data.User.SkillLevels?

            public var state: String?

            public var stateDesc: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.skillLevels?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.dn != nil {
                    map["Dn"] = self.dn!
                }
                if self.phone != nil {
                    map["Phone"] = self.phone!
                }
                if self.ramId != nil {
                    map["RamId"] = self.ramId!
                }
                if self.skillLevels != nil {
                    map["SkillLevels"] = self.skillLevels?.toMap()
                }
                if self.state != nil {
                    map["State"] = self.state!
                }
                if self.stateDesc != nil {
                    map["StateDesc"] = self.stateDesc!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("DisplayName") {
                    self.displayName = dict["DisplayName"] as! String
                }
                if dict.keys.contains("Dn") {
                    self.dn = dict["Dn"] as! String
                }
                if dict.keys.contains("Phone") {
                    self.phone = dict["Phone"] as! String
                }
                if dict.keys.contains("RamId") {
                    self.ramId = dict["RamId"] as! String
                }
                if dict.keys.contains("SkillLevels") {
                    var model = ListRealTimeAgentResponseBody.Data.User.SkillLevels()
                    model.fromMap(dict["SkillLevels"] as! [String: Any])
                    self.skillLevels = model
                }
                if dict.keys.contains("State") {
                    self.state = dict["State"] as! String
                }
                if dict.keys.contains("StateDesc") {
                    self.stateDesc = dict["StateDesc"] as! String
                }
            }
        }
        public var user: [ListRealTimeAgentResponseBody.Data.User]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.user != nil {
                var tmp : [Any] = []
                for k in self.user! {
                    tmp.append(k.toMap())
                }
                map["User"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("User") {
                self.user = dict["User"] as! [ListRealTimeAgentResponseBody.Data.User]
            }
        }
    }
    public var code: String?

    public var data: ListRealTimeAgentResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("Data") {
            var model = ListRealTimeAgentResponseBody.Data()
            model.fromMap(dict["Data"] as! [String: Any])
            self.data = model
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListRealTimeAgentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListRealTimeAgentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListRealTimeAgentResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListRecentCallRecordsRequest : Tea.TeaModel {
    public var criteria: String?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var startTime: Int64?

    public var stopTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.criteria != nil {
            map["Criteria"] = self.criteria!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.stopTime != nil {
            map["StopTime"] = self.stopTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Criteria") {
            self.criteria = dict["Criteria"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("PageNumber") {
            self.pageNumber = dict["PageNumber"] as! Int32
        }
        if dict.keys.contains("PageSize") {
            self.pageSize = dict["PageSize"] as! Int32
        }
        if dict.keys.contains("StartTime") {
            self.startTime = dict["StartTime"] as! Int64
        }
        if dict.keys.contains("StopTime") {
            self.stopTime = dict["StopTime"] as! Int64
        }
    }
}

public class ListRecentCallRecordsResponseBody : Tea.TeaModel {
    public class CallDetailRecords : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class CallDetailRecord : Tea.TeaModel {
                public class Agents : Tea.TeaModel {
                    public class CallDetailAgent : Tea.TeaModel {
                        public var agentId: String?

                        public var agentName: String?

                        public var contactId: String?

                        public var feedback: String?

                        public var holdTime: Int32?

                        public var queueTime: Int32?

                        public var ringTime: Int32?

                        public var satisfaction: String?

                        public var skillGroupName: String?

                        public var startTime: Int64?

                        public var talkTime: Int32?

                        public var workTime: Int32?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.agentId != nil {
                                map["AgentId"] = self.agentId!
                            }
                            if self.agentName != nil {
                                map["AgentName"] = self.agentName!
                            }
                            if self.contactId != nil {
                                map["ContactId"] = self.contactId!
                            }
                            if self.feedback != nil {
                                map["Feedback"] = self.feedback!
                            }
                            if self.holdTime != nil {
                                map["HoldTime"] = self.holdTime!
                            }
                            if self.queueTime != nil {
                                map["QueueTime"] = self.queueTime!
                            }
                            if self.ringTime != nil {
                                map["RingTime"] = self.ringTime!
                            }
                            if self.satisfaction != nil {
                                map["Satisfaction"] = self.satisfaction!
                            }
                            if self.skillGroupName != nil {
                                map["SkillGroupName"] = self.skillGroupName!
                            }
                            if self.startTime != nil {
                                map["StartTime"] = self.startTime!
                            }
                            if self.talkTime != nil {
                                map["TalkTime"] = self.talkTime!
                            }
                            if self.workTime != nil {
                                map["WorkTime"] = self.workTime!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("AgentId") {
                                self.agentId = dict["AgentId"] as! String
                            }
                            if dict.keys.contains("AgentName") {
                                self.agentName = dict["AgentName"] as! String
                            }
                            if dict.keys.contains("ContactId") {
                                self.contactId = dict["ContactId"] as! String
                            }
                            if dict.keys.contains("Feedback") {
                                self.feedback = dict["Feedback"] as! String
                            }
                            if dict.keys.contains("HoldTime") {
                                self.holdTime = dict["HoldTime"] as! Int32
                            }
                            if dict.keys.contains("QueueTime") {
                                self.queueTime = dict["QueueTime"] as! Int32
                            }
                            if dict.keys.contains("RingTime") {
                                self.ringTime = dict["RingTime"] as! Int32
                            }
                            if dict.keys.contains("Satisfaction") {
                                self.satisfaction = dict["Satisfaction"] as! String
                            }
                            if dict.keys.contains("SkillGroupName") {
                                self.skillGroupName = dict["SkillGroupName"] as! String
                            }
                            if dict.keys.contains("StartTime") {
                                self.startTime = dict["StartTime"] as! Int64
                            }
                            if dict.keys.contains("TalkTime") {
                                self.talkTime = dict["TalkTime"] as! Int32
                            }
                            if dict.keys.contains("WorkTime") {
                                self.workTime = dict["WorkTime"] as! Int32
                            }
                        }
                    }
                    public var callDetailAgent: [ListRecentCallRecordsResponseBody.CallDetailRecords.List.CallDetailRecord.Agents.CallDetailAgent]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.callDetailAgent != nil {
                            var tmp : [Any] = []
                            for k in self.callDetailAgent! {
                                tmp.append(k.toMap())
                            }
                            map["CallDetailAgent"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("CallDetailAgent") {
                            self.callDetailAgent = dict["CallDetailAgent"] as! [ListRecentCallRecordsResponseBody.CallDetailRecords.List.CallDetailRecord.Agents.CallDetailAgent]
                        }
                    }
                }
                public class Recordings : Tea.TeaModel {
                    public class Recording : Tea.TeaModel {
                        public var agentId: String?

                        public var agentName: String?

                        public var calledNumber: String?

                        public var callingNumber: String?

                        public var channel: String?

                        public var contactId: String?

                        public var contactType: String?

                        public var duration: Int32?

                        public var fileDescription: String?

                        public var fileName: String?

                        public var filePath: String?

                        public var instanceId: String?

                        public var startTime: Int64?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.agentId != nil {
                                map["AgentId"] = self.agentId!
                            }
                            if self.agentName != nil {
                                map["AgentName"] = self.agentName!
                            }
                            if self.calledNumber != nil {
                                map["CalledNumber"] = self.calledNumber!
                            }
                            if self.callingNumber != nil {
                                map["CallingNumber"] = self.callingNumber!
                            }
                            if self.channel != nil {
                                map["Channel"] = self.channel!
                            }
                            if self.contactId != nil {
                                map["ContactId"] = self.contactId!
                            }
                            if self.contactType != nil {
                                map["ContactType"] = self.contactType!
                            }
                            if self.duration != nil {
                                map["Duration"] = self.duration!
                            }
                            if self.fileDescription != nil {
                                map["FileDescription"] = self.fileDescription!
                            }
                            if self.fileName != nil {
                                map["FileName"] = self.fileName!
                            }
                            if self.filePath != nil {
                                map["FilePath"] = self.filePath!
                            }
                            if self.instanceId != nil {
                                map["InstanceId"] = self.instanceId!
                            }
                            if self.startTime != nil {
                                map["StartTime"] = self.startTime!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("AgentId") {
                                self.agentId = dict["AgentId"] as! String
                            }
                            if dict.keys.contains("AgentName") {
                                self.agentName = dict["AgentName"] as! String
                            }
                            if dict.keys.contains("CalledNumber") {
                                self.calledNumber = dict["CalledNumber"] as! String
                            }
                            if dict.keys.contains("CallingNumber") {
                                self.callingNumber = dict["CallingNumber"] as! String
                            }
                            if dict.keys.contains("Channel") {
                                self.channel = dict["Channel"] as! String
                            }
                            if dict.keys.contains("ContactId") {
                                self.contactId = dict["ContactId"] as! String
                            }
                            if dict.keys.contains("ContactType") {
                                self.contactType = dict["ContactType"] as! String
                            }
                            if dict.keys.contains("Duration") {
                                self.duration = dict["Duration"] as! Int32
                            }
                            if dict.keys.contains("FileDescription") {
                                self.fileDescription = dict["FileDescription"] as! String
                            }
                            if dict.keys.contains("FileName") {
                                self.fileName = dict["FileName"] as! String
                            }
                            if dict.keys.contains("FilePath") {
                                self.filePath = dict["FilePath"] as! String
                            }
                            if dict.keys.contains("InstanceId") {
                                self.instanceId = dict["InstanceId"] as! String
                            }
                            if dict.keys.contains("StartTime") {
                                self.startTime = dict["StartTime"] as! Int64
                            }
                        }
                    }
                    public var recording: [ListRecentCallRecordsResponseBody.CallDetailRecords.List.CallDetailRecord.Recordings.Recording]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.recording != nil {
                            var tmp : [Any] = []
                            for k in self.recording! {
                                tmp.append(k.toMap())
                            }
                            map["Recording"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("Recording") {
                            self.recording = dict["Recording"] as! [ListRecentCallRecordsResponseBody.CallDetailRecords.List.CallDetailRecord.Recordings.Recording]
                        }
                    }
                }
                public var agentNames: String?

                public var agents: ListRecentCallRecordsResponseBody.CallDetailRecords.List.CallDetailRecord.Agents?

                public var calledNumber: String?

                public var callingNumber: String?

                public var contactDisposition: String?

                public var contactId: String?

                public var contactType: String?

                public var duration: Int32?

                public var extraAttr: String?

                public var feedback: String?

                public var instanceId: String?

                public var recordings: ListRecentCallRecordsResponseBody.CallDetailRecords.List.CallDetailRecord.Recordings?

                public var satisfaction: Int32?

                public var satisfactionDesc: String?

                public var skillGroupNames: String?

                public var startTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.agents?.validate()
                    try self.recordings?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.agentNames != nil {
                        map["AgentNames"] = self.agentNames!
                    }
                    if self.agents != nil {
                        map["Agents"] = self.agents?.toMap()
                    }
                    if self.calledNumber != nil {
                        map["CalledNumber"] = self.calledNumber!
                    }
                    if self.callingNumber != nil {
                        map["CallingNumber"] = self.callingNumber!
                    }
                    if self.contactDisposition != nil {
                        map["ContactDisposition"] = self.contactDisposition!
                    }
                    if self.contactId != nil {
                        map["ContactId"] = self.contactId!
                    }
                    if self.contactType != nil {
                        map["ContactType"] = self.contactType!
                    }
                    if self.duration != nil {
                        map["Duration"] = self.duration!
                    }
                    if self.extraAttr != nil {
                        map["ExtraAttr"] = self.extraAttr!
                    }
                    if self.feedback != nil {
                        map["Feedback"] = self.feedback!
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.recordings != nil {
                        map["Recordings"] = self.recordings?.toMap()
                    }
                    if self.satisfaction != nil {
                        map["Satisfaction"] = self.satisfaction!
                    }
                    if self.satisfactionDesc != nil {
                        map["SatisfactionDesc"] = self.satisfactionDesc!
                    }
                    if self.skillGroupNames != nil {
                        map["SkillGroupNames"] = self.skillGroupNames!
                    }
                    if self.startTime != nil {
                        map["StartTime"] = self.startTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("AgentNames") {
                        self.agentNames = dict["AgentNames"] as! String
                    }
                    if dict.keys.contains("Agents") {
                        var model = ListRecentCallRecordsResponseBody.CallDetailRecords.List.CallDetailRecord.Agents()
                        model.fromMap(dict["Agents"] as! [String: Any])
                        self.agents = model
                    }
                    if dict.keys.contains("CalledNumber") {
                        self.calledNumber = dict["CalledNumber"] as! String
                    }
                    if dict.keys.contains("CallingNumber") {
                        self.callingNumber = dict["CallingNumber"] as! String
                    }
                    if dict.keys.contains("ContactDisposition") {
                        self.contactDisposition = dict["ContactDisposition"] as! String
                    }
                    if dict.keys.contains("ContactId") {
                        self.contactId = dict["ContactId"] as! String
                    }
                    if dict.keys.contains("ContactType") {
                        self.contactType = dict["ContactType"] as! String
                    }
                    if dict.keys.contains("Duration") {
                        self.duration = dict["Duration"] as! Int32
                    }
                    if dict.keys.contains("ExtraAttr") {
                        self.extraAttr = dict["ExtraAttr"] as! String
                    }
                    if dict.keys.contains("Feedback") {
                        self.feedback = dict["Feedback"] as! String
                    }
                    if dict.keys.contains("InstanceId") {
                        self.instanceId = dict["InstanceId"] as! String
                    }
                    if dict.keys.contains("Recordings") {
                        var model = ListRecentCallRecordsResponseBody.CallDetailRecords.List.CallDetailRecord.Recordings()
                        model.fromMap(dict["Recordings"] as! [String: Any])
                        self.recordings = model
                    }
                    if dict.keys.contains("Satisfaction") {
                        self.satisfaction = dict["Satisfaction"] as! Int32
                    }
                    if dict.keys.contains("SatisfactionDesc") {
                        self.satisfactionDesc = dict["SatisfactionDesc"] as! String
                    }
                    if dict.keys.contains("SkillGroupNames") {
                        self.skillGroupNames = dict["SkillGroupNames"] as! String
                    }
                    if dict.keys.contains("StartTime") {
                        self.startTime = dict["StartTime"] as! Int64
                    }
                }
            }
            public var callDetailRecord: [ListRecentCallRecordsResponseBody.CallDetailRecords.List.CallDetailRecord]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callDetailRecord != nil {
                    var tmp : [Any] = []
                    for k in self.callDetailRecord! {
                        tmp.append(k.toMap())
                    }
                    map["CallDetailRecord"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("CallDetailRecord") {
                    self.callDetailRecord = dict["CallDetailRecord"] as! [ListRecentCallRecordsResponseBody.CallDetailRecords.List.CallDetailRecord]
                }
            }
        }
        public var list: ListRecentCallRecordsResponseBody.CallDetailRecords.List?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.list?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                map["List"] = self.list?.toMap()
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("List") {
                var model = ListRecentCallRecordsResponseBody.CallDetailRecords.List()
                model.fromMap(dict["List"] as! [String: Any])
                self.list = model
            }
            if dict.keys.contains("PageNumber") {
                self.pageNumber = dict["PageNumber"] as! Int32
            }
            if dict.keys.contains("PageSize") {
                self.pageSize = dict["PageSize"] as! Int32
            }
            if dict.keys.contains("TotalCount") {
                self.totalCount = dict["TotalCount"] as! Int32
            }
        }
    }
    public var callDetailRecords: ListRecentCallRecordsResponseBody.CallDetailRecords?

    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.callDetailRecords?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.callDetailRecords != nil {
            map["CallDetailRecords"] = self.callDetailRecords?.toMap()
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("CallDetailRecords") {
            var model = ListRecentCallRecordsResponseBody.CallDetailRecords()
            model.fromMap(dict["CallDetailRecords"] as! [String: Any])
            self.callDetailRecords = model
        }
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListRecentCallRecordsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListRecentCallRecordsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListRecentCallRecordsResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListRecordingOfDualTrackRequest : Tea.TeaModel {
    public var agentId: String?

    public var calledNumber: String?

    public var callingNumber: String?

    public var connectId: String?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var startTime: Int64?

    public var stopTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentId != nil {
            map["AgentId"] = self.agentId!
        }
        if self.calledNumber != nil {
            map["CalledNumber"] = self.calledNumber!
        }
        if self.callingNumber != nil {
            map["CallingNumber"] = self.callingNumber!
        }
        if self.connectId != nil {
            map["ConnectId"] = self.connectId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.stopTime != nil {
            map["StopTime"] = self.stopTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("AgentId") {
            self.agentId = dict["AgentId"] as! String
        }
        if dict.keys.contains("CalledNumber") {
            self.calledNumber = dict["CalledNumber"] as! String
        }
        if dict.keys.contains("CallingNumber") {
            self.callingNumber = dict["CallingNumber"] as! String
        }
        if dict.keys.contains("ConnectId") {
            self.connectId = dict["ConnectId"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("PageNumber") {
            self.pageNumber = dict["PageNumber"] as! Int32
        }
        if dict.keys.contains("PageSize") {
            self.pageSize = dict["PageSize"] as! Int32
        }
        if dict.keys.contains("StartTime") {
            self.startTime = dict["StartTime"] as! Int64
        }
        if dict.keys.contains("StopTime") {
            self.stopTime = dict["StopTime"] as! Int64
        }
    }
}

public class ListRecordingOfDualTrackResponseBody : Tea.TeaModel {
    public class Recordings : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class Recording : Tea.TeaModel {
                public var agentId: String?

                public var agentName: String?

                public var calledNumber: String?

                public var callingNumber: String?

                public var channel: String?

                public var contactId: String?

                public var contactType: String?

                public var duration: Int32?

                public var fileDescription: String?

                public var fileName: String?

                public var filePath: String?

                public var instanceId: String?

                public var startTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.agentId != nil {
                        map["AgentId"] = self.agentId!
                    }
                    if self.agentName != nil {
                        map["AgentName"] = self.agentName!
                    }
                    if self.calledNumber != nil {
                        map["CalledNumber"] = self.calledNumber!
                    }
                    if self.callingNumber != nil {
                        map["CallingNumber"] = self.callingNumber!
                    }
                    if self.channel != nil {
                        map["Channel"] = self.channel!
                    }
                    if self.contactId != nil {
                        map["ContactId"] = self.contactId!
                    }
                    if self.contactType != nil {
                        map["ContactType"] = self.contactType!
                    }
                    if self.duration != nil {
                        map["Duration"] = self.duration!
                    }
                    if self.fileDescription != nil {
                        map["FileDescription"] = self.fileDescription!
                    }
                    if self.fileName != nil {
                        map["FileName"] = self.fileName!
                    }
                    if self.filePath != nil {
                        map["FilePath"] = self.filePath!
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.startTime != nil {
                        map["StartTime"] = self.startTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("AgentId") {
                        self.agentId = dict["AgentId"] as! String
                    }
                    if dict.keys.contains("AgentName") {
                        self.agentName = dict["AgentName"] as! String
                    }
                    if dict.keys.contains("CalledNumber") {
                        self.calledNumber = dict["CalledNumber"] as! String
                    }
                    if dict.keys.contains("CallingNumber") {
                        self.callingNumber = dict["CallingNumber"] as! String
                    }
                    if dict.keys.contains("Channel") {
                        self.channel = dict["Channel"] as! String
                    }
                    if dict.keys.contains("ContactId") {
                        self.contactId = dict["ContactId"] as! String
                    }
                    if dict.keys.contains("ContactType") {
                        self.contactType = dict["ContactType"] as! String
                    }
                    if dict.keys.contains("Duration") {
                        self.duration = dict["Duration"] as! Int32
                    }
                    if dict.keys.contains("FileDescription") {
                        self.fileDescription = dict["FileDescription"] as! String
                    }
                    if dict.keys.contains("FileName") {
                        self.fileName = dict["FileName"] as! String
                    }
                    if dict.keys.contains("FilePath") {
                        self.filePath = dict["FilePath"] as! String
                    }
                    if dict.keys.contains("InstanceId") {
                        self.instanceId = dict["InstanceId"] as! String
                    }
                    if dict.keys.contains("StartTime") {
                        self.startTime = dict["StartTime"] as! Int64
                    }
                }
            }
            public var recording: [ListRecordingOfDualTrackResponseBody.Recordings.List.Recording]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.recording != nil {
                    var tmp : [Any] = []
                    for k in self.recording! {
                        tmp.append(k.toMap())
                    }
                    map["Recording"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("Recording") {
                    self.recording = dict["Recording"] as! [ListRecordingOfDualTrackResponseBody.Recordings.List.Recording]
                }
            }
        }
        public var list: ListRecordingOfDualTrackResponseBody.Recordings.List?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.list?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                map["List"] = self.list?.toMap()
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("List") {
                var model = ListRecordingOfDualTrackResponseBody.Recordings.List()
                model.fromMap(dict["List"] as! [String: Any])
                self.list = model
            }
            if dict.keys.contains("PageNumber") {
                self.pageNumber = dict["PageNumber"] as! Int32
            }
            if dict.keys.contains("PageSize") {
                self.pageSize = dict["PageSize"] as! Int32
            }
            if dict.keys.contains("TotalCount") {
                self.totalCount = dict["TotalCount"] as! Int32
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var recordings: ListRecordingOfDualTrackResponseBody.Recordings?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.recordings?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.recordings != nil {
            map["Recordings"] = self.recordings?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("Recordings") {
            var model = ListRecordingOfDualTrackResponseBody.Recordings()
            model.fromMap(dict["Recordings"] as! [String: Any])
            self.recordings = model
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListRecordingOfDualTrackResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListRecordingOfDualTrackResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListRecordingOfDualTrackResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListRecordingsRequest : Tea.TeaModel {
    public var agentId: String?

    public var criteria: String?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var phoneNumber: String?

    public var startTime: Int64?

    public var stopTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentId != nil {
            map["AgentId"] = self.agentId!
        }
        if self.criteria != nil {
            map["Criteria"] = self.criteria!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.phoneNumber != nil {
            map["PhoneNumber"] = self.phoneNumber!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.stopTime != nil {
            map["StopTime"] = self.stopTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("AgentId") {
            self.agentId = dict["AgentId"] as! String
        }
        if dict.keys.contains("Criteria") {
            self.criteria = dict["Criteria"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("PageNumber") {
            self.pageNumber = dict["PageNumber"] as! Int32
        }
        if dict.keys.contains("PageSize") {
            self.pageSize = dict["PageSize"] as! Int32
        }
        if dict.keys.contains("PhoneNumber") {
            self.phoneNumber = dict["PhoneNumber"] as! String
        }
        if dict.keys.contains("StartTime") {
            self.startTime = dict["StartTime"] as! Int64
        }
        if dict.keys.contains("StopTime") {
            self.stopTime = dict["StopTime"] as! Int64
        }
    }
}

public class ListRecordingsResponseBody : Tea.TeaModel {
    public class Recordings : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class Recording : Tea.TeaModel {
                public var agentId: String?

                public var agentName: String?

                public var calledNumber: String?

                public var callingNumber: String?

                public var channel: String?

                public var contactId: String?

                public var contactType: String?

                public var duration: Int32?

                public var fileDescription: String?

                public var fileName: String?

                public var filePath: String?

                public var instanceId: String?

                public var startTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.agentId != nil {
                        map["AgentId"] = self.agentId!
                    }
                    if self.agentName != nil {
                        map["AgentName"] = self.agentName!
                    }
                    if self.calledNumber != nil {
                        map["CalledNumber"] = self.calledNumber!
                    }
                    if self.callingNumber != nil {
                        map["CallingNumber"] = self.callingNumber!
                    }
                    if self.channel != nil {
                        map["Channel"] = self.channel!
                    }
                    if self.contactId != nil {
                        map["ContactId"] = self.contactId!
                    }
                    if self.contactType != nil {
                        map["ContactType"] = self.contactType!
                    }
                    if self.duration != nil {
                        map["Duration"] = self.duration!
                    }
                    if self.fileDescription != nil {
                        map["FileDescription"] = self.fileDescription!
                    }
                    if self.fileName != nil {
                        map["FileName"] = self.fileName!
                    }
                    if self.filePath != nil {
                        map["FilePath"] = self.filePath!
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.startTime != nil {
                        map["StartTime"] = self.startTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("AgentId") {
                        self.agentId = dict["AgentId"] as! String
                    }
                    if dict.keys.contains("AgentName") {
                        self.agentName = dict["AgentName"] as! String
                    }
                    if dict.keys.contains("CalledNumber") {
                        self.calledNumber = dict["CalledNumber"] as! String
                    }
                    if dict.keys.contains("CallingNumber") {
                        self.callingNumber = dict["CallingNumber"] as! String
                    }
                    if dict.keys.contains("Channel") {
                        self.channel = dict["Channel"] as! String
                    }
                    if dict.keys.contains("ContactId") {
                        self.contactId = dict["ContactId"] as! String
                    }
                    if dict.keys.contains("ContactType") {
                        self.contactType = dict["ContactType"] as! String
                    }
                    if dict.keys.contains("Duration") {
                        self.duration = dict["Duration"] as! Int32
                    }
                    if dict.keys.contains("FileDescription") {
                        self.fileDescription = dict["FileDescription"] as! String
                    }
                    if dict.keys.contains("FileName") {
                        self.fileName = dict["FileName"] as! String
                    }
                    if dict.keys.contains("FilePath") {
                        self.filePath = dict["FilePath"] as! String
                    }
                    if dict.keys.contains("InstanceId") {
                        self.instanceId = dict["InstanceId"] as! String
                    }
                    if dict.keys.contains("StartTime") {
                        self.startTime = dict["StartTime"] as! Int64
                    }
                }
            }
            public var recording: [ListRecordingsResponseBody.Recordings.List.Recording]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.recording != nil {
                    var tmp : [Any] = []
                    for k in self.recording! {
                        tmp.append(k.toMap())
                    }
                    map["Recording"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("Recording") {
                    self.recording = dict["Recording"] as! [ListRecordingsResponseBody.Recordings.List.Recording]
                }
            }
        }
        public var list: ListRecordingsResponseBody.Recordings.List?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.list?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                map["List"] = self.list?.toMap()
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("List") {
                var model = ListRecordingsResponseBody.Recordings.List()
                model.fromMap(dict["List"] as! [String: Any])
                self.list = model
            }
            if dict.keys.contains("PageNumber") {
                self.pageNumber = dict["PageNumber"] as! Int32
            }
            if dict.keys.contains("PageSize") {
                self.pageSize = dict["PageSize"] as! Int32
            }
            if dict.keys.contains("TotalCount") {
                self.totalCount = dict["TotalCount"] as! Int32
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var recordings: ListRecordingsResponseBody.Recordings?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.recordings?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.recordings != nil {
            map["Recordings"] = self.recordings?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("Recordings") {
            var model = ListRecordingsResponseBody.Recordings()
            model.fromMap(dict["Recordings"] as! [String: Any])
            self.recordings = model
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListRecordingsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListRecordingsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListRecordingsResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListRecordingsByContactIdRequest : Tea.TeaModel {
    public var contactId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("ContactId") {
            self.contactId = dict["ContactId"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
    }
}

public class ListRecordingsByContactIdResponseBody : Tea.TeaModel {
    public class Recordings : Tea.TeaModel {
        public class Recording : Tea.TeaModel {
            public var agentId: String?

            public var agentName: String?

            public var calledNumber: String?

            public var callingNumber: String?

            public var channel: String?

            public var contactId: String?

            public var contactType: String?

            public var duration: Int32?

            public var fileDescription: String?

            public var fileName: String?

            public var filePath: String?

            public var instanceId: String?

            public var qualityCheckTaskId: String?

            public var qualityCheckTid: String?

            public var startTime: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.agentId != nil {
                    map["AgentId"] = self.agentId!
                }
                if self.agentName != nil {
                    map["AgentName"] = self.agentName!
                }
                if self.calledNumber != nil {
                    map["CalledNumber"] = self.calledNumber!
                }
                if self.callingNumber != nil {
                    map["CallingNumber"] = self.callingNumber!
                }
                if self.channel != nil {
                    map["Channel"] = self.channel!
                }
                if self.contactId != nil {
                    map["ContactId"] = self.contactId!
                }
                if self.contactType != nil {
                    map["ContactType"] = self.contactType!
                }
                if self.duration != nil {
                    map["Duration"] = self.duration!
                }
                if self.fileDescription != nil {
                    map["FileDescription"] = self.fileDescription!
                }
                if self.fileName != nil {
                    map["FileName"] = self.fileName!
                }
                if self.filePath != nil {
                    map["FilePath"] = self.filePath!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.qualityCheckTaskId != nil {
                    map["QualityCheckTaskId"] = self.qualityCheckTaskId!
                }
                if self.qualityCheckTid != nil {
                    map["QualityCheckTid"] = self.qualityCheckTid!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("AgentId") {
                    self.agentId = dict["AgentId"] as! String
                }
                if dict.keys.contains("AgentName") {
                    self.agentName = dict["AgentName"] as! String
                }
                if dict.keys.contains("CalledNumber") {
                    self.calledNumber = dict["CalledNumber"] as! String
                }
                if dict.keys.contains("CallingNumber") {
                    self.callingNumber = dict["CallingNumber"] as! String
                }
                if dict.keys.contains("Channel") {
                    self.channel = dict["Channel"] as! String
                }
                if dict.keys.contains("ContactId") {
                    self.contactId = dict["ContactId"] as! String
                }
                if dict.keys.contains("ContactType") {
                    self.contactType = dict["ContactType"] as! String
                }
                if dict.keys.contains("Duration") {
                    self.duration = dict["Duration"] as! Int32
                }
                if dict.keys.contains("FileDescription") {
                    self.fileDescription = dict["FileDescription"] as! String
                }
                if dict.keys.contains("FileName") {
                    self.fileName = dict["FileName"] as! String
                }
                if dict.keys.contains("FilePath") {
                    self.filePath = dict["FilePath"] as! String
                }
                if dict.keys.contains("InstanceId") {
                    self.instanceId = dict["InstanceId"] as! String
                }
                if dict.keys.contains("QualityCheckTaskId") {
                    self.qualityCheckTaskId = dict["QualityCheckTaskId"] as! String
                }
                if dict.keys.contains("QualityCheckTid") {
                    self.qualityCheckTid = dict["QualityCheckTid"] as! String
                }
                if dict.keys.contains("StartTime") {
                    self.startTime = dict["StartTime"] as! Int64
                }
            }
        }
        public var recording: [ListRecordingsByContactIdResponseBody.Recordings.Recording]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.recording != nil {
                var tmp : [Any] = []
                for k in self.recording! {
                    tmp.append(k.toMap())
                }
                map["Recording"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("Recording") {
                self.recording = dict["Recording"] as! [ListRecordingsByContactIdResponseBody.Recordings.Recording]
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var recordings: ListRecordingsByContactIdResponseBody.Recordings?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.recordings?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.recordings != nil {
            map["Recordings"] = self.recordings?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("Recordings") {
            var model = ListRecordingsByContactIdResponseBody.Recordings()
            model.fromMap(dict["Recordings"] as! [String: Any])
            self.recordings = model
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListRecordingsByContactIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListRecordingsByContactIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListRecordingsByContactIdResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListRolesRequest : Tea.TeaModel {
    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
    }
}

public class ListRolesResponseBody : Tea.TeaModel {
    public class Roles : Tea.TeaModel {
        public class Role : Tea.TeaModel {
            public var instanceId: String?

            public var roleDescription: String?

            public var roleId: String?

            public var roleName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.roleDescription != nil {
                    map["RoleDescription"] = self.roleDescription!
                }
                if self.roleId != nil {
                    map["RoleId"] = self.roleId!
                }
                if self.roleName != nil {
                    map["RoleName"] = self.roleName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("InstanceId") {
                    self.instanceId = dict["InstanceId"] as! String
                }
                if dict.keys.contains("RoleDescription") {
                    self.roleDescription = dict["RoleDescription"] as! String
                }
                if dict.keys.contains("RoleId") {
                    self.roleId = dict["RoleId"] as! String
                }
                if dict.keys.contains("RoleName") {
                    self.roleName = dict["RoleName"] as! String
                }
            }
        }
        public var role: [ListRolesResponseBody.Roles.Role]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.role != nil {
                var tmp : [Any] = []
                for k in self.role! {
                    tmp.append(k.toMap())
                }
                map["Role"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("Role") {
                self.role = dict["Role"] as! [ListRolesResponseBody.Roles.Role]
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var roles: ListRolesResponseBody.Roles?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.roles?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.roles != nil {
            map["Roles"] = self.roles?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Roles") {
            var model = ListRolesResponseBody.Roles()
            model.fromMap(dict["Roles"] as! [String: Any])
            self.roles = model
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListRolesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListRolesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListRolesResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListSkillGroupStatesRequest : Tea.TeaModel {
    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var skillGroupIds: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.skillGroupIds != nil {
            map["SkillGroupIds"] = self.skillGroupIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("PageNumber") {
            self.pageNumber = dict["PageNumber"] as! Int32
        }
        if dict.keys.contains("PageSize") {
            self.pageSize = dict["PageSize"] as! Int32
        }
        if dict.keys.contains("SkillGroupIds") {
            self.skillGroupIds = dict["SkillGroupIds"] as! String
        }
    }
}

public class ListSkillGroupStatesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class RealTimeSkillGroupState : Tea.TeaModel {
                public var breakingAgents: Int64?

                public var instanceId: String?

                public var loggedInAgents: Int64?

                public var longestCall: Int64?

                public var readyAgents: Int64?

                public var skillGroupId: String?

                public var skillGroupName: String?

                public var talkingAgents: Int64?

                public var waitingCalls: Int64?

                public var workingAgents: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.breakingAgents != nil {
                        map["BreakingAgents"] = self.breakingAgents!
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.loggedInAgents != nil {
                        map["LoggedInAgents"] = self.loggedInAgents!
                    }
                    if self.longestCall != nil {
                        map["LongestCall"] = self.longestCall!
                    }
                    if self.readyAgents != nil {
                        map["ReadyAgents"] = self.readyAgents!
                    }
                    if self.skillGroupId != nil {
                        map["SkillGroupId"] = self.skillGroupId!
                    }
                    if self.skillGroupName != nil {
                        map["SkillGroupName"] = self.skillGroupName!
                    }
                    if self.talkingAgents != nil {
                        map["TalkingAgents"] = self.talkingAgents!
                    }
                    if self.waitingCalls != nil {
                        map["WaitingCalls"] = self.waitingCalls!
                    }
                    if self.workingAgents != nil {
                        map["WorkingAgents"] = self.workingAgents!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("BreakingAgents") {
                        self.breakingAgents = dict["BreakingAgents"] as! Int64
                    }
                    if dict.keys.contains("InstanceId") {
                        self.instanceId = dict["InstanceId"] as! String
                    }
                    if dict.keys.contains("LoggedInAgents") {
                        self.loggedInAgents = dict["LoggedInAgents"] as! Int64
                    }
                    if dict.keys.contains("LongestCall") {
                        self.longestCall = dict["LongestCall"] as! Int64
                    }
                    if dict.keys.contains("ReadyAgents") {
                        self.readyAgents = dict["ReadyAgents"] as! Int64
                    }
                    if dict.keys.contains("SkillGroupId") {
                        self.skillGroupId = dict["SkillGroupId"] as! String
                    }
                    if dict.keys.contains("SkillGroupName") {
                        self.skillGroupName = dict["SkillGroupName"] as! String
                    }
                    if dict.keys.contains("TalkingAgents") {
                        self.talkingAgents = dict["TalkingAgents"] as! Int64
                    }
                    if dict.keys.contains("WaitingCalls") {
                        self.waitingCalls = dict["WaitingCalls"] as! Int64
                    }
                    if dict.keys.contains("WorkingAgents") {
                        self.workingAgents = dict["WorkingAgents"] as! Int64
                    }
                }
            }
            public var realTimeSkillGroupState: [ListSkillGroupStatesResponseBody.Data.List.RealTimeSkillGroupState]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.realTimeSkillGroupState != nil {
                    var tmp : [Any] = []
                    for k in self.realTimeSkillGroupState! {
                        tmp.append(k.toMap())
                    }
                    map["RealTimeSkillGroupState"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("RealTimeSkillGroupState") {
                    self.realTimeSkillGroupState = dict["RealTimeSkillGroupState"] as! [ListSkillGroupStatesResponseBody.Data.List.RealTimeSkillGroupState]
                }
            }
        }
        public var list: ListSkillGroupStatesResponseBody.Data.List?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.list?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                map["List"] = self.list?.toMap()
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("List") {
                var model = ListSkillGroupStatesResponseBody.Data.List()
                model.fromMap(dict["List"] as! [String: Any])
                self.list = model
            }
            if dict.keys.contains("PageNumber") {
                self.pageNumber = dict["PageNumber"] as! Int32
            }
            if dict.keys.contains("PageSize") {
                self.pageSize = dict["PageSize"] as! Int32
            }
            if dict.keys.contains("TotalCount") {
                self.totalCount = dict["TotalCount"] as! Int32
            }
        }
    }
    public var code: String?

    public var data: ListSkillGroupStatesResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("Data") {
            var model = ListSkillGroupStatesResponseBody.Data()
            model.fromMap(dict["Data"] as! [String: Any])
            self.data = model
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListSkillGroupStatesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListSkillGroupStatesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListSkillGroupStatesResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListSkillGroupSummaryReportsRequest : Tea.TeaModel {
    public var endTime: String?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var skillGroupIds: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.skillGroupIds != nil {
            map["SkillGroupIds"] = self.skillGroupIds!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("EndTime") {
            self.endTime = dict["EndTime"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("PageNumber") {
            self.pageNumber = dict["PageNumber"] as! Int32
        }
        if dict.keys.contains("PageSize") {
            self.pageSize = dict["PageSize"] as! Int32
        }
        if dict.keys.contains("SkillGroupIds") {
            self.skillGroupIds = dict["SkillGroupIds"] as! String
        }
        if dict.keys.contains("StartTime") {
            self.startTime = dict["StartTime"] as! String
        }
    }
}

public class ListSkillGroupSummaryReportsResponseBody : Tea.TeaModel {
    public class PagedSkillGroupSummaryReport : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class SkillGroupSummaryReport : Tea.TeaModel {
                public class Inbound : Tea.TeaModel {
                    public var abandonedInQueueOfQueueCount: Int64?

                    public var answeredByAgentOfQueueCount: Int64?

                    public var answeredByAgentOfQueueMaxWaitTimeDuration: Int64?

                    public var answeredByAgentOfQueueWaitTimeDuration: Int64?

                    public var averageRingTime: Int64?

                    public var averageTalkTime: Int64?

                    public var averageWorkTime: Int64?

                    public var callsHandled: Int64?

                    public var callsOffered: Int64?

                    public var giveUpByAgentOfQueueCount: Int64?

                    public var handleRate: Double?

                    public var inComingQueueOfQueueCount: Int64?

                    public var maxRingTime: Int64?

                    public var maxTalkTime: String?

                    public var maxWorkTime: Int64?

                    public var overFlowInQueueOfQueueCount: Int64?

                    public var queueMaxWaitTimeDuration: Int64?

                    public var queueWaitTimeDuration: Int64?

                    public var satisfactionIndex: Double?

                    public var satisfactionSurveysOffered: Int64?

                    public var satisfactionSurveysResponded: Int64?

                    public var serviceLevel20: Double?

                    public var totalRingTime: Int64?

                    public var totalTalkTime: Int64?

                    public var totalWorkTime: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.abandonedInQueueOfQueueCount != nil {
                            map["AbandonedInQueueOfQueueCount"] = self.abandonedInQueueOfQueueCount!
                        }
                        if self.answeredByAgentOfQueueCount != nil {
                            map["AnsweredByAgentOfQueueCount"] = self.answeredByAgentOfQueueCount!
                        }
                        if self.answeredByAgentOfQueueMaxWaitTimeDuration != nil {
                            map["AnsweredByAgentOfQueueMaxWaitTimeDuration"] = self.answeredByAgentOfQueueMaxWaitTimeDuration!
                        }
                        if self.answeredByAgentOfQueueWaitTimeDuration != nil {
                            map["AnsweredByAgentOfQueueWaitTimeDuration"] = self.answeredByAgentOfQueueWaitTimeDuration!
                        }
                        if self.averageRingTime != nil {
                            map["AverageRingTime"] = self.averageRingTime!
                        }
                        if self.averageTalkTime != nil {
                            map["AverageTalkTime"] = self.averageTalkTime!
                        }
                        if self.averageWorkTime != nil {
                            map["AverageWorkTime"] = self.averageWorkTime!
                        }
                        if self.callsHandled != nil {
                            map["CallsHandled"] = self.callsHandled!
                        }
                        if self.callsOffered != nil {
                            map["CallsOffered"] = self.callsOffered!
                        }
                        if self.giveUpByAgentOfQueueCount != nil {
                            map["GiveUpByAgentOfQueueCount"] = self.giveUpByAgentOfQueueCount!
                        }
                        if self.handleRate != nil {
                            map["HandleRate"] = self.handleRate!
                        }
                        if self.inComingQueueOfQueueCount != nil {
                            map["InComingQueueOfQueueCount"] = self.inComingQueueOfQueueCount!
                        }
                        if self.maxRingTime != nil {
                            map["MaxRingTime"] = self.maxRingTime!
                        }
                        if self.maxTalkTime != nil {
                            map["MaxTalkTime"] = self.maxTalkTime!
                        }
                        if self.maxWorkTime != nil {
                            map["MaxWorkTime"] = self.maxWorkTime!
                        }
                        if self.overFlowInQueueOfQueueCount != nil {
                            map["OverFlowInQueueOfQueueCount"] = self.overFlowInQueueOfQueueCount!
                        }
                        if self.queueMaxWaitTimeDuration != nil {
                            map["QueueMaxWaitTimeDuration"] = self.queueMaxWaitTimeDuration!
                        }
                        if self.queueWaitTimeDuration != nil {
                            map["QueueWaitTimeDuration"] = self.queueWaitTimeDuration!
                        }
                        if self.satisfactionIndex != nil {
                            map["SatisfactionIndex"] = self.satisfactionIndex!
                        }
                        if self.satisfactionSurveysOffered != nil {
                            map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                        }
                        if self.satisfactionSurveysResponded != nil {
                            map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                        }
                        if self.serviceLevel20 != nil {
                            map["ServiceLevel20"] = self.serviceLevel20!
                        }
                        if self.totalRingTime != nil {
                            map["TotalRingTime"] = self.totalRingTime!
                        }
                        if self.totalTalkTime != nil {
                            map["TotalTalkTime"] = self.totalTalkTime!
                        }
                        if self.totalWorkTime != nil {
                            map["TotalWorkTime"] = self.totalWorkTime!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("AbandonedInQueueOfQueueCount") {
                            self.abandonedInQueueOfQueueCount = dict["AbandonedInQueueOfQueueCount"] as! Int64
                        }
                        if dict.keys.contains("AnsweredByAgentOfQueueCount") {
                            self.answeredByAgentOfQueueCount = dict["AnsweredByAgentOfQueueCount"] as! Int64
                        }
                        if dict.keys.contains("AnsweredByAgentOfQueueMaxWaitTimeDuration") {
                            self.answeredByAgentOfQueueMaxWaitTimeDuration = dict["AnsweredByAgentOfQueueMaxWaitTimeDuration"] as! Int64
                        }
                        if dict.keys.contains("AnsweredByAgentOfQueueWaitTimeDuration") {
                            self.answeredByAgentOfQueueWaitTimeDuration = dict["AnsweredByAgentOfQueueWaitTimeDuration"] as! Int64
                        }
                        if dict.keys.contains("AverageRingTime") {
                            self.averageRingTime = dict["AverageRingTime"] as! Int64
                        }
                        if dict.keys.contains("AverageTalkTime") {
                            self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                        }
                        if dict.keys.contains("AverageWorkTime") {
                            self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                        }
                        if dict.keys.contains("CallsHandled") {
                            self.callsHandled = dict["CallsHandled"] as! Int64
                        }
                        if dict.keys.contains("CallsOffered") {
                            self.callsOffered = dict["CallsOffered"] as! Int64
                        }
                        if dict.keys.contains("GiveUpByAgentOfQueueCount") {
                            self.giveUpByAgentOfQueueCount = dict["GiveUpByAgentOfQueueCount"] as! Int64
                        }
                        if dict.keys.contains("HandleRate") {
                            self.handleRate = dict["HandleRate"] as! Double
                        }
                        if dict.keys.contains("InComingQueueOfQueueCount") {
                            self.inComingQueueOfQueueCount = dict["InComingQueueOfQueueCount"] as! Int64
                        }
                        if dict.keys.contains("MaxRingTime") {
                            self.maxRingTime = dict["MaxRingTime"] as! Int64
                        }
                        if dict.keys.contains("MaxTalkTime") {
                            self.maxTalkTime = dict["MaxTalkTime"] as! String
                        }
                        if dict.keys.contains("MaxWorkTime") {
                            self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                        }
                        if dict.keys.contains("OverFlowInQueueOfQueueCount") {
                            self.overFlowInQueueOfQueueCount = dict["OverFlowInQueueOfQueueCount"] as! Int64
                        }
                        if dict.keys.contains("QueueMaxWaitTimeDuration") {
                            self.queueMaxWaitTimeDuration = dict["QueueMaxWaitTimeDuration"] as! Int64
                        }
                        if dict.keys.contains("QueueWaitTimeDuration") {
                            self.queueWaitTimeDuration = dict["QueueWaitTimeDuration"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionIndex") {
                            self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                        }
                        if dict.keys.contains("SatisfactionSurveysOffered") {
                            self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionSurveysResponded") {
                            self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                        }
                        if dict.keys.contains("ServiceLevel20") {
                            self.serviceLevel20 = dict["ServiceLevel20"] as! Double
                        }
                        if dict.keys.contains("TotalRingTime") {
                            self.totalRingTime = dict["TotalRingTime"] as! Int64
                        }
                        if dict.keys.contains("TotalTalkTime") {
                            self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                        }
                        if dict.keys.contains("TotalWorkTime") {
                            self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                        }
                    }
                }
                public class Outbound : Tea.TeaModel {
                    public var answerRate: Double?

                    public var averageDialingTime: Int64?

                    public var averageTalkTime: Int64?

                    public var averageWorkTime: Int64?

                    public var callsAnswered: Int64?

                    public var callsDialed: Int64?

                    public var maxDialingTime: Int64?

                    public var maxTalkTime: Int64?

                    public var maxWorkTime: Int64?

                    public var satisfactionIndex: Double?

                    public var satisfactionSurveysOffered: Int64?

                    public var satisfactionSurveysResponded: Int64?

                    public var totalDialingTime: Int64?

                    public var totalTalkTime: Int64?

                    public var totalWorkTime: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.answerRate != nil {
                            map["AnswerRate"] = self.answerRate!
                        }
                        if self.averageDialingTime != nil {
                            map["AverageDialingTime"] = self.averageDialingTime!
                        }
                        if self.averageTalkTime != nil {
                            map["AverageTalkTime"] = self.averageTalkTime!
                        }
                        if self.averageWorkTime != nil {
                            map["AverageWorkTime"] = self.averageWorkTime!
                        }
                        if self.callsAnswered != nil {
                            map["CallsAnswered"] = self.callsAnswered!
                        }
                        if self.callsDialed != nil {
                            map["CallsDialed"] = self.callsDialed!
                        }
                        if self.maxDialingTime != nil {
                            map["MaxDialingTime"] = self.maxDialingTime!
                        }
                        if self.maxTalkTime != nil {
                            map["MaxTalkTime"] = self.maxTalkTime!
                        }
                        if self.maxWorkTime != nil {
                            map["MaxWorkTime"] = self.maxWorkTime!
                        }
                        if self.satisfactionIndex != nil {
                            map["SatisfactionIndex"] = self.satisfactionIndex!
                        }
                        if self.satisfactionSurveysOffered != nil {
                            map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                        }
                        if self.satisfactionSurveysResponded != nil {
                            map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                        }
                        if self.totalDialingTime != nil {
                            map["TotalDialingTime"] = self.totalDialingTime!
                        }
                        if self.totalTalkTime != nil {
                            map["TotalTalkTime"] = self.totalTalkTime!
                        }
                        if self.totalWorkTime != nil {
                            map["TotalWorkTime"] = self.totalWorkTime!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("AnswerRate") {
                            self.answerRate = dict["AnswerRate"] as! Double
                        }
                        if dict.keys.contains("AverageDialingTime") {
                            self.averageDialingTime = dict["AverageDialingTime"] as! Int64
                        }
                        if dict.keys.contains("AverageTalkTime") {
                            self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                        }
                        if dict.keys.contains("AverageWorkTime") {
                            self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                        }
                        if dict.keys.contains("CallsAnswered") {
                            self.callsAnswered = dict["CallsAnswered"] as! Int64
                        }
                        if dict.keys.contains("CallsDialed") {
                            self.callsDialed = dict["CallsDialed"] as! Int64
                        }
                        if dict.keys.contains("MaxDialingTime") {
                            self.maxDialingTime = dict["MaxDialingTime"] as! Int64
                        }
                        if dict.keys.contains("MaxTalkTime") {
                            self.maxTalkTime = dict["MaxTalkTime"] as! Int64
                        }
                        if dict.keys.contains("MaxWorkTime") {
                            self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionIndex") {
                            self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                        }
                        if dict.keys.contains("SatisfactionSurveysOffered") {
                            self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionSurveysResponded") {
                            self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                        }
                        if dict.keys.contains("TotalDialingTime") {
                            self.totalDialingTime = dict["TotalDialingTime"] as! Int64
                        }
                        if dict.keys.contains("TotalTalkTime") {
                            self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                        }
                        if dict.keys.contains("TotalWorkTime") {
                            self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                        }
                    }
                }
                public class Overall : Tea.TeaModel {
                    public var averageReadyTime: Int64?

                    public var averageTalkTime: Int64?

                    public var averageWorkTime: Int64?

                    public var maxReadyTime: Int64?

                    public var maxTalkTime: Int64?

                    public var maxWorkTime: Int64?

                    public var occupancyRate: Double?

                    public var satisfactionIndex: Double?

                    public var satisfactionSurveysOffered: Int64?

                    public var satisfactionSurveysResponded: Int64?

                    public var totalBreakTime: Int64?

                    public var totalCalls: Int64?

                    public var totalLoggedInTime: Int64?

                    public var totalReadyTime: Int64?

                    public var totalTalkTime: Int64?

                    public var totalWorkTime: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.averageReadyTime != nil {
                            map["AverageReadyTime"] = self.averageReadyTime!
                        }
                        if self.averageTalkTime != nil {
                            map["AverageTalkTime"] = self.averageTalkTime!
                        }
                        if self.averageWorkTime != nil {
                            map["AverageWorkTime"] = self.averageWorkTime!
                        }
                        if self.maxReadyTime != nil {
                            map["MaxReadyTime"] = self.maxReadyTime!
                        }
                        if self.maxTalkTime != nil {
                            map["MaxTalkTime"] = self.maxTalkTime!
                        }
                        if self.maxWorkTime != nil {
                            map["MaxWorkTime"] = self.maxWorkTime!
                        }
                        if self.occupancyRate != nil {
                            map["OccupancyRate"] = self.occupancyRate!
                        }
                        if self.satisfactionIndex != nil {
                            map["SatisfactionIndex"] = self.satisfactionIndex!
                        }
                        if self.satisfactionSurveysOffered != nil {
                            map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                        }
                        if self.satisfactionSurveysResponded != nil {
                            map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                        }
                        if self.totalBreakTime != nil {
                            map["TotalBreakTime"] = self.totalBreakTime!
                        }
                        if self.totalCalls != nil {
                            map["TotalCalls"] = self.totalCalls!
                        }
                        if self.totalLoggedInTime != nil {
                            map["TotalLoggedInTime"] = self.totalLoggedInTime!
                        }
                        if self.totalReadyTime != nil {
                            map["TotalReadyTime"] = self.totalReadyTime!
                        }
                        if self.totalTalkTime != nil {
                            map["TotalTalkTime"] = self.totalTalkTime!
                        }
                        if self.totalWorkTime != nil {
                            map["TotalWorkTime"] = self.totalWorkTime!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("AverageReadyTime") {
                            self.averageReadyTime = dict["AverageReadyTime"] as! Int64
                        }
                        if dict.keys.contains("AverageTalkTime") {
                            self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                        }
                        if dict.keys.contains("AverageWorkTime") {
                            self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                        }
                        if dict.keys.contains("MaxReadyTime") {
                            self.maxReadyTime = dict["MaxReadyTime"] as! Int64
                        }
                        if dict.keys.contains("MaxTalkTime") {
                            self.maxTalkTime = dict["MaxTalkTime"] as! Int64
                        }
                        if dict.keys.contains("MaxWorkTime") {
                            self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                        }
                        if dict.keys.contains("OccupancyRate") {
                            self.occupancyRate = dict["OccupancyRate"] as! Double
                        }
                        if dict.keys.contains("SatisfactionIndex") {
                            self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                        }
                        if dict.keys.contains("SatisfactionSurveysOffered") {
                            self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionSurveysResponded") {
                            self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                        }
                        if dict.keys.contains("TotalBreakTime") {
                            self.totalBreakTime = dict["TotalBreakTime"] as! Int64
                        }
                        if dict.keys.contains("TotalCalls") {
                            self.totalCalls = dict["TotalCalls"] as! Int64
                        }
                        if dict.keys.contains("TotalLoggedInTime") {
                            self.totalLoggedInTime = dict["TotalLoggedInTime"] as! Int64
                        }
                        if dict.keys.contains("TotalReadyTime") {
                            self.totalReadyTime = dict["TotalReadyTime"] as! Int64
                        }
                        if dict.keys.contains("TotalTalkTime") {
                            self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                        }
                        if dict.keys.contains("TotalWorkTime") {
                            self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                        }
                    }
                }
                public var inbound: ListSkillGroupSummaryReportsResponseBody.PagedSkillGroupSummaryReport.List.SkillGroupSummaryReport.Inbound?

                public var instanceId: String?

                public var outbound: ListSkillGroupSummaryReportsResponseBody.PagedSkillGroupSummaryReport.List.SkillGroupSummaryReport.Outbound?

                public var overall: ListSkillGroupSummaryReportsResponseBody.PagedSkillGroupSummaryReport.List.SkillGroupSummaryReport.Overall?

                public var skillGroupId: String?

                public var skillGroupName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.inbound?.validate()
                    try self.outbound?.validate()
                    try self.overall?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.inbound != nil {
                        map["Inbound"] = self.inbound?.toMap()
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.outbound != nil {
                        map["Outbound"] = self.outbound?.toMap()
                    }
                    if self.overall != nil {
                        map["Overall"] = self.overall?.toMap()
                    }
                    if self.skillGroupId != nil {
                        map["SkillGroupId"] = self.skillGroupId!
                    }
                    if self.skillGroupName != nil {
                        map["SkillGroupName"] = self.skillGroupName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("Inbound") {
                        var model = ListSkillGroupSummaryReportsResponseBody.PagedSkillGroupSummaryReport.List.SkillGroupSummaryReport.Inbound()
                        model.fromMap(dict["Inbound"] as! [String: Any])
                        self.inbound = model
                    }
                    if dict.keys.contains("InstanceId") {
                        self.instanceId = dict["InstanceId"] as! String
                    }
                    if dict.keys.contains("Outbound") {
                        var model = ListSkillGroupSummaryReportsResponseBody.PagedSkillGroupSummaryReport.List.SkillGroupSummaryReport.Outbound()
                        model.fromMap(dict["Outbound"] as! [String: Any])
                        self.outbound = model
                    }
                    if dict.keys.contains("Overall") {
                        var model = ListSkillGroupSummaryReportsResponseBody.PagedSkillGroupSummaryReport.List.SkillGroupSummaryReport.Overall()
                        model.fromMap(dict["Overall"] as! [String: Any])
                        self.overall = model
                    }
                    if dict.keys.contains("SkillGroupId") {
                        self.skillGroupId = dict["SkillGroupId"] as! String
                    }
                    if dict.keys.contains("SkillGroupName") {
                        self.skillGroupName = dict["SkillGroupName"] as! String
                    }
                }
            }
            public var skillGroupSummaryReport: [ListSkillGroupSummaryReportsResponseBody.PagedSkillGroupSummaryReport.List.SkillGroupSummaryReport]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.skillGroupSummaryReport != nil {
                    var tmp : [Any] = []
                    for k in self.skillGroupSummaryReport! {
                        tmp.append(k.toMap())
                    }
                    map["SkillGroupSummaryReport"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("SkillGroupSummaryReport") {
                    self.skillGroupSummaryReport = dict["SkillGroupSummaryReport"] as! [ListSkillGroupSummaryReportsResponseBody.PagedSkillGroupSummaryReport.List.SkillGroupSummaryReport]
                }
            }
        }
        public var list: ListSkillGroupSummaryReportsResponseBody.PagedSkillGroupSummaryReport.List?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.list?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                map["List"] = self.list?.toMap()
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("List") {
                var model = ListSkillGroupSummaryReportsResponseBody.PagedSkillGroupSummaryReport.List()
                model.fromMap(dict["List"] as! [String: Any])
                self.list = model
            }
            if dict.keys.contains("PageNumber") {
                self.pageNumber = dict["PageNumber"] as! Int32
            }
            if dict.keys.contains("PageSize") {
                self.pageSize = dict["PageSize"] as! Int32
            }
            if dict.keys.contains("TotalCount") {
                self.totalCount = dict["TotalCount"] as! Int32
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pagedSkillGroupSummaryReport: ListSkillGroupSummaryReportsResponseBody.PagedSkillGroupSummaryReport?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pagedSkillGroupSummaryReport?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pagedSkillGroupSummaryReport != nil {
            map["PagedSkillGroupSummaryReport"] = self.pagedSkillGroupSummaryReport?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("PagedSkillGroupSummaryReport") {
            var model = ListSkillGroupSummaryReportsResponseBody.PagedSkillGroupSummaryReport()
            model.fromMap(dict["PagedSkillGroupSummaryReport"] as! [String: Any])
            self.pagedSkillGroupSummaryReport = model
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListSkillGroupSummaryReportsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListSkillGroupSummaryReportsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListSkillGroupSummaryReportsResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListSkillGroupSummaryReportsByIntervalRequest : Tea.TeaModel {
    public var endTime: String?

    public var instanceId: String?

    public var interval: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var skillGroupIds: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.skillGroupIds != nil {
            map["SkillGroupIds"] = self.skillGroupIds!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("EndTime") {
            self.endTime = dict["EndTime"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("Interval") {
            self.interval = dict["Interval"] as! String
        }
        if dict.keys.contains("PageNumber") {
            self.pageNumber = dict["PageNumber"] as! Int32
        }
        if dict.keys.contains("PageSize") {
            self.pageSize = dict["PageSize"] as! Int32
        }
        if dict.keys.contains("SkillGroupIds") {
            self.skillGroupIds = dict["SkillGroupIds"] as! String
        }
        if dict.keys.contains("StartTime") {
            self.startTime = dict["StartTime"] as! String
        }
    }
}

public class ListSkillGroupSummaryReportsByIntervalResponseBody : Tea.TeaModel {
    public class PagedSkillGroupSummaryReport : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class SkillGroupTimeIntervalReport : Tea.TeaModel {
                public class IntervalList : Tea.TeaModel {
                    public class SkillGroupSummaryReport : Tea.TeaModel {
                        public class Inbound : Tea.TeaModel {
                            public var abandonedInQueueOfQueueCount: Int64?

                            public var answeredByAgentOfQueueCount: Int64?

                            public var answeredByAgentOfQueueMaxWaitTimeDuration: Int64?

                            public var answeredByAgentOfQueueWaitTimeDuration: Int64?

                            public var averageRingTime: Int64?

                            public var averageTalkTime: Int64?

                            public var averageWorkTime: Int64?

                            public var callsHandled: Int64?

                            public var callsOffered: Int64?

                            public var giveUpByAgentOfQueueCount: Int64?

                            public var handleRate: Double?

                            public var inComingQueueOfQueueCount: Int64?

                            public var maxRingTime: Int64?

                            public var maxTalkTime: Int64?

                            public var maxWorkTime: Int64?

                            public var overFlowInQueueOfQueueCount: Int64?

                            public var queueMaxWaitTimeDuration: Int64?

                            public var queueWaitTimeDuration: Int64?

                            public var satisfactionIndex: Double?

                            public var satisfactionSurveysOffered: Int64?

                            public var satisfactionSurveysResponded: Int64?

                            public var serviceLevel20: Double?

                            public var totalRingTime: Int64?

                            public var totalTalkTime: Int64?

                            public var totalWorkTime: Int64?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.abandonedInQueueOfQueueCount != nil {
                                    map["AbandonedInQueueOfQueueCount"] = self.abandonedInQueueOfQueueCount!
                                }
                                if self.answeredByAgentOfQueueCount != nil {
                                    map["AnsweredByAgentOfQueueCount"] = self.answeredByAgentOfQueueCount!
                                }
                                if self.answeredByAgentOfQueueMaxWaitTimeDuration != nil {
                                    map["AnsweredByAgentOfQueueMaxWaitTimeDuration"] = self.answeredByAgentOfQueueMaxWaitTimeDuration!
                                }
                                if self.answeredByAgentOfQueueWaitTimeDuration != nil {
                                    map["AnsweredByAgentOfQueueWaitTimeDuration"] = self.answeredByAgentOfQueueWaitTimeDuration!
                                }
                                if self.averageRingTime != nil {
                                    map["AverageRingTime"] = self.averageRingTime!
                                }
                                if self.averageTalkTime != nil {
                                    map["AverageTalkTime"] = self.averageTalkTime!
                                }
                                if self.averageWorkTime != nil {
                                    map["AverageWorkTime"] = self.averageWorkTime!
                                }
                                if self.callsHandled != nil {
                                    map["CallsHandled"] = self.callsHandled!
                                }
                                if self.callsOffered != nil {
                                    map["CallsOffered"] = self.callsOffered!
                                }
                                if self.giveUpByAgentOfQueueCount != nil {
                                    map["GiveUpByAgentOfQueueCount"] = self.giveUpByAgentOfQueueCount!
                                }
                                if self.handleRate != nil {
                                    map["HandleRate"] = self.handleRate!
                                }
                                if self.inComingQueueOfQueueCount != nil {
                                    map["InComingQueueOfQueueCount"] = self.inComingQueueOfQueueCount!
                                }
                                if self.maxRingTime != nil {
                                    map["MaxRingTime"] = self.maxRingTime!
                                }
                                if self.maxTalkTime != nil {
                                    map["MaxTalkTime"] = self.maxTalkTime!
                                }
                                if self.maxWorkTime != nil {
                                    map["MaxWorkTime"] = self.maxWorkTime!
                                }
                                if self.overFlowInQueueOfQueueCount != nil {
                                    map["OverFlowInQueueOfQueueCount"] = self.overFlowInQueueOfQueueCount!
                                }
                                if self.queueMaxWaitTimeDuration != nil {
                                    map["QueueMaxWaitTimeDuration"] = self.queueMaxWaitTimeDuration!
                                }
                                if self.queueWaitTimeDuration != nil {
                                    map["QueueWaitTimeDuration"] = self.queueWaitTimeDuration!
                                }
                                if self.satisfactionIndex != nil {
                                    map["SatisfactionIndex"] = self.satisfactionIndex!
                                }
                                if self.satisfactionSurveysOffered != nil {
                                    map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                                }
                                if self.satisfactionSurveysResponded != nil {
                                    map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                                }
                                if self.serviceLevel20 != nil {
                                    map["ServiceLevel20"] = self.serviceLevel20!
                                }
                                if self.totalRingTime != nil {
                                    map["TotalRingTime"] = self.totalRingTime!
                                }
                                if self.totalTalkTime != nil {
                                    map["TotalTalkTime"] = self.totalTalkTime!
                                }
                                if self.totalWorkTime != nil {
                                    map["TotalWorkTime"] = self.totalWorkTime!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("AbandonedInQueueOfQueueCount") {
                                    self.abandonedInQueueOfQueueCount = dict["AbandonedInQueueOfQueueCount"] as! Int64
                                }
                                if dict.keys.contains("AnsweredByAgentOfQueueCount") {
                                    self.answeredByAgentOfQueueCount = dict["AnsweredByAgentOfQueueCount"] as! Int64
                                }
                                if dict.keys.contains("AnsweredByAgentOfQueueMaxWaitTimeDuration") {
                                    self.answeredByAgentOfQueueMaxWaitTimeDuration = dict["AnsweredByAgentOfQueueMaxWaitTimeDuration"] as! Int64
                                }
                                if dict.keys.contains("AnsweredByAgentOfQueueWaitTimeDuration") {
                                    self.answeredByAgentOfQueueWaitTimeDuration = dict["AnsweredByAgentOfQueueWaitTimeDuration"] as! Int64
                                }
                                if dict.keys.contains("AverageRingTime") {
                                    self.averageRingTime = dict["AverageRingTime"] as! Int64
                                }
                                if dict.keys.contains("AverageTalkTime") {
                                    self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                                }
                                if dict.keys.contains("AverageWorkTime") {
                                    self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                                }
                                if dict.keys.contains("CallsHandled") {
                                    self.callsHandled = dict["CallsHandled"] as! Int64
                                }
                                if dict.keys.contains("CallsOffered") {
                                    self.callsOffered = dict["CallsOffered"] as! Int64
                                }
                                if dict.keys.contains("GiveUpByAgentOfQueueCount") {
                                    self.giveUpByAgentOfQueueCount = dict["GiveUpByAgentOfQueueCount"] as! Int64
                                }
                                if dict.keys.contains("HandleRate") {
                                    self.handleRate = dict["HandleRate"] as! Double
                                }
                                if dict.keys.contains("InComingQueueOfQueueCount") {
                                    self.inComingQueueOfQueueCount = dict["InComingQueueOfQueueCount"] as! Int64
                                }
                                if dict.keys.contains("MaxRingTime") {
                                    self.maxRingTime = dict["MaxRingTime"] as! Int64
                                }
                                if dict.keys.contains("MaxTalkTime") {
                                    self.maxTalkTime = dict["MaxTalkTime"] as! Int64
                                }
                                if dict.keys.contains("MaxWorkTime") {
                                    self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                                }
                                if dict.keys.contains("OverFlowInQueueOfQueueCount") {
                                    self.overFlowInQueueOfQueueCount = dict["OverFlowInQueueOfQueueCount"] as! Int64
                                }
                                if dict.keys.contains("QueueMaxWaitTimeDuration") {
                                    self.queueMaxWaitTimeDuration = dict["QueueMaxWaitTimeDuration"] as! Int64
                                }
                                if dict.keys.contains("QueueWaitTimeDuration") {
                                    self.queueWaitTimeDuration = dict["QueueWaitTimeDuration"] as! Int64
                                }
                                if dict.keys.contains("SatisfactionIndex") {
                                    self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                                }
                                if dict.keys.contains("SatisfactionSurveysOffered") {
                                    self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                                }
                                if dict.keys.contains("SatisfactionSurveysResponded") {
                                    self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                                }
                                if dict.keys.contains("ServiceLevel20") {
                                    self.serviceLevel20 = dict["ServiceLevel20"] as! Double
                                }
                                if dict.keys.contains("TotalRingTime") {
                                    self.totalRingTime = dict["TotalRingTime"] as! Int64
                                }
                                if dict.keys.contains("TotalTalkTime") {
                                    self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                                }
                                if dict.keys.contains("TotalWorkTime") {
                                    self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                                }
                            }
                        }
                        public class Outbound : Tea.TeaModel {
                            public var answerRate: Double?

                            public var averageDialingTime: Int64?

                            public var averageTalkTime: Int64?

                            public var averageWorkTime: Int64?

                            public var callsAnswered: Int64?

                            public var callsDialed: Int64?

                            public var maxDialingTime: Int64?

                            public var maxTalkTime: Int64?

                            public var maxWorkTime: Int64?

                            public var satisfactionIndex: Double?

                            public var satisfactionSurveysOffered: Int64?

                            public var satisfactionSurveysResponded: Int64?

                            public var totalDialingTime: Int64?

                            public var totalTalkTime: Int64?

                            public var totalWorkTime: Int64?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.answerRate != nil {
                                    map["AnswerRate"] = self.answerRate!
                                }
                                if self.averageDialingTime != nil {
                                    map["AverageDialingTime"] = self.averageDialingTime!
                                }
                                if self.averageTalkTime != nil {
                                    map["AverageTalkTime"] = self.averageTalkTime!
                                }
                                if self.averageWorkTime != nil {
                                    map["AverageWorkTime"] = self.averageWorkTime!
                                }
                                if self.callsAnswered != nil {
                                    map["CallsAnswered"] = self.callsAnswered!
                                }
                                if self.callsDialed != nil {
                                    map["CallsDialed"] = self.callsDialed!
                                }
                                if self.maxDialingTime != nil {
                                    map["MaxDialingTime"] = self.maxDialingTime!
                                }
                                if self.maxTalkTime != nil {
                                    map["MaxTalkTime"] = self.maxTalkTime!
                                }
                                if self.maxWorkTime != nil {
                                    map["MaxWorkTime"] = self.maxWorkTime!
                                }
                                if self.satisfactionIndex != nil {
                                    map["SatisfactionIndex"] = self.satisfactionIndex!
                                }
                                if self.satisfactionSurveysOffered != nil {
                                    map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                                }
                                if self.satisfactionSurveysResponded != nil {
                                    map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                                }
                                if self.totalDialingTime != nil {
                                    map["TotalDialingTime"] = self.totalDialingTime!
                                }
                                if self.totalTalkTime != nil {
                                    map["TotalTalkTime"] = self.totalTalkTime!
                                }
                                if self.totalWorkTime != nil {
                                    map["TotalWorkTime"] = self.totalWorkTime!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("AnswerRate") {
                                    self.answerRate = dict["AnswerRate"] as! Double
                                }
                                if dict.keys.contains("AverageDialingTime") {
                                    self.averageDialingTime = dict["AverageDialingTime"] as! Int64
                                }
                                if dict.keys.contains("AverageTalkTime") {
                                    self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                                }
                                if dict.keys.contains("AverageWorkTime") {
                                    self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                                }
                                if dict.keys.contains("CallsAnswered") {
                                    self.callsAnswered = dict["CallsAnswered"] as! Int64
                                }
                                if dict.keys.contains("CallsDialed") {
                                    self.callsDialed = dict["CallsDialed"] as! Int64
                                }
                                if dict.keys.contains("MaxDialingTime") {
                                    self.maxDialingTime = dict["MaxDialingTime"] as! Int64
                                }
                                if dict.keys.contains("MaxTalkTime") {
                                    self.maxTalkTime = dict["MaxTalkTime"] as! Int64
                                }
                                if dict.keys.contains("MaxWorkTime") {
                                    self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                                }
                                if dict.keys.contains("SatisfactionIndex") {
                                    self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                                }
                                if dict.keys.contains("SatisfactionSurveysOffered") {
                                    self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                                }
                                if dict.keys.contains("SatisfactionSurveysResponded") {
                                    self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                                }
                                if dict.keys.contains("TotalDialingTime") {
                                    self.totalDialingTime = dict["TotalDialingTime"] as! Int64
                                }
                                if dict.keys.contains("TotalTalkTime") {
                                    self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                                }
                                if dict.keys.contains("TotalWorkTime") {
                                    self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                                }
                            }
                        }
                        public class Overall : Tea.TeaModel {
                            public var averageReadyTime: Int64?

                            public var averageTalkTime: Int64?

                            public var averageWorkTime: Int64?

                            public var maxReadyTime: Int64?

                            public var maxTalkTime: Int64?

                            public var maxWorkTime: Int64?

                            public var occupancyRate: Double?

                            public var satisfactionIndex: Double?

                            public var satisfactionSurveysOffered: Int64?

                            public var satisfactionSurveysResponded: Int64?

                            public var totalBreakTime: Int64?

                            public var totalCalls: Int64?

                            public var totalLoggedInTime: Int64?

                            public var totalReadyTime: Int64?

                            public var totalTalkTime: Int64?

                            public var totalWorkTime: Int64?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.averageReadyTime != nil {
                                    map["AverageReadyTime"] = self.averageReadyTime!
                                }
                                if self.averageTalkTime != nil {
                                    map["AverageTalkTime"] = self.averageTalkTime!
                                }
                                if self.averageWorkTime != nil {
                                    map["AverageWorkTime"] = self.averageWorkTime!
                                }
                                if self.maxReadyTime != nil {
                                    map["MaxReadyTime"] = self.maxReadyTime!
                                }
                                if self.maxTalkTime != nil {
                                    map["MaxTalkTime"] = self.maxTalkTime!
                                }
                                if self.maxWorkTime != nil {
                                    map["MaxWorkTime"] = self.maxWorkTime!
                                }
                                if self.occupancyRate != nil {
                                    map["OccupancyRate"] = self.occupancyRate!
                                }
                                if self.satisfactionIndex != nil {
                                    map["SatisfactionIndex"] = self.satisfactionIndex!
                                }
                                if self.satisfactionSurveysOffered != nil {
                                    map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                                }
                                if self.satisfactionSurveysResponded != nil {
                                    map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                                }
                                if self.totalBreakTime != nil {
                                    map["TotalBreakTime"] = self.totalBreakTime!
                                }
                                if self.totalCalls != nil {
                                    map["TotalCalls"] = self.totalCalls!
                                }
                                if self.totalLoggedInTime != nil {
                                    map["TotalLoggedInTime"] = self.totalLoggedInTime!
                                }
                                if self.totalReadyTime != nil {
                                    map["TotalReadyTime"] = self.totalReadyTime!
                                }
                                if self.totalTalkTime != nil {
                                    map["TotalTalkTime"] = self.totalTalkTime!
                                }
                                if self.totalWorkTime != nil {
                                    map["TotalWorkTime"] = self.totalWorkTime!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("AverageReadyTime") {
                                    self.averageReadyTime = dict["AverageReadyTime"] as! Int64
                                }
                                if dict.keys.contains("AverageTalkTime") {
                                    self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                                }
                                if dict.keys.contains("AverageWorkTime") {
                                    self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                                }
                                if dict.keys.contains("MaxReadyTime") {
                                    self.maxReadyTime = dict["MaxReadyTime"] as! Int64
                                }
                                if dict.keys.contains("MaxTalkTime") {
                                    self.maxTalkTime = dict["MaxTalkTime"] as! Int64
                                }
                                if dict.keys.contains("MaxWorkTime") {
                                    self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                                }
                                if dict.keys.contains("OccupancyRate") {
                                    self.occupancyRate = dict["OccupancyRate"] as! Double
                                }
                                if dict.keys.contains("SatisfactionIndex") {
                                    self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                                }
                                if dict.keys.contains("SatisfactionSurveysOffered") {
                                    self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                                }
                                if dict.keys.contains("SatisfactionSurveysResponded") {
                                    self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                                }
                                if dict.keys.contains("TotalBreakTime") {
                                    self.totalBreakTime = dict["TotalBreakTime"] as! Int64
                                }
                                if dict.keys.contains("TotalCalls") {
                                    self.totalCalls = dict["TotalCalls"] as! Int64
                                }
                                if dict.keys.contains("TotalLoggedInTime") {
                                    self.totalLoggedInTime = dict["TotalLoggedInTime"] as! Int64
                                }
                                if dict.keys.contains("TotalReadyTime") {
                                    self.totalReadyTime = dict["TotalReadyTime"] as! Int64
                                }
                                if dict.keys.contains("TotalTalkTime") {
                                    self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                                }
                                if dict.keys.contains("TotalWorkTime") {
                                    self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                                }
                            }
                        }
                        public var inbound: ListSkillGroupSummaryReportsByIntervalResponseBody.PagedSkillGroupSummaryReport.List.SkillGroupTimeIntervalReport.IntervalList.SkillGroupSummaryReport.Inbound?

                        public var instanceId: String?

                        public var outbound: ListSkillGroupSummaryReportsByIntervalResponseBody.PagedSkillGroupSummaryReport.List.SkillGroupTimeIntervalReport.IntervalList.SkillGroupSummaryReport.Outbound?

                        public var overall: ListSkillGroupSummaryReportsByIntervalResponseBody.PagedSkillGroupSummaryReport.List.SkillGroupTimeIntervalReport.IntervalList.SkillGroupSummaryReport.Overall?

                        public var skillGroupId: String?

                        public var skillGroupName: String?

                        public var timestamp: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                            try self.inbound?.validate()
                            try self.outbound?.validate()
                            try self.overall?.validate()
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.inbound != nil {
                                map["Inbound"] = self.inbound?.toMap()
                            }
                            if self.instanceId != nil {
                                map["InstanceId"] = self.instanceId!
                            }
                            if self.outbound != nil {
                                map["Outbound"] = self.outbound?.toMap()
                            }
                            if self.overall != nil {
                                map["Overall"] = self.overall?.toMap()
                            }
                            if self.skillGroupId != nil {
                                map["SkillGroupId"] = self.skillGroupId!
                            }
                            if self.skillGroupName != nil {
                                map["SkillGroupName"] = self.skillGroupName!
                            }
                            if self.timestamp != nil {
                                map["Timestamp"] = self.timestamp!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("Inbound") {
                                var model = ListSkillGroupSummaryReportsByIntervalResponseBody.PagedSkillGroupSummaryReport.List.SkillGroupTimeIntervalReport.IntervalList.SkillGroupSummaryReport.Inbound()
                                model.fromMap(dict["Inbound"] as! [String: Any])
                                self.inbound = model
                            }
                            if dict.keys.contains("InstanceId") {
                                self.instanceId = dict["InstanceId"] as! String
                            }
                            if dict.keys.contains("Outbound") {
                                var model = ListSkillGroupSummaryReportsByIntervalResponseBody.PagedSkillGroupSummaryReport.List.SkillGroupTimeIntervalReport.IntervalList.SkillGroupSummaryReport.Outbound()
                                model.fromMap(dict["Outbound"] as! [String: Any])
                                self.outbound = model
                            }
                            if dict.keys.contains("Overall") {
                                var model = ListSkillGroupSummaryReportsByIntervalResponseBody.PagedSkillGroupSummaryReport.List.SkillGroupTimeIntervalReport.IntervalList.SkillGroupSummaryReport.Overall()
                                model.fromMap(dict["Overall"] as! [String: Any])
                                self.overall = model
                            }
                            if dict.keys.contains("SkillGroupId") {
                                self.skillGroupId = dict["SkillGroupId"] as! String
                            }
                            if dict.keys.contains("SkillGroupName") {
                                self.skillGroupName = dict["SkillGroupName"] as! String
                            }
                            if dict.keys.contains("Timestamp") {
                                self.timestamp = dict["Timestamp"] as! String
                            }
                        }
                    }
                    public var skillGroupSummaryReport: [ListSkillGroupSummaryReportsByIntervalResponseBody.PagedSkillGroupSummaryReport.List.SkillGroupTimeIntervalReport.IntervalList.SkillGroupSummaryReport]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.skillGroupSummaryReport != nil {
                            var tmp : [Any] = []
                            for k in self.skillGroupSummaryReport! {
                                tmp.append(k.toMap())
                            }
                            map["SkillGroupSummaryReport"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("SkillGroupSummaryReport") {
                            self.skillGroupSummaryReport = dict["SkillGroupSummaryReport"] as! [ListSkillGroupSummaryReportsByIntervalResponseBody.PagedSkillGroupSummaryReport.List.SkillGroupTimeIntervalReport.IntervalList.SkillGroupSummaryReport]
                        }
                    }
                }
                public var intervalList: ListSkillGroupSummaryReportsByIntervalResponseBody.PagedSkillGroupSummaryReport.List.SkillGroupTimeIntervalReport.IntervalList?

                public var skillGroupId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.intervalList?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.intervalList != nil {
                        map["IntervalList"] = self.intervalList?.toMap()
                    }
                    if self.skillGroupId != nil {
                        map["SkillGroupId"] = self.skillGroupId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("IntervalList") {
                        var model = ListSkillGroupSummaryReportsByIntervalResponseBody.PagedSkillGroupSummaryReport.List.SkillGroupTimeIntervalReport.IntervalList()
                        model.fromMap(dict["IntervalList"] as! [String: Any])
                        self.intervalList = model
                    }
                    if dict.keys.contains("SkillGroupId") {
                        self.skillGroupId = dict["SkillGroupId"] as! String
                    }
                }
            }
            public var skillGroupTimeIntervalReport: [ListSkillGroupSummaryReportsByIntervalResponseBody.PagedSkillGroupSummaryReport.List.SkillGroupTimeIntervalReport]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.skillGroupTimeIntervalReport != nil {
                    var tmp : [Any] = []
                    for k in self.skillGroupTimeIntervalReport! {
                        tmp.append(k.toMap())
                    }
                    map["SkillGroupTimeIntervalReport"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("SkillGroupTimeIntervalReport") {
                    self.skillGroupTimeIntervalReport = dict["SkillGroupTimeIntervalReport"] as! [ListSkillGroupSummaryReportsByIntervalResponseBody.PagedSkillGroupSummaryReport.List.SkillGroupTimeIntervalReport]
                }
            }
        }
        public var list: ListSkillGroupSummaryReportsByIntervalResponseBody.PagedSkillGroupSummaryReport.List?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.list?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                map["List"] = self.list?.toMap()
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("List") {
                var model = ListSkillGroupSummaryReportsByIntervalResponseBody.PagedSkillGroupSummaryReport.List()
                model.fromMap(dict["List"] as! [String: Any])
                self.list = model
            }
            if dict.keys.contains("PageNumber") {
                self.pageNumber = dict["PageNumber"] as! Int32
            }
            if dict.keys.contains("PageSize") {
                self.pageSize = dict["PageSize"] as! Int32
            }
            if dict.keys.contains("TotalCount") {
                self.totalCount = dict["TotalCount"] as! Int32
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pagedSkillGroupSummaryReport: ListSkillGroupSummaryReportsByIntervalResponseBody.PagedSkillGroupSummaryReport?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pagedSkillGroupSummaryReport?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pagedSkillGroupSummaryReport != nil {
            map["PagedSkillGroupSummaryReport"] = self.pagedSkillGroupSummaryReport?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("PagedSkillGroupSummaryReport") {
            var model = ListSkillGroupSummaryReportsByIntervalResponseBody.PagedSkillGroupSummaryReport()
            model.fromMap(dict["PagedSkillGroupSummaryReport"] as! [String: Any])
            self.pagedSkillGroupSummaryReport = model
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListSkillGroupSummaryReportsByIntervalResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListSkillGroupSummaryReportsByIntervalResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListSkillGroupSummaryReportsByIntervalResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListSkillGroupSummaryReportsSinceMidnightRequest : Tea.TeaModel {
    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var skillGroups: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.skillGroups != nil {
            map["SkillGroups"] = self.skillGroups!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("PageNumber") {
            self.pageNumber = dict["PageNumber"] as! Int32
        }
        if dict.keys.contains("PageSize") {
            self.pageSize = dict["PageSize"] as! Int32
        }
        if dict.keys.contains("SkillGroups") {
            self.skillGroups = dict["SkillGroups"] as! String
        }
    }
}

public class ListSkillGroupSummaryReportsSinceMidnightResponseBody : Tea.TeaModel {
    public class PagedSkillGroupSummaryReport : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class SkillGroupSummaryReport : Tea.TeaModel {
                public class Inbound : Tea.TeaModel {
                    public var abandonedInQueueOfQueueCount: Int64?

                    public var answeredByAgentOfQueueCount: Int64?

                    public var answeredByAgentOfQueueMaxWaitTimeDuration: Int64?

                    public var answeredByAgentOfQueueWaitTimeDuration: Int64?

                    public var averageRingTime: Int64?

                    public var averageTalkTime: Int64?

                    public var averageWorkTime: Int64?

                    public var callsHandled: Int64?

                    public var callsOffered: Int64?

                    public var callsServiceLevel20: Int64?

                    public var callsServiceLevel30: Int64?

                    public var giveUpByAgentOfQueueCount: Int64?

                    public var handleRate: Double?

                    public var inComingQueueOfQueueCount: Int64?

                    public var maxRingTime: Int64?

                    public var maxTalkTime: String?

                    public var maxWorkTime: Int64?

                    public var overFlowInQueueOfQueueCount: Int64?

                    public var queueMaxWaitTimeDuration: Int64?

                    public var queueWaitTimeDuration: Int64?

                    public var satisfactionIndex: Double?

                    public var satisfactionSurveysOffered: Int64?

                    public var satisfactionSurveysResponded: Int64?

                    public var serviceLevel20: Double?

                    public var totalRingTime: Int64?

                    public var totalTalkTime: Int64?

                    public var totalWorkTime: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.abandonedInQueueOfQueueCount != nil {
                            map["AbandonedInQueueOfQueueCount"] = self.abandonedInQueueOfQueueCount!
                        }
                        if self.answeredByAgentOfQueueCount != nil {
                            map["AnsweredByAgentOfQueueCount"] = self.answeredByAgentOfQueueCount!
                        }
                        if self.answeredByAgentOfQueueMaxWaitTimeDuration != nil {
                            map["AnsweredByAgentOfQueueMaxWaitTimeDuration"] = self.answeredByAgentOfQueueMaxWaitTimeDuration!
                        }
                        if self.answeredByAgentOfQueueWaitTimeDuration != nil {
                            map["AnsweredByAgentOfQueueWaitTimeDuration"] = self.answeredByAgentOfQueueWaitTimeDuration!
                        }
                        if self.averageRingTime != nil {
                            map["AverageRingTime"] = self.averageRingTime!
                        }
                        if self.averageTalkTime != nil {
                            map["AverageTalkTime"] = self.averageTalkTime!
                        }
                        if self.averageWorkTime != nil {
                            map["AverageWorkTime"] = self.averageWorkTime!
                        }
                        if self.callsHandled != nil {
                            map["CallsHandled"] = self.callsHandled!
                        }
                        if self.callsOffered != nil {
                            map["CallsOffered"] = self.callsOffered!
                        }
                        if self.callsServiceLevel20 != nil {
                            map["CallsServiceLevel20"] = self.callsServiceLevel20!
                        }
                        if self.callsServiceLevel30 != nil {
                            map["CallsServiceLevel30"] = self.callsServiceLevel30!
                        }
                        if self.giveUpByAgentOfQueueCount != nil {
                            map["GiveUpByAgentOfQueueCount"] = self.giveUpByAgentOfQueueCount!
                        }
                        if self.handleRate != nil {
                            map["HandleRate"] = self.handleRate!
                        }
                        if self.inComingQueueOfQueueCount != nil {
                            map["InComingQueueOfQueueCount"] = self.inComingQueueOfQueueCount!
                        }
                        if self.maxRingTime != nil {
                            map["MaxRingTime"] = self.maxRingTime!
                        }
                        if self.maxTalkTime != nil {
                            map["MaxTalkTime"] = self.maxTalkTime!
                        }
                        if self.maxWorkTime != nil {
                            map["MaxWorkTime"] = self.maxWorkTime!
                        }
                        if self.overFlowInQueueOfQueueCount != nil {
                            map["OverFlowInQueueOfQueueCount"] = self.overFlowInQueueOfQueueCount!
                        }
                        if self.queueMaxWaitTimeDuration != nil {
                            map["QueueMaxWaitTimeDuration"] = self.queueMaxWaitTimeDuration!
                        }
                        if self.queueWaitTimeDuration != nil {
                            map["QueueWaitTimeDuration"] = self.queueWaitTimeDuration!
                        }
                        if self.satisfactionIndex != nil {
                            map["SatisfactionIndex"] = self.satisfactionIndex!
                        }
                        if self.satisfactionSurveysOffered != nil {
                            map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                        }
                        if self.satisfactionSurveysResponded != nil {
                            map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                        }
                        if self.serviceLevel20 != nil {
                            map["ServiceLevel20"] = self.serviceLevel20!
                        }
                        if self.totalRingTime != nil {
                            map["TotalRingTime"] = self.totalRingTime!
                        }
                        if self.totalTalkTime != nil {
                            map["TotalTalkTime"] = self.totalTalkTime!
                        }
                        if self.totalWorkTime != nil {
                            map["TotalWorkTime"] = self.totalWorkTime!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("AbandonedInQueueOfQueueCount") {
                            self.abandonedInQueueOfQueueCount = dict["AbandonedInQueueOfQueueCount"] as! Int64
                        }
                        if dict.keys.contains("AnsweredByAgentOfQueueCount") {
                            self.answeredByAgentOfQueueCount = dict["AnsweredByAgentOfQueueCount"] as! Int64
                        }
                        if dict.keys.contains("AnsweredByAgentOfQueueMaxWaitTimeDuration") {
                            self.answeredByAgentOfQueueMaxWaitTimeDuration = dict["AnsweredByAgentOfQueueMaxWaitTimeDuration"] as! Int64
                        }
                        if dict.keys.contains("AnsweredByAgentOfQueueWaitTimeDuration") {
                            self.answeredByAgentOfQueueWaitTimeDuration = dict["AnsweredByAgentOfQueueWaitTimeDuration"] as! Int64
                        }
                        if dict.keys.contains("AverageRingTime") {
                            self.averageRingTime = dict["AverageRingTime"] as! Int64
                        }
                        if dict.keys.contains("AverageTalkTime") {
                            self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                        }
                        if dict.keys.contains("AverageWorkTime") {
                            self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                        }
                        if dict.keys.contains("CallsHandled") {
                            self.callsHandled = dict["CallsHandled"] as! Int64
                        }
                        if dict.keys.contains("CallsOffered") {
                            self.callsOffered = dict["CallsOffered"] as! Int64
                        }
                        if dict.keys.contains("CallsServiceLevel20") {
                            self.callsServiceLevel20 = dict["CallsServiceLevel20"] as! Int64
                        }
                        if dict.keys.contains("CallsServiceLevel30") {
                            self.callsServiceLevel30 = dict["CallsServiceLevel30"] as! Int64
                        }
                        if dict.keys.contains("GiveUpByAgentOfQueueCount") {
                            self.giveUpByAgentOfQueueCount = dict["GiveUpByAgentOfQueueCount"] as! Int64
                        }
                        if dict.keys.contains("HandleRate") {
                            self.handleRate = dict["HandleRate"] as! Double
                        }
                        if dict.keys.contains("InComingQueueOfQueueCount") {
                            self.inComingQueueOfQueueCount = dict["InComingQueueOfQueueCount"] as! Int64
                        }
                        if dict.keys.contains("MaxRingTime") {
                            self.maxRingTime = dict["MaxRingTime"] as! Int64
                        }
                        if dict.keys.contains("MaxTalkTime") {
                            self.maxTalkTime = dict["MaxTalkTime"] as! String
                        }
                        if dict.keys.contains("MaxWorkTime") {
                            self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                        }
                        if dict.keys.contains("OverFlowInQueueOfQueueCount") {
                            self.overFlowInQueueOfQueueCount = dict["OverFlowInQueueOfQueueCount"] as! Int64
                        }
                        if dict.keys.contains("QueueMaxWaitTimeDuration") {
                            self.queueMaxWaitTimeDuration = dict["QueueMaxWaitTimeDuration"] as! Int64
                        }
                        if dict.keys.contains("QueueWaitTimeDuration") {
                            self.queueWaitTimeDuration = dict["QueueWaitTimeDuration"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionIndex") {
                            self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                        }
                        if dict.keys.contains("SatisfactionSurveysOffered") {
                            self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionSurveysResponded") {
                            self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                        }
                        if dict.keys.contains("ServiceLevel20") {
                            self.serviceLevel20 = dict["ServiceLevel20"] as! Double
                        }
                        if dict.keys.contains("TotalRingTime") {
                            self.totalRingTime = dict["TotalRingTime"] as! Int64
                        }
                        if dict.keys.contains("TotalTalkTime") {
                            self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                        }
                        if dict.keys.contains("TotalWorkTime") {
                            self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                        }
                    }
                }
                public class Outbound : Tea.TeaModel {
                    public var answerRate: Double?

                    public var averageDialingTime: Int64?

                    public var averageTalkTime: Int64?

                    public var averageWorkTime: Int64?

                    public var callsAnswered: Int64?

                    public var callsDialed: Int64?

                    public var maxDialingTime: Int64?

                    public var maxTalkTime: Int64?

                    public var maxWorkTime: Int64?

                    public var satisfactionIndex: Double?

                    public var satisfactionSurveysOffered: Int64?

                    public var satisfactionSurveysResponded: Int64?

                    public var totalDialingTime: Int64?

                    public var totalTalkTime: Int64?

                    public var totalWorkTime: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.answerRate != nil {
                            map["AnswerRate"] = self.answerRate!
                        }
                        if self.averageDialingTime != nil {
                            map["AverageDialingTime"] = self.averageDialingTime!
                        }
                        if self.averageTalkTime != nil {
                            map["AverageTalkTime"] = self.averageTalkTime!
                        }
                        if self.averageWorkTime != nil {
                            map["AverageWorkTime"] = self.averageWorkTime!
                        }
                        if self.callsAnswered != nil {
                            map["CallsAnswered"] = self.callsAnswered!
                        }
                        if self.callsDialed != nil {
                            map["CallsDialed"] = self.callsDialed!
                        }
                        if self.maxDialingTime != nil {
                            map["MaxDialingTime"] = self.maxDialingTime!
                        }
                        if self.maxTalkTime != nil {
                            map["MaxTalkTime"] = self.maxTalkTime!
                        }
                        if self.maxWorkTime != nil {
                            map["MaxWorkTime"] = self.maxWorkTime!
                        }
                        if self.satisfactionIndex != nil {
                            map["SatisfactionIndex"] = self.satisfactionIndex!
                        }
                        if self.satisfactionSurveysOffered != nil {
                            map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                        }
                        if self.satisfactionSurveysResponded != nil {
                            map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                        }
                        if self.totalDialingTime != nil {
                            map["TotalDialingTime"] = self.totalDialingTime!
                        }
                        if self.totalTalkTime != nil {
                            map["TotalTalkTime"] = self.totalTalkTime!
                        }
                        if self.totalWorkTime != nil {
                            map["TotalWorkTime"] = self.totalWorkTime!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("AnswerRate") {
                            self.answerRate = dict["AnswerRate"] as! Double
                        }
                        if dict.keys.contains("AverageDialingTime") {
                            self.averageDialingTime = dict["AverageDialingTime"] as! Int64
                        }
                        if dict.keys.contains("AverageTalkTime") {
                            self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                        }
                        if dict.keys.contains("AverageWorkTime") {
                            self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                        }
                        if dict.keys.contains("CallsAnswered") {
                            self.callsAnswered = dict["CallsAnswered"] as! Int64
                        }
                        if dict.keys.contains("CallsDialed") {
                            self.callsDialed = dict["CallsDialed"] as! Int64
                        }
                        if dict.keys.contains("MaxDialingTime") {
                            self.maxDialingTime = dict["MaxDialingTime"] as! Int64
                        }
                        if dict.keys.contains("MaxTalkTime") {
                            self.maxTalkTime = dict["MaxTalkTime"] as! Int64
                        }
                        if dict.keys.contains("MaxWorkTime") {
                            self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionIndex") {
                            self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                        }
                        if dict.keys.contains("SatisfactionSurveysOffered") {
                            self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionSurveysResponded") {
                            self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                        }
                        if dict.keys.contains("TotalDialingTime") {
                            self.totalDialingTime = dict["TotalDialingTime"] as! Int64
                        }
                        if dict.keys.contains("TotalTalkTime") {
                            self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                        }
                        if dict.keys.contains("TotalWorkTime") {
                            self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                        }
                    }
                }
                public class Overall : Tea.TeaModel {
                    public var averageReadyTime: Int64?

                    public var averageTalkTime: Int64?

                    public var averageWorkTime: Int64?

                    public var maxReadyTime: Int64?

                    public var maxTalkTime: Int64?

                    public var maxWorkTime: Int64?

                    public var occupancyRate: Double?

                    public var satisfactionIndex: Double?

                    public var satisfactionSurveysOffered: Int64?

                    public var satisfactionSurveysResponded: Int64?

                    public var totalBreakTime: Int64?

                    public var totalCalls: Int64?

                    public var totalLoggedInTime: Int64?

                    public var totalReadyTime: Int64?

                    public var totalTalkTime: Int64?

                    public var totalWorkTime: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.averageReadyTime != nil {
                            map["AverageReadyTime"] = self.averageReadyTime!
                        }
                        if self.averageTalkTime != nil {
                            map["AverageTalkTime"] = self.averageTalkTime!
                        }
                        if self.averageWorkTime != nil {
                            map["AverageWorkTime"] = self.averageWorkTime!
                        }
                        if self.maxReadyTime != nil {
                            map["MaxReadyTime"] = self.maxReadyTime!
                        }
                        if self.maxTalkTime != nil {
                            map["MaxTalkTime"] = self.maxTalkTime!
                        }
                        if self.maxWorkTime != nil {
                            map["MaxWorkTime"] = self.maxWorkTime!
                        }
                        if self.occupancyRate != nil {
                            map["OccupancyRate"] = self.occupancyRate!
                        }
                        if self.satisfactionIndex != nil {
                            map["SatisfactionIndex"] = self.satisfactionIndex!
                        }
                        if self.satisfactionSurveysOffered != nil {
                            map["SatisfactionSurveysOffered"] = self.satisfactionSurveysOffered!
                        }
                        if self.satisfactionSurveysResponded != nil {
                            map["SatisfactionSurveysResponded"] = self.satisfactionSurveysResponded!
                        }
                        if self.totalBreakTime != nil {
                            map["TotalBreakTime"] = self.totalBreakTime!
                        }
                        if self.totalCalls != nil {
                            map["TotalCalls"] = self.totalCalls!
                        }
                        if self.totalLoggedInTime != nil {
                            map["TotalLoggedInTime"] = self.totalLoggedInTime!
                        }
                        if self.totalReadyTime != nil {
                            map["TotalReadyTime"] = self.totalReadyTime!
                        }
                        if self.totalTalkTime != nil {
                            map["TotalTalkTime"] = self.totalTalkTime!
                        }
                        if self.totalWorkTime != nil {
                            map["TotalWorkTime"] = self.totalWorkTime!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("AverageReadyTime") {
                            self.averageReadyTime = dict["AverageReadyTime"] as! Int64
                        }
                        if dict.keys.contains("AverageTalkTime") {
                            self.averageTalkTime = dict["AverageTalkTime"] as! Int64
                        }
                        if dict.keys.contains("AverageWorkTime") {
                            self.averageWorkTime = dict["AverageWorkTime"] as! Int64
                        }
                        if dict.keys.contains("MaxReadyTime") {
                            self.maxReadyTime = dict["MaxReadyTime"] as! Int64
                        }
                        if dict.keys.contains("MaxTalkTime") {
                            self.maxTalkTime = dict["MaxTalkTime"] as! Int64
                        }
                        if dict.keys.contains("MaxWorkTime") {
                            self.maxWorkTime = dict["MaxWorkTime"] as! Int64
                        }
                        if dict.keys.contains("OccupancyRate") {
                            self.occupancyRate = dict["OccupancyRate"] as! Double
                        }
                        if dict.keys.contains("SatisfactionIndex") {
                            self.satisfactionIndex = dict["SatisfactionIndex"] as! Double
                        }
                        if dict.keys.contains("SatisfactionSurveysOffered") {
                            self.satisfactionSurveysOffered = dict["SatisfactionSurveysOffered"] as! Int64
                        }
                        if dict.keys.contains("SatisfactionSurveysResponded") {
                            self.satisfactionSurveysResponded = dict["SatisfactionSurveysResponded"] as! Int64
                        }
                        if dict.keys.contains("TotalBreakTime") {
                            self.totalBreakTime = dict["TotalBreakTime"] as! Int64
                        }
                        if dict.keys.contains("TotalCalls") {
                            self.totalCalls = dict["TotalCalls"] as! Int64
                        }
                        if dict.keys.contains("TotalLoggedInTime") {
                            self.totalLoggedInTime = dict["TotalLoggedInTime"] as! Int64
                        }
                        if dict.keys.contains("TotalReadyTime") {
                            self.totalReadyTime = dict["TotalReadyTime"] as! Int64
                        }
                        if dict.keys.contains("TotalTalkTime") {
                            self.totalTalkTime = dict["TotalTalkTime"] as! Int64
                        }
                        if dict.keys.contains("TotalWorkTime") {
                            self.totalWorkTime = dict["TotalWorkTime"] as! Int64
                        }
                    }
                }
                public var inbound: ListSkillGroupSummaryReportsSinceMidnightResponseBody.PagedSkillGroupSummaryReport.List.SkillGroupSummaryReport.Inbound?

                public var instanceId: String?

                public var outbound: ListSkillGroupSummaryReportsSinceMidnightResponseBody.PagedSkillGroupSummaryReport.List.SkillGroupSummaryReport.Outbound?

                public var overall: ListSkillGroupSummaryReportsSinceMidnightResponseBody.PagedSkillGroupSummaryReport.List.SkillGroupSummaryReport.Overall?

                public var skillGroupId: String?

                public var skillGroupName: String?

                public var timestamp: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.inbound?.validate()
                    try self.outbound?.validate()
                    try self.overall?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.inbound != nil {
                        map["Inbound"] = self.inbound?.toMap()
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.outbound != nil {
                        map["Outbound"] = self.outbound?.toMap()
                    }
                    if self.overall != nil {
                        map["Overall"] = self.overall?.toMap()
                    }
                    if self.skillGroupId != nil {
                        map["SkillGroupId"] = self.skillGroupId!
                    }
                    if self.skillGroupName != nil {
                        map["SkillGroupName"] = self.skillGroupName!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("Inbound") {
                        var model = ListSkillGroupSummaryReportsSinceMidnightResponseBody.PagedSkillGroupSummaryReport.List.SkillGroupSummaryReport.Inbound()
                        model.fromMap(dict["Inbound"] as! [String: Any])
                        self.inbound = model
                    }
                    if dict.keys.contains("InstanceId") {
                        self.instanceId = dict["InstanceId"] as! String
                    }
                    if dict.keys.contains("Outbound") {
                        var model = ListSkillGroupSummaryReportsSinceMidnightResponseBody.PagedSkillGroupSummaryReport.List.SkillGroupSummaryReport.Outbound()
                        model.fromMap(dict["Outbound"] as! [String: Any])
                        self.outbound = model
                    }
                    if dict.keys.contains("Overall") {
                        var model = ListSkillGroupSummaryReportsSinceMidnightResponseBody.PagedSkillGroupSummaryReport.List.SkillGroupSummaryReport.Overall()
                        model.fromMap(dict["Overall"] as! [String: Any])
                        self.overall = model
                    }
                    if dict.keys.contains("SkillGroupId") {
                        self.skillGroupId = dict["SkillGroupId"] as! String
                    }
                    if dict.keys.contains("SkillGroupName") {
                        self.skillGroupName = dict["SkillGroupName"] as! String
                    }
                    if dict.keys.contains("Timestamp") {
                        self.timestamp = dict["Timestamp"] as! String
                    }
                }
            }
            public var skillGroupSummaryReport: [ListSkillGroupSummaryReportsSinceMidnightResponseBody.PagedSkillGroupSummaryReport.List.SkillGroupSummaryReport]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.skillGroupSummaryReport != nil {
                    var tmp : [Any] = []
                    for k in self.skillGroupSummaryReport! {
                        tmp.append(k.toMap())
                    }
                    map["SkillGroupSummaryReport"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("SkillGroupSummaryReport") {
                    self.skillGroupSummaryReport = dict["SkillGroupSummaryReport"] as! [ListSkillGroupSummaryReportsSinceMidnightResponseBody.PagedSkillGroupSummaryReport.List.SkillGroupSummaryReport]
                }
            }
        }
        public var list: ListSkillGroupSummaryReportsSinceMidnightResponseBody.PagedSkillGroupSummaryReport.List?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.list?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                map["List"] = self.list?.toMap()
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("List") {
                var model = ListSkillGroupSummaryReportsSinceMidnightResponseBody.PagedSkillGroupSummaryReport.List()
                model.fromMap(dict["List"] as! [String: Any])
                self.list = model
            }
            if dict.keys.contains("PageNumber") {
                self.pageNumber = dict["PageNumber"] as! Int32
            }
            if dict.keys.contains("PageSize") {
                self.pageSize = dict["PageSize"] as! Int32
            }
            if dict.keys.contains("TotalCount") {
                self.totalCount = dict["TotalCount"] as! Int32
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pagedSkillGroupSummaryReport: ListSkillGroupSummaryReportsSinceMidnightResponseBody.PagedSkillGroupSummaryReport?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pagedSkillGroupSummaryReport?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pagedSkillGroupSummaryReport != nil {
            map["PagedSkillGroupSummaryReport"] = self.pagedSkillGroupSummaryReport?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("PagedSkillGroupSummaryReport") {
            var model = ListSkillGroupSummaryReportsSinceMidnightResponseBody.PagedSkillGroupSummaryReport()
            model.fromMap(dict["PagedSkillGroupSummaryReport"] as! [String: Any])
            self.pagedSkillGroupSummaryReport = model
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListSkillGroupSummaryReportsSinceMidnightResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListSkillGroupSummaryReportsSinceMidnightResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListSkillGroupSummaryReportsSinceMidnightResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListSkillGroupsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var skillGroupId: [String]?

    public var skillGroupName: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        if self.skillGroupName != nil {
            map["SkillGroupName"] = self.skillGroupName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("SkillGroupId") {
            self.skillGroupId = dict["SkillGroupId"] as! [String]
        }
        if dict.keys.contains("SkillGroupName") {
            self.skillGroupName = dict["SkillGroupName"] as! [String]
        }
    }
}

public class ListSkillGroupsResponseBody : Tea.TeaModel {
    public class SkillGroups : Tea.TeaModel {
        public class SkillGroup : Tea.TeaModel {
            public class OutboundPhoneNumbers : Tea.TeaModel {
                public class PhoneNumber : Tea.TeaModel {
                    public var allowOutbound: Bool?

                    public var instanceId: String?

                    public var number: String?

                    public var phoneNumberDescription: String?

                    public var phoneNumberId: String?

                    public var remainingTime: Int32?

                    public var testOnly: Bool?

                    public var trunks: Int32?

                    public var usage: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.allowOutbound != nil {
                            map["AllowOutbound"] = self.allowOutbound!
                        }
                        if self.instanceId != nil {
                            map["InstanceId"] = self.instanceId!
                        }
                        if self.number != nil {
                            map["Number"] = self.number!
                        }
                        if self.phoneNumberDescription != nil {
                            map["PhoneNumberDescription"] = self.phoneNumberDescription!
                        }
                        if self.phoneNumberId != nil {
                            map["PhoneNumberId"] = self.phoneNumberId!
                        }
                        if self.remainingTime != nil {
                            map["RemainingTime"] = self.remainingTime!
                        }
                        if self.testOnly != nil {
                            map["TestOnly"] = self.testOnly!
                        }
                        if self.trunks != nil {
                            map["Trunks"] = self.trunks!
                        }
                        if self.usage != nil {
                            map["Usage"] = self.usage!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("AllowOutbound") {
                            self.allowOutbound = dict["AllowOutbound"] as! Bool
                        }
                        if dict.keys.contains("InstanceId") {
                            self.instanceId = dict["InstanceId"] as! String
                        }
                        if dict.keys.contains("Number") {
                            self.number = dict["Number"] as! String
                        }
                        if dict.keys.contains("PhoneNumberDescription") {
                            self.phoneNumberDescription = dict["PhoneNumberDescription"] as! String
                        }
                        if dict.keys.contains("PhoneNumberId") {
                            self.phoneNumberId = dict["PhoneNumberId"] as! String
                        }
                        if dict.keys.contains("RemainingTime") {
                            self.remainingTime = dict["RemainingTime"] as! Int32
                        }
                        if dict.keys.contains("TestOnly") {
                            self.testOnly = dict["TestOnly"] as! Bool
                        }
                        if dict.keys.contains("Trunks") {
                            self.trunks = dict["Trunks"] as! Int32
                        }
                        if dict.keys.contains("Usage") {
                            self.usage = dict["Usage"] as! String
                        }
                    }
                }
                public var phoneNumber: [ListSkillGroupsResponseBody.SkillGroups.SkillGroup.OutboundPhoneNumbers.PhoneNumber]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.phoneNumber != nil {
                        var tmp : [Any] = []
                        for k in self.phoneNumber! {
                            tmp.append(k.toMap())
                        }
                        map["PhoneNumber"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("PhoneNumber") {
                        self.phoneNumber = dict["PhoneNumber"] as! [ListSkillGroupsResponseBody.SkillGroups.SkillGroup.OutboundPhoneNumbers.PhoneNumber]
                    }
                }
            }
            public var accQueueName: String?

            public var accSkillGroupName: String?

            public var instanceId: String?

            public var outboundPhoneNumbers: ListSkillGroupsResponseBody.SkillGroups.SkillGroup.OutboundPhoneNumbers?

            public var routingStrategy: String?

            public var skillGroupDescription: String?

            public var skillGroupId: String?

            public var skillGroupName: String?

            public var userCount: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.outboundPhoneNumbers?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.accQueueName != nil {
                    map["AccQueueName"] = self.accQueueName!
                }
                if self.accSkillGroupName != nil {
                    map["AccSkillGroupName"] = self.accSkillGroupName!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.outboundPhoneNumbers != nil {
                    map["OutboundPhoneNumbers"] = self.outboundPhoneNumbers?.toMap()
                }
                if self.routingStrategy != nil {
                    map["RoutingStrategy"] = self.routingStrategy!
                }
                if self.skillGroupDescription != nil {
                    map["SkillGroupDescription"] = self.skillGroupDescription!
                }
                if self.skillGroupId != nil {
                    map["SkillGroupId"] = self.skillGroupId!
                }
                if self.skillGroupName != nil {
                    map["SkillGroupName"] = self.skillGroupName!
                }
                if self.userCount != nil {
                    map["UserCount"] = self.userCount!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("AccQueueName") {
                    self.accQueueName = dict["AccQueueName"] as! String
                }
                if dict.keys.contains("AccSkillGroupName") {
                    self.accSkillGroupName = dict["AccSkillGroupName"] as! String
                }
                if dict.keys.contains("InstanceId") {
                    self.instanceId = dict["InstanceId"] as! String
                }
                if dict.keys.contains("OutboundPhoneNumbers") {
                    var model = ListSkillGroupsResponseBody.SkillGroups.SkillGroup.OutboundPhoneNumbers()
                    model.fromMap(dict["OutboundPhoneNumbers"] as! [String: Any])
                    self.outboundPhoneNumbers = model
                }
                if dict.keys.contains("RoutingStrategy") {
                    self.routingStrategy = dict["RoutingStrategy"] as! String
                }
                if dict.keys.contains("SkillGroupDescription") {
                    self.skillGroupDescription = dict["SkillGroupDescription"] as! String
                }
                if dict.keys.contains("SkillGroupId") {
                    self.skillGroupId = dict["SkillGroupId"] as! String
                }
                if dict.keys.contains("SkillGroupName") {
                    self.skillGroupName = dict["SkillGroupName"] as! String
                }
                if dict.keys.contains("UserCount") {
                    self.userCount = dict["UserCount"] as! Int32
                }
            }
        }
        public var skillGroup: [ListSkillGroupsResponseBody.SkillGroups.SkillGroup]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.skillGroup != nil {
                var tmp : [Any] = []
                for k in self.skillGroup! {
                    tmp.append(k.toMap())
                }
                map["SkillGroup"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("SkillGroup") {
                self.skillGroup = dict["SkillGroup"] as! [ListSkillGroupsResponseBody.SkillGroups.SkillGroup]
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var skillGroups: ListSkillGroupsResponseBody.SkillGroups?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.skillGroups?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.skillGroups != nil {
            map["SkillGroups"] = self.skillGroups?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("SkillGroups") {
            var model = ListSkillGroupsResponseBody.SkillGroups()
            model.fromMap(dict["SkillGroups"] as! [String: Any])
            self.skillGroups = model
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListSkillGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListSkillGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListSkillGroupsResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListSkillGroupsOfUserRequest : Tea.TeaModel {
    public var instanceId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("UserId") {
            self.userId = dict["UserId"] as! String
        }
    }
}

public class ListSkillGroupsOfUserResponseBody : Tea.TeaModel {
    public class SkillLevels : Tea.TeaModel {
        public class SkillLevel : Tea.TeaModel {
            public class Skill : Tea.TeaModel {
                public class OutboundPhoneNumbers : Tea.TeaModel {
                    public class PhoneNumber : Tea.TeaModel {
                        public var allowOutbound: Bool?

                        public var city: String?

                        public var instanceId: String?

                        public var number: String?

                        public var phoneNumberDescription: String?

                        public var phoneNumberId: String?

                        public var province: String?

                        public var remainingTime: Int32?

                        public var testOnly: Bool?

                        public var trunks: Int32?

                        public var usage: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.allowOutbound != nil {
                                map["AllowOutbound"] = self.allowOutbound!
                            }
                            if self.city != nil {
                                map["City"] = self.city!
                            }
                            if self.instanceId != nil {
                                map["InstanceId"] = self.instanceId!
                            }
                            if self.number != nil {
                                map["Number"] = self.number!
                            }
                            if self.phoneNumberDescription != nil {
                                map["PhoneNumberDescription"] = self.phoneNumberDescription!
                            }
                            if self.phoneNumberId != nil {
                                map["PhoneNumberId"] = self.phoneNumberId!
                            }
                            if self.province != nil {
                                map["Province"] = self.province!
                            }
                            if self.remainingTime != nil {
                                map["RemainingTime"] = self.remainingTime!
                            }
                            if self.testOnly != nil {
                                map["TestOnly"] = self.testOnly!
                            }
                            if self.trunks != nil {
                                map["Trunks"] = self.trunks!
                            }
                            if self.usage != nil {
                                map["Usage"] = self.usage!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("AllowOutbound") {
                                self.allowOutbound = dict["AllowOutbound"] as! Bool
                            }
                            if dict.keys.contains("City") {
                                self.city = dict["City"] as! String
                            }
                            if dict.keys.contains("InstanceId") {
                                self.instanceId = dict["InstanceId"] as! String
                            }
                            if dict.keys.contains("Number") {
                                self.number = dict["Number"] as! String
                            }
                            if dict.keys.contains("PhoneNumberDescription") {
                                self.phoneNumberDescription = dict["PhoneNumberDescription"] as! String
                            }
                            if dict.keys.contains("PhoneNumberId") {
                                self.phoneNumberId = dict["PhoneNumberId"] as! String
                            }
                            if dict.keys.contains("Province") {
                                self.province = dict["Province"] as! String
                            }
                            if dict.keys.contains("RemainingTime") {
                                self.remainingTime = dict["RemainingTime"] as! Int32
                            }
                            if dict.keys.contains("TestOnly") {
                                self.testOnly = dict["TestOnly"] as! Bool
                            }
                            if dict.keys.contains("Trunks") {
                                self.trunks = dict["Trunks"] as! Int32
                            }
                            if dict.keys.contains("Usage") {
                                self.usage = dict["Usage"] as! String
                            }
                        }
                    }
                    public var phoneNumber: [ListSkillGroupsOfUserResponseBody.SkillLevels.SkillLevel.Skill.OutboundPhoneNumbers.PhoneNumber]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.phoneNumber != nil {
                            var tmp : [Any] = []
                            for k in self.phoneNumber! {
                                tmp.append(k.toMap())
                            }
                            map["PhoneNumber"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("PhoneNumber") {
                            self.phoneNumber = dict["PhoneNumber"] as! [ListSkillGroupsOfUserResponseBody.SkillLevels.SkillLevel.Skill.OutboundPhoneNumbers.PhoneNumber]
                        }
                    }
                }
                public var instanceId: String?

                public var outboundPhoneNumbers: ListSkillGroupsOfUserResponseBody.SkillLevels.SkillLevel.Skill.OutboundPhoneNumbers?

                public var routingStrategy: String?

                public var skillGroupDescription: String?

                public var skillGroupId: String?

                public var skillGroupName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.outboundPhoneNumbers?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.outboundPhoneNumbers != nil {
                        map["OutboundPhoneNumbers"] = self.outboundPhoneNumbers?.toMap()
                    }
                    if self.routingStrategy != nil {
                        map["RoutingStrategy"] = self.routingStrategy!
                    }
                    if self.skillGroupDescription != nil {
                        map["SkillGroupDescription"] = self.skillGroupDescription!
                    }
                    if self.skillGroupId != nil {
                        map["SkillGroupId"] = self.skillGroupId!
                    }
                    if self.skillGroupName != nil {
                        map["SkillGroupName"] = self.skillGroupName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("InstanceId") {
                        self.instanceId = dict["InstanceId"] as! String
                    }
                    if dict.keys.contains("OutboundPhoneNumbers") {
                        var model = ListSkillGroupsOfUserResponseBody.SkillLevels.SkillLevel.Skill.OutboundPhoneNumbers()
                        model.fromMap(dict["OutboundPhoneNumbers"] as! [String: Any])
                        self.outboundPhoneNumbers = model
                    }
                    if dict.keys.contains("RoutingStrategy") {
                        self.routingStrategy = dict["RoutingStrategy"] as! String
                    }
                    if dict.keys.contains("SkillGroupDescription") {
                        self.skillGroupDescription = dict["SkillGroupDescription"] as! String
                    }
                    if dict.keys.contains("SkillGroupId") {
                        self.skillGroupId = dict["SkillGroupId"] as! String
                    }
                    if dict.keys.contains("SkillGroupName") {
                        self.skillGroupName = dict["SkillGroupName"] as! String
                    }
                }
            }
            public var level: Int32?

            public var skill: ListSkillGroupsOfUserResponseBody.SkillLevels.SkillLevel.Skill?

            public var skillLevelId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.skill?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.level != nil {
                    map["Level"] = self.level!
                }
                if self.skill != nil {
                    map["Skill"] = self.skill?.toMap()
                }
                if self.skillLevelId != nil {
                    map["SkillLevelId"] = self.skillLevelId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("Level") {
                    self.level = dict["Level"] as! Int32
                }
                if dict.keys.contains("Skill") {
                    var model = ListSkillGroupsOfUserResponseBody.SkillLevels.SkillLevel.Skill()
                    model.fromMap(dict["Skill"] as! [String: Any])
                    self.skill = model
                }
                if dict.keys.contains("SkillLevelId") {
                    self.skillLevelId = dict["SkillLevelId"] as! String
                }
            }
        }
        public var skillLevel: [ListSkillGroupsOfUserResponseBody.SkillLevels.SkillLevel]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.skillLevel != nil {
                var tmp : [Any] = []
                for k in self.skillLevel! {
                    tmp.append(k.toMap())
                }
                map["SkillLevel"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("SkillLevel") {
                self.skillLevel = dict["SkillLevel"] as! [ListSkillGroupsOfUserResponseBody.SkillLevels.SkillLevel]
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var skillLevels: ListSkillGroupsOfUserResponseBody.SkillLevels?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.skillLevels?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.skillLevels != nil {
            map["SkillLevels"] = self.skillLevels?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("SkillLevels") {
            var model = ListSkillGroupsOfUserResponseBody.SkillLevels()
            model.fromMap(dict["SkillLevels"] as! [String: Any])
            self.skillLevels = model
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListSkillGroupsOfUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListSkillGroupsOfUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListSkillGroupsOfUserResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListTransferableSkillGroupsRequest : Tea.TeaModel {
    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
    }
}

public class ListTransferableSkillGroupsResponseBody : Tea.TeaModel {
    public class SkillGroups : Tea.TeaModel {
        public var accQueueName: String?

        public var accSkillGroupName: String?

        public var allowPrivateOutboundNumber: Bool?

        public var instanceId: String?

        public var routingStrategy: String?

        public var skillGroupDescription: String?

        public var skillGroupId: String?

        public var skillGroupName: String?

        public var userCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accQueueName != nil {
                map["AccQueueName"] = self.accQueueName!
            }
            if self.accSkillGroupName != nil {
                map["AccSkillGroupName"] = self.accSkillGroupName!
            }
            if self.allowPrivateOutboundNumber != nil {
                map["AllowPrivateOutboundNumber"] = self.allowPrivateOutboundNumber!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.routingStrategy != nil {
                map["RoutingStrategy"] = self.routingStrategy!
            }
            if self.skillGroupDescription != nil {
                map["SkillGroupDescription"] = self.skillGroupDescription!
            }
            if self.skillGroupId != nil {
                map["SkillGroupId"] = self.skillGroupId!
            }
            if self.skillGroupName != nil {
                map["SkillGroupName"] = self.skillGroupName!
            }
            if self.userCount != nil {
                map["UserCount"] = self.userCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("AccQueueName") {
                self.accQueueName = dict["AccQueueName"] as! String
            }
            if dict.keys.contains("AccSkillGroupName") {
                self.accSkillGroupName = dict["AccSkillGroupName"] as! String
            }
            if dict.keys.contains("AllowPrivateOutboundNumber") {
                self.allowPrivateOutboundNumber = dict["AllowPrivateOutboundNumber"] as! Bool
            }
            if dict.keys.contains("InstanceId") {
                self.instanceId = dict["InstanceId"] as! String
            }
            if dict.keys.contains("RoutingStrategy") {
                self.routingStrategy = dict["RoutingStrategy"] as! String
            }
            if dict.keys.contains("SkillGroupDescription") {
                self.skillGroupDescription = dict["SkillGroupDescription"] as! String
            }
            if dict.keys.contains("SkillGroupId") {
                self.skillGroupId = dict["SkillGroupId"] as! String
            }
            if dict.keys.contains("SkillGroupName") {
                self.skillGroupName = dict["SkillGroupName"] as! String
            }
            if dict.keys.contains("UserCount") {
                self.userCount = dict["UserCount"] as! Int32
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var skillGroups: [ListTransferableSkillGroupsResponseBody.SkillGroups]?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.skillGroups != nil {
            var tmp : [Any] = []
            for k in self.skillGroups! {
                tmp.append(k.toMap())
            }
            map["SkillGroups"] = tmp
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("SkillGroups") {
            self.skillGroups = dict["SkillGroups"] as! [ListTransferableSkillGroupsResponseBody.SkillGroups]
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListTransferableSkillGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTransferableSkillGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListTransferableSkillGroupsResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListTrunkProvidersResponseBody : Tea.TeaModel {
    public class TrunkProviders : Tea.TeaModel {
        public var providerName: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.providerName != nil {
                map["ProviderName"] = self.providerName!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("ProviderName") {
                self.providerName = dict["ProviderName"] as! String
            }
            if dict.keys.contains("Status") {
                self.status = dict["Status"] as! String
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var trunkProviders: [ListTrunkProvidersResponseBody.TrunkProviders]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.trunkProviders != nil {
            var tmp : [Any] = []
            for k in self.trunkProviders! {
                tmp.append(k.toMap())
            }
            map["TrunkProviders"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
        if dict.keys.contains("TrunkProviders") {
            self.trunkProviders = dict["TrunkProviders"] as! [ListTrunkProvidersResponseBody.TrunkProviders]
        }
    }
}

public class ListTrunkProvidersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTrunkProvidersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListTrunkProvidersResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListTrunksOfSkillGroupRequest : Tea.TeaModel {
    public var instanceId: String?

    public var skillGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("SkillGroupId") {
            self.skillGroupId = dict["SkillGroupId"] as! String
        }
    }
}

public class ListTrunksOfSkillGroupResponseBody : Tea.TeaModel {
    public class TrunkConfigs : Tea.TeaModel {
        public var primary: Bool?

        public var providerName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.primary != nil {
                map["Primary"] = self.primary!
            }
            if self.providerName != nil {
                map["ProviderName"] = self.providerName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("Primary") {
                self.primary = dict["Primary"] as! Bool
            }
            if dict.keys.contains("ProviderName") {
                self.providerName = dict["ProviderName"] as! String
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var trunkConfigs: [ListTrunksOfSkillGroupResponseBody.TrunkConfigs]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.trunkConfigs != nil {
            var tmp : [Any] = []
            for k in self.trunkConfigs! {
                tmp.append(k.toMap())
            }
            map["TrunkConfigs"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
        if dict.keys.contains("TrunkConfigs") {
            self.trunkConfigs = dict["TrunkConfigs"] as! [ListTrunksOfSkillGroupResponseBody.TrunkConfigs]
        }
    }
}

public class ListTrunksOfSkillGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTrunksOfSkillGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListTrunksOfSkillGroupResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListUsersRequest : Tea.TeaModel {
    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("PageNumber") {
            self.pageNumber = dict["PageNumber"] as! Int32
        }
        if dict.keys.contains("PageSize") {
            self.pageSize = dict["PageSize"] as! Int32
        }
    }
}

public class ListUsersResponseBody : Tea.TeaModel {
    public class Users : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class User : Tea.TeaModel {
                public class Detail : Tea.TeaModel {
                    public var department: String?

                    public var displayName: String?

                    public var email: String?

                    public var loginName: String?

                    public var phone: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.department != nil {
                            map["Department"] = self.department!
                        }
                        if self.displayName != nil {
                            map["DisplayName"] = self.displayName!
                        }
                        if self.email != nil {
                            map["Email"] = self.email!
                        }
                        if self.loginName != nil {
                            map["LoginName"] = self.loginName!
                        }
                        if self.phone != nil {
                            map["Phone"] = self.phone!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("Department") {
                            self.department = dict["Department"] as! String
                        }
                        if dict.keys.contains("DisplayName") {
                            self.displayName = dict["DisplayName"] as! String
                        }
                        if dict.keys.contains("Email") {
                            self.email = dict["Email"] as! String
                        }
                        if dict.keys.contains("LoginName") {
                            self.loginName = dict["LoginName"] as! String
                        }
                        if dict.keys.contains("Phone") {
                            self.phone = dict["Phone"] as! String
                        }
                    }
                }
                public class Roles : Tea.TeaModel {
                    public class Role : Tea.TeaModel {
                        public var instanceId: String?

                        public var roleDescription: String?

                        public var roleId: String?

                        public var roleName: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.instanceId != nil {
                                map["InstanceId"] = self.instanceId!
                            }
                            if self.roleDescription != nil {
                                map["RoleDescription"] = self.roleDescription!
                            }
                            if self.roleId != nil {
                                map["RoleId"] = self.roleId!
                            }
                            if self.roleName != nil {
                                map["RoleName"] = self.roleName!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("InstanceId") {
                                self.instanceId = dict["InstanceId"] as! String
                            }
                            if dict.keys.contains("RoleDescription") {
                                self.roleDescription = dict["RoleDescription"] as! String
                            }
                            if dict.keys.contains("RoleId") {
                                self.roleId = dict["RoleId"] as! String
                            }
                            if dict.keys.contains("RoleName") {
                                self.roleName = dict["RoleName"] as! String
                            }
                        }
                    }
                    public var role: [ListUsersResponseBody.Users.List.User.Roles.Role]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.role != nil {
                            var tmp : [Any] = []
                            for k in self.role! {
                                tmp.append(k.toMap())
                            }
                            map["Role"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("Role") {
                            self.role = dict["Role"] as! [ListUsersResponseBody.Users.List.User.Roles.Role]
                        }
                    }
                }
                public class SkillLevels : Tea.TeaModel {
                    public class SkillLevel : Tea.TeaModel {
                        public class Skill : Tea.TeaModel {
                            public var instanceId: String?

                            public var skillGroupDescription: String?

                            public var skillGroupId: String?

                            public var skillGroupName: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.instanceId != nil {
                                    map["InstanceId"] = self.instanceId!
                                }
                                if self.skillGroupDescription != nil {
                                    map["SkillGroupDescription"] = self.skillGroupDescription!
                                }
                                if self.skillGroupId != nil {
                                    map["SkillGroupId"] = self.skillGroupId!
                                }
                                if self.skillGroupName != nil {
                                    map["SkillGroupName"] = self.skillGroupName!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("InstanceId") {
                                    self.instanceId = dict["InstanceId"] as! String
                                }
                                if dict.keys.contains("SkillGroupDescription") {
                                    self.skillGroupDescription = dict["SkillGroupDescription"] as! String
                                }
                                if dict.keys.contains("SkillGroupId") {
                                    self.skillGroupId = dict["SkillGroupId"] as! String
                                }
                                if dict.keys.contains("SkillGroupName") {
                                    self.skillGroupName = dict["SkillGroupName"] as! String
                                }
                            }
                        }
                        public var level: Int32?

                        public var skill: ListUsersResponseBody.Users.List.User.SkillLevels.SkillLevel.Skill?

                        public var skillLevelId: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                            try self.skill?.validate()
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.level != nil {
                                map["Level"] = self.level!
                            }
                            if self.skill != nil {
                                map["Skill"] = self.skill?.toMap()
                            }
                            if self.skillLevelId != nil {
                                map["SkillLevelId"] = self.skillLevelId!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("Level") {
                                self.level = dict["Level"] as! Int32
                            }
                            if dict.keys.contains("Skill") {
                                var model = ListUsersResponseBody.Users.List.User.SkillLevels.SkillLevel.Skill()
                                model.fromMap(dict["Skill"] as! [String: Any])
                                self.skill = model
                            }
                            if dict.keys.contains("SkillLevelId") {
                                self.skillLevelId = dict["SkillLevelId"] as! String
                            }
                        }
                    }
                    public var skillLevel: [ListUsersResponseBody.Users.List.User.SkillLevels.SkillLevel]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.skillLevel != nil {
                            var tmp : [Any] = []
                            for k in self.skillLevel! {
                                tmp.append(k.toMap())
                            }
                            map["SkillLevel"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("SkillLevel") {
                            self.skillLevel = dict["SkillLevel"] as! [ListUsersResponseBody.Users.List.User.SkillLevels.SkillLevel]
                        }
                    }
                }
                public var detail: ListUsersResponseBody.Users.List.User.Detail?

                public var instanceId: String?

                public var primary: Bool?

                public var privateOutboundNumberId: String?

                public var ramId: String?

                public var roles: ListUsersResponseBody.Users.List.User.Roles?

                public var skillLevels: ListUsersResponseBody.Users.List.User.SkillLevels?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.detail?.validate()
                    try self.roles?.validate()
                    try self.skillLevels?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.detail != nil {
                        map["Detail"] = self.detail?.toMap()
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.primary != nil {
                        map["Primary"] = self.primary!
                    }
                    if self.privateOutboundNumberId != nil {
                        map["PrivateOutboundNumberId"] = self.privateOutboundNumberId!
                    }
                    if self.ramId != nil {
                        map["RamId"] = self.ramId!
                    }
                    if self.roles != nil {
                        map["Roles"] = self.roles?.toMap()
                    }
                    if self.skillLevels != nil {
                        map["SkillLevels"] = self.skillLevels?.toMap()
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("Detail") {
                        var model = ListUsersResponseBody.Users.List.User.Detail()
                        model.fromMap(dict["Detail"] as! [String: Any])
                        self.detail = model
                    }
                    if dict.keys.contains("InstanceId") {
                        self.instanceId = dict["InstanceId"] as! String
                    }
                    if dict.keys.contains("Primary") {
                        self.primary = dict["Primary"] as! Bool
                    }
                    if dict.keys.contains("PrivateOutboundNumberId") {
                        self.privateOutboundNumberId = dict["PrivateOutboundNumberId"] as! String
                    }
                    if dict.keys.contains("RamId") {
                        self.ramId = dict["RamId"] as! String
                    }
                    if dict.keys.contains("Roles") {
                        var model = ListUsersResponseBody.Users.List.User.Roles()
                        model.fromMap(dict["Roles"] as! [String: Any])
                        self.roles = model
                    }
                    if dict.keys.contains("SkillLevels") {
                        var model = ListUsersResponseBody.Users.List.User.SkillLevels()
                        model.fromMap(dict["SkillLevels"] as! [String: Any])
                        self.skillLevels = model
                    }
                    if dict.keys.contains("UserId") {
                        self.userId = dict["UserId"] as! String
                    }
                }
            }
            public var user: [ListUsersResponseBody.Users.List.User]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.user != nil {
                    var tmp : [Any] = []
                    for k in self.user! {
                        tmp.append(k.toMap())
                    }
                    map["User"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("User") {
                    self.user = dict["User"] as! [ListUsersResponseBody.Users.List.User]
                }
            }
        }
        public var list: ListUsersResponseBody.Users.List?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.list?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                map["List"] = self.list?.toMap()
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("List") {
                var model = ListUsersResponseBody.Users.List()
                model.fromMap(dict["List"] as! [String: Any])
                self.list = model
            }
            if dict.keys.contains("PageNumber") {
                self.pageNumber = dict["PageNumber"] as! Int32
            }
            if dict.keys.contains("PageSize") {
                self.pageSize = dict["PageSize"] as! Int32
            }
            if dict.keys.contains("TotalCount") {
                self.totalCount = dict["TotalCount"] as! Int32
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var users: ListUsersResponseBody.Users?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.users?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.users != nil {
            map["Users"] = self.users?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
        if dict.keys.contains("Users") {
            var model = ListUsersResponseBody.Users()
            model.fromMap(dict["Users"] as! [String: Any])
            self.users = model
        }
    }
}

public class ListUsersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListUsersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListUsersResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListUsersOfSkillGroupRequest : Tea.TeaModel {
    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var skillGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("PageNumber") {
            self.pageNumber = dict["PageNumber"] as! Int32
        }
        if dict.keys.contains("PageSize") {
            self.pageSize = dict["PageSize"] as! Int32
        }
        if dict.keys.contains("SkillGroupId") {
            self.skillGroupId = dict["SkillGroupId"] as! String
        }
    }
}

public class ListUsersOfSkillGroupResponseBody : Tea.TeaModel {
    public class Users : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public class User : Tea.TeaModel {
                public class Detail : Tea.TeaModel {
                    public var department: String?

                    public var displayName: String?

                    public var email: String?

                    public var loginName: String?

                    public var phone: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.department != nil {
                            map["Department"] = self.department!
                        }
                        if self.displayName != nil {
                            map["DisplayName"] = self.displayName!
                        }
                        if self.email != nil {
                            map["Email"] = self.email!
                        }
                        if self.loginName != nil {
                            map["LoginName"] = self.loginName!
                        }
                        if self.phone != nil {
                            map["Phone"] = self.phone!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("Department") {
                            self.department = dict["Department"] as! String
                        }
                        if dict.keys.contains("DisplayName") {
                            self.displayName = dict["DisplayName"] as! String
                        }
                        if dict.keys.contains("Email") {
                            self.email = dict["Email"] as! String
                        }
                        if dict.keys.contains("LoginName") {
                            self.loginName = dict["LoginName"] as! String
                        }
                        if dict.keys.contains("Phone") {
                            self.phone = dict["Phone"] as! String
                        }
                    }
                }
                public class Roles : Tea.TeaModel {
                    public class Role : Tea.TeaModel {
                        public class Privileges : Tea.TeaModel {
                            public class Privilege : Tea.TeaModel {
                                public var privilegeDescription: String?

                                public var privilegeId: String?

                                public var privilegeName: String?

                                public override init() {
                                    super.init()
                                }

                                public init(_ dict: [String: Any]) {
                                    super.init()
                                    self.fromMap(dict)
                                }

                                public override func validate() throws -> Void {
                                }

                                public override func toMap() -> [String : Any] {
                                    var map = super.toMap()
                                    if self.privilegeDescription != nil {
                                        map["PrivilegeDescription"] = self.privilegeDescription!
                                    }
                                    if self.privilegeId != nil {
                                        map["PrivilegeId"] = self.privilegeId!
                                    }
                                    if self.privilegeName != nil {
                                        map["PrivilegeName"] = self.privilegeName!
                                    }
                                    return map
                                }

                                public override func fromMap(_ dict: [String: Any]) -> Void {
                                    if dict.keys.contains("PrivilegeDescription") {
                                        self.privilegeDescription = dict["PrivilegeDescription"] as! String
                                    }
                                    if dict.keys.contains("PrivilegeId") {
                                        self.privilegeId = dict["PrivilegeId"] as! String
                                    }
                                    if dict.keys.contains("PrivilegeName") {
                                        self.privilegeName = dict["PrivilegeName"] as! String
                                    }
                                }
                            }
                            public var privilege: [ListUsersOfSkillGroupResponseBody.Users.List.User.Roles.Role.Privileges.Privilege]?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.privilege != nil {
                                    var tmp : [Any] = []
                                    for k in self.privilege! {
                                        tmp.append(k.toMap())
                                    }
                                    map["Privilege"] = tmp
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("Privilege") {
                                    self.privilege = dict["Privilege"] as! [ListUsersOfSkillGroupResponseBody.Users.List.User.Roles.Role.Privileges.Privilege]
                                }
                            }
                        }
                        public var instanceId: String?

                        public var privileges: ListUsersOfSkillGroupResponseBody.Users.List.User.Roles.Role.Privileges?

                        public var roleDescription: String?

                        public var roleId: String?

                        public var roleName: String?

                        public var userCount: Int32?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                            try self.privileges?.validate()
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.instanceId != nil {
                                map["InstanceId"] = self.instanceId!
                            }
                            if self.privileges != nil {
                                map["Privileges"] = self.privileges?.toMap()
                            }
                            if self.roleDescription != nil {
                                map["RoleDescription"] = self.roleDescription!
                            }
                            if self.roleId != nil {
                                map["RoleId"] = self.roleId!
                            }
                            if self.roleName != nil {
                                map["RoleName"] = self.roleName!
                            }
                            if self.userCount != nil {
                                map["UserCount"] = self.userCount!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("InstanceId") {
                                self.instanceId = dict["InstanceId"] as! String
                            }
                            if dict.keys.contains("Privileges") {
                                var model = ListUsersOfSkillGroupResponseBody.Users.List.User.Roles.Role.Privileges()
                                model.fromMap(dict["Privileges"] as! [String: Any])
                                self.privileges = model
                            }
                            if dict.keys.contains("RoleDescription") {
                                self.roleDescription = dict["RoleDescription"] as! String
                            }
                            if dict.keys.contains("RoleId") {
                                self.roleId = dict["RoleId"] as! String
                            }
                            if dict.keys.contains("RoleName") {
                                self.roleName = dict["RoleName"] as! String
                            }
                            if dict.keys.contains("UserCount") {
                                self.userCount = dict["UserCount"] as! Int32
                            }
                        }
                    }
                    public var role: [ListUsersOfSkillGroupResponseBody.Users.List.User.Roles.Role]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.role != nil {
                            var tmp : [Any] = []
                            for k in self.role! {
                                tmp.append(k.toMap())
                            }
                            map["Role"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("Role") {
                            self.role = dict["Role"] as! [ListUsersOfSkillGroupResponseBody.Users.List.User.Roles.Role]
                        }
                    }
                }
                public class SkillLevels : Tea.TeaModel {
                    public class SkillLevel : Tea.TeaModel {
                        public class Skill : Tea.TeaModel {
                            public var instanceId: String?

                            public var skillGroupDescription: String?

                            public var skillGroupId: String?

                            public var skillGroupName: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.instanceId != nil {
                                    map["InstanceId"] = self.instanceId!
                                }
                                if self.skillGroupDescription != nil {
                                    map["SkillGroupDescription"] = self.skillGroupDescription!
                                }
                                if self.skillGroupId != nil {
                                    map["SkillGroupId"] = self.skillGroupId!
                                }
                                if self.skillGroupName != nil {
                                    map["SkillGroupName"] = self.skillGroupName!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any]) -> Void {
                                if dict.keys.contains("InstanceId") {
                                    self.instanceId = dict["InstanceId"] as! String
                                }
                                if dict.keys.contains("SkillGroupDescription") {
                                    self.skillGroupDescription = dict["SkillGroupDescription"] as! String
                                }
                                if dict.keys.contains("SkillGroupId") {
                                    self.skillGroupId = dict["SkillGroupId"] as! String
                                }
                                if dict.keys.contains("SkillGroupName") {
                                    self.skillGroupName = dict["SkillGroupName"] as! String
                                }
                            }
                        }
                        public var level: Int32?

                        public var skill: ListUsersOfSkillGroupResponseBody.Users.List.User.SkillLevels.SkillLevel.Skill?

                        public var skillLevelId: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                            try self.skill?.validate()
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.level != nil {
                                map["Level"] = self.level!
                            }
                            if self.skill != nil {
                                map["Skill"] = self.skill?.toMap()
                            }
                            if self.skillLevelId != nil {
                                map["SkillLevelId"] = self.skillLevelId!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any]) -> Void {
                            if dict.keys.contains("Level") {
                                self.level = dict["Level"] as! Int32
                            }
                            if dict.keys.contains("Skill") {
                                var model = ListUsersOfSkillGroupResponseBody.Users.List.User.SkillLevels.SkillLevel.Skill()
                                model.fromMap(dict["Skill"] as! [String: Any])
                                self.skill = model
                            }
                            if dict.keys.contains("SkillLevelId") {
                                self.skillLevelId = dict["SkillLevelId"] as! String
                            }
                        }
                    }
                    public var skillLevel: [ListUsersOfSkillGroupResponseBody.Users.List.User.SkillLevels.SkillLevel]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.skillLevel != nil {
                            var tmp : [Any] = []
                            for k in self.skillLevel! {
                                tmp.append(k.toMap())
                            }
                            map["SkillLevel"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any]) -> Void {
                        if dict.keys.contains("SkillLevel") {
                            self.skillLevel = dict["SkillLevel"] as! [ListUsersOfSkillGroupResponseBody.Users.List.User.SkillLevels.SkillLevel]
                        }
                    }
                }
                public var detail: ListUsersOfSkillGroupResponseBody.Users.List.User.Detail?

                public var instanceId: String?

                public var ramId: String?

                public var roles: ListUsersOfSkillGroupResponseBody.Users.List.User.Roles?

                public var skillLevels: ListUsersOfSkillGroupResponseBody.Users.List.User.SkillLevels?

                public var userId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.detail?.validate()
                    try self.roles?.validate()
                    try self.skillLevels?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.detail != nil {
                        map["Detail"] = self.detail?.toMap()
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.ramId != nil {
                        map["RamId"] = self.ramId!
                    }
                    if self.roles != nil {
                        map["Roles"] = self.roles?.toMap()
                    }
                    if self.skillLevels != nil {
                        map["SkillLevels"] = self.skillLevels?.toMap()
                    }
                    if self.userId != nil {
                        map["UserId"] = self.userId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("Detail") {
                        var model = ListUsersOfSkillGroupResponseBody.Users.List.User.Detail()
                        model.fromMap(dict["Detail"] as! [String: Any])
                        self.detail = model
                    }
                    if dict.keys.contains("InstanceId") {
                        self.instanceId = dict["InstanceId"] as! String
                    }
                    if dict.keys.contains("RamId") {
                        self.ramId = dict["RamId"] as! String
                    }
                    if dict.keys.contains("Roles") {
                        var model = ListUsersOfSkillGroupResponseBody.Users.List.User.Roles()
                        model.fromMap(dict["Roles"] as! [String: Any])
                        self.roles = model
                    }
                    if dict.keys.contains("SkillLevels") {
                        var model = ListUsersOfSkillGroupResponseBody.Users.List.User.SkillLevels()
                        model.fromMap(dict["SkillLevels"] as! [String: Any])
                        self.skillLevels = model
                    }
                    if dict.keys.contains("UserId") {
                        self.userId = dict["UserId"] as! String
                    }
                }
            }
            public var user: [ListUsersOfSkillGroupResponseBody.Users.List.User]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.user != nil {
                    var tmp : [Any] = []
                    for k in self.user! {
                        tmp.append(k.toMap())
                    }
                    map["User"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("User") {
                    self.user = dict["User"] as! [ListUsersOfSkillGroupResponseBody.Users.List.User]
                }
            }
        }
        public var list: ListUsersOfSkillGroupResponseBody.Users.List?

        public var pageNumber: Int32?

        public var pageSize: Int32?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.list?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                map["List"] = self.list?.toMap()
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("List") {
                var model = ListUsersOfSkillGroupResponseBody.Users.List()
                model.fromMap(dict["List"] as! [String: Any])
                self.list = model
            }
            if dict.keys.contains("PageNumber") {
                self.pageNumber = dict["PageNumber"] as! Int32
            }
            if dict.keys.contains("PageSize") {
                self.pageSize = dict["PageSize"] as! Int32
            }
            if dict.keys.contains("TotalCount") {
                self.totalCount = dict["TotalCount"] as! Int32
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var users: ListUsersOfSkillGroupResponseBody.Users?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.users?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.users != nil {
            map["Users"] = self.users?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
        if dict.keys.contains("Users") {
            var model = ListUsersOfSkillGroupResponseBody.Users()
            model.fromMap(dict["Users"] as! [String: Any])
            self.users = model
        }
    }
}

public class ListUsersOfSkillGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListUsersOfSkillGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListUsersOfSkillGroupResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ListVoiceAppraiseRequest : Tea.TeaModel {
    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
    }
}

public class ListVoiceAppraiseResponseBody : Tea.TeaModel {
    public class ContactFlow : Tea.TeaModel {
        public class PhoneNumbers : Tea.TeaModel {
            public class PhoneNumber : Tea.TeaModel {
                public var instanceId: String?

                public var number: String?

                public var phoneNumberDescription: String?

                public var phoneNumberId: String?

                public var remainingTime: Int32?

                public var trunks: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.number != nil {
                        map["Number"] = self.number!
                    }
                    if self.phoneNumberDescription != nil {
                        map["PhoneNumberDescription"] = self.phoneNumberDescription!
                    }
                    if self.phoneNumberId != nil {
                        map["PhoneNumberId"] = self.phoneNumberId!
                    }
                    if self.remainingTime != nil {
                        map["RemainingTime"] = self.remainingTime!
                    }
                    if self.trunks != nil {
                        map["Trunks"] = self.trunks!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("InstanceId") {
                        self.instanceId = dict["InstanceId"] as! String
                    }
                    if dict.keys.contains("Number") {
                        self.number = dict["Number"] as! String
                    }
                    if dict.keys.contains("PhoneNumberDescription") {
                        self.phoneNumberDescription = dict["PhoneNumberDescription"] as! String
                    }
                    if dict.keys.contains("PhoneNumberId") {
                        self.phoneNumberId = dict["PhoneNumberId"] as! String
                    }
                    if dict.keys.contains("RemainingTime") {
                        self.remainingTime = dict["RemainingTime"] as! Int32
                    }
                    if dict.keys.contains("Trunks") {
                        self.trunks = dict["Trunks"] as! Int32
                    }
                }
            }
            public var phoneNumber: [ListVoiceAppraiseResponseBody.ContactFlow.PhoneNumbers.PhoneNumber]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.phoneNumber != nil {
                    var tmp : [Any] = []
                    for k in self.phoneNumber! {
                        tmp.append(k.toMap())
                    }
                    map["PhoneNumber"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("PhoneNumber") {
                    self.phoneNumber = dict["PhoneNumber"] as! [ListVoiceAppraiseResponseBody.ContactFlow.PhoneNumbers.PhoneNumber]
                }
            }
        }
        public class Versions : Tea.TeaModel {
            public class ContactFlowVersion : Tea.TeaModel {
                public var contactFlowVersionDescription: String?

                public var contactFlowVersionId: String?

                public var content: String?

                public var lastModified: String?

                public var lastModifiedBy: String?

                public var status: String?

                public var version: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.contactFlowVersionDescription != nil {
                        map["ContactFlowVersionDescription"] = self.contactFlowVersionDescription!
                    }
                    if self.contactFlowVersionId != nil {
                        map["ContactFlowVersionId"] = self.contactFlowVersionId!
                    }
                    if self.content != nil {
                        map["Content"] = self.content!
                    }
                    if self.lastModified != nil {
                        map["LastModified"] = self.lastModified!
                    }
                    if self.lastModifiedBy != nil {
                        map["LastModifiedBy"] = self.lastModifiedBy!
                    }
                    if self.status != nil {
                        map["Status"] = self.status!
                    }
                    if self.version != nil {
                        map["Version"] = self.version!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("ContactFlowVersionDescription") {
                        self.contactFlowVersionDescription = dict["ContactFlowVersionDescription"] as! String
                    }
                    if dict.keys.contains("ContactFlowVersionId") {
                        self.contactFlowVersionId = dict["ContactFlowVersionId"] as! String
                    }
                    if dict.keys.contains("Content") {
                        self.content = dict["Content"] as! String
                    }
                    if dict.keys.contains("LastModified") {
                        self.lastModified = dict["LastModified"] as! String
                    }
                    if dict.keys.contains("LastModifiedBy") {
                        self.lastModifiedBy = dict["LastModifiedBy"] as! String
                    }
                    if dict.keys.contains("Status") {
                        self.status = dict["Status"] as! String
                    }
                    if dict.keys.contains("Version") {
                        self.version = dict["Version"] as! String
                    }
                }
            }
            public var contactFlowVersion: [ListVoiceAppraiseResponseBody.ContactFlow.Versions.ContactFlowVersion]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.contactFlowVersion != nil {
                    var tmp : [Any] = []
                    for k in self.contactFlowVersion! {
                        tmp.append(k.toMap())
                    }
                    map["ContactFlowVersion"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("ContactFlowVersion") {
                    self.contactFlowVersion = dict["ContactFlowVersion"] as! [ListVoiceAppraiseResponseBody.ContactFlow.Versions.ContactFlowVersion]
                }
            }
        }
        public var appliedVersion: String?

        public var contactFlowDescription: String?

        public var contactFlowId: String?

        public var contactFlowName: String?

        public var instanceId: String?

        public var phoneNumbers: ListVoiceAppraiseResponseBody.ContactFlow.PhoneNumbers?

        public var type: String?

        public var versions: ListVoiceAppraiseResponseBody.ContactFlow.Versions?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.phoneNumbers?.validate()
            try self.versions?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appliedVersion != nil {
                map["AppliedVersion"] = self.appliedVersion!
            }
            if self.contactFlowDescription != nil {
                map["ContactFlowDescription"] = self.contactFlowDescription!
            }
            if self.contactFlowId != nil {
                map["ContactFlowId"] = self.contactFlowId!
            }
            if self.contactFlowName != nil {
                map["ContactFlowName"] = self.contactFlowName!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.phoneNumbers != nil {
                map["PhoneNumbers"] = self.phoneNumbers?.toMap()
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.versions != nil {
                map["Versions"] = self.versions?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("AppliedVersion") {
                self.appliedVersion = dict["AppliedVersion"] as! String
            }
            if dict.keys.contains("ContactFlowDescription") {
                self.contactFlowDescription = dict["ContactFlowDescription"] as! String
            }
            if dict.keys.contains("ContactFlowId") {
                self.contactFlowId = dict["ContactFlowId"] as! String
            }
            if dict.keys.contains("ContactFlowName") {
                self.contactFlowName = dict["ContactFlowName"] as! String
            }
            if dict.keys.contains("InstanceId") {
                self.instanceId = dict["InstanceId"] as! String
            }
            if dict.keys.contains("PhoneNumbers") {
                var model = ListVoiceAppraiseResponseBody.ContactFlow.PhoneNumbers()
                model.fromMap(dict["PhoneNumbers"] as! [String: Any])
                self.phoneNumbers = model
            }
            if dict.keys.contains("Type") {
                self.type = dict["Type"] as! String
            }
            if dict.keys.contains("Versions") {
                var model = ListVoiceAppraiseResponseBody.ContactFlow.Versions()
                model.fromMap(dict["Versions"] as! [String: Any])
                self.versions = model
            }
        }
    }
    public var code: String?

    public var contactFlow: ListVoiceAppraiseResponseBody.ContactFlow?

    public var httpStatusCode: Int32?

    public var message: String?

    public var notice: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.contactFlow?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.contactFlow != nil {
            map["ContactFlow"] = self.contactFlow?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.notice != nil {
            map["Notice"] = self.notice!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("ContactFlow") {
            var model = ListVoiceAppraiseResponseBody.ContactFlow()
            model.fromMap(dict["ContactFlow"] as! [String: Any])
            self.contactFlow = model
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("Notice") {
            self.notice = dict["Notice"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ListVoiceAppraiseResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListVoiceAppraiseResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ListVoiceAppraiseResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ModifyAgentDeviceRequest : Tea.TeaModel {
    public var agentDeviceId: Int64?

    public var instanceId: String?

    public var isLogin: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.agentDeviceId != nil {
            map["AgentDeviceId"] = self.agentDeviceId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.isLogin != nil {
            map["IsLogin"] = self.isLogin!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("AgentDeviceId") {
            self.agentDeviceId = dict["AgentDeviceId"] as! Int64
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("IsLogin") {
            self.isLogin = dict["IsLogin"] as! Int32
        }
    }
}

public class ModifyAgentDeviceResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ModifyAgentDeviceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyAgentDeviceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ModifyAgentDeviceResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ModifyPhoneNumberRequest : Tea.TeaModel {
    public var contactFlowId: String?

    public var instanceId: String?

    public var phoneNumberId: String?

    public var skillGroupId: [String]?

    public var usage: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactFlowId != nil {
            map["ContactFlowId"] = self.contactFlowId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.phoneNumberId != nil {
            map["PhoneNumberId"] = self.phoneNumberId!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        if self.usage != nil {
            map["Usage"] = self.usage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("ContactFlowId") {
            self.contactFlowId = dict["ContactFlowId"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("PhoneNumberId") {
            self.phoneNumberId = dict["PhoneNumberId"] as! String
        }
        if dict.keys.contains("SkillGroupId") {
            self.skillGroupId = dict["SkillGroupId"] as! [String]
        }
        if dict.keys.contains("Usage") {
            self.usage = dict["Usage"] as! String
        }
    }
}

public class ModifyPhoneNumberResponseBody : Tea.TeaModel {
    public class PhoneNumber : Tea.TeaModel {
        public class ContactFlow : Tea.TeaModel {
            public var contactFlowDescription: String?

            public var contactFlowId: String?

            public var contactFlowName: String?

            public var instanceId: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.contactFlowDescription != nil {
                    map["ContactFlowDescription"] = self.contactFlowDescription!
                }
                if self.contactFlowId != nil {
                    map["ContactFlowId"] = self.contactFlowId!
                }
                if self.contactFlowName != nil {
                    map["ContactFlowName"] = self.contactFlowName!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("ContactFlowDescription") {
                    self.contactFlowDescription = dict["ContactFlowDescription"] as! String
                }
                if dict.keys.contains("ContactFlowId") {
                    self.contactFlowId = dict["ContactFlowId"] as! String
                }
                if dict.keys.contains("ContactFlowName") {
                    self.contactFlowName = dict["ContactFlowName"] as! String
                }
                if dict.keys.contains("InstanceId") {
                    self.instanceId = dict["InstanceId"] as! String
                }
                if dict.keys.contains("Type") {
                    self.type = dict["Type"] as! String
                }
            }
        }
        public class SkillGroups : Tea.TeaModel {
            public class SkillGroup : Tea.TeaModel {
                public var skillGroupId: String?

                public var skillGroupName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.skillGroupId != nil {
                        map["SkillGroupId"] = self.skillGroupId!
                    }
                    if self.skillGroupName != nil {
                        map["SkillGroupName"] = self.skillGroupName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("SkillGroupId") {
                        self.skillGroupId = dict["SkillGroupId"] as! String
                    }
                    if dict.keys.contains("SkillGroupName") {
                        self.skillGroupName = dict["SkillGroupName"] as! String
                    }
                }
            }
            public var skillGroup: [ModifyPhoneNumberResponseBody.PhoneNumber.SkillGroups.SkillGroup]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.skillGroup != nil {
                    var tmp : [Any] = []
                    for k in self.skillGroup! {
                        tmp.append(k.toMap())
                    }
                    map["SkillGroup"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("SkillGroup") {
                    self.skillGroup = dict["SkillGroup"] as! [ModifyPhoneNumberResponseBody.PhoneNumber.SkillGroups.SkillGroup]
                }
            }
        }
        public var allowOutbound: Bool?

        public var contactFlow: ModifyPhoneNumberResponseBody.PhoneNumber.ContactFlow?

        public var instanceId: String?

        public var number: String?

        public var phoneNumberDescription: String?

        public var phoneNumberId: String?

        public var remainingTime: Int32?

        public var skillGroups: ModifyPhoneNumberResponseBody.PhoneNumber.SkillGroups?

        public var testOnly: Bool?

        public var trunks: Int32?

        public var usage: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.contactFlow?.validate()
            try self.skillGroups?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.allowOutbound != nil {
                map["AllowOutbound"] = self.allowOutbound!
            }
            if self.contactFlow != nil {
                map["ContactFlow"] = self.contactFlow?.toMap()
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.number != nil {
                map["Number"] = self.number!
            }
            if self.phoneNumberDescription != nil {
                map["PhoneNumberDescription"] = self.phoneNumberDescription!
            }
            if self.phoneNumberId != nil {
                map["PhoneNumberId"] = self.phoneNumberId!
            }
            if self.remainingTime != nil {
                map["RemainingTime"] = self.remainingTime!
            }
            if self.skillGroups != nil {
                map["SkillGroups"] = self.skillGroups?.toMap()
            }
            if self.testOnly != nil {
                map["TestOnly"] = self.testOnly!
            }
            if self.trunks != nil {
                map["Trunks"] = self.trunks!
            }
            if self.usage != nil {
                map["Usage"] = self.usage!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("AllowOutbound") {
                self.allowOutbound = dict["AllowOutbound"] as! Bool
            }
            if dict.keys.contains("ContactFlow") {
                var model = ModifyPhoneNumberResponseBody.PhoneNumber.ContactFlow()
                model.fromMap(dict["ContactFlow"] as! [String: Any])
                self.contactFlow = model
            }
            if dict.keys.contains("InstanceId") {
                self.instanceId = dict["InstanceId"] as! String
            }
            if dict.keys.contains("Number") {
                self.number = dict["Number"] as! String
            }
            if dict.keys.contains("PhoneNumberDescription") {
                self.phoneNumberDescription = dict["PhoneNumberDescription"] as! String
            }
            if dict.keys.contains("PhoneNumberId") {
                self.phoneNumberId = dict["PhoneNumberId"] as! String
            }
            if dict.keys.contains("RemainingTime") {
                self.remainingTime = dict["RemainingTime"] as! Int32
            }
            if dict.keys.contains("SkillGroups") {
                var model = ModifyPhoneNumberResponseBody.PhoneNumber.SkillGroups()
                model.fromMap(dict["SkillGroups"] as! [String: Any])
                self.skillGroups = model
            }
            if dict.keys.contains("TestOnly") {
                self.testOnly = dict["TestOnly"] as! Bool
            }
            if dict.keys.contains("Trunks") {
                self.trunks = dict["Trunks"] as! Int32
            }
            if dict.keys.contains("Usage") {
                self.usage = dict["Usage"] as! String
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var phoneNumber: ModifyPhoneNumberResponseBody.PhoneNumber?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.phoneNumber?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.phoneNumber != nil {
            map["PhoneNumber"] = self.phoneNumber?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("PhoneNumber") {
            var model = ModifyPhoneNumberResponseBody.PhoneNumber()
            model.fromMap(dict["PhoneNumber"] as! [String: Any])
            self.phoneNumber = model
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ModifyPhoneNumberResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyPhoneNumberResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ModifyPhoneNumberResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ModifyPhoneTagsRequest : Tea.TeaModel {
    public var instanceId: String?

    public var serviceTag: String?

    public var skillGroupIdList: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.serviceTag != nil {
            map["ServiceTag"] = self.serviceTag!
        }
        if self.skillGroupIdList != nil {
            map["SkillGroupIdList"] = self.skillGroupIdList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("ServiceTag") {
            self.serviceTag = dict["ServiceTag"] as! String
        }
        if dict.keys.contains("SkillGroupIdList") {
            self.skillGroupIdList = dict["SkillGroupIdList"] as! [String]
        }
    }
}

public class ModifyPhoneTagsResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ModifyPhoneTagsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyPhoneTagsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ModifyPhoneTagsResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ModifyPrimaryTrunksOfSkillGroupRequest : Tea.TeaModel {
    public var instanceId: String?

    public var primaryProviderName: [String]?

    public var skillGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.primaryProviderName != nil {
            map["PrimaryProviderName"] = self.primaryProviderName!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("PrimaryProviderName") {
            self.primaryProviderName = dict["PrimaryProviderName"] as! [String]
        }
        if dict.keys.contains("SkillGroupId") {
            self.skillGroupId = dict["SkillGroupId"] as! String
        }
    }
}

public class ModifyPrimaryTrunksOfSkillGroupResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ModifyPrimaryTrunksOfSkillGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyPrimaryTrunksOfSkillGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ModifyPrimaryTrunksOfSkillGroupResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ModifyPrivacyNumberCallDetailRequest : Tea.TeaModel {
    public var callId: String?

    public var contactId: String?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.callId != nil {
            map["CallId"] = self.callId!
        }
        if self.contactId != nil {
            map["ContactId"] = self.contactId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("CallId") {
            self.callId = dict["CallId"] as! String
        }
        if dict.keys.contains("ContactId") {
            self.contactId = dict["ContactId"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
    }
}

public class ModifyPrivacyNumberCallDetailResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ModifyPrivacyNumberCallDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyPrivacyNumberCallDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ModifyPrivacyNumberCallDetailResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ModifySkillGroupRequest : Tea.TeaModel {
    public var allowPrivateOutboundNumber: Bool?

    public var description_: String?

    public var instanceId: String?

    public var name: String?

    public var outboundPhoneNumberId: [String]?

    public var routingStrategy: String?

    public var skillGroupId: String?

    public var skillLevel: [Int32]?

    public var userId: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.allowPrivateOutboundNumber != nil {
            map["AllowPrivateOutboundNumber"] = self.allowPrivateOutboundNumber!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.outboundPhoneNumberId != nil {
            map["OutboundPhoneNumberId"] = self.outboundPhoneNumberId!
        }
        if self.routingStrategy != nil {
            map["RoutingStrategy"] = self.routingStrategy!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        if self.skillLevel != nil {
            map["SkillLevel"] = self.skillLevel!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("AllowPrivateOutboundNumber") {
            self.allowPrivateOutboundNumber = dict["AllowPrivateOutboundNumber"] as! Bool
        }
        if dict.keys.contains("Description") {
            self.description_ = dict["Description"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("Name") {
            self.name = dict["Name"] as! String
        }
        if dict.keys.contains("OutboundPhoneNumberId") {
            self.outboundPhoneNumberId = dict["OutboundPhoneNumberId"] as! [String]
        }
        if dict.keys.contains("RoutingStrategy") {
            self.routingStrategy = dict["RoutingStrategy"] as! String
        }
        if dict.keys.contains("SkillGroupId") {
            self.skillGroupId = dict["SkillGroupId"] as! String
        }
        if dict.keys.contains("SkillLevel") {
            self.skillLevel = dict["SkillLevel"] as! [Int32]
        }
        if dict.keys.contains("UserId") {
            self.userId = dict["UserId"] as! [String]
        }
    }
}

public class ModifySkillGroupResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ModifySkillGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifySkillGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ModifySkillGroupResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ModifySkillGroupBasicInfoRequest : Tea.TeaModel {
    public var allowPrivateOutboundNumber: Bool?

    public var description_: String?

    public var instanceId: String?

    public var name: String?

    public var routingStrategy: String?

    public var skillGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.allowPrivateOutboundNumber != nil {
            map["AllowPrivateOutboundNumber"] = self.allowPrivateOutboundNumber!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.routingStrategy != nil {
            map["RoutingStrategy"] = self.routingStrategy!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("AllowPrivateOutboundNumber") {
            self.allowPrivateOutboundNumber = dict["AllowPrivateOutboundNumber"] as! Bool
        }
        if dict.keys.contains("Description") {
            self.description_ = dict["Description"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("Name") {
            self.name = dict["Name"] as! String
        }
        if dict.keys.contains("RoutingStrategy") {
            self.routingStrategy = dict["RoutingStrategy"] as! String
        }
        if dict.keys.contains("SkillGroupId") {
            self.skillGroupId = dict["SkillGroupId"] as! String
        }
    }
}

public class ModifySkillGroupBasicInfoResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ModifySkillGroupBasicInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifySkillGroupBasicInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ModifySkillGroupBasicInfoResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ModifySkillGroupOfUserRequest : Tea.TeaModel {
    public var instanceId: String?

    public var roleId: [String]?

    public var skillGroupId: [String]?

    public var skillLevel: [Int32]?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.roleId != nil {
            map["RoleId"] = self.roleId!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        if self.skillLevel != nil {
            map["SkillLevel"] = self.skillLevel!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("RoleId") {
            self.roleId = dict["RoleId"] as! [String]
        }
        if dict.keys.contains("SkillGroupId") {
            self.skillGroupId = dict["SkillGroupId"] as! [String]
        }
        if dict.keys.contains("SkillLevel") {
            self.skillLevel = dict["SkillLevel"] as! [Int32]
        }
        if dict.keys.contains("UserId") {
            self.userId = dict["UserId"] as! String
        }
    }
}

public class ModifySkillGroupOfUserResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ModifySkillGroupOfUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifySkillGroupOfUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ModifySkillGroupOfUserResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ModifySkillGroupOutboundNumbersRequest : Tea.TeaModel {
    public var instanceId: String?

    public var operationType: Int32?

    public var outboundPhoneNumberId: [String]?

    public var skillGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.operationType != nil {
            map["OperationType"] = self.operationType!
        }
        if self.outboundPhoneNumberId != nil {
            map["OutboundPhoneNumberId"] = self.outboundPhoneNumberId!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("OperationType") {
            self.operationType = dict["OperationType"] as! Int32
        }
        if dict.keys.contains("OutboundPhoneNumberId") {
            self.outboundPhoneNumberId = dict["OutboundPhoneNumberId"] as! [String]
        }
        if dict.keys.contains("SkillGroupId") {
            self.skillGroupId = dict["SkillGroupId"] as! String
        }
    }
}

public class ModifySkillGroupOutboundNumbersResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ModifySkillGroupOutboundNumbersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifySkillGroupOutboundNumbersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ModifySkillGroupOutboundNumbersResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ModifyUserRequest : Tea.TeaModel {
    public var displayName: String?

    public var email: String?

    public var instanceId: String?

    public var phone: String?

    public var privateOutboundNumberId: String?

    public var roleId: [String]?

    public var skillGroupId: [String]?

    public var skillLevel: [Int32]?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.displayName != nil {
            map["DisplayName"] = self.displayName!
        }
        if self.email != nil {
            map["Email"] = self.email!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.phone != nil {
            map["Phone"] = self.phone!
        }
        if self.privateOutboundNumberId != nil {
            map["PrivateOutboundNumberId"] = self.privateOutboundNumberId!
        }
        if self.roleId != nil {
            map["RoleId"] = self.roleId!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        if self.skillLevel != nil {
            map["SkillLevel"] = self.skillLevel!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("DisplayName") {
            self.displayName = dict["DisplayName"] as! String
        }
        if dict.keys.contains("Email") {
            self.email = dict["Email"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("Phone") {
            self.phone = dict["Phone"] as! String
        }
        if dict.keys.contains("PrivateOutboundNumberId") {
            self.privateOutboundNumberId = dict["PrivateOutboundNumberId"] as! String
        }
        if dict.keys.contains("RoleId") {
            self.roleId = dict["RoleId"] as! [String]
        }
        if dict.keys.contains("SkillGroupId") {
            self.skillGroupId = dict["SkillGroupId"] as! [String]
        }
        if dict.keys.contains("SkillLevel") {
            self.skillLevel = dict["SkillLevel"] as! [Int32]
        }
        if dict.keys.contains("UserId") {
            self.userId = dict["UserId"] as! String
        }
    }
}

public class ModifyUserResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ModifyUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ModifyUserResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class PickGlobalOutboundNumbersRequest : Tea.TeaModel {
    public var calleeNumber: String?

    public var count: Int32?

    public var instanceId: String?

    public var isVirtual: Bool?

    public var skillGroupId: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.calleeNumber != nil {
            map["CalleeNumber"] = self.calleeNumber!
        }
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.isVirtual != nil {
            map["IsVirtual"] = self.isVirtual!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("CalleeNumber") {
            self.calleeNumber = dict["CalleeNumber"] as! String
        }
        if dict.keys.contains("Count") {
            self.count = dict["Count"] as! Int32
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("IsVirtual") {
            self.isVirtual = dict["IsVirtual"] as! Bool
        }
        if dict.keys.contains("SkillGroupId") {
            self.skillGroupId = dict["SkillGroupId"] as! [String]
        }
    }
}

public class PickGlobalOutboundNumbersResponseBody : Tea.TeaModel {
    public class DialNumberPairs : Tea.TeaModel {
        public class DialNumberPair : Tea.TeaModel {
            public class Callee : Tea.TeaModel {
                public var city: String?

                public var number: String?

                public var province: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.city != nil {
                        map["City"] = self.city!
                    }
                    if self.number != nil {
                        map["Number"] = self.number!
                    }
                    if self.province != nil {
                        map["Province"] = self.province!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("City") {
                        self.city = dict["City"] as! String
                    }
                    if dict.keys.contains("Number") {
                        self.number = dict["Number"] as! String
                    }
                    if dict.keys.contains("Province") {
                        self.province = dict["Province"] as! String
                    }
                }
            }
            public class Caller : Tea.TeaModel {
                public var city: String?

                public var number: String?

                public var province: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.city != nil {
                        map["City"] = self.city!
                    }
                    if self.number != nil {
                        map["Number"] = self.number!
                    }
                    if self.province != nil {
                        map["Province"] = self.province!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("City") {
                        self.city = dict["City"] as! String
                    }
                    if dict.keys.contains("Number") {
                        self.number = dict["Number"] as! String
                    }
                    if dict.keys.contains("Province") {
                        self.province = dict["Province"] as! String
                    }
                }
            }
            public var callee: PickGlobalOutboundNumbersResponseBody.DialNumberPairs.DialNumberPair.Callee?

            public var caller: PickGlobalOutboundNumbersResponseBody.DialNumberPairs.DialNumberPair.Caller?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.callee?.validate()
                try self.caller?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callee != nil {
                    map["Callee"] = self.callee?.toMap()
                }
                if self.caller != nil {
                    map["Caller"] = self.caller?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("Callee") {
                    var model = PickGlobalOutboundNumbersResponseBody.DialNumberPairs.DialNumberPair.Callee()
                    model.fromMap(dict["Callee"] as! [String: Any])
                    self.callee = model
                }
                if dict.keys.contains("Caller") {
                    var model = PickGlobalOutboundNumbersResponseBody.DialNumberPairs.DialNumberPair.Caller()
                    model.fromMap(dict["Caller"] as! [String: Any])
                    self.caller = model
                }
            }
        }
        public var dialNumberPair: [PickGlobalOutboundNumbersResponseBody.DialNumberPairs.DialNumberPair]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dialNumberPair != nil {
                var tmp : [Any] = []
                for k in self.dialNumberPair! {
                    tmp.append(k.toMap())
                }
                map["DialNumberPair"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("DialNumberPair") {
                self.dialNumberPair = dict["DialNumberPair"] as! [PickGlobalOutboundNumbersResponseBody.DialNumberPairs.DialNumberPair]
            }
        }
    }
    public var code: String?

    public var dialNumberPairs: PickGlobalOutboundNumbersResponseBody.DialNumberPairs?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.dialNumberPairs?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.dialNumberPairs != nil {
            map["DialNumberPairs"] = self.dialNumberPairs?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("DialNumberPairs") {
            var model = PickGlobalOutboundNumbersResponseBody.DialNumberPairs()
            model.fromMap(dict["DialNumberPairs"] as! [String: Any])
            self.dialNumberPairs = model
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class PickGlobalOutboundNumbersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PickGlobalOutboundNumbersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = PickGlobalOutboundNumbersResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class PickLocalNumberRequest : Tea.TeaModel {
    public var calleeNumber: String?

    public var candidateNumber: [String]?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.calleeNumber != nil {
            map["CalleeNumber"] = self.calleeNumber!
        }
        if self.candidateNumber != nil {
            map["CandidateNumber"] = self.candidateNumber!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("CalleeNumber") {
            self.calleeNumber = dict["CalleeNumber"] as! String
        }
        if dict.keys.contains("CandidateNumber") {
            self.candidateNumber = dict["CandidateNumber"] as! [String]
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
    }
}

public class PickLocalNumberResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Callee : Tea.TeaModel {
            public var city: String?

            public var number: String?

            public var province: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.city != nil {
                    map["City"] = self.city!
                }
                if self.number != nil {
                    map["Number"] = self.number!
                }
                if self.province != nil {
                    map["Province"] = self.province!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("City") {
                    self.city = dict["City"] as! String
                }
                if dict.keys.contains("Number") {
                    self.number = dict["Number"] as! String
                }
                if dict.keys.contains("Province") {
                    self.province = dict["Province"] as! String
                }
            }
        }
        public class Caller : Tea.TeaModel {
            public var city: String?

            public var number: String?

            public var province: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.city != nil {
                    map["City"] = self.city!
                }
                if self.number != nil {
                    map["Number"] = self.number!
                }
                if self.province != nil {
                    map["Province"] = self.province!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("City") {
                    self.city = dict["City"] as! String
                }
                if dict.keys.contains("Number") {
                    self.number = dict["Number"] as! String
                }
                if dict.keys.contains("Province") {
                    self.province = dict["Province"] as! String
                }
            }
        }
        public var callee: PickLocalNumberResponseBody.Data.Callee?

        public var caller: PickLocalNumberResponseBody.Data.Caller?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.callee?.validate()
            try self.caller?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callee != nil {
                map["Callee"] = self.callee?.toMap()
            }
            if self.caller != nil {
                map["Caller"] = self.caller?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("Callee") {
                var model = PickLocalNumberResponseBody.Data.Callee()
                model.fromMap(dict["Callee"] as! [String: Any])
                self.callee = model
            }
            if dict.keys.contains("Caller") {
                var model = PickLocalNumberResponseBody.Data.Caller()
                model.fromMap(dict["Caller"] as! [String: Any])
                self.caller = model
            }
        }
    }
    public var code: String?

    public var data: PickLocalNumberResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("Data") {
            var model = PickLocalNumberResponseBody.Data()
            model.fromMap(dict["Data"] as! [String: Any])
            self.data = model
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class PickLocalNumberResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PickLocalNumberResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = PickLocalNumberResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class PickOutboundNumbersRequest : Tea.TeaModel {
    public var calleeNumber: String?

    public var candidateNumber: [String]?

    public var count: Int32?

    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.calleeNumber != nil {
            map["CalleeNumber"] = self.calleeNumber!
        }
        if self.candidateNumber != nil {
            map["CandidateNumber"] = self.candidateNumber!
        }
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("CalleeNumber") {
            self.calleeNumber = dict["CalleeNumber"] as! String
        }
        if dict.keys.contains("CandidateNumber") {
            self.candidateNumber = dict["CandidateNumber"] as! [String]
        }
        if dict.keys.contains("Count") {
            self.count = dict["Count"] as! Int32
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
    }
}

public class PickOutboundNumbersResponseBody : Tea.TeaModel {
    public class DialNumberPairs : Tea.TeaModel {
        public class DialNumberPair : Tea.TeaModel {
            public class Callee : Tea.TeaModel {
                public var city: String?

                public var number: String?

                public var province: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.city != nil {
                        map["City"] = self.city!
                    }
                    if self.number != nil {
                        map["Number"] = self.number!
                    }
                    if self.province != nil {
                        map["Province"] = self.province!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("City") {
                        self.city = dict["City"] as! String
                    }
                    if dict.keys.contains("Number") {
                        self.number = dict["Number"] as! String
                    }
                    if dict.keys.contains("Province") {
                        self.province = dict["Province"] as! String
                    }
                }
            }
            public class Caller : Tea.TeaModel {
                public var city: String?

                public var number: String?

                public var province: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.city != nil {
                        map["City"] = self.city!
                    }
                    if self.number != nil {
                        map["Number"] = self.number!
                    }
                    if self.province != nil {
                        map["Province"] = self.province!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("City") {
                        self.city = dict["City"] as! String
                    }
                    if dict.keys.contains("Number") {
                        self.number = dict["Number"] as! String
                    }
                    if dict.keys.contains("Province") {
                        self.province = dict["Province"] as! String
                    }
                }
            }
            public var callee: PickOutboundNumbersResponseBody.DialNumberPairs.DialNumberPair.Callee?

            public var caller: PickOutboundNumbersResponseBody.DialNumberPairs.DialNumberPair.Caller?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.callee?.validate()
                try self.caller?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callee != nil {
                    map["Callee"] = self.callee?.toMap()
                }
                if self.caller != nil {
                    map["Caller"] = self.caller?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("Callee") {
                    var model = PickOutboundNumbersResponseBody.DialNumberPairs.DialNumberPair.Callee()
                    model.fromMap(dict["Callee"] as! [String: Any])
                    self.callee = model
                }
                if dict.keys.contains("Caller") {
                    var model = PickOutboundNumbersResponseBody.DialNumberPairs.DialNumberPair.Caller()
                    model.fromMap(dict["Caller"] as! [String: Any])
                    self.caller = model
                }
            }
        }
        public var dialNumberPair: [PickOutboundNumbersResponseBody.DialNumberPairs.DialNumberPair]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dialNumberPair != nil {
                var tmp : [Any] = []
                for k in self.dialNumberPair! {
                    tmp.append(k.toMap())
                }
                map["DialNumberPair"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("DialNumberPair") {
                self.dialNumberPair = dict["DialNumberPair"] as! [PickOutboundNumbersResponseBody.DialNumberPairs.DialNumberPair]
            }
        }
    }
    public var code: String?

    public var dialNumberPairs: PickOutboundNumbersResponseBody.DialNumberPairs?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.dialNumberPairs?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.dialNumberPairs != nil {
            map["DialNumberPairs"] = self.dialNumberPairs?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("DialNumberPairs") {
            var model = PickOutboundNumbersResponseBody.DialNumberPairs()
            model.fromMap(dict["DialNumberPairs"] as! [String: Any])
            self.dialNumberPairs = model
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class PickOutboundNumbersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PickOutboundNumbersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = PickOutboundNumbersResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class PublishContactFlowVersionRequest : Tea.TeaModel {
    public var contactFlowVersionId: String?

    public var instanceId: String?

    public var useTianGong: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.contactFlowVersionId != nil {
            map["ContactFlowVersionId"] = self.contactFlowVersionId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.useTianGong != nil {
            map["UseTianGong"] = self.useTianGong!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("ContactFlowVersionId") {
            self.contactFlowVersionId = dict["ContactFlowVersionId"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("UseTianGong") {
            self.useTianGong = dict["UseTianGong"] as! Bool
        }
    }
}

public class PublishContactFlowVersionResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class PublishContactFlowVersionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PublishContactFlowVersionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = PublishContactFlowVersionResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class RefreshTokenRequest : Tea.TeaModel {
    public var instanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
    }
}

public class RefreshTokenResponseBody : Tea.TeaModel {
    public class Token : Tea.TeaModel {
        public var signData: String?

        public var signature: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.signData != nil {
                map["SignData"] = self.signData!
            }
            if self.signature != nil {
                map["Signature"] = self.signature!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("SignData") {
                self.signData = dict["SignData"] as! String
            }
            if dict.keys.contains("Signature") {
                self.signature = dict["Signature"] as! String
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var token: RefreshTokenResponseBody.Token?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.token?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.token != nil {
            map["Token"] = self.token?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
        if dict.keys.contains("Token") {
            var model = RefreshTokenResponseBody.Token()
            model.fromMap(dict["Token"] as! [String: Any])
            self.token = model
        }
    }
}

public class RefreshTokenResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RefreshTokenResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = RefreshTokenResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class RemovePhoneNumberRequest : Tea.TeaModel {
    public var instanceId: String?

    public var phoneNumberId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.phoneNumberId != nil {
            map["PhoneNumberId"] = self.phoneNumberId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("PhoneNumberId") {
            self.phoneNumberId = dict["PhoneNumberId"] as! String
        }
    }
}

public class RemovePhoneNumberResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class RemovePhoneNumberResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemovePhoneNumberResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = RemovePhoneNumberResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class RemoveUsersRequest : Tea.TeaModel {
    public var instanceId: String?

    public var userId: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("UserId") {
            self.userId = dict["UserId"] as! [String]
        }
    }
}

public class RemoveUsersResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class RemoveUsersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemoveUsersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = RemoveUsersResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class RemoveUsersFromSkillGroupRequest : Tea.TeaModel {
    public var instanceId: String?

    public var skillGroupId: String?

    public var userId: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.skillGroupId != nil {
            map["SkillGroupId"] = self.skillGroupId!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("SkillGroupId") {
            self.skillGroupId = dict["SkillGroupId"] as! String
        }
        if dict.keys.contains("UserId") {
            self.userId = dict["UserId"] as! [String]
        }
    }
}

public class RemoveUsersFromSkillGroupResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class RemoveUsersFromSkillGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemoveUsersFromSkillGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = RemoveUsersFromSkillGroupResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class RequestLoginInfoRequest : Tea.TeaModel {
    public var instanceId: String?

    public var userId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("UserId") {
            self.userId = dict["UserId"] as! String
        }
    }
}

public class RequestLoginInfoResponseBody : Tea.TeaModel {
    public class LoginInfo : Tea.TeaModel {
        public class Roles : Tea.TeaModel {
            public class Role : Tea.TeaModel {
                public var instanceId: String?

                public var roleDescription: String?

                public var roleId: String?

                public var roleName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.roleDescription != nil {
                        map["RoleDescription"] = self.roleDescription!
                    }
                    if self.roleId != nil {
                        map["RoleId"] = self.roleId!
                    }
                    if self.roleName != nil {
                        map["RoleName"] = self.roleName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any]) -> Void {
                    if dict.keys.contains("InstanceId") {
                        self.instanceId = dict["InstanceId"] as! String
                    }
                    if dict.keys.contains("RoleDescription") {
                        self.roleDescription = dict["RoleDescription"] as! String
                    }
                    if dict.keys.contains("RoleId") {
                        self.roleId = dict["RoleId"] as! String
                    }
                    if dict.keys.contains("RoleName") {
                        self.roleName = dict["RoleName"] as! String
                    }
                }
            }
            public var role: [RequestLoginInfoResponseBody.LoginInfo.Roles.Role]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.role != nil {
                    var tmp : [Any] = []
                    for k in self.role! {
                        tmp.append(k.toMap())
                    }
                    map["Role"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any]) -> Void {
                if dict.keys.contains("Role") {
                    self.role = dict["Role"] as! [RequestLoginInfoResponseBody.LoginInfo.Roles.Role]
                }
            }
        }
        public var agentServerUrl: String?

        public var displayName: String?

        public var extension_: String?

        public var phoneNumber: String?

        public var region: String?

        public var roles: RequestLoginInfoResponseBody.LoginInfo.Roles?

        public var signData: String?

        public var signature: String?

        public var tenantId: String?

        public var userName: String?

        public var webRtcUrl: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.roles?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.agentServerUrl != nil {
                map["AgentServerUrl"] = self.agentServerUrl!
            }
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.extension_ != nil {
                map["Extension"] = self.extension_!
            }
            if self.phoneNumber != nil {
                map["PhoneNumber"] = self.phoneNumber!
            }
            if self.region != nil {
                map["Region"] = self.region!
            }
            if self.roles != nil {
                map["Roles"] = self.roles?.toMap()
            }
            if self.signData != nil {
                map["SignData"] = self.signData!
            }
            if self.signature != nil {
                map["Signature"] = self.signature!
            }
            if self.tenantId != nil {
                map["TenantId"] = self.tenantId!
            }
            if self.userName != nil {
                map["UserName"] = self.userName!
            }
            if self.webRtcUrl != nil {
                map["WebRtcUrl"] = self.webRtcUrl!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any]) -> Void {
            if dict.keys.contains("AgentServerUrl") {
                self.agentServerUrl = dict["AgentServerUrl"] as! String
            }
            if dict.keys.contains("DisplayName") {
                self.displayName = dict["DisplayName"] as! String
            }
            if dict.keys.contains("Extension") {
                self.extension_ = dict["Extension"] as! String
            }
            if dict.keys.contains("PhoneNumber") {
                self.phoneNumber = dict["PhoneNumber"] as! String
            }
            if dict.keys.contains("Region") {
                self.region = dict["Region"] as! String
            }
            if dict.keys.contains("Roles") {
                var model = RequestLoginInfoResponseBody.LoginInfo.Roles()
                model.fromMap(dict["Roles"] as! [String: Any])
                self.roles = model
            }
            if dict.keys.contains("SignData") {
                self.signData = dict["SignData"] as! String
            }
            if dict.keys.contains("Signature") {
                self.signature = dict["Signature"] as! String
            }
            if dict.keys.contains("TenantId") {
                self.tenantId = dict["TenantId"] as! String
            }
            if dict.keys.contains("UserName") {
                self.userName = dict["UserName"] as! String
            }
            if dict.keys.contains("WebRtcUrl") {
                self.webRtcUrl = dict["WebRtcUrl"] as! String
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var loginInfo: RequestLoginInfoResponseBody.LoginInfo?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.loginInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.loginInfo != nil {
            map["LoginInfo"] = self.loginInfo?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("LoginInfo") {
            var model = RequestLoginInfoResponseBody.LoginInfo()
            model.fromMap(dict["LoginInfo"] as! [String: Any])
            self.loginInfo = model
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class RequestLoginInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RequestLoginInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = RequestLoginInfoResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class ResetUserStatusRequest : Tea.TeaModel {
    public var instanceId: String?

    public var ramIdList: [Int64]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.ramIdList != nil {
            map["RamIdList"] = self.ramIdList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("RamIdList") {
            self.ramIdList = dict["RamIdList"] as! [Int64]
        }
    }
}

public class ResetUserStatusResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class ResetUserStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ResetUserStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = ResetUserStatusResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class SaveWebRTCStatsRequest : Tea.TeaModel {
    public var callId: String?

    public var callStartTime: Int64?

    public var calleeNumber: String?

    public var callerNumber: String?

    public var instanceId: String?

    public var recordTime: Int64?

    public var stats: String?

    public var tenantId: String?

    public var uid: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.callId != nil {
            map["CallId"] = self.callId!
        }
        if self.callStartTime != nil {
            map["CallStartTime"] = self.callStartTime!
        }
        if self.calleeNumber != nil {
            map["CalleeNumber"] = self.calleeNumber!
        }
        if self.callerNumber != nil {
            map["CallerNumber"] = self.callerNumber!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.recordTime != nil {
            map["RecordTime"] = self.recordTime!
        }
        if self.stats != nil {
            map["Stats"] = self.stats!
        }
        if self.tenantId != nil {
            map["TenantId"] = self.tenantId!
        }
        if self.uid != nil {
            map["Uid"] = self.uid!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("CallId") {
            self.callId = dict["CallId"] as! String
        }
        if dict.keys.contains("CallStartTime") {
            self.callStartTime = dict["CallStartTime"] as! Int64
        }
        if dict.keys.contains("CalleeNumber") {
            self.calleeNumber = dict["CalleeNumber"] as! String
        }
        if dict.keys.contains("CallerNumber") {
            self.callerNumber = dict["CallerNumber"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("RecordTime") {
            self.recordTime = dict["RecordTime"] as! Int64
        }
        if dict.keys.contains("Stats") {
            self.stats = dict["Stats"] as! String
        }
        if dict.keys.contains("TenantId") {
            self.tenantId = dict["TenantId"] as! String
        }
        if dict.keys.contains("Uid") {
            self.uid = dict["Uid"] as! String
        }
    }
}

public class SaveWebRTCStatsResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var rowCount: Int64?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.rowCount != nil {
            map["RowCount"] = self.rowCount!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("RowCount") {
            self.rowCount = dict["RowCount"] as! Int64
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class SaveWebRTCStatsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SaveWebRTCStatsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = SaveWebRTCStatsResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class SendPredefinedShortMessageRequest : Tea.TeaModel {
    public var configId: Int64?

    public var instanceId: String?

    public var phoneNumbers: String?

    public var templateParam: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.phoneNumbers != nil {
            map["PhoneNumbers"] = self.phoneNumbers!
        }
        if self.templateParam != nil {
            map["TemplateParam"] = self.templateParam!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("ConfigId") {
            self.configId = dict["ConfigId"] as! Int64
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("PhoneNumbers") {
            self.phoneNumbers = dict["PhoneNumbers"] as! String
        }
        if dict.keys.contains("TemplateParam") {
            self.templateParam = dict["TemplateParam"] as! String
        }
    }
}

public class SendPredefinedShortMessageResponseBody : Tea.TeaModel {
    public var bizId: String?

    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizId != nil {
            map["BizId"] = self.bizId!
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("BizId") {
            self.bizId = dict["BizId"] as! String
        }
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
    }
}

public class SendPredefinedShortMessageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SendPredefinedShortMessageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = SendPredefinedShortMessageResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}

public class StartBack2BackCallRequest : Tea.TeaModel {
    public var callCenterNumber: String?

    public var callee: String?

    public var caller: String?

    public var instanceId: String?

    public var workflowId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.callCenterNumber != nil {
            map["CallCenterNumber"] = self.callCenterNumber!
        }
        if self.callee != nil {
            map["Callee"] = self.callee!
        }
        if self.caller != nil {
            map["Caller"] = self.caller!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.workflowId != nil {
            map["WorkflowId"] = self.workflowId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("CallCenterNumber") {
            self.callCenterNumber = dict["CallCenterNumber"] as! String
        }
        if dict.keys.contains("Callee") {
            self.callee = dict["Callee"] as! String
        }
        if dict.keys.contains("Caller") {
            self.caller = dict["Caller"] as! String
        }
        if dict.keys.contains("InstanceId") {
            self.instanceId = dict["InstanceId"] as! String
        }
        if dict.keys.contains("WorkflowId") {
            self.workflowId = dict["WorkflowId"] as! String
        }
    }
}

public class StartBack2BackCallResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var statusCode: String?

    public var statusDesc: String?

    public var success: Bool?

    public var taskId: String?

    public var timeStamp: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.statusCode != nil {
            map["StatusCode"] = self.statusCode!
        }
        if self.statusDesc != nil {
            map["StatusDesc"] = self.statusDesc!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        if self.timeStamp != nil {
            map["TimeStamp"] = self.timeStamp!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("Code") {
            self.code = dict["Code"] as! String
        }
        if dict.keys.contains("HttpStatusCode") {
            self.httpStatusCode = dict["HttpStatusCode"] as! Int32
        }
        if dict.keys.contains("Message") {
            self.message = dict["Message"] as! String
        }
        if dict.keys.contains("RequestId") {
            self.requestId = dict["RequestId"] as! String
        }
        if dict.keys.contains("StatusCode") {
            self.statusCode = dict["StatusCode"] as! String
        }
        if dict.keys.contains("StatusDesc") {
            self.statusDesc = dict["StatusDesc"] as! String
        }
        if dict.keys.contains("Success") {
            self.success = dict["Success"] as! Bool
        }
        if dict.keys.contains("TaskId") {
            self.taskId = dict["TaskId"] as! String
        }
        if dict.keys.contains("TimeStamp") {
            self.timeStamp = dict["TimeStamp"] as! String
        }
    }
}

public class StartBack2BackCallResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: StartBack2BackCallResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.validateRequired(self.headers, "headers")
        try self.validateRequired(self.statusCode, "statusCode")
        try self.validateRequired(self.body, "body")
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any]) -> Void {
        if dict.keys.contains("headers") {
            self.headers = dict["headers"] as! [String: String]
        }
        if dict.keys.contains("statusCode") {
            self.statusCode = dict["statusCode"] as! Int32
        }
        if dict.keys.contains("body") {
            var model = StartBack2BackCallResponseBody()
            model.fromMap(dict["body"] as! [String: Any])
            self.body = model
        }
    }
}
