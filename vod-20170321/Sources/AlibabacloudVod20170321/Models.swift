import Foundation
import Tea
import TeaUtils
import AlibabacloudOpenApi
import AlibabaCloudOpenApiUtil
import AlibabacloudEndpointUtil

public class AppInfoDTO : Tea.TeaModel {
    public class Platforms : Tea.TeaModel {
        public var itemId: String?

        public var licenseItemIds: [String]?

        public var pkgName: String?

        public var pkgSignature: String?

        public var platformType: Int64?

        public var type: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.itemId != nil {
                map["ItemId"] = self.itemId!
            }
            if self.licenseItemIds != nil {
                map["LicenseItemIds"] = self.licenseItemIds!
            }
            if self.pkgName != nil {
                map["PkgName"] = self.pkgName!
            }
            if self.pkgSignature != nil {
                map["PkgSignature"] = self.pkgSignature!
            }
            if self.platformType != nil {
                map["PlatformType"] = self.platformType!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ItemId"] as? String {
                self.itemId = value
            }
            if let value = dict["LicenseItemIds"] as? [String] {
                self.licenseItemIds = value
            }
            if let value = dict["PkgName"] as? String {
                self.pkgName = value
            }
            if let value = dict["PkgSignature"] as? String {
                self.pkgSignature = value
            }
            if let value = dict["PlatformType"] as? Int64 {
                self.platformType = value
            }
            if let value = dict["Type"] as? Int64 {
                self.type = value
            }
        }
    }
    public var appName: String?

    public var appType: Int32?

    public var creationTime: String?

    public var gmtCreate: String?

    public var gmtModified: String?

    public var itemId: String?

    public var modificationTime: String?

    public var platforms: [AppInfoDTO.Platforms]?

    public var userId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appName != nil {
            map["AppName"] = self.appName!
        }
        if self.appType != nil {
            map["AppType"] = self.appType!
        }
        if self.creationTime != nil {
            map["CreationTime"] = self.creationTime!
        }
        if self.gmtCreate != nil {
            map["GmtCreate"] = self.gmtCreate!
        }
        if self.gmtModified != nil {
            map["GmtModified"] = self.gmtModified!
        }
        if self.itemId != nil {
            map["ItemId"] = self.itemId!
        }
        if self.modificationTime != nil {
            map["ModificationTime"] = self.modificationTime!
        }
        if self.platforms != nil {
            var tmp : [Any] = []
            for k in self.platforms! {
                tmp.append(k.toMap())
            }
            map["Platforms"] = tmp
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppName"] as? String {
            self.appName = value
        }
        if let value = dict["AppType"] as? Int32 {
            self.appType = value
        }
        if let value = dict["CreationTime"] as? String {
            self.creationTime = value
        }
        if let value = dict["GmtCreate"] as? String {
            self.gmtCreate = value
        }
        if let value = dict["GmtModified"] as? String {
            self.gmtModified = value
        }
        if let value = dict["ItemId"] as? String {
            self.itemId = value
        }
        if let value = dict["ModificationTime"] as? String {
            self.modificationTime = value
        }
        if let value = dict["Platforms"] as? [Any?] {
            var tmp : [AppInfoDTO.Platforms] = []
            for v in value {
                if v != nil {
                    var model = AppInfoDTO.Platforms()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.platforms = tmp
        }
        if let value = dict["UserId"] as? Int64 {
            self.userId = value
        }
    }
}

public class LicenseInstanceAppDTO : Tea.TeaModel {
    public class LicenseConfigs : Tea.TeaModel {
        public var businessType: String?

        public var featureIds: String?

        public var isTrial: Bool?

        public var sdkId: Int32?

        public var sdkName: String?

        public var subscription: String?

        public var subscriptionImp: String?

        public var subscriptionPkg: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.businessType != nil {
                map["BusinessType"] = self.businessType!
            }
            if self.featureIds != nil {
                map["FeatureIds"] = self.featureIds!
            }
            if self.isTrial != nil {
                map["IsTrial"] = self.isTrial!
            }
            if self.sdkId != nil {
                map["SdkId"] = self.sdkId!
            }
            if self.sdkName != nil {
                map["SdkName"] = self.sdkName!
            }
            if self.subscription != nil {
                map["Subscription"] = self.subscription!
            }
            if self.subscriptionImp != nil {
                map["SubscriptionImp"] = self.subscriptionImp!
            }
            if self.subscriptionPkg != nil {
                map["SubscriptionPkg"] = self.subscriptionPkg!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BusinessType"] as? String {
                self.businessType = value
            }
            if let value = dict["FeatureIds"] as? String {
                self.featureIds = value
            }
            if let value = dict["IsTrial"] as? Bool {
                self.isTrial = value
            }
            if let value = dict["SdkId"] as? Int32 {
                self.sdkId = value
            }
            if let value = dict["SdkName"] as? String {
                self.sdkName = value
            }
            if let value = dict["Subscription"] as? String {
                self.subscription = value
            }
            if let value = dict["SubscriptionImp"] as? String {
                self.subscriptionImp = value
            }
            if let value = dict["SubscriptionPkg"] as? String {
                self.subscriptionPkg = value
            }
        }
    }
    public var appId: String?

    public var beginOn: String?

    public var contractNo: String?

    public var creationTime: String?

    public var expiredOn: String?

    public var instanceId: String?

    public var itemId: String?

    public var licenseConfigs: [LicenseInstanceAppDTO.LicenseConfigs]?

    public var modificationTime: String?

    public var status: String?

    public var userId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.beginOn != nil {
            map["BeginOn"] = self.beginOn!
        }
        if self.contractNo != nil {
            map["ContractNo"] = self.contractNo!
        }
        if self.creationTime != nil {
            map["CreationTime"] = self.creationTime!
        }
        if self.expiredOn != nil {
            map["ExpiredOn"] = self.expiredOn!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.itemId != nil {
            map["ItemId"] = self.itemId!
        }
        if self.licenseConfigs != nil {
            var tmp : [Any] = []
            for k in self.licenseConfigs! {
                tmp.append(k.toMap())
            }
            map["LicenseConfigs"] = tmp
        }
        if self.modificationTime != nil {
            map["ModificationTime"] = self.modificationTime!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.userId != nil {
            map["UserId"] = self.userId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["BeginOn"] as? String {
            self.beginOn = value
        }
        if let value = dict["ContractNo"] as? String {
            self.contractNo = value
        }
        if let value = dict["CreationTime"] as? String {
            self.creationTime = value
        }
        if let value = dict["ExpiredOn"] as? String {
            self.expiredOn = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["ItemId"] as? String {
            self.itemId = value
        }
        if let value = dict["LicenseConfigs"] as? [Any?] {
            var tmp : [LicenseInstanceAppDTO.LicenseConfigs] = []
            for v in value {
                if v != nil {
                    var model = LicenseInstanceAppDTO.LicenseConfigs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.licenseConfigs = tmp
        }
        if let value = dict["ModificationTime"] as? String {
            self.modificationTime = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["UserId"] as? Int64 {
            self.userId = value
        }
    }
}

public class AddAITemplateRequest : Tea.TeaModel {
    public var templateConfig: String?

    public var templateName: String?

    public var templateType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.templateConfig != nil {
            map["TemplateConfig"] = self.templateConfig!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        if self.templateType != nil {
            map["TemplateType"] = self.templateType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TemplateConfig"] as? String {
            self.templateConfig = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
        if let value = dict["TemplateType"] as? String {
            self.templateType = value
        }
    }
}

public class AddAITemplateResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var templateId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TemplateId"] as? String {
            self.templateId = value
        }
    }
}

public class AddAITemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddAITemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddAITemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddCategoryRequest : Tea.TeaModel {
    public var cateName: String?

    public var parentId: Int64?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cateName != nil {
            map["CateName"] = self.cateName!
        }
        if self.parentId != nil {
            map["ParentId"] = self.parentId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CateName"] as? String {
            self.cateName = value
        }
        if let value = dict["ParentId"] as? Int64 {
            self.parentId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class AddCategoryResponseBody : Tea.TeaModel {
    public class Category : Tea.TeaModel {
        public var cateId: Int64?

        public var cateName: String?

        public var level: Int64?

        public var parentId: Int64?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cateId != nil {
                map["CateId"] = self.cateId!
            }
            if self.cateName != nil {
                map["CateName"] = self.cateName!
            }
            if self.level != nil {
                map["Level"] = self.level!
            }
            if self.parentId != nil {
                map["ParentId"] = self.parentId!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CateId"] as? Int64 {
                self.cateId = value
            }
            if let value = dict["CateName"] as? String {
                self.cateName = value
            }
            if let value = dict["Level"] as? Int64 {
                self.level = value
            }
            if let value = dict["ParentId"] as? Int64 {
                self.parentId = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var category: AddCategoryResponseBody.Category?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.category?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.category != nil {
            map["Category"] = self.category?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Category"] as? [String: Any?] {
            var model = AddCategoryResponseBody.Category()
            model.fromMap(value)
            self.category = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddCategoryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddCategoryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddCategoryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddEditingProjectRequest : Tea.TeaModel {
    public var coverURL: String?

    public var description_: String?

    public var division: String?

    public var ownerAccount: String?

    public var ownerId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: String?

    public var timeline: String?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.coverURL != nil {
            map["CoverURL"] = self.coverURL!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.division != nil {
            map["Division"] = self.division!
        }
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.timeline != nil {
            map["Timeline"] = self.timeline!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CoverURL"] as? String {
            self.coverURL = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Division"] as? String {
            self.division = value
        }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
        if let value = dict["OwnerId"] as? String {
            self.ownerId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? String {
            self.resourceOwnerId = value
        }
        if let value = dict["Timeline"] as? String {
            self.timeline = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
    }
}

public class AddEditingProjectResponseBody : Tea.TeaModel {
    public class Project : Tea.TeaModel {
        public var creationTime: String?

        public var description_: String?

        public var modifiedTime: String?

        public var projectId: String?

        public var status: String?

        public var title: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.modifiedTime != nil {
                map["ModifiedTime"] = self.modifiedTime!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["ModifiedTime"] as? String {
                self.modifiedTime = value
            }
            if let value = dict["ProjectId"] as? String {
                self.projectId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
        }
    }
    public var project: AddEditingProjectResponseBody.Project?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.project?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.project != nil {
            map["Project"] = self.project?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Project"] as? [String: Any?] {
            var model = AddEditingProjectResponseBody.Project()
            model.fromMap(value)
            self.project = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddEditingProjectResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddEditingProjectResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddEditingProjectResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddEditingProjectMaterialsRequest : Tea.TeaModel {
    public var materialIds: String?

    public var materialType: String?

    public var ownerAccount: String?

    public var ownerId: String?

    public var projectId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.materialIds != nil {
            map["MaterialIds"] = self.materialIds!
        }
        if self.materialType != nil {
            map["MaterialType"] = self.materialType!
        }
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaterialIds"] as? String {
            self.materialIds = value
        }
        if let value = dict["MaterialType"] as? String {
            self.materialType = value
        }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
        if let value = dict["OwnerId"] as? String {
            self.ownerId = value
        }
        if let value = dict["ProjectId"] as? String {
            self.projectId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? String {
            self.resourceOwnerId = value
        }
    }
}

public class AddEditingProjectMaterialsResponseBody : Tea.TeaModel {
    public class MaterialList : Tea.TeaModel {
        public var cateId: Int32?

        public var cateName: String?

        public var coverURL: String?

        public var createTime: String?

        public var customerId: Int64?

        public var description_: String?

        public var duration: Double?

        public var materialId: String?

        public var materialType: String?

        public var modifyTime: String?

        public var size: Int64?

        public var snapshots: [String]?

        public var spriteConfig: String?

        public var sprites: [String]?

        public var status: String?

        public var tags: String?

        public var title: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cateId != nil {
                map["CateId"] = self.cateId!
            }
            if self.cateName != nil {
                map["CateName"] = self.cateName!
            }
            if self.coverURL != nil {
                map["CoverURL"] = self.coverURL!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.customerId != nil {
                map["CustomerId"] = self.customerId!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.materialId != nil {
                map["MaterialId"] = self.materialId!
            }
            if self.materialType != nil {
                map["MaterialType"] = self.materialType!
            }
            if self.modifyTime != nil {
                map["ModifyTime"] = self.modifyTime!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.snapshots != nil {
                map["Snapshots"] = self.snapshots!
            }
            if self.spriteConfig != nil {
                map["SpriteConfig"] = self.spriteConfig!
            }
            if self.sprites != nil {
                map["Sprites"] = self.sprites!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.tags != nil {
                map["Tags"] = self.tags!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CateId"] as? Int32 {
                self.cateId = value
            }
            if let value = dict["CateName"] as? String {
                self.cateName = value
            }
            if let value = dict["CoverURL"] as? String {
                self.coverURL = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["CustomerId"] as? Int64 {
                self.customerId = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Duration"] as? Double {
                self.duration = value
            }
            if let value = dict["MaterialId"] as? String {
                self.materialId = value
            }
            if let value = dict["MaterialType"] as? String {
                self.materialType = value
            }
            if let value = dict["ModifyTime"] as? String {
                self.modifyTime = value
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["Snapshots"] as? [String] {
                self.snapshots = value
            }
            if let value = dict["SpriteConfig"] as? String {
                self.spriteConfig = value
            }
            if let value = dict["Sprites"] as? [String] {
                self.sprites = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Tags"] as? String {
                self.tags = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
        }
    }
    public var materialList: [AddEditingProjectMaterialsResponseBody.MaterialList]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.materialList != nil {
            var tmp : [Any] = []
            for k in self.materialList! {
                tmp.append(k.toMap())
            }
            map["MaterialList"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaterialList"] as? [Any?] {
            var tmp : [AddEditingProjectMaterialsResponseBody.MaterialList] = []
            for v in value {
                if v != nil {
                    var model = AddEditingProjectMaterialsResponseBody.MaterialList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.materialList = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddEditingProjectMaterialsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddEditingProjectMaterialsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddEditingProjectMaterialsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddTranscodeTemplateGroupRequest : Tea.TeaModel {
    public var appId: String?

    public var name: String?

    public var transcodeTemplateGroupId: String?

    public var transcodeTemplateList: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.transcodeTemplateGroupId != nil {
            map["TranscodeTemplateGroupId"] = self.transcodeTemplateGroupId!
        }
        if self.transcodeTemplateList != nil {
            map["TranscodeTemplateList"] = self.transcodeTemplateList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["TranscodeTemplateGroupId"] as? String {
            self.transcodeTemplateGroupId = value
        }
        if let value = dict["TranscodeTemplateList"] as? String {
            self.transcodeTemplateList = value
        }
    }
}

public class AddTranscodeTemplateGroupResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var transcodeTemplateGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.transcodeTemplateGroupId != nil {
            map["TranscodeTemplateGroupId"] = self.transcodeTemplateGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TranscodeTemplateGroupId"] as? String {
            self.transcodeTemplateGroupId = value
        }
    }
}

public class AddTranscodeTemplateGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddTranscodeTemplateGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddTranscodeTemplateGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddVodDomainRequest : Tea.TeaModel {
    public var checkUrl: String?

    public var domainName: String?

    public var ownerAccount: String?

    public var ownerId: Int64?

    public var scope: String?

    public var securityToken: String?

    public var sources: String?

    public var topLevelDomain: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.checkUrl != nil {
            map["CheckUrl"] = self.checkUrl!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.scope != nil {
            map["Scope"] = self.scope!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.sources != nil {
            map["Sources"] = self.sources!
        }
        if self.topLevelDomain != nil {
            map["TopLevelDomain"] = self.topLevelDomain!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CheckUrl"] as? String {
            self.checkUrl = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["Scope"] as? String {
            self.scope = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Sources"] as? String {
            self.sources = value
        }
        if let value = dict["TopLevelDomain"] as? String {
            self.topLevelDomain = value
        }
    }
}

public class AddVodDomainResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddVodDomainResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddVodDomainResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddVodDomainResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddVodStorageForAppRequest : Tea.TeaModel {
    public var appId: String?

    public var storageLocation: String?

    public var storageType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.storageLocation != nil {
            map["StorageLocation"] = self.storageLocation!
        }
        if self.storageType != nil {
            map["StorageType"] = self.storageType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["StorageLocation"] as? String {
            self.storageLocation = value
        }
        if let value = dict["StorageType"] as? String {
            self.storageType = value
        }
    }
}

public class AddVodStorageForAppResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var storageLocation: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.storageLocation != nil {
            map["StorageLocation"] = self.storageLocation!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["StorageLocation"] as? String {
            self.storageLocation = value
        }
    }
}

public class AddVodStorageForAppResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddVodStorageForAppResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddVodStorageForAppResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddVodTemplateRequest : Tea.TeaModel {
    public var appId: String?

    public var name: String?

    public var templateConfig: String?

    public var templateType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.templateConfig != nil {
            map["TemplateConfig"] = self.templateConfig!
        }
        if self.templateType != nil {
            map["TemplateType"] = self.templateType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["TemplateConfig"] as? String {
            self.templateConfig = value
        }
        if let value = dict["TemplateType"] as? String {
            self.templateType = value
        }
    }
}

public class AddVodTemplateResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var vodTemplateId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.vodTemplateId != nil {
            map["VodTemplateId"] = self.vodTemplateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["VodTemplateId"] as? String {
            self.vodTemplateId = value
        }
    }
}

public class AddVodTemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddVodTemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddVodTemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddWatermarkRequest : Tea.TeaModel {
    public var appId: String?

    public var fileUrl: String?

    public var name: String?

    public var type: String?

    public var watermarkConfig: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.fileUrl != nil {
            map["FileUrl"] = self.fileUrl!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        if self.watermarkConfig != nil {
            map["WatermarkConfig"] = self.watermarkConfig!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["FileUrl"] as? String {
            self.fileUrl = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
        if let value = dict["WatermarkConfig"] as? String {
            self.watermarkConfig = value
        }
    }
}

public class AddWatermarkResponseBody : Tea.TeaModel {
    public class WatermarkInfo : Tea.TeaModel {
        public var creationTime: String?

        public var fileUrl: String?

        public var isDefault: String?

        public var name: String?

        public var type: String?

        public var watermarkConfig: String?

        public var watermarkId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.fileUrl != nil {
                map["FileUrl"] = self.fileUrl!
            }
            if self.isDefault != nil {
                map["IsDefault"] = self.isDefault!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.watermarkConfig != nil {
                map["WatermarkConfig"] = self.watermarkConfig!
            }
            if self.watermarkId != nil {
                map["WatermarkId"] = self.watermarkId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["FileUrl"] as? String {
                self.fileUrl = value
            }
            if let value = dict["IsDefault"] as? String {
                self.isDefault = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["WatermarkConfig"] as? String {
                self.watermarkConfig = value
            }
            if let value = dict["WatermarkId"] as? String {
                self.watermarkId = value
            }
        }
    }
    public var requestId: String?

    public var watermarkInfo: AddWatermarkResponseBody.WatermarkInfo?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.watermarkInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.watermarkInfo != nil {
            map["WatermarkInfo"] = self.watermarkInfo?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["WatermarkInfo"] as? [String: Any?] {
            var model = AddWatermarkResponseBody.WatermarkInfo()
            model.fromMap(value)
            self.watermarkInfo = model
        }
    }
}

public class AddWatermarkResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddWatermarkResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddWatermarkResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AttachAppPolicyToIdentityRequest : Tea.TeaModel {
    public var appId: String?

    public var identityName: String?

    public var identityType: String?

    public var policyNames: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.identityName != nil {
            map["IdentityName"] = self.identityName!
        }
        if self.identityType != nil {
            map["IdentityType"] = self.identityType!
        }
        if self.policyNames != nil {
            map["PolicyNames"] = self.policyNames!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["IdentityName"] as? String {
            self.identityName = value
        }
        if let value = dict["IdentityType"] as? String {
            self.identityType = value
        }
        if let value = dict["PolicyNames"] as? String {
            self.policyNames = value
        }
    }
}

public class AttachAppPolicyToIdentityResponseBody : Tea.TeaModel {
    public var failedPolicyNames: [String]?

    public var nonExistPolicyNames: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.failedPolicyNames != nil {
            map["FailedPolicyNames"] = self.failedPolicyNames!
        }
        if self.nonExistPolicyNames != nil {
            map["NonExistPolicyNames"] = self.nonExistPolicyNames!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FailedPolicyNames"] as? [String] {
            self.failedPolicyNames = value
        }
        if let value = dict["NonExistPolicyNames"] as? [String] {
            self.nonExistPolicyNames = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AttachAppPolicyToIdentityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AttachAppPolicyToIdentityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AttachAppPolicyToIdentityResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BatchGetMediaInfosRequest : Tea.TeaModel {
    public var mediaIds: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mediaIds != nil {
            map["MediaIds"] = self.mediaIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MediaIds"] as? String {
            self.mediaIds = value
        }
    }
}

public class BatchGetMediaInfosResponseBody : Tea.TeaModel {
    public class MediaInfos : Tea.TeaModel {
        public class MediaInfo : Tea.TeaModel {
            public var appId: String?

            public var cateId: Int64?

            public var cateName: String?

            public var coverURL: String?

            public var creationTime: String?

            public var description_: String?

            public var downloadSwitch: String?

            public var mediaId: String?

            public var modificationTime: String?

            public var restoreExpiration: String?

            public var restoreStatus: String?

            public var snapshots: [String]?

            public var status: String?

            public var storageClass: String?

            public var storageLocation: String?

            public var tags: String?

            public var templateGroupId: String?

            public var title: String?

            public var userData: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appId != nil {
                    map["AppId"] = self.appId!
                }
                if self.cateId != nil {
                    map["CateId"] = self.cateId!
                }
                if self.cateName != nil {
                    map["CateName"] = self.cateName!
                }
                if self.coverURL != nil {
                    map["CoverURL"] = self.coverURL!
                }
                if self.creationTime != nil {
                    map["CreationTime"] = self.creationTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.downloadSwitch != nil {
                    map["DownloadSwitch"] = self.downloadSwitch!
                }
                if self.mediaId != nil {
                    map["MediaId"] = self.mediaId!
                }
                if self.modificationTime != nil {
                    map["ModificationTime"] = self.modificationTime!
                }
                if self.restoreExpiration != nil {
                    map["RestoreExpiration"] = self.restoreExpiration!
                }
                if self.restoreStatus != nil {
                    map["RestoreStatus"] = self.restoreStatus!
                }
                if self.snapshots != nil {
                    map["Snapshots"] = self.snapshots!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.storageClass != nil {
                    map["StorageClass"] = self.storageClass!
                }
                if self.storageLocation != nil {
                    map["StorageLocation"] = self.storageLocation!
                }
                if self.tags != nil {
                    map["Tags"] = self.tags!
                }
                if self.templateGroupId != nil {
                    map["TemplateGroupId"] = self.templateGroupId!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                if self.userData != nil {
                    map["UserData"] = self.userData!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AppId"] as? String {
                    self.appId = value
                }
                if let value = dict["CateId"] as? Int64 {
                    self.cateId = value
                }
                if let value = dict["CateName"] as? String {
                    self.cateName = value
                }
                if let value = dict["CoverURL"] as? String {
                    self.coverURL = value
                }
                if let value = dict["CreationTime"] as? String {
                    self.creationTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DownloadSwitch"] as? String {
                    self.downloadSwitch = value
                }
                if let value = dict["MediaId"] as? String {
                    self.mediaId = value
                }
                if let value = dict["ModificationTime"] as? String {
                    self.modificationTime = value
                }
                if let value = dict["RestoreExpiration"] as? String {
                    self.restoreExpiration = value
                }
                if let value = dict["RestoreStatus"] as? String {
                    self.restoreStatus = value
                }
                if let value = dict["Snapshots"] as? [String] {
                    self.snapshots = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["StorageClass"] as? String {
                    self.storageClass = value
                }
                if let value = dict["StorageLocation"] as? String {
                    self.storageLocation = value
                }
                if let value = dict["Tags"] as? String {
                    self.tags = value
                }
                if let value = dict["TemplateGroupId"] as? String {
                    self.templateGroupId = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
                if let value = dict["UserData"] as? String {
                    self.userData = value
                }
            }
        }
        public class MezzanineInfo : Tea.TeaModel {
            public class AudioStreamList : Tea.TeaModel {
                public var bitrate: String?

                public var channelLayout: String?

                public var channels: String?

                public var codecLongName: String?

                public var codecName: String?

                public var codecTag: String?

                public var codecTagString: String?

                public var codecTimeBase: String?

                public var duration: String?

                public var index: String?

                public var lang: String?

                public var numFrames: String?

                public var sampleFmt: String?

                public var sampleRate: String?

                public var startTime: String?

                public var timebase: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.bitrate != nil {
                        map["Bitrate"] = self.bitrate!
                    }
                    if self.channelLayout != nil {
                        map["ChannelLayout"] = self.channelLayout!
                    }
                    if self.channels != nil {
                        map["Channels"] = self.channels!
                    }
                    if self.codecLongName != nil {
                        map["CodecLongName"] = self.codecLongName!
                    }
                    if self.codecName != nil {
                        map["CodecName"] = self.codecName!
                    }
                    if self.codecTag != nil {
                        map["CodecTag"] = self.codecTag!
                    }
                    if self.codecTagString != nil {
                        map["CodecTagString"] = self.codecTagString!
                    }
                    if self.codecTimeBase != nil {
                        map["CodecTimeBase"] = self.codecTimeBase!
                    }
                    if self.duration != nil {
                        map["Duration"] = self.duration!
                    }
                    if self.index != nil {
                        map["Index"] = self.index!
                    }
                    if self.lang != nil {
                        map["Lang"] = self.lang!
                    }
                    if self.numFrames != nil {
                        map["NumFrames"] = self.numFrames!
                    }
                    if self.sampleFmt != nil {
                        map["SampleFmt"] = self.sampleFmt!
                    }
                    if self.sampleRate != nil {
                        map["SampleRate"] = self.sampleRate!
                    }
                    if self.startTime != nil {
                        map["StartTime"] = self.startTime!
                    }
                    if self.timebase != nil {
                        map["Timebase"] = self.timebase!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Bitrate"] as? String {
                        self.bitrate = value
                    }
                    if let value = dict["ChannelLayout"] as? String {
                        self.channelLayout = value
                    }
                    if let value = dict["Channels"] as? String {
                        self.channels = value
                    }
                    if let value = dict["CodecLongName"] as? String {
                        self.codecLongName = value
                    }
                    if let value = dict["CodecName"] as? String {
                        self.codecName = value
                    }
                    if let value = dict["CodecTag"] as? String {
                        self.codecTag = value
                    }
                    if let value = dict["CodecTagString"] as? String {
                        self.codecTagString = value
                    }
                    if let value = dict["CodecTimeBase"] as? String {
                        self.codecTimeBase = value
                    }
                    if let value = dict["Duration"] as? String {
                        self.duration = value
                    }
                    if let value = dict["Index"] as? String {
                        self.index = value
                    }
                    if let value = dict["Lang"] as? String {
                        self.lang = value
                    }
                    if let value = dict["NumFrames"] as? String {
                        self.numFrames = value
                    }
                    if let value = dict["SampleFmt"] as? String {
                        self.sampleFmt = value
                    }
                    if let value = dict["SampleRate"] as? String {
                        self.sampleRate = value
                    }
                    if let value = dict["StartTime"] as? String {
                        self.startTime = value
                    }
                    if let value = dict["Timebase"] as? String {
                        self.timebase = value
                    }
                }
            }
            public class VideoStreamList : Tea.TeaModel {
                public var avgFPS: String?

                public var bitrate: String?

                public var codecLongName: String?

                public var codecName: String?

                public var codecTag: String?

                public var codecTagString: String?

                public var codecTimeBase: String?

                public var dar: String?

                public var duration: String?

                public var fps: String?

                public var HDRType: String?

                public var hasBFrames: String?

                public var height: String?

                public var index: String?

                public var lang: String?

                public var level: String?

                public var numFrames: String?

                public var pixFmt: String?

                public var profile: String?

                public var rotate: String?

                public var sar: String?

                public var startTime: String?

                public var timebase: String?

                public var width: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.avgFPS != nil {
                        map["AvgFPS"] = self.avgFPS!
                    }
                    if self.bitrate != nil {
                        map["Bitrate"] = self.bitrate!
                    }
                    if self.codecLongName != nil {
                        map["CodecLongName"] = self.codecLongName!
                    }
                    if self.codecName != nil {
                        map["CodecName"] = self.codecName!
                    }
                    if self.codecTag != nil {
                        map["CodecTag"] = self.codecTag!
                    }
                    if self.codecTagString != nil {
                        map["CodecTagString"] = self.codecTagString!
                    }
                    if self.codecTimeBase != nil {
                        map["CodecTimeBase"] = self.codecTimeBase!
                    }
                    if self.dar != nil {
                        map["Dar"] = self.dar!
                    }
                    if self.duration != nil {
                        map["Duration"] = self.duration!
                    }
                    if self.fps != nil {
                        map["Fps"] = self.fps!
                    }
                    if self.HDRType != nil {
                        map["HDRType"] = self.HDRType!
                    }
                    if self.hasBFrames != nil {
                        map["HasBFrames"] = self.hasBFrames!
                    }
                    if self.height != nil {
                        map["Height"] = self.height!
                    }
                    if self.index != nil {
                        map["Index"] = self.index!
                    }
                    if self.lang != nil {
                        map["Lang"] = self.lang!
                    }
                    if self.level != nil {
                        map["Level"] = self.level!
                    }
                    if self.numFrames != nil {
                        map["NumFrames"] = self.numFrames!
                    }
                    if self.pixFmt != nil {
                        map["PixFmt"] = self.pixFmt!
                    }
                    if self.profile != nil {
                        map["Profile"] = self.profile!
                    }
                    if self.rotate != nil {
                        map["Rotate"] = self.rotate!
                    }
                    if self.sar != nil {
                        map["Sar"] = self.sar!
                    }
                    if self.startTime != nil {
                        map["StartTime"] = self.startTime!
                    }
                    if self.timebase != nil {
                        map["Timebase"] = self.timebase!
                    }
                    if self.width != nil {
                        map["Width"] = self.width!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AvgFPS"] as? String {
                        self.avgFPS = value
                    }
                    if let value = dict["Bitrate"] as? String {
                        self.bitrate = value
                    }
                    if let value = dict["CodecLongName"] as? String {
                        self.codecLongName = value
                    }
                    if let value = dict["CodecName"] as? String {
                        self.codecName = value
                    }
                    if let value = dict["CodecTag"] as? String {
                        self.codecTag = value
                    }
                    if let value = dict["CodecTagString"] as? String {
                        self.codecTagString = value
                    }
                    if let value = dict["CodecTimeBase"] as? String {
                        self.codecTimeBase = value
                    }
                    if let value = dict["Dar"] as? String {
                        self.dar = value
                    }
                    if let value = dict["Duration"] as? String {
                        self.duration = value
                    }
                    if let value = dict["Fps"] as? String {
                        self.fps = value
                    }
                    if let value = dict["HDRType"] as? String {
                        self.HDRType = value
                    }
                    if let value = dict["HasBFrames"] as? String {
                        self.hasBFrames = value
                    }
                    if let value = dict["Height"] as? String {
                        self.height = value
                    }
                    if let value = dict["Index"] as? String {
                        self.index = value
                    }
                    if let value = dict["Lang"] as? String {
                        self.lang = value
                    }
                    if let value = dict["Level"] as? String {
                        self.level = value
                    }
                    if let value = dict["NumFrames"] as? String {
                        self.numFrames = value
                    }
                    if let value = dict["PixFmt"] as? String {
                        self.pixFmt = value
                    }
                    if let value = dict["Profile"] as? String {
                        self.profile = value
                    }
                    if let value = dict["Rotate"] as? String {
                        self.rotate = value
                    }
                    if let value = dict["Sar"] as? String {
                        self.sar = value
                    }
                    if let value = dict["StartTime"] as? String {
                        self.startTime = value
                    }
                    if let value = dict["Timebase"] as? String {
                        self.timebase = value
                    }
                    if let value = dict["Width"] as? String {
                        self.width = value
                    }
                }
            }
            public var audioStreamList: [BatchGetMediaInfosResponseBody.MediaInfos.MezzanineInfo.AudioStreamList]?

            public var bitrate: String?

            public var creationTime: String?

            public var duration: String?

            public var fileName: String?

            public var fileURL: String?

            public var fps: String?

            public var height: Int64?

            public var mediaId: String?

            public var size: Int64?

            public var status: String?

            public var videoStreamList: [BatchGetMediaInfosResponseBody.MediaInfos.MezzanineInfo.VideoStreamList]?

            public var width: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.audioStreamList != nil {
                    var tmp : [Any] = []
                    for k in self.audioStreamList! {
                        tmp.append(k.toMap())
                    }
                    map["AudioStreamList"] = tmp
                }
                if self.bitrate != nil {
                    map["Bitrate"] = self.bitrate!
                }
                if self.creationTime != nil {
                    map["CreationTime"] = self.creationTime!
                }
                if self.duration != nil {
                    map["Duration"] = self.duration!
                }
                if self.fileName != nil {
                    map["FileName"] = self.fileName!
                }
                if self.fileURL != nil {
                    map["FileURL"] = self.fileURL!
                }
                if self.fps != nil {
                    map["Fps"] = self.fps!
                }
                if self.height != nil {
                    map["Height"] = self.height!
                }
                if self.mediaId != nil {
                    map["MediaId"] = self.mediaId!
                }
                if self.size != nil {
                    map["Size"] = self.size!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.videoStreamList != nil {
                    var tmp : [Any] = []
                    for k in self.videoStreamList! {
                        tmp.append(k.toMap())
                    }
                    map["VideoStreamList"] = tmp
                }
                if self.width != nil {
                    map["Width"] = self.width!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AudioStreamList"] as? [Any?] {
                    var tmp : [BatchGetMediaInfosResponseBody.MediaInfos.MezzanineInfo.AudioStreamList] = []
                    for v in value {
                        if v != nil {
                            var model = BatchGetMediaInfosResponseBody.MediaInfos.MezzanineInfo.AudioStreamList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.audioStreamList = tmp
                }
                if let value = dict["Bitrate"] as? String {
                    self.bitrate = value
                }
                if let value = dict["CreationTime"] as? String {
                    self.creationTime = value
                }
                if let value = dict["Duration"] as? String {
                    self.duration = value
                }
                if let value = dict["FileName"] as? String {
                    self.fileName = value
                }
                if let value = dict["FileURL"] as? String {
                    self.fileURL = value
                }
                if let value = dict["Fps"] as? String {
                    self.fps = value
                }
                if let value = dict["Height"] as? Int64 {
                    self.height = value
                }
                if let value = dict["MediaId"] as? String {
                    self.mediaId = value
                }
                if let value = dict["Size"] as? Int64 {
                    self.size = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["VideoStreamList"] as? [Any?] {
                    var tmp : [BatchGetMediaInfosResponseBody.MediaInfos.MezzanineInfo.VideoStreamList] = []
                    for v in value {
                        if v != nil {
                            var model = BatchGetMediaInfosResponseBody.MediaInfos.MezzanineInfo.VideoStreamList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.videoStreamList = tmp
                }
                if let value = dict["Width"] as? Int64 {
                    self.width = value
                }
            }
        }
        public class PlayInfoList : Tea.TeaModel {
            public var bitDepth: Int32?

            public var bitrate: String?

            public var codecName: String?

            public var creationTime: String?

            public var definition: String?

            public var duration: String?

            public var encrypt: Int64?

            public var encryptMode: String?

            public var encryptType: String?

            public var format: String?

            public var fps: String?

            public var HDRType: String?

            public var height: Int64?

            public var jobExt: String?

            public var jobId: String?

            public var jobType: Int32?

            public var modificationTime: String?

            public var narrowBandType: String?

            public var playURL: String?

            public var size: Int64?

            public var specification: String?

            public var status: String?

            public var streamType: String?

            public var templateGroupId: String?

            public var templateId: String?

            public var watermarkId: String?

            public var width: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bitDepth != nil {
                    map["BitDepth"] = self.bitDepth!
                }
                if self.bitrate != nil {
                    map["Bitrate"] = self.bitrate!
                }
                if self.codecName != nil {
                    map["CodecName"] = self.codecName!
                }
                if self.creationTime != nil {
                    map["CreationTime"] = self.creationTime!
                }
                if self.definition != nil {
                    map["Definition"] = self.definition!
                }
                if self.duration != nil {
                    map["Duration"] = self.duration!
                }
                if self.encrypt != nil {
                    map["Encrypt"] = self.encrypt!
                }
                if self.encryptMode != nil {
                    map["EncryptMode"] = self.encryptMode!
                }
                if self.encryptType != nil {
                    map["EncryptType"] = self.encryptType!
                }
                if self.format != nil {
                    map["Format"] = self.format!
                }
                if self.fps != nil {
                    map["Fps"] = self.fps!
                }
                if self.HDRType != nil {
                    map["HDRType"] = self.HDRType!
                }
                if self.height != nil {
                    map["Height"] = self.height!
                }
                if self.jobExt != nil {
                    map["JobExt"] = self.jobExt!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.jobType != nil {
                    map["JobType"] = self.jobType!
                }
                if self.modificationTime != nil {
                    map["ModificationTime"] = self.modificationTime!
                }
                if self.narrowBandType != nil {
                    map["NarrowBandType"] = self.narrowBandType!
                }
                if self.playURL != nil {
                    map["PlayURL"] = self.playURL!
                }
                if self.size != nil {
                    map["Size"] = self.size!
                }
                if self.specification != nil {
                    map["Specification"] = self.specification!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.streamType != nil {
                    map["StreamType"] = self.streamType!
                }
                if self.templateGroupId != nil {
                    map["TemplateGroupId"] = self.templateGroupId!
                }
                if self.templateId != nil {
                    map["TemplateId"] = self.templateId!
                }
                if self.watermarkId != nil {
                    map["WatermarkId"] = self.watermarkId!
                }
                if self.width != nil {
                    map["Width"] = self.width!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BitDepth"] as? Int32 {
                    self.bitDepth = value
                }
                if let value = dict["Bitrate"] as? String {
                    self.bitrate = value
                }
                if let value = dict["CodecName"] as? String {
                    self.codecName = value
                }
                if let value = dict["CreationTime"] as? String {
                    self.creationTime = value
                }
                if let value = dict["Definition"] as? String {
                    self.definition = value
                }
                if let value = dict["Duration"] as? String {
                    self.duration = value
                }
                if let value = dict["Encrypt"] as? Int64 {
                    self.encrypt = value
                }
                if let value = dict["EncryptMode"] as? String {
                    self.encryptMode = value
                }
                if let value = dict["EncryptType"] as? String {
                    self.encryptType = value
                }
                if let value = dict["Format"] as? String {
                    self.format = value
                }
                if let value = dict["Fps"] as? String {
                    self.fps = value
                }
                if let value = dict["HDRType"] as? String {
                    self.HDRType = value
                }
                if let value = dict["Height"] as? Int64 {
                    self.height = value
                }
                if let value = dict["JobExt"] as? String {
                    self.jobExt = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["JobType"] as? Int32 {
                    self.jobType = value
                }
                if let value = dict["ModificationTime"] as? String {
                    self.modificationTime = value
                }
                if let value = dict["NarrowBandType"] as? String {
                    self.narrowBandType = value
                }
                if let value = dict["PlayURL"] as? String {
                    self.playURL = value
                }
                if let value = dict["Size"] as? Int64 {
                    self.size = value
                }
                if let value = dict["Specification"] as? String {
                    self.specification = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["StreamType"] as? String {
                    self.streamType = value
                }
                if let value = dict["TemplateGroupId"] as? String {
                    self.templateGroupId = value
                }
                if let value = dict["TemplateId"] as? String {
                    self.templateId = value
                }
                if let value = dict["WatermarkId"] as? String {
                    self.watermarkId = value
                }
                if let value = dict["Width"] as? Int64 {
                    self.width = value
                }
            }
        }
        public var mediaId: String?

        public var mediaInfo: BatchGetMediaInfosResponseBody.MediaInfos.MediaInfo?

        public var mezzanineInfo: BatchGetMediaInfosResponseBody.MediaInfos.MezzanineInfo?

        public var playInfoList: [BatchGetMediaInfosResponseBody.MediaInfos.PlayInfoList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.mediaInfo?.validate()
            try self.mezzanineInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.mediaId != nil {
                map["MediaId"] = self.mediaId!
            }
            if self.mediaInfo != nil {
                map["MediaInfo"] = self.mediaInfo?.toMap()
            }
            if self.mezzanineInfo != nil {
                map["MezzanineInfo"] = self.mezzanineInfo?.toMap()
            }
            if self.playInfoList != nil {
                var tmp : [Any] = []
                for k in self.playInfoList! {
                    tmp.append(k.toMap())
                }
                map["PlayInfoList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MediaId"] as? String {
                self.mediaId = value
            }
            if let value = dict["MediaInfo"] as? [String: Any?] {
                var model = BatchGetMediaInfosResponseBody.MediaInfos.MediaInfo()
                model.fromMap(value)
                self.mediaInfo = model
            }
            if let value = dict["MezzanineInfo"] as? [String: Any?] {
                var model = BatchGetMediaInfosResponseBody.MediaInfos.MezzanineInfo()
                model.fromMap(value)
                self.mezzanineInfo = model
            }
            if let value = dict["PlayInfoList"] as? [Any?] {
                var tmp : [BatchGetMediaInfosResponseBody.MediaInfos.PlayInfoList] = []
                for v in value {
                    if v != nil {
                        var model = BatchGetMediaInfosResponseBody.MediaInfos.PlayInfoList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.playInfoList = tmp
            }
        }
    }
    public var forbiddenMediaIds: [String]?

    public var mediaInfos: [BatchGetMediaInfosResponseBody.MediaInfos]?

    public var nonExistMediaIds: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.forbiddenMediaIds != nil {
            map["ForbiddenMediaIds"] = self.forbiddenMediaIds!
        }
        if self.mediaInfos != nil {
            var tmp : [Any] = []
            for k in self.mediaInfos! {
                tmp.append(k.toMap())
            }
            map["MediaInfos"] = tmp
        }
        if self.nonExistMediaIds != nil {
            map["NonExistMediaIds"] = self.nonExistMediaIds!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ForbiddenMediaIds"] as? [String] {
            self.forbiddenMediaIds = value
        }
        if let value = dict["MediaInfos"] as? [Any?] {
            var tmp : [BatchGetMediaInfosResponseBody.MediaInfos] = []
            for v in value {
                if v != nil {
                    var model = BatchGetMediaInfosResponseBody.MediaInfos()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.mediaInfos = tmp
        }
        if let value = dict["NonExistMediaIds"] as? [String] {
            self.nonExistMediaIds = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class BatchGetMediaInfosResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BatchGetMediaInfosResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BatchGetMediaInfosResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BatchSetVodDomainConfigsRequest : Tea.TeaModel {
    public var domainNames: String?

    public var functions: String?

    public var ownerAccount: String?

    public var ownerId: Int64?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainNames != nil {
            map["DomainNames"] = self.domainNames!
        }
        if self.functions != nil {
            map["Functions"] = self.functions!
        }
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainNames"] as? String {
            self.domainNames = value
        }
        if let value = dict["Functions"] as? String {
            self.functions = value
        }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class BatchSetVodDomainConfigsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class BatchSetVodDomainConfigsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BatchSetVodDomainConfigsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BatchSetVodDomainConfigsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BatchStartVodDomainRequest : Tea.TeaModel {
    public var domainNames: String?

    public var ownerId: Int64?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainNames != nil {
            map["DomainNames"] = self.domainNames!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainNames"] as? String {
            self.domainNames = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class BatchStartVodDomainResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class BatchStartVodDomainResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BatchStartVodDomainResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BatchStartVodDomainResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BatchStopVodDomainRequest : Tea.TeaModel {
    public var domainNames: String?

    public var ownerId: Int64?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainNames != nil {
            map["DomainNames"] = self.domainNames!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainNames"] as? String {
            self.domainNames = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class BatchStopVodDomainResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class BatchStopVodDomainResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BatchStopVodDomainResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BatchStopVodDomainResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CancelUrlUploadJobsRequest : Tea.TeaModel {
    public var jobIds: String?

    public var uploadUrls: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.jobIds != nil {
            map["JobIds"] = self.jobIds!
        }
        if self.uploadUrls != nil {
            map["UploadUrls"] = self.uploadUrls!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["JobIds"] as? String {
            self.jobIds = value
        }
        if let value = dict["UploadUrls"] as? String {
            self.uploadUrls = value
        }
    }
}

public class CancelUrlUploadJobsResponseBody : Tea.TeaModel {
    public var canceledJobs: [String]?

    public var nonExists: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.canceledJobs != nil {
            map["CanceledJobs"] = self.canceledJobs!
        }
        if self.nonExists != nil {
            map["NonExists"] = self.nonExists!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CanceledJobs"] as? [String] {
            self.canceledJobs = value
        }
        if let value = dict["NonExists"] as? [String] {
            self.nonExists = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CancelUrlUploadJobsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CancelUrlUploadJobsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CancelUrlUploadJobsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ChangeResourceGroupRequest : Tea.TeaModel {
    public var resourceGroupId: String?

    public var resourceId: String?

    public var resourceRegionId: String?

    public var resourceType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.resourceId != nil {
            map["ResourceId"] = self.resourceId!
        }
        if self.resourceRegionId != nil {
            map["ResourceRegionId"] = self.resourceRegionId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["ResourceId"] as? String {
            self.resourceId = value
        }
        if let value = dict["ResourceRegionId"] as? String {
            self.resourceRegionId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
    }
}

public class ChangeResourceGroupResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ChangeResourceGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ChangeResourceGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ChangeResourceGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateAppInfoRequest : Tea.TeaModel {
    public var appName: String?

    public var description_: String?

    public var resourceGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appName != nil {
            map["AppName"] = self.appName!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppName"] as? String {
            self.appName = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
    }
}

public class CreateAppInfoResponseBody : Tea.TeaModel {
    public var appId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateAppInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateAppInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateAppInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateAuditRequest : Tea.TeaModel {
    public var auditContent: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.auditContent != nil {
            map["AuditContent"] = self.auditContent!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuditContent"] as? String {
            self.auditContent = value
        }
    }
}

public class CreateAuditResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateAuditResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateAuditResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateAuditResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateUploadAttachedMediaRequest : Tea.TeaModel {
    public var appId: String?

    public var businessType: String?

    public var cateIds: String?

    public var description_: String?

    public var fileName: String?

    public var fileSize: String?

    public var mediaExt: String?

    public var storageLocation: String?

    public var tags: String?

    public var title: String?

    public var userData: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.businessType != nil {
            map["BusinessType"] = self.businessType!
        }
        if self.cateIds != nil {
            map["CateIds"] = self.cateIds!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.fileName != nil {
            map["FileName"] = self.fileName!
        }
        if self.fileSize != nil {
            map["FileSize"] = self.fileSize!
        }
        if self.mediaExt != nil {
            map["MediaExt"] = self.mediaExt!
        }
        if self.storageLocation != nil {
            map["StorageLocation"] = self.storageLocation!
        }
        if self.tags != nil {
            map["Tags"] = self.tags!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        if self.userData != nil {
            map["UserData"] = self.userData!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["BusinessType"] as? String {
            self.businessType = value
        }
        if let value = dict["CateIds"] as? String {
            self.cateIds = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["FileName"] as? String {
            self.fileName = value
        }
        if let value = dict["FileSize"] as? String {
            self.fileSize = value
        }
        if let value = dict["MediaExt"] as? String {
            self.mediaExt = value
        }
        if let value = dict["StorageLocation"] as? String {
            self.storageLocation = value
        }
        if let value = dict["Tags"] as? String {
            self.tags = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
        if let value = dict["UserData"] as? String {
            self.userData = value
        }
    }
}

public class CreateUploadAttachedMediaResponseBody : Tea.TeaModel {
    public var fileURL: String?

    public var mediaId: String?

    public var mediaURL: String?

    public var requestId: String?

    public var uploadAddress: String?

    public var uploadAuth: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fileURL != nil {
            map["FileURL"] = self.fileURL!
        }
        if self.mediaId != nil {
            map["MediaId"] = self.mediaId!
        }
        if self.mediaURL != nil {
            map["MediaURL"] = self.mediaURL!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.uploadAddress != nil {
            map["UploadAddress"] = self.uploadAddress!
        }
        if self.uploadAuth != nil {
            map["UploadAuth"] = self.uploadAuth!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FileURL"] as? String {
            self.fileURL = value
        }
        if let value = dict["MediaId"] as? String {
            self.mediaId = value
        }
        if let value = dict["MediaURL"] as? String {
            self.mediaURL = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["UploadAddress"] as? String {
            self.uploadAddress = value
        }
        if let value = dict["UploadAuth"] as? String {
            self.uploadAuth = value
        }
    }
}

public class CreateUploadAttachedMediaResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateUploadAttachedMediaResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateUploadAttachedMediaResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateUploadImageRequest : Tea.TeaModel {
    public var appId: String?

    public var cateId: Int64?

    public var description_: String?

    public var imageExt: String?

    public var imageType: String?

    public var originalFileName: String?

    public var storageLocation: String?

    public var tags: String?

    public var title: String?

    public var userData: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.cateId != nil {
            map["CateId"] = self.cateId!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.imageExt != nil {
            map["ImageExt"] = self.imageExt!
        }
        if self.imageType != nil {
            map["ImageType"] = self.imageType!
        }
        if self.originalFileName != nil {
            map["OriginalFileName"] = self.originalFileName!
        }
        if self.storageLocation != nil {
            map["StorageLocation"] = self.storageLocation!
        }
        if self.tags != nil {
            map["Tags"] = self.tags!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        if self.userData != nil {
            map["UserData"] = self.userData!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["CateId"] as? Int64 {
            self.cateId = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["ImageExt"] as? String {
            self.imageExt = value
        }
        if let value = dict["ImageType"] as? String {
            self.imageType = value
        }
        if let value = dict["OriginalFileName"] as? String {
            self.originalFileName = value
        }
        if let value = dict["StorageLocation"] as? String {
            self.storageLocation = value
        }
        if let value = dict["Tags"] as? String {
            self.tags = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
        if let value = dict["UserData"] as? String {
            self.userData = value
        }
    }
}

public class CreateUploadImageResponseBody : Tea.TeaModel {
    public var fileURL: String?

    public var imageId: String?

    public var imageURL: String?

    public var requestId: String?

    public var uploadAddress: String?

    public var uploadAuth: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fileURL != nil {
            map["FileURL"] = self.fileURL!
        }
        if self.imageId != nil {
            map["ImageId"] = self.imageId!
        }
        if self.imageURL != nil {
            map["ImageURL"] = self.imageURL!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.uploadAddress != nil {
            map["UploadAddress"] = self.uploadAddress!
        }
        if self.uploadAuth != nil {
            map["UploadAuth"] = self.uploadAuth!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FileURL"] as? String {
            self.fileURL = value
        }
        if let value = dict["ImageId"] as? String {
            self.imageId = value
        }
        if let value = dict["ImageURL"] as? String {
            self.imageURL = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["UploadAddress"] as? String {
            self.uploadAddress = value
        }
        if let value = dict["UploadAuth"] as? String {
            self.uploadAuth = value
        }
    }
}

public class CreateUploadImageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateUploadImageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateUploadImageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateUploadVideoRequest : Tea.TeaModel {
    public var appId: String?

    public var cateId: Int64?

    public var coverURL: String?

    public var description_: String?

    public var fileName: String?

    public var fileSize: Int64?

    public var storageLocation: String?

    public var tags: String?

    public var templateGroupId: String?

    public var title: String?

    public var userData: String?

    public var workflowId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.cateId != nil {
            map["CateId"] = self.cateId!
        }
        if self.coverURL != nil {
            map["CoverURL"] = self.coverURL!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.fileName != nil {
            map["FileName"] = self.fileName!
        }
        if self.fileSize != nil {
            map["FileSize"] = self.fileSize!
        }
        if self.storageLocation != nil {
            map["StorageLocation"] = self.storageLocation!
        }
        if self.tags != nil {
            map["Tags"] = self.tags!
        }
        if self.templateGroupId != nil {
            map["TemplateGroupId"] = self.templateGroupId!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        if self.userData != nil {
            map["UserData"] = self.userData!
        }
        if self.workflowId != nil {
            map["WorkflowId"] = self.workflowId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["CateId"] as? Int64 {
            self.cateId = value
        }
        if let value = dict["CoverURL"] as? String {
            self.coverURL = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["FileName"] as? String {
            self.fileName = value
        }
        if let value = dict["FileSize"] as? Int64 {
            self.fileSize = value
        }
        if let value = dict["StorageLocation"] as? String {
            self.storageLocation = value
        }
        if let value = dict["Tags"] as? String {
            self.tags = value
        }
        if let value = dict["TemplateGroupId"] as? String {
            self.templateGroupId = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
        if let value = dict["UserData"] as? String {
            self.userData = value
        }
        if let value = dict["WorkflowId"] as? String {
            self.workflowId = value
        }
    }
}

public class CreateUploadVideoResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var uploadAddress: String?

    public var uploadAuth: String?

    public var videoId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.uploadAddress != nil {
            map["UploadAddress"] = self.uploadAddress!
        }
        if self.uploadAuth != nil {
            map["UploadAuth"] = self.uploadAuth!
        }
        if self.videoId != nil {
            map["VideoId"] = self.videoId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["UploadAddress"] as? String {
            self.uploadAddress = value
        }
        if let value = dict["UploadAuth"] as? String {
            self.uploadAuth = value
        }
        if let value = dict["VideoId"] as? String {
            self.videoId = value
        }
    }
}

public class CreateUploadVideoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateUploadVideoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateUploadVideoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DecryptKMSDataKeyRequest : Tea.TeaModel {
    public var cipherText: String?

    public var ownerAccount: String?

    public var ownerId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cipherText != nil {
            map["CipherText"] = self.cipherText!
        }
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CipherText"] as? String {
            self.cipherText = value
        }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
        if let value = dict["OwnerId"] as? String {
            self.ownerId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? String {
            self.resourceOwnerId = value
        }
    }
}

public class DecryptKMSDataKeyResponseBody : Tea.TeaModel {
    public var keyId: String?

    public var plaintext: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.keyId != nil {
            map["KeyId"] = self.keyId!
        }
        if self.plaintext != nil {
            map["Plaintext"] = self.plaintext!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["KeyId"] as? String {
            self.keyId = value
        }
        if let value = dict["Plaintext"] as? String {
            self.plaintext = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DecryptKMSDataKeyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DecryptKMSDataKeyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DecryptKMSDataKeyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteAIImageInfosRequest : Tea.TeaModel {
    public var AIImageInfoIds: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.AIImageInfoIds != nil {
            map["AIImageInfoIds"] = self.AIImageInfoIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AIImageInfoIds"] as? String {
            self.AIImageInfoIds = value
        }
    }
}

public class DeleteAIImageInfosResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteAIImageInfosResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteAIImageInfosResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteAIImageInfosResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteAITemplateRequest : Tea.TeaModel {
    public var templateId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TemplateId"] as? String {
            self.templateId = value
        }
    }
}

public class DeleteAITemplateResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var templateId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TemplateId"] as? String {
            self.templateId = value
        }
    }
}

public class DeleteAITemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteAITemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteAITemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteAppInfoRequest : Tea.TeaModel {
    public var appId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
    }
}

public class DeleteAppInfoResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteAppInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteAppInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteAppInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteAttachedMediaRequest : Tea.TeaModel {
    public var mediaIds: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mediaIds != nil {
            map["MediaIds"] = self.mediaIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MediaIds"] as? String {
            self.mediaIds = value
        }
    }
}

public class DeleteAttachedMediaResponseBody : Tea.TeaModel {
    public var nonExistMediaIds: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nonExistMediaIds != nil {
            map["NonExistMediaIds"] = self.nonExistMediaIds!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NonExistMediaIds"] as? [String] {
            self.nonExistMediaIds = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteAttachedMediaResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteAttachedMediaResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteAttachedMediaResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteCategoryRequest : Tea.TeaModel {
    public var cateId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cateId != nil {
            map["CateId"] = self.cateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CateId"] as? Int64 {
            self.cateId = value
        }
    }
}

public class DeleteCategoryResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteCategoryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteCategoryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteCategoryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDynamicImageRequest : Tea.TeaModel {
    public var dynamicImageIds: String?

    public var videoId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dynamicImageIds != nil {
            map["DynamicImageIds"] = self.dynamicImageIds!
        }
        if self.videoId != nil {
            map["VideoId"] = self.videoId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DynamicImageIds"] as? String {
            self.dynamicImageIds = value
        }
        if let value = dict["VideoId"] as? String {
            self.videoId = value
        }
    }
}

public class DeleteDynamicImageResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteDynamicImageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDynamicImageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDynamicImageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteEditingProjectRequest : Tea.TeaModel {
    public var ownerAccount: String?

    public var ownerId: String?

    public var projectIds: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.projectIds != nil {
            map["ProjectIds"] = self.projectIds!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
        if let value = dict["OwnerId"] as? String {
            self.ownerId = value
        }
        if let value = dict["ProjectIds"] as? String {
            self.projectIds = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? String {
            self.resourceOwnerId = value
        }
    }
}

public class DeleteEditingProjectResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteEditingProjectResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteEditingProjectResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteEditingProjectResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteEditingProjectMaterialsRequest : Tea.TeaModel {
    public var materialIds: String?

    public var materialType: String?

    public var ownerAccount: String?

    public var ownerId: String?

    public var projectId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.materialIds != nil {
            map["MaterialIds"] = self.materialIds!
        }
        if self.materialType != nil {
            map["MaterialType"] = self.materialType!
        }
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaterialIds"] as? String {
            self.materialIds = value
        }
        if let value = dict["MaterialType"] as? String {
            self.materialType = value
        }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
        if let value = dict["OwnerId"] as? String {
            self.ownerId = value
        }
        if let value = dict["ProjectId"] as? String {
            self.projectId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? String {
            self.resourceOwnerId = value
        }
    }
}

public class DeleteEditingProjectMaterialsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteEditingProjectMaterialsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteEditingProjectMaterialsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteEditingProjectMaterialsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteImageRequest : Tea.TeaModel {
    public var deleteImageType: String?

    public var imageIds: String?

    public var imageType: String?

    public var imageURLs: String?

    public var videoId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deleteImageType != nil {
            map["DeleteImageType"] = self.deleteImageType!
        }
        if self.imageIds != nil {
            map["ImageIds"] = self.imageIds!
        }
        if self.imageType != nil {
            map["ImageType"] = self.imageType!
        }
        if self.imageURLs != nil {
            map["ImageURLs"] = self.imageURLs!
        }
        if self.videoId != nil {
            map["VideoId"] = self.videoId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeleteImageType"] as? String {
            self.deleteImageType = value
        }
        if let value = dict["ImageIds"] as? String {
            self.imageIds = value
        }
        if let value = dict["ImageType"] as? String {
            self.imageType = value
        }
        if let value = dict["ImageURLs"] as? String {
            self.imageURLs = value
        }
        if let value = dict["VideoId"] as? String {
            self.videoId = value
        }
    }
}

public class DeleteImageResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteImageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteImageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteImageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteMessageCallbackRequest : Tea.TeaModel {
    public var appId: String?

    public var ownerAccount: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
    }
}

public class DeleteMessageCallbackResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteMessageCallbackResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteMessageCallbackResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteMessageCallbackResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteMezzaninesRequest : Tea.TeaModel {
    public var force: Bool?

    public var videoIds: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.force != nil {
            map["Force"] = self.force!
        }
        if self.videoIds != nil {
            map["VideoIds"] = self.videoIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Force"] as? Bool {
            self.force = value
        }
        if let value = dict["VideoIds"] as? String {
            self.videoIds = value
        }
    }
}

public class DeleteMezzaninesResponseBody : Tea.TeaModel {
    public var nonExistVideoIds: [String]?

    public var requestId: String?

    public var unRemoveableVideoIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nonExistVideoIds != nil {
            map["NonExistVideoIds"] = self.nonExistVideoIds!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.unRemoveableVideoIds != nil {
            map["UnRemoveableVideoIds"] = self.unRemoveableVideoIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NonExistVideoIds"] as? [String] {
            self.nonExistVideoIds = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["UnRemoveableVideoIds"] as? [String] {
            self.unRemoveableVideoIds = value
        }
    }
}

public class DeleteMezzaninesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteMezzaninesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteMezzaninesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteMultipartUploadRequest : Tea.TeaModel {
    public var mediaId: String?

    public var mediaType: String?

    public var ownerAccount: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mediaId != nil {
            map["MediaId"] = self.mediaId!
        }
        if self.mediaType != nil {
            map["MediaType"] = self.mediaType!
        }
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MediaId"] as? String {
            self.mediaId = value
        }
        if let value = dict["MediaType"] as? String {
            self.mediaType = value
        }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
    }
}

public class DeleteMultipartUploadResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteMultipartUploadResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteMultipartUploadResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteMultipartUploadResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteStreamRequest : Tea.TeaModel {
    public var jobIds: String?

    public var videoId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.jobIds != nil {
            map["JobIds"] = self.jobIds!
        }
        if self.videoId != nil {
            map["VideoId"] = self.videoId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["JobIds"] as? String {
            self.jobIds = value
        }
        if let value = dict["VideoId"] as? String {
            self.videoId = value
        }
    }
}

public class DeleteStreamResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteStreamResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteStreamResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteStreamResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteTranscodeTemplateGroupRequest : Tea.TeaModel {
    public var forceDelGroup: String?

    public var transcodeTemplateGroupId: String?

    public var transcodeTemplateIds: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.forceDelGroup != nil {
            map["ForceDelGroup"] = self.forceDelGroup!
        }
        if self.transcodeTemplateGroupId != nil {
            map["TranscodeTemplateGroupId"] = self.transcodeTemplateGroupId!
        }
        if self.transcodeTemplateIds != nil {
            map["TranscodeTemplateIds"] = self.transcodeTemplateIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ForceDelGroup"] as? String {
            self.forceDelGroup = value
        }
        if let value = dict["TranscodeTemplateGroupId"] as? String {
            self.transcodeTemplateGroupId = value
        }
        if let value = dict["TranscodeTemplateIds"] as? String {
            self.transcodeTemplateIds = value
        }
    }
}

public class DeleteTranscodeTemplateGroupResponseBody : Tea.TeaModel {
    public var nonExistTranscodeTemplateIds: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nonExistTranscodeTemplateIds != nil {
            map["NonExistTranscodeTemplateIds"] = self.nonExistTranscodeTemplateIds!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NonExistTranscodeTemplateIds"] as? [String] {
            self.nonExistTranscodeTemplateIds = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteTranscodeTemplateGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteTranscodeTemplateGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteTranscodeTemplateGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteVideoRequest : Tea.TeaModel {
    public var videoIds: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.videoIds != nil {
            map["VideoIds"] = self.videoIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["VideoIds"] as? String {
            self.videoIds = value
        }
    }
}

public class DeleteVideoResponseBody : Tea.TeaModel {
    public var forbiddenVideoIds: [String]?

    public var nonExistVideoIds: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.forbiddenVideoIds != nil {
            map["ForbiddenVideoIds"] = self.forbiddenVideoIds!
        }
        if self.nonExistVideoIds != nil {
            map["NonExistVideoIds"] = self.nonExistVideoIds!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ForbiddenVideoIds"] as? [String] {
            self.forbiddenVideoIds = value
        }
        if let value = dict["NonExistVideoIds"] as? [String] {
            self.nonExistVideoIds = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteVideoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteVideoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteVideoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteVodDomainRequest : Tea.TeaModel {
    public var domainName: String?

    public var ownerAccount: String?

    public var ownerId: Int64?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DeleteVodDomainResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteVodDomainResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteVodDomainResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteVodDomainResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteVodSpecificConfigRequest : Tea.TeaModel {
    public var configId: String?

    public var domainName: String?

    public var env: String?

    public var ownerId: Int64?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.configId != nil {
            map["ConfigId"] = self.configId!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConfigId"] as? String {
            self.configId = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DeleteVodSpecificConfigResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteVodSpecificConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteVodSpecificConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteVodSpecificConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteVodTemplateRequest : Tea.TeaModel {
    public var vodTemplateId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.vodTemplateId != nil {
            map["VodTemplateId"] = self.vodTemplateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["VodTemplateId"] as? String {
            self.vodTemplateId = value
        }
    }
}

public class DeleteVodTemplateResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var vodTemplateId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.vodTemplateId != nil {
            map["VodTemplateId"] = self.vodTemplateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["VodTemplateId"] as? String {
            self.vodTemplateId = value
        }
    }
}

public class DeleteVodTemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteVodTemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteVodTemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteWatermarkRequest : Tea.TeaModel {
    public var watermarkId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.watermarkId != nil {
            map["WatermarkId"] = self.watermarkId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["WatermarkId"] as? String {
            self.watermarkId = value
        }
    }
}

public class DeleteWatermarkResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteWatermarkResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteWatermarkResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteWatermarkResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMediaDistributionRequest : Tea.TeaModel {
    public var endTime: String?

    public var interval: String?

    public var startTime: String?

    public var storageClass: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.storageClass != nil {
            map["StorageClass"] = self.storageClass!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Interval"] as? String {
            self.interval = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["StorageClass"] as? String {
            self.storageClass = value
        }
    }
}

public class DescribeMediaDistributionResponseBody : Tea.TeaModel {
    public class MediaDistributionList : Tea.TeaModel {
        public var count: Int64?

        public var endTime: String?

        public var startTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.count != nil {
                map["Count"] = self.count!
            }
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Count"] as? Int64 {
                self.count = value
            }
            if let value = dict["EndTime"] as? String {
                self.endTime = value
            }
            if let value = dict["StartTime"] as? String {
                self.startTime = value
            }
        }
    }
    public var mediaDistributionList: [DescribeMediaDistributionResponseBody.MediaDistributionList]?

    public var requestId: String?

    public var total: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mediaDistributionList != nil {
            var tmp : [Any] = []
            for k in self.mediaDistributionList! {
                tmp.append(k.toMap())
            }
            map["MediaDistributionList"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MediaDistributionList"] as? [Any?] {
            var tmp : [DescribeMediaDistributionResponseBody.MediaDistributionList] = []
            for v in value {
                if v != nil {
                    var model = DescribeMediaDistributionResponseBody.MediaDistributionList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.mediaDistributionList = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Total"] as? Int64 {
            self.total = value
        }
    }
}

public class DescribeMediaDistributionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMediaDistributionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMediaDistributionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePlayTopVideosRequest : Tea.TeaModel {
    public var bizDate: String?

    public var ownerId: Int64?

    public var pageNo: Int64?

    public var pageSize: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizDate != nil {
            map["BizDate"] = self.bizDate!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizDate"] as? String {
            self.bizDate = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int64 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
    }
}

public class DescribePlayTopVideosResponseBody : Tea.TeaModel {
    public class TopPlayVideos : Tea.TeaModel {
        public class TopPlayVideoStatis : Tea.TeaModel {
            public var playDuration: String?

            public var title: String?

            public var UV: String?

            public var VV: String?

            public var videoId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.playDuration != nil {
                    map["PlayDuration"] = self.playDuration!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                if self.UV != nil {
                    map["UV"] = self.UV!
                }
                if self.VV != nil {
                    map["VV"] = self.VV!
                }
                if self.videoId != nil {
                    map["VideoId"] = self.videoId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PlayDuration"] as? String {
                    self.playDuration = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
                if let value = dict["UV"] as? String {
                    self.UV = value
                }
                if let value = dict["VV"] as? String {
                    self.VV = value
                }
                if let value = dict["VideoId"] as? String {
                    self.videoId = value
                }
            }
        }
        public var topPlayVideoStatis: [DescribePlayTopVideosResponseBody.TopPlayVideos.TopPlayVideoStatis]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.topPlayVideoStatis != nil {
                var tmp : [Any] = []
                for k in self.topPlayVideoStatis! {
                    tmp.append(k.toMap())
                }
                map["TopPlayVideoStatis"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TopPlayVideoStatis"] as? [Any?] {
                var tmp : [DescribePlayTopVideosResponseBody.TopPlayVideos.TopPlayVideoStatis] = []
                for v in value {
                    if v != nil {
                        var model = DescribePlayTopVideosResponseBody.TopPlayVideos.TopPlayVideoStatis()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.topPlayVideoStatis = tmp
            }
        }
    }
    public var pageNo: Int64?

    public var pageSize: Int64?

    public var requestId: String?

    public var topPlayVideos: DescribePlayTopVideosResponseBody.TopPlayVideos?

    public var totalNum: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.topPlayVideos?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.topPlayVideos != nil {
            map["TopPlayVideos"] = self.topPlayVideos?.toMap()
        }
        if self.totalNum != nil {
            map["TotalNum"] = self.totalNum!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNo"] as? Int64 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TopPlayVideos"] as? [String: Any?] {
            var model = DescribePlayTopVideosResponseBody.TopPlayVideos()
            model.fromMap(value)
            self.topPlayVideos = model
        }
        if let value = dict["TotalNum"] as? Int64 {
            self.totalNum = value
        }
    }
}

public class DescribePlayTopVideosResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePlayTopVideosResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePlayTopVideosResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePlayUserAvgRequest : Tea.TeaModel {
    public var endTime: String?

    public var ownerId: Int64?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribePlayUserAvgResponseBody : Tea.TeaModel {
    public class UserPlayStatisAvgs : Tea.TeaModel {
        public class UserPlayStatisAvg : Tea.TeaModel {
            public var avgPlayCount: String?

            public var avgPlayDuration: String?

            public var date: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.avgPlayCount != nil {
                    map["AvgPlayCount"] = self.avgPlayCount!
                }
                if self.avgPlayDuration != nil {
                    map["AvgPlayDuration"] = self.avgPlayDuration!
                }
                if self.date != nil {
                    map["Date"] = self.date!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AvgPlayCount"] as? String {
                    self.avgPlayCount = value
                }
                if let value = dict["AvgPlayDuration"] as? String {
                    self.avgPlayDuration = value
                }
                if let value = dict["Date"] as? String {
                    self.date = value
                }
            }
        }
        public var userPlayStatisAvg: [DescribePlayUserAvgResponseBody.UserPlayStatisAvgs.UserPlayStatisAvg]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.userPlayStatisAvg != nil {
                var tmp : [Any] = []
                for k in self.userPlayStatisAvg! {
                    tmp.append(k.toMap())
                }
                map["UserPlayStatisAvg"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["UserPlayStatisAvg"] as? [Any?] {
                var tmp : [DescribePlayUserAvgResponseBody.UserPlayStatisAvgs.UserPlayStatisAvg] = []
                for v in value {
                    if v != nil {
                        var model = DescribePlayUserAvgResponseBody.UserPlayStatisAvgs.UserPlayStatisAvg()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.userPlayStatisAvg = tmp
            }
        }
    }
    public var requestId: String?

    public var userPlayStatisAvgs: DescribePlayUserAvgResponseBody.UserPlayStatisAvgs?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.userPlayStatisAvgs?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.userPlayStatisAvgs != nil {
            map["UserPlayStatisAvgs"] = self.userPlayStatisAvgs?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["UserPlayStatisAvgs"] as? [String: Any?] {
            var model = DescribePlayUserAvgResponseBody.UserPlayStatisAvgs()
            model.fromMap(value)
            self.userPlayStatisAvgs = model
        }
    }
}

public class DescribePlayUserAvgResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePlayUserAvgResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePlayUserAvgResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePlayUserTotalRequest : Tea.TeaModel {
    public var endTime: String?

    public var ownerId: Int64?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribePlayUserTotalResponseBody : Tea.TeaModel {
    public class UserPlayStatisTotals : Tea.TeaModel {
        public class UserPlayStatisTotal : Tea.TeaModel {
            public class UV : Tea.TeaModel {
                public var android: String?

                public var flash: String?

                public var HTML5: String?

                public var iOS: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.android != nil {
                        map["Android"] = self.android!
                    }
                    if self.flash != nil {
                        map["Flash"] = self.flash!
                    }
                    if self.HTML5 != nil {
                        map["HTML5"] = self.HTML5!
                    }
                    if self.iOS != nil {
                        map["iOS"] = self.iOS!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Android"] as? String {
                        self.android = value
                    }
                    if let value = dict["Flash"] as? String {
                        self.flash = value
                    }
                    if let value = dict["HTML5"] as? String {
                        self.HTML5 = value
                    }
                    if let value = dict["iOS"] as? String {
                        self.iOS = value
                    }
                }
            }
            public class VV : Tea.TeaModel {
                public var android: String?

                public var flash: String?

                public var HTML5: String?

                public var iOS: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.android != nil {
                        map["Android"] = self.android!
                    }
                    if self.flash != nil {
                        map["Flash"] = self.flash!
                    }
                    if self.HTML5 != nil {
                        map["HTML5"] = self.HTML5!
                    }
                    if self.iOS != nil {
                        map["iOS"] = self.iOS!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Android"] as? String {
                        self.android = value
                    }
                    if let value = dict["Flash"] as? String {
                        self.flash = value
                    }
                    if let value = dict["HTML5"] as? String {
                        self.HTML5 = value
                    }
                    if let value = dict["iOS"] as? String {
                        self.iOS = value
                    }
                }
            }
            public var date: String?

            public var playDuration: String?

            public var playRange: String?

            public var UV: DescribePlayUserTotalResponseBody.UserPlayStatisTotals.UserPlayStatisTotal.UV?

            public var VV: DescribePlayUserTotalResponseBody.UserPlayStatisTotals.UserPlayStatisTotal.VV?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.UV?.validate()
                try self.VV?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.date != nil {
                    map["Date"] = self.date!
                }
                if self.playDuration != nil {
                    map["PlayDuration"] = self.playDuration!
                }
                if self.playRange != nil {
                    map["PlayRange"] = self.playRange!
                }
                if self.UV != nil {
                    map["UV"] = self.UV?.toMap()
                }
                if self.VV != nil {
                    map["VV"] = self.VV?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Date"] as? String {
                    self.date = value
                }
                if let value = dict["PlayDuration"] as? String {
                    self.playDuration = value
                }
                if let value = dict["PlayRange"] as? String {
                    self.playRange = value
                }
                if let value = dict["UV"] as? [String: Any?] {
                    var model = DescribePlayUserTotalResponseBody.UserPlayStatisTotals.UserPlayStatisTotal.UV()
                    model.fromMap(value)
                    self.UV = model
                }
                if let value = dict["VV"] as? [String: Any?] {
                    var model = DescribePlayUserTotalResponseBody.UserPlayStatisTotals.UserPlayStatisTotal.VV()
                    model.fromMap(value)
                    self.VV = model
                }
            }
        }
        public var userPlayStatisTotal: [DescribePlayUserTotalResponseBody.UserPlayStatisTotals.UserPlayStatisTotal]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.userPlayStatisTotal != nil {
                var tmp : [Any] = []
                for k in self.userPlayStatisTotal! {
                    tmp.append(k.toMap())
                }
                map["UserPlayStatisTotal"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["UserPlayStatisTotal"] as? [Any?] {
                var tmp : [DescribePlayUserTotalResponseBody.UserPlayStatisTotals.UserPlayStatisTotal] = []
                for v in value {
                    if v != nil {
                        var model = DescribePlayUserTotalResponseBody.UserPlayStatisTotals.UserPlayStatisTotal()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.userPlayStatisTotal = tmp
            }
        }
    }
    public var requestId: String?

    public var userPlayStatisTotals: DescribePlayUserTotalResponseBody.UserPlayStatisTotals?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.userPlayStatisTotals?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.userPlayStatisTotals != nil {
            map["UserPlayStatisTotals"] = self.userPlayStatisTotals?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["UserPlayStatisTotals"] as? [String: Any?] {
            var model = DescribePlayUserTotalResponseBody.UserPlayStatisTotals()
            model.fromMap(value)
            self.userPlayStatisTotals = model
        }
    }
}

public class DescribePlayUserTotalResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePlayUserTotalResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePlayUserTotalResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePlayVideoStatisRequest : Tea.TeaModel {
    public var endTime: String?

    public var ownerId: Int64?

    public var startTime: String?

    public var videoId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.videoId != nil {
            map["VideoId"] = self.videoId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["VideoId"] as? String {
            self.videoId = value
        }
    }
}

public class DescribePlayVideoStatisResponseBody : Tea.TeaModel {
    public class VideoPlayStatisDetails : Tea.TeaModel {
        public class VideoPlayStatisDetail : Tea.TeaModel {
            public var date: String?

            public var playDuration: String?

            public var playRange: String?

            public var title: String?

            public var UV: String?

            public var VV: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.date != nil {
                    map["Date"] = self.date!
                }
                if self.playDuration != nil {
                    map["PlayDuration"] = self.playDuration!
                }
                if self.playRange != nil {
                    map["PlayRange"] = self.playRange!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                if self.UV != nil {
                    map["UV"] = self.UV!
                }
                if self.VV != nil {
                    map["VV"] = self.VV!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Date"] as? String {
                    self.date = value
                }
                if let value = dict["PlayDuration"] as? String {
                    self.playDuration = value
                }
                if let value = dict["PlayRange"] as? String {
                    self.playRange = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
                if let value = dict["UV"] as? String {
                    self.UV = value
                }
                if let value = dict["VV"] as? String {
                    self.VV = value
                }
            }
        }
        public var videoPlayStatisDetail: [DescribePlayVideoStatisResponseBody.VideoPlayStatisDetails.VideoPlayStatisDetail]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.videoPlayStatisDetail != nil {
                var tmp : [Any] = []
                for k in self.videoPlayStatisDetail! {
                    tmp.append(k.toMap())
                }
                map["VideoPlayStatisDetail"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["VideoPlayStatisDetail"] as? [Any?] {
                var tmp : [DescribePlayVideoStatisResponseBody.VideoPlayStatisDetails.VideoPlayStatisDetail] = []
                for v in value {
                    if v != nil {
                        var model = DescribePlayVideoStatisResponseBody.VideoPlayStatisDetails.VideoPlayStatisDetail()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.videoPlayStatisDetail = tmp
            }
        }
    }
    public var requestId: String?

    public var videoPlayStatisDetails: DescribePlayVideoStatisResponseBody.VideoPlayStatisDetails?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.videoPlayStatisDetails?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.videoPlayStatisDetails != nil {
            map["VideoPlayStatisDetails"] = self.videoPlayStatisDetails?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["VideoPlayStatisDetails"] as? [String: Any?] {
            var model = DescribePlayVideoStatisResponseBody.VideoPlayStatisDetails()
            model.fromMap(value)
            self.videoPlayStatisDetails = model
        }
    }
}

public class DescribePlayVideoStatisResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePlayVideoStatisResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePlayVideoStatisResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodAIDataRequest : Tea.TeaModel {
    public var AIType: String?

    public var endTime: String?

    public var ownerId: Int64?

    public var region: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.AIType != nil {
            map["AIType"] = self.AIType!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.region != nil {
            map["Region"] = self.region!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AIType"] as? String {
            self.AIType = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["Region"] as? String {
            self.region = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeVodAIDataResponseBody : Tea.TeaModel {
    public class AIData : Tea.TeaModel {
        public class AIDataItem : Tea.TeaModel {
            public class Data : Tea.TeaModel {
                public class DataItem : Tea.TeaModel {
                    public var name: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var dataItem: [DescribeVodAIDataResponseBody.AIData.AIDataItem.Data.DataItem]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.dataItem != nil {
                        var tmp : [Any] = []
                        for k in self.dataItem! {
                            tmp.append(k.toMap())
                        }
                        map["DataItem"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["DataItem"] as? [Any?] {
                        var tmp : [DescribeVodAIDataResponseBody.AIData.AIDataItem.Data.DataItem] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeVodAIDataResponseBody.AIData.AIDataItem.Data.DataItem()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.dataItem = tmp
                    }
                }
            }
            public var data: DescribeVodAIDataResponseBody.AIData.AIDataItem.Data?

            public var timeStamp: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.data?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.data != nil {
                    map["Data"] = self.data?.toMap()
                }
                if self.timeStamp != nil {
                    map["TimeStamp"] = self.timeStamp!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Data"] as? [String: Any?] {
                    var model = DescribeVodAIDataResponseBody.AIData.AIDataItem.Data()
                    model.fromMap(value)
                    self.data = model
                }
                if let value = dict["TimeStamp"] as? String {
                    self.timeStamp = value
                }
            }
        }
        public var AIDataItem: [DescribeVodAIDataResponseBody.AIData.AIDataItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.AIDataItem != nil {
                var tmp : [Any] = []
                for k in self.AIDataItem! {
                    tmp.append(k.toMap())
                }
                map["AIDataItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AIDataItem"] as? [Any?] {
                var tmp : [DescribeVodAIDataResponseBody.AIData.AIDataItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeVodAIDataResponseBody.AIData.AIDataItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.AIDataItem = tmp
            }
        }
    }
    public var AIData: DescribeVodAIDataResponseBody.AIData?

    public var dataInterval: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.AIData?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.AIData != nil {
            map["AIData"] = self.AIData?.toMap()
        }
        if self.dataInterval != nil {
            map["DataInterval"] = self.dataInterval!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AIData"] as? [String: Any?] {
            var model = DescribeVodAIDataResponseBody.AIData()
            model.fromMap(value)
            self.AIData = model
        }
        if let value = dict["DataInterval"] as? String {
            self.dataInterval = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeVodAIDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodAIDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodAIDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodCertificateListRequest : Tea.TeaModel {
    public var domainName: String?

    public var ownerId: Int64?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeVodCertificateListResponseBody : Tea.TeaModel {
    public class CertificateListModel : Tea.TeaModel {
        public class CertList : Tea.TeaModel {
            public class Cert : Tea.TeaModel {
                public var algorithm: String?

                public var certId: Int64?

                public var certIdentifier: String?

                public var certName: String?

                public var common: String?

                public var createTime: Int64?

                public var domainMatchCert: Bool?

                public var endTime: Int64?

                public var fingerprint: String?

                public var instanceId: String?

                public var issuer: String?

                public var lastTime: Int64?

                public var signAlgorithm: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.algorithm != nil {
                        map["Algorithm"] = self.algorithm!
                    }
                    if self.certId != nil {
                        map["CertId"] = self.certId!
                    }
                    if self.certIdentifier != nil {
                        map["CertIdentifier"] = self.certIdentifier!
                    }
                    if self.certName != nil {
                        map["CertName"] = self.certName!
                    }
                    if self.common != nil {
                        map["Common"] = self.common!
                    }
                    if self.createTime != nil {
                        map["CreateTime"] = self.createTime!
                    }
                    if self.domainMatchCert != nil {
                        map["DomainMatchCert"] = self.domainMatchCert!
                    }
                    if self.endTime != nil {
                        map["EndTime"] = self.endTime!
                    }
                    if self.fingerprint != nil {
                        map["Fingerprint"] = self.fingerprint!
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.issuer != nil {
                        map["Issuer"] = self.issuer!
                    }
                    if self.lastTime != nil {
                        map["LastTime"] = self.lastTime!
                    }
                    if self.signAlgorithm != nil {
                        map["SignAlgorithm"] = self.signAlgorithm!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Algorithm"] as? String {
                        self.algorithm = value
                    }
                    if let value = dict["CertId"] as? Int64 {
                        self.certId = value
                    }
                    if let value = dict["CertIdentifier"] as? String {
                        self.certIdentifier = value
                    }
                    if let value = dict["CertName"] as? String {
                        self.certName = value
                    }
                    if let value = dict["Common"] as? String {
                        self.common = value
                    }
                    if let value = dict["CreateTime"] as? Int64 {
                        self.createTime = value
                    }
                    if let value = dict["DomainMatchCert"] as? Bool {
                        self.domainMatchCert = value
                    }
                    if let value = dict["EndTime"] as? Int64 {
                        self.endTime = value
                    }
                    if let value = dict["Fingerprint"] as? String {
                        self.fingerprint = value
                    }
                    if let value = dict["InstanceId"] as? String {
                        self.instanceId = value
                    }
                    if let value = dict["Issuer"] as? String {
                        self.issuer = value
                    }
                    if let value = dict["LastTime"] as? Int64 {
                        self.lastTime = value
                    }
                    if let value = dict["SignAlgorithm"] as? String {
                        self.signAlgorithm = value
                    }
                }
            }
            public var cert: [DescribeVodCertificateListResponseBody.CertificateListModel.CertList.Cert]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cert != nil {
                    var tmp : [Any] = []
                    for k in self.cert! {
                        tmp.append(k.toMap())
                    }
                    map["Cert"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Cert"] as? [Any?] {
                    var tmp : [DescribeVodCertificateListResponseBody.CertificateListModel.CertList.Cert] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeVodCertificateListResponseBody.CertificateListModel.CertList.Cert()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.cert = tmp
                }
            }
        }
        public var certList: DescribeVodCertificateListResponseBody.CertificateListModel.CertList?

        public var count: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.certList?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.certList != nil {
                map["CertList"] = self.certList?.toMap()
            }
            if self.count != nil {
                map["Count"] = self.count!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CertList"] as? [String: Any?] {
                var model = DescribeVodCertificateListResponseBody.CertificateListModel.CertList()
                model.fromMap(value)
                self.certList = model
            }
            if let value = dict["Count"] as? Int32 {
                self.count = value
            }
        }
    }
    public var certificateListModel: DescribeVodCertificateListResponseBody.CertificateListModel?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.certificateListModel?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certificateListModel != nil {
            map["CertificateListModel"] = self.certificateListModel?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CertificateListModel"] as? [String: Any?] {
            var model = DescribeVodCertificateListResponseBody.CertificateListModel()
            model.fromMap(value)
            self.certificateListModel = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeVodCertificateListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodCertificateListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodCertificateListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodDomainBpsDataRequest : Tea.TeaModel {
    public var domainName: String?

    public var endTime: String?

    public var interval: String?

    public var ispNameEn: String?

    public var locationNameEn: String?

    public var ownerId: Int64?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.ispNameEn != nil {
            map["IspNameEn"] = self.ispNameEn!
        }
        if self.locationNameEn != nil {
            map["LocationNameEn"] = self.locationNameEn!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Interval"] as? String {
            self.interval = value
        }
        if let value = dict["IspNameEn"] as? String {
            self.ispNameEn = value
        }
        if let value = dict["LocationNameEn"] as? String {
            self.locationNameEn = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeVodDomainBpsDataResponseBody : Tea.TeaModel {
    public class BpsDataPerInterval : Tea.TeaModel {
        public class DataModule : Tea.TeaModel {
            public var domesticValue: String?

            public var httpsDomesticValue: String?

            public var httpsOverseasValue: String?

            public var httpsValue: String?

            public var overseasValue: String?

            public var timeStamp: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.domesticValue != nil {
                    map["DomesticValue"] = self.domesticValue!
                }
                if self.httpsDomesticValue != nil {
                    map["HttpsDomesticValue"] = self.httpsDomesticValue!
                }
                if self.httpsOverseasValue != nil {
                    map["HttpsOverseasValue"] = self.httpsOverseasValue!
                }
                if self.httpsValue != nil {
                    map["HttpsValue"] = self.httpsValue!
                }
                if self.overseasValue != nil {
                    map["OverseasValue"] = self.overseasValue!
                }
                if self.timeStamp != nil {
                    map["TimeStamp"] = self.timeStamp!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DomesticValue"] as? String {
                    self.domesticValue = value
                }
                if let value = dict["HttpsDomesticValue"] as? String {
                    self.httpsDomesticValue = value
                }
                if let value = dict["HttpsOverseasValue"] as? String {
                    self.httpsOverseasValue = value
                }
                if let value = dict["HttpsValue"] as? String {
                    self.httpsValue = value
                }
                if let value = dict["OverseasValue"] as? String {
                    self.overseasValue = value
                }
                if let value = dict["TimeStamp"] as? String {
                    self.timeStamp = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var dataModule: [DescribeVodDomainBpsDataResponseBody.BpsDataPerInterval.DataModule]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dataModule != nil {
                var tmp : [Any] = []
                for k in self.dataModule! {
                    tmp.append(k.toMap())
                }
                map["DataModule"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DataModule"] as? [Any?] {
                var tmp : [DescribeVodDomainBpsDataResponseBody.BpsDataPerInterval.DataModule] = []
                for v in value {
                    if v != nil {
                        var model = DescribeVodDomainBpsDataResponseBody.BpsDataPerInterval.DataModule()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.dataModule = tmp
            }
        }
    }
    public var bpsDataPerInterval: DescribeVodDomainBpsDataResponseBody.BpsDataPerInterval?

    public var dataInterval: String?

    public var domainName: String?

    public var endTime: String?

    public var ispNameEn: String?

    public var locationNameEn: String?

    public var requestId: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.bpsDataPerInterval?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bpsDataPerInterval != nil {
            map["BpsDataPerInterval"] = self.bpsDataPerInterval?.toMap()
        }
        if self.dataInterval != nil {
            map["DataInterval"] = self.dataInterval!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.ispNameEn != nil {
            map["IspNameEn"] = self.ispNameEn!
        }
        if self.locationNameEn != nil {
            map["LocationNameEn"] = self.locationNameEn!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BpsDataPerInterval"] as? [String: Any?] {
            var model = DescribeVodDomainBpsDataResponseBody.BpsDataPerInterval()
            model.fromMap(value)
            self.bpsDataPerInterval = model
        }
        if let value = dict["DataInterval"] as? String {
            self.dataInterval = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["IspNameEn"] as? String {
            self.ispNameEn = value
        }
        if let value = dict["LocationNameEn"] as? String {
            self.locationNameEn = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeVodDomainBpsDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodDomainBpsDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodDomainBpsDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodDomainBpsDataByLayerRequest : Tea.TeaModel {
    public var domainName: String?

    public var endTime: String?

    public var interval: String?

    public var ispNameEn: String?

    public var layer: String?

    public var locationNameEn: String?

    public var ownerId: Int64?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.ispNameEn != nil {
            map["IspNameEn"] = self.ispNameEn!
        }
        if self.layer != nil {
            map["Layer"] = self.layer!
        }
        if self.locationNameEn != nil {
            map["LocationNameEn"] = self.locationNameEn!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Interval"] as? String {
            self.interval = value
        }
        if let value = dict["IspNameEn"] as? String {
            self.ispNameEn = value
        }
        if let value = dict["Layer"] as? String {
            self.layer = value
        }
        if let value = dict["LocationNameEn"] as? String {
            self.locationNameEn = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeVodDomainBpsDataByLayerResponseBody : Tea.TeaModel {
    public class BpsDataInterval : Tea.TeaModel {
        public class DataModule : Tea.TeaModel {
            public var timeStamp: String?

            public var trafficValue: Int64?

            public var value: Double?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.timeStamp != nil {
                    map["TimeStamp"] = self.timeStamp!
                }
                if self.trafficValue != nil {
                    map["TrafficValue"] = self.trafficValue!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["TimeStamp"] as? String {
                    self.timeStamp = value
                }
                if let value = dict["TrafficValue"] as? Int64 {
                    self.trafficValue = value
                }
                if let value = dict["Value"] as? Double {
                    self.value = value
                }
            }
        }
        public var dataModule: [DescribeVodDomainBpsDataByLayerResponseBody.BpsDataInterval.DataModule]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dataModule != nil {
                var tmp : [Any] = []
                for k in self.dataModule! {
                    tmp.append(k.toMap())
                }
                map["DataModule"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DataModule"] as? [Any?] {
                var tmp : [DescribeVodDomainBpsDataByLayerResponseBody.BpsDataInterval.DataModule] = []
                for v in value {
                    if v != nil {
                        var model = DescribeVodDomainBpsDataByLayerResponseBody.BpsDataInterval.DataModule()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.dataModule = tmp
            }
        }
    }
    public var bpsDataInterval: DescribeVodDomainBpsDataByLayerResponseBody.BpsDataInterval?

    public var dataInterval: Int32?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.bpsDataInterval?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bpsDataInterval != nil {
            map["BpsDataInterval"] = self.bpsDataInterval?.toMap()
        }
        if self.dataInterval != nil {
            map["DataInterval"] = self.dataInterval!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BpsDataInterval"] as? [String: Any?] {
            var model = DescribeVodDomainBpsDataByLayerResponseBody.BpsDataInterval()
            model.fromMap(value)
            self.bpsDataInterval = model
        }
        if let value = dict["DataInterval"] as? Int32 {
            self.dataInterval = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeVodDomainBpsDataByLayerResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodDomainBpsDataByLayerResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodDomainBpsDataByLayerResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodDomainCertificateInfoRequest : Tea.TeaModel {
    public var domainName: String?

    public var ownerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
    }
}

public class DescribeVodDomainCertificateInfoResponseBody : Tea.TeaModel {
    public class CertInfos : Tea.TeaModel {
        public class CertInfo : Tea.TeaModel {
            public var certDomainName: String?

            public var certExpireTime: String?

            public var certId: String?

            public var certLife: String?

            public var certName: String?

            public var certOrg: String?

            public var certRegion: String?

            public var certStartTime: String?

            public var certType: String?

            public var certUpdateTime: String?

            public var domainCnameStatus: String?

            public var domainName: String?

            public var serverCertificate: String?

            public var serverCertificateStatus: String?

            public var status: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.certDomainName != nil {
                    map["CertDomainName"] = self.certDomainName!
                }
                if self.certExpireTime != nil {
                    map["CertExpireTime"] = self.certExpireTime!
                }
                if self.certId != nil {
                    map["CertId"] = self.certId!
                }
                if self.certLife != nil {
                    map["CertLife"] = self.certLife!
                }
                if self.certName != nil {
                    map["CertName"] = self.certName!
                }
                if self.certOrg != nil {
                    map["CertOrg"] = self.certOrg!
                }
                if self.certRegion != nil {
                    map["CertRegion"] = self.certRegion!
                }
                if self.certStartTime != nil {
                    map["CertStartTime"] = self.certStartTime!
                }
                if self.certType != nil {
                    map["CertType"] = self.certType!
                }
                if self.certUpdateTime != nil {
                    map["CertUpdateTime"] = self.certUpdateTime!
                }
                if self.domainCnameStatus != nil {
                    map["DomainCnameStatus"] = self.domainCnameStatus!
                }
                if self.domainName != nil {
                    map["DomainName"] = self.domainName!
                }
                if self.serverCertificate != nil {
                    map["ServerCertificate"] = self.serverCertificate!
                }
                if self.serverCertificateStatus != nil {
                    map["ServerCertificateStatus"] = self.serverCertificateStatus!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CertDomainName"] as? String {
                    self.certDomainName = value
                }
                if let value = dict["CertExpireTime"] as? String {
                    self.certExpireTime = value
                }
                if let value = dict["CertId"] as? String {
                    self.certId = value
                }
                if let value = dict["CertLife"] as? String {
                    self.certLife = value
                }
                if let value = dict["CertName"] as? String {
                    self.certName = value
                }
                if let value = dict["CertOrg"] as? String {
                    self.certOrg = value
                }
                if let value = dict["CertRegion"] as? String {
                    self.certRegion = value
                }
                if let value = dict["CertStartTime"] as? String {
                    self.certStartTime = value
                }
                if let value = dict["CertType"] as? String {
                    self.certType = value
                }
                if let value = dict["CertUpdateTime"] as? String {
                    self.certUpdateTime = value
                }
                if let value = dict["DomainCnameStatus"] as? String {
                    self.domainCnameStatus = value
                }
                if let value = dict["DomainName"] as? String {
                    self.domainName = value
                }
                if let value = dict["ServerCertificate"] as? String {
                    self.serverCertificate = value
                }
                if let value = dict["ServerCertificateStatus"] as? String {
                    self.serverCertificateStatus = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
            }
        }
        public var certInfo: [DescribeVodDomainCertificateInfoResponseBody.CertInfos.CertInfo]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.certInfo != nil {
                var tmp : [Any] = []
                for k in self.certInfo! {
                    tmp.append(k.toMap())
                }
                map["CertInfo"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CertInfo"] as? [Any?] {
                var tmp : [DescribeVodDomainCertificateInfoResponseBody.CertInfos.CertInfo] = []
                for v in value {
                    if v != nil {
                        var model = DescribeVodDomainCertificateInfoResponseBody.CertInfos.CertInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.certInfo = tmp
            }
        }
    }
    public var certInfos: DescribeVodDomainCertificateInfoResponseBody.CertInfos?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.certInfos?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certInfos != nil {
            map["CertInfos"] = self.certInfos?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CertInfos"] as? [String: Any?] {
            var model = DescribeVodDomainCertificateInfoResponseBody.CertInfos()
            model.fromMap(value)
            self.certInfos = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeVodDomainCertificateInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodDomainCertificateInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodDomainCertificateInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodDomainConfigsRequest : Tea.TeaModel {
    public var domainName: String?

    public var functionNames: String?

    public var ownerId: Int64?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.functionNames != nil {
            map["FunctionNames"] = self.functionNames!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["FunctionNames"] as? String {
            self.functionNames = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeVodDomainConfigsResponseBody : Tea.TeaModel {
    public class DomainConfigs : Tea.TeaModel {
        public class DomainConfig : Tea.TeaModel {
            public class FunctionArgs : Tea.TeaModel {
                public class FunctionArg : Tea.TeaModel {
                    public var argName: String?

                    public var argValue: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.argName != nil {
                            map["ArgName"] = self.argName!
                        }
                        if self.argValue != nil {
                            map["ArgValue"] = self.argValue!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ArgName"] as? String {
                            self.argName = value
                        }
                        if let value = dict["ArgValue"] as? String {
                            self.argValue = value
                        }
                    }
                }
                public var functionArg: [DescribeVodDomainConfigsResponseBody.DomainConfigs.DomainConfig.FunctionArgs.FunctionArg]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.functionArg != nil {
                        var tmp : [Any] = []
                        for k in self.functionArg! {
                            tmp.append(k.toMap())
                        }
                        map["FunctionArg"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["FunctionArg"] as? [Any?] {
                        var tmp : [DescribeVodDomainConfigsResponseBody.DomainConfigs.DomainConfig.FunctionArgs.FunctionArg] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeVodDomainConfigsResponseBody.DomainConfigs.DomainConfig.FunctionArgs.FunctionArg()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.functionArg = tmp
                    }
                }
            }
            public var configId: String?

            public var functionArgs: DescribeVodDomainConfigsResponseBody.DomainConfigs.DomainConfig.FunctionArgs?

            public var functionName: String?

            public var status: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.functionArgs?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.configId != nil {
                    map["ConfigId"] = self.configId!
                }
                if self.functionArgs != nil {
                    map["FunctionArgs"] = self.functionArgs?.toMap()
                }
                if self.functionName != nil {
                    map["FunctionName"] = self.functionName!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConfigId"] as? String {
                    self.configId = value
                }
                if let value = dict["FunctionArgs"] as? [String: Any?] {
                    var model = DescribeVodDomainConfigsResponseBody.DomainConfigs.DomainConfig.FunctionArgs()
                    model.fromMap(value)
                    self.functionArgs = model
                }
                if let value = dict["FunctionName"] as? String {
                    self.functionName = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
            }
        }
        public var domainConfig: [DescribeVodDomainConfigsResponseBody.DomainConfigs.DomainConfig]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.domainConfig != nil {
                var tmp : [Any] = []
                for k in self.domainConfig! {
                    tmp.append(k.toMap())
                }
                map["DomainConfig"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DomainConfig"] as? [Any?] {
                var tmp : [DescribeVodDomainConfigsResponseBody.DomainConfigs.DomainConfig] = []
                for v in value {
                    if v != nil {
                        var model = DescribeVodDomainConfigsResponseBody.DomainConfigs.DomainConfig()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.domainConfig = tmp
            }
        }
    }
    public var domainConfigs: DescribeVodDomainConfigsResponseBody.DomainConfigs?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.domainConfigs?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainConfigs != nil {
            map["DomainConfigs"] = self.domainConfigs?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainConfigs"] as? [String: Any?] {
            var model = DescribeVodDomainConfigsResponseBody.DomainConfigs()
            model.fromMap(value)
            self.domainConfigs = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeVodDomainConfigsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodDomainConfigsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodDomainConfigsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodDomainDetailRequest : Tea.TeaModel {
    public var domainName: String?

    public var ownerId: Int64?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeVodDomainDetailResponseBody : Tea.TeaModel {
    public class DomainDetail : Tea.TeaModel {
        public class Sources : Tea.TeaModel {
            public class Source : Tea.TeaModel {
                public var content: String?

                public var enabled: String?

                public var port: Int32?

                public var priority: String?

                public var type: String?

                public var weight: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.content != nil {
                        map["Content"] = self.content!
                    }
                    if self.enabled != nil {
                        map["Enabled"] = self.enabled!
                    }
                    if self.port != nil {
                        map["Port"] = self.port!
                    }
                    if self.priority != nil {
                        map["Priority"] = self.priority!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    if self.weight != nil {
                        map["Weight"] = self.weight!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Content"] as? String {
                        self.content = value
                    }
                    if let value = dict["Enabled"] as? String {
                        self.enabled = value
                    }
                    if let value = dict["Port"] as? Int32 {
                        self.port = value
                    }
                    if let value = dict["Priority"] as? String {
                        self.priority = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                    if let value = dict["Weight"] as? String {
                        self.weight = value
                    }
                }
            }
            public var source: [DescribeVodDomainDetailResponseBody.DomainDetail.Sources.Source]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.source != nil {
                    var tmp : [Any] = []
                    for k in self.source! {
                        tmp.append(k.toMap())
                    }
                    map["Source"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Source"] as? [Any?] {
                    var tmp : [DescribeVodDomainDetailResponseBody.DomainDetail.Sources.Source] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeVodDomainDetailResponseBody.DomainDetail.Sources.Source()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.source = tmp
                }
            }
        }
        public var certName: String?

        public var cname: String?

        public var description_: String?

        public var domainName: String?

        public var domainStatus: String?

        public var gmtCreated: String?

        public var gmtModified: String?

        public var SSLProtocol: String?

        public var SSLPub: String?

        public var scope: String?

        public var sources: DescribeVodDomainDetailResponseBody.DomainDetail.Sources?

        public var weight: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.sources?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.certName != nil {
                map["CertName"] = self.certName!
            }
            if self.cname != nil {
                map["Cname"] = self.cname!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.domainName != nil {
                map["DomainName"] = self.domainName!
            }
            if self.domainStatus != nil {
                map["DomainStatus"] = self.domainStatus!
            }
            if self.gmtCreated != nil {
                map["GmtCreated"] = self.gmtCreated!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.SSLProtocol != nil {
                map["SSLProtocol"] = self.SSLProtocol!
            }
            if self.SSLPub != nil {
                map["SSLPub"] = self.SSLPub!
            }
            if self.scope != nil {
                map["Scope"] = self.scope!
            }
            if self.sources != nil {
                map["Sources"] = self.sources?.toMap()
            }
            if self.weight != nil {
                map["Weight"] = self.weight!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CertName"] as? String {
                self.certName = value
            }
            if let value = dict["Cname"] as? String {
                self.cname = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DomainName"] as? String {
                self.domainName = value
            }
            if let value = dict["DomainStatus"] as? String {
                self.domainStatus = value
            }
            if let value = dict["GmtCreated"] as? String {
                self.gmtCreated = value
            }
            if let value = dict["GmtModified"] as? String {
                self.gmtModified = value
            }
            if let value = dict["SSLProtocol"] as? String {
                self.SSLProtocol = value
            }
            if let value = dict["SSLPub"] as? String {
                self.SSLPub = value
            }
            if let value = dict["Scope"] as? String {
                self.scope = value
            }
            if let value = dict["Sources"] as? [String: Any?] {
                var model = DescribeVodDomainDetailResponseBody.DomainDetail.Sources()
                model.fromMap(value)
                self.sources = model
            }
            if let value = dict["Weight"] as? String {
                self.weight = value
            }
        }
    }
    public var domainDetail: DescribeVodDomainDetailResponseBody.DomainDetail?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.domainDetail?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainDetail != nil {
            map["DomainDetail"] = self.domainDetail?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainDetail"] as? [String: Any?] {
            var model = DescribeVodDomainDetailResponseBody.DomainDetail()
            model.fromMap(value)
            self.domainDetail = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeVodDomainDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodDomainDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodDomainDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodDomainHitRateDataRequest : Tea.TeaModel {
    public var domainName: String?

    public var endTime: String?

    public var interval: String?

    public var ownerId: Int64?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Interval"] as? String {
            self.interval = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeVodDomainHitRateDataResponseBody : Tea.TeaModel {
    public class HitRateInterval : Tea.TeaModel {
        public class DataModule : Tea.TeaModel {
            public var httpsValue: String?

            public var timeStamp: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.httpsValue != nil {
                    map["HttpsValue"] = self.httpsValue!
                }
                if self.timeStamp != nil {
                    map["TimeStamp"] = self.timeStamp!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["HttpsValue"] as? String {
                    self.httpsValue = value
                }
                if let value = dict["TimeStamp"] as? String {
                    self.timeStamp = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var dataModule: [DescribeVodDomainHitRateDataResponseBody.HitRateInterval.DataModule]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dataModule != nil {
                var tmp : [Any] = []
                for k in self.dataModule! {
                    tmp.append(k.toMap())
                }
                map["DataModule"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DataModule"] as? [Any?] {
                var tmp : [DescribeVodDomainHitRateDataResponseBody.HitRateInterval.DataModule] = []
                for v in value {
                    if v != nil {
                        var model = DescribeVodDomainHitRateDataResponseBody.HitRateInterval.DataModule()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.dataModule = tmp
            }
        }
    }
    public var dataInterval: String?

    public var domainName: String?

    public var endTime: String?

    public var hitRateInterval: DescribeVodDomainHitRateDataResponseBody.HitRateInterval?

    public var requestId: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.hitRateInterval?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dataInterval != nil {
            map["DataInterval"] = self.dataInterval!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.hitRateInterval != nil {
            map["HitRateInterval"] = self.hitRateInterval?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DataInterval"] as? String {
            self.dataInterval = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["HitRateInterval"] as? [String: Any?] {
            var model = DescribeVodDomainHitRateDataResponseBody.HitRateInterval()
            model.fromMap(value)
            self.hitRateInterval = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeVodDomainHitRateDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodDomainHitRateDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodDomainHitRateDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodDomainLogRequest : Tea.TeaModel {
    public var domainName: String?

    public var endTime: String?

    public var ownerId: Int64?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeVodDomainLogResponseBody : Tea.TeaModel {
    public class DomainLogDetails : Tea.TeaModel {
        public class DomainLogDetail : Tea.TeaModel {
            public class LogInfos : Tea.TeaModel {
                public class LogInfoDetail : Tea.TeaModel {
                    public var endTime: String?

                    public var logName: String?

                    public var logPath: String?

                    public var logSize: Int64?

                    public var startTime: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.endTime != nil {
                            map["EndTime"] = self.endTime!
                        }
                        if self.logName != nil {
                            map["LogName"] = self.logName!
                        }
                        if self.logPath != nil {
                            map["LogPath"] = self.logPath!
                        }
                        if self.logSize != nil {
                            map["LogSize"] = self.logSize!
                        }
                        if self.startTime != nil {
                            map["StartTime"] = self.startTime!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["EndTime"] as? String {
                            self.endTime = value
                        }
                        if let value = dict["LogName"] as? String {
                            self.logName = value
                        }
                        if let value = dict["LogPath"] as? String {
                            self.logPath = value
                        }
                        if let value = dict["LogSize"] as? Int64 {
                            self.logSize = value
                        }
                        if let value = dict["StartTime"] as? String {
                            self.startTime = value
                        }
                    }
                }
                public var logInfoDetail: [DescribeVodDomainLogResponseBody.DomainLogDetails.DomainLogDetail.LogInfos.LogInfoDetail]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.logInfoDetail != nil {
                        var tmp : [Any] = []
                        for k in self.logInfoDetail! {
                            tmp.append(k.toMap())
                        }
                        map["LogInfoDetail"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["LogInfoDetail"] as? [Any?] {
                        var tmp : [DescribeVodDomainLogResponseBody.DomainLogDetails.DomainLogDetail.LogInfos.LogInfoDetail] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeVodDomainLogResponseBody.DomainLogDetails.DomainLogDetail.LogInfos.LogInfoDetail()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.logInfoDetail = tmp
                    }
                }
            }
            public class PageInfos : Tea.TeaModel {
                public var pageNumber: Int64?

                public var pageSize: Int64?

                public var total: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.pageNumber != nil {
                        map["PageNumber"] = self.pageNumber!
                    }
                    if self.pageSize != nil {
                        map["PageSize"] = self.pageSize!
                    }
                    if self.total != nil {
                        map["Total"] = self.total!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["PageNumber"] as? Int64 {
                        self.pageNumber = value
                    }
                    if let value = dict["PageSize"] as? Int64 {
                        self.pageSize = value
                    }
                    if let value = dict["Total"] as? Int64 {
                        self.total = value
                    }
                }
            }
            public var domainName: String?

            public var logCount: Int64?

            public var logInfos: DescribeVodDomainLogResponseBody.DomainLogDetails.DomainLogDetail.LogInfos?

            public var pageInfos: DescribeVodDomainLogResponseBody.DomainLogDetails.DomainLogDetail.PageInfos?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.logInfos?.validate()
                try self.pageInfos?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.domainName != nil {
                    map["DomainName"] = self.domainName!
                }
                if self.logCount != nil {
                    map["LogCount"] = self.logCount!
                }
                if self.logInfos != nil {
                    map["LogInfos"] = self.logInfos?.toMap()
                }
                if self.pageInfos != nil {
                    map["PageInfos"] = self.pageInfos?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DomainName"] as? String {
                    self.domainName = value
                }
                if let value = dict["LogCount"] as? Int64 {
                    self.logCount = value
                }
                if let value = dict["LogInfos"] as? [String: Any?] {
                    var model = DescribeVodDomainLogResponseBody.DomainLogDetails.DomainLogDetail.LogInfos()
                    model.fromMap(value)
                    self.logInfos = model
                }
                if let value = dict["PageInfos"] as? [String: Any?] {
                    var model = DescribeVodDomainLogResponseBody.DomainLogDetails.DomainLogDetail.PageInfos()
                    model.fromMap(value)
                    self.pageInfos = model
                }
            }
        }
        public var domainLogDetail: [DescribeVodDomainLogResponseBody.DomainLogDetails.DomainLogDetail]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.domainLogDetail != nil {
                var tmp : [Any] = []
                for k in self.domainLogDetail! {
                    tmp.append(k.toMap())
                }
                map["DomainLogDetail"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DomainLogDetail"] as? [Any?] {
                var tmp : [DescribeVodDomainLogResponseBody.DomainLogDetails.DomainLogDetail] = []
                for v in value {
                    if v != nil {
                        var model = DescribeVodDomainLogResponseBody.DomainLogDetails.DomainLogDetail()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.domainLogDetail = tmp
            }
        }
    }
    public var domainLogDetails: DescribeVodDomainLogResponseBody.DomainLogDetails?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.domainLogDetails?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainLogDetails != nil {
            map["DomainLogDetails"] = self.domainLogDetails?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainLogDetails"] as? [String: Any?] {
            var model = DescribeVodDomainLogResponseBody.DomainLogDetails()
            model.fromMap(value)
            self.domainLogDetails = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeVodDomainLogResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodDomainLogResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodDomainLogResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodDomainMax95BpsDataRequest : Tea.TeaModel {
    public var cycle: String?

    public var domainName: String?

    public var endTime: String?

    public var ownerId: Int64?

    public var startTime: String?

    public var timePoint: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cycle != nil {
            map["Cycle"] = self.cycle!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.timePoint != nil {
            map["TimePoint"] = self.timePoint!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Cycle"] as? String {
            self.cycle = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["TimePoint"] as? String {
            self.timePoint = value
        }
    }
}

public class DescribeVodDomainMax95BpsDataResponseBody : Tea.TeaModel {
    public class DetailData : Tea.TeaModel {
        public class Max95Detail : Tea.TeaModel {
            public var area: String?

            public var max95Bps: Double?

            public var max95BpsPeakTime: String?

            public var timeStamp: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.area != nil {
                    map["Area"] = self.area!
                }
                if self.max95Bps != nil {
                    map["Max95Bps"] = self.max95Bps!
                }
                if self.max95BpsPeakTime != nil {
                    map["Max95BpsPeakTime"] = self.max95BpsPeakTime!
                }
                if self.timeStamp != nil {
                    map["TimeStamp"] = self.timeStamp!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Area"] as? String {
                    self.area = value
                }
                if let value = dict["Max95Bps"] as? Double {
                    self.max95Bps = value
                }
                if let value = dict["Max95BpsPeakTime"] as? String {
                    self.max95BpsPeakTime = value
                }
                if let value = dict["TimeStamp"] as? String {
                    self.timeStamp = value
                }
            }
        }
        public var max95Detail: [DescribeVodDomainMax95BpsDataResponseBody.DetailData.Max95Detail]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.max95Detail != nil {
                var tmp : [Any] = []
                for k in self.max95Detail! {
                    tmp.append(k.toMap())
                }
                map["Max95Detail"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Max95Detail"] as? [Any?] {
                var tmp : [DescribeVodDomainMax95BpsDataResponseBody.DetailData.Max95Detail] = []
                for v in value {
                    if v != nil {
                        var model = DescribeVodDomainMax95BpsDataResponseBody.DetailData.Max95Detail()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.max95Detail = tmp
            }
        }
    }
    public var detailData: DescribeVodDomainMax95BpsDataResponseBody.DetailData?

    public var domainName: String?

    public var domesticMax95Bps: String?

    public var endTime: String?

    public var max95Bps: String?

    public var overseasMax95Bps: String?

    public var requestId: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.detailData?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.detailData != nil {
            map["DetailData"] = self.detailData?.toMap()
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.domesticMax95Bps != nil {
            map["DomesticMax95Bps"] = self.domesticMax95Bps!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.max95Bps != nil {
            map["Max95Bps"] = self.max95Bps!
        }
        if self.overseasMax95Bps != nil {
            map["OverseasMax95Bps"] = self.overseasMax95Bps!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DetailData"] as? [String: Any?] {
            var model = DescribeVodDomainMax95BpsDataResponseBody.DetailData()
            model.fromMap(value)
            self.detailData = model
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["DomesticMax95Bps"] as? String {
            self.domesticMax95Bps = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Max95Bps"] as? String {
            self.max95Bps = value
        }
        if let value = dict["OverseasMax95Bps"] as? String {
            self.overseasMax95Bps = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeVodDomainMax95BpsDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodDomainMax95BpsDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodDomainMax95BpsDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodDomainQpsDataRequest : Tea.TeaModel {
    public var domainName: String?

    public var endTime: String?

    public var interval: String?

    public var ispNameEn: String?

    public var locationNameEn: String?

    public var ownerId: Int64?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.ispNameEn != nil {
            map["IspNameEn"] = self.ispNameEn!
        }
        if self.locationNameEn != nil {
            map["LocationNameEn"] = self.locationNameEn!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Interval"] as? String {
            self.interval = value
        }
        if let value = dict["IspNameEn"] as? String {
            self.ispNameEn = value
        }
        if let value = dict["LocationNameEn"] as? String {
            self.locationNameEn = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeVodDomainQpsDataResponseBody : Tea.TeaModel {
    public class QpsDataInterval : Tea.TeaModel {
        public class DataModule : Tea.TeaModel {
            public var accDomesticValue: String?

            public var accOverseasValue: String?

            public var accValue: String?

            public var domesticValue: String?

            public var httpsAccDomesticValue: String?

            public var httpsAccOverseasValue: String?

            public var httpsAccValue: String?

            public var httpsDomesticValue: String?

            public var httpsOverseasValue: String?

            public var httpsValue: String?

            public var overseasValue: String?

            public var timeStamp: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.accDomesticValue != nil {
                    map["AccDomesticValue"] = self.accDomesticValue!
                }
                if self.accOverseasValue != nil {
                    map["AccOverseasValue"] = self.accOverseasValue!
                }
                if self.accValue != nil {
                    map["AccValue"] = self.accValue!
                }
                if self.domesticValue != nil {
                    map["DomesticValue"] = self.domesticValue!
                }
                if self.httpsAccDomesticValue != nil {
                    map["HttpsAccDomesticValue"] = self.httpsAccDomesticValue!
                }
                if self.httpsAccOverseasValue != nil {
                    map["HttpsAccOverseasValue"] = self.httpsAccOverseasValue!
                }
                if self.httpsAccValue != nil {
                    map["HttpsAccValue"] = self.httpsAccValue!
                }
                if self.httpsDomesticValue != nil {
                    map["HttpsDomesticValue"] = self.httpsDomesticValue!
                }
                if self.httpsOverseasValue != nil {
                    map["HttpsOverseasValue"] = self.httpsOverseasValue!
                }
                if self.httpsValue != nil {
                    map["HttpsValue"] = self.httpsValue!
                }
                if self.overseasValue != nil {
                    map["OverseasValue"] = self.overseasValue!
                }
                if self.timeStamp != nil {
                    map["TimeStamp"] = self.timeStamp!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AccDomesticValue"] as? String {
                    self.accDomesticValue = value
                }
                if let value = dict["AccOverseasValue"] as? String {
                    self.accOverseasValue = value
                }
                if let value = dict["AccValue"] as? String {
                    self.accValue = value
                }
                if let value = dict["DomesticValue"] as? String {
                    self.domesticValue = value
                }
                if let value = dict["HttpsAccDomesticValue"] as? String {
                    self.httpsAccDomesticValue = value
                }
                if let value = dict["HttpsAccOverseasValue"] as? String {
                    self.httpsAccOverseasValue = value
                }
                if let value = dict["HttpsAccValue"] as? String {
                    self.httpsAccValue = value
                }
                if let value = dict["HttpsDomesticValue"] as? String {
                    self.httpsDomesticValue = value
                }
                if let value = dict["HttpsOverseasValue"] as? String {
                    self.httpsOverseasValue = value
                }
                if let value = dict["HttpsValue"] as? String {
                    self.httpsValue = value
                }
                if let value = dict["OverseasValue"] as? String {
                    self.overseasValue = value
                }
                if let value = dict["TimeStamp"] as? String {
                    self.timeStamp = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var dataModule: [DescribeVodDomainQpsDataResponseBody.QpsDataInterval.DataModule]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dataModule != nil {
                var tmp : [Any] = []
                for k in self.dataModule! {
                    tmp.append(k.toMap())
                }
                map["DataModule"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DataModule"] as? [Any?] {
                var tmp : [DescribeVodDomainQpsDataResponseBody.QpsDataInterval.DataModule] = []
                for v in value {
                    if v != nil {
                        var model = DescribeVodDomainQpsDataResponseBody.QpsDataInterval.DataModule()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.dataModule = tmp
            }
        }
    }
    public var dataInterval: String?

    public var domainName: String?

    public var endTime: String?

    public var qpsDataInterval: DescribeVodDomainQpsDataResponseBody.QpsDataInterval?

    public var requestId: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.qpsDataInterval?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dataInterval != nil {
            map["DataInterval"] = self.dataInterval!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.qpsDataInterval != nil {
            map["QpsDataInterval"] = self.qpsDataInterval?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DataInterval"] as? String {
            self.dataInterval = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["QpsDataInterval"] as? [String: Any?] {
            var model = DescribeVodDomainQpsDataResponseBody.QpsDataInterval()
            model.fromMap(value)
            self.qpsDataInterval = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeVodDomainQpsDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodDomainQpsDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodDomainQpsDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodDomainRealTimeBpsDataRequest : Tea.TeaModel {
    public var domainName: String?

    public var endTime: String?

    public var ispNameEn: String?

    public var locationNameEn: String?

    public var ownerId: Int64?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.ispNameEn != nil {
            map["IspNameEn"] = self.ispNameEn!
        }
        if self.locationNameEn != nil {
            map["LocationNameEn"] = self.locationNameEn!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["IspNameEn"] as? String {
            self.ispNameEn = value
        }
        if let value = dict["LocationNameEn"] as? String {
            self.locationNameEn = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeVodDomainRealTimeBpsDataResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class BpsModel : Tea.TeaModel {
            public var bps: Double?

            public var timeStamp: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bps != nil {
                    map["Bps"] = self.bps!
                }
                if self.timeStamp != nil {
                    map["TimeStamp"] = self.timeStamp!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Bps"] as? Double {
                    self.bps = value
                }
                if let value = dict["TimeStamp"] as? String {
                    self.timeStamp = value
                }
            }
        }
        public var bpsModel: [DescribeVodDomainRealTimeBpsDataResponseBody.Data.BpsModel]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bpsModel != nil {
                var tmp : [Any] = []
                for k in self.bpsModel! {
                    tmp.append(k.toMap())
                }
                map["BpsModel"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BpsModel"] as? [Any?] {
                var tmp : [DescribeVodDomainRealTimeBpsDataResponseBody.Data.BpsModel] = []
                for v in value {
                    if v != nil {
                        var model = DescribeVodDomainRealTimeBpsDataResponseBody.Data.BpsModel()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.bpsModel = tmp
            }
        }
    }
    public var data: DescribeVodDomainRealTimeBpsDataResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeVodDomainRealTimeBpsDataResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeVodDomainRealTimeBpsDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodDomainRealTimeBpsDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodDomainRealTimeBpsDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodDomainRealTimeByteHitRateDataRequest : Tea.TeaModel {
    public var domainName: String?

    public var endTime: String?

    public var ownerId: Int64?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeVodDomainRealTimeByteHitRateDataResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ByteHitRateDataModel : Tea.TeaModel {
            public var byteHitRate: Double?

            public var timeStamp: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.byteHitRate != nil {
                    map["ByteHitRate"] = self.byteHitRate!
                }
                if self.timeStamp != nil {
                    map["TimeStamp"] = self.timeStamp!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ByteHitRate"] as? Double {
                    self.byteHitRate = value
                }
                if let value = dict["TimeStamp"] as? String {
                    self.timeStamp = value
                }
            }
        }
        public var byteHitRateDataModel: [DescribeVodDomainRealTimeByteHitRateDataResponseBody.Data.ByteHitRateDataModel]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.byteHitRateDataModel != nil {
                var tmp : [Any] = []
                for k in self.byteHitRateDataModel! {
                    tmp.append(k.toMap())
                }
                map["ByteHitRateDataModel"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ByteHitRateDataModel"] as? [Any?] {
                var tmp : [DescribeVodDomainRealTimeByteHitRateDataResponseBody.Data.ByteHitRateDataModel] = []
                for v in value {
                    if v != nil {
                        var model = DescribeVodDomainRealTimeByteHitRateDataResponseBody.Data.ByteHitRateDataModel()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.byteHitRateDataModel = tmp
            }
        }
    }
    public var data: DescribeVodDomainRealTimeByteHitRateDataResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeVodDomainRealTimeByteHitRateDataResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeVodDomainRealTimeByteHitRateDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodDomainRealTimeByteHitRateDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodDomainRealTimeByteHitRateDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodDomainRealTimeDetailDataRequest : Tea.TeaModel {
    public var domainName: String?

    public var endTime: String?

    public var field: String?

    public var ispNameEn: String?

    public var locationNameEn: String?

    public var merge: String?

    public var mergeLocIsp: String?

    public var ownerId: Int64?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.field != nil {
            map["Field"] = self.field!
        }
        if self.ispNameEn != nil {
            map["IspNameEn"] = self.ispNameEn!
        }
        if self.locationNameEn != nil {
            map["LocationNameEn"] = self.locationNameEn!
        }
        if self.merge != nil {
            map["Merge"] = self.merge!
        }
        if self.mergeLocIsp != nil {
            map["MergeLocIsp"] = self.mergeLocIsp!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Field"] as? String {
            self.field = value
        }
        if let value = dict["IspNameEn"] as? String {
            self.ispNameEn = value
        }
        if let value = dict["LocationNameEn"] as? String {
            self.locationNameEn = value
        }
        if let value = dict["Merge"] as? String {
            self.merge = value
        }
        if let value = dict["MergeLocIsp"] as? String {
            self.mergeLocIsp = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeVodDomainRealTimeDetailDataResponseBody : Tea.TeaModel {
    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeVodDomainRealTimeDetailDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodDomainRealTimeDetailDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodDomainRealTimeDetailDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodDomainRealTimeHttpCodeDataRequest : Tea.TeaModel {
    public var domainName: String?

    public var endTime: String?

    public var ispNameEn: String?

    public var locationNameEn: String?

    public var ownerId: Int64?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.ispNameEn != nil {
            map["IspNameEn"] = self.ispNameEn!
        }
        if self.locationNameEn != nil {
            map["LocationNameEn"] = self.locationNameEn!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["IspNameEn"] as? String {
            self.ispNameEn = value
        }
        if let value = dict["LocationNameEn"] as? String {
            self.locationNameEn = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeVodDomainRealTimeHttpCodeDataResponseBody : Tea.TeaModel {
    public class RealTimeHttpCodeData : Tea.TeaModel {
        public class UsageData : Tea.TeaModel {
            public class Value : Tea.TeaModel {
                public class RealTimeCodeProportionData : Tea.TeaModel {
                    public var code: String?

                    public var count: String?

                    public var proportion: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.code != nil {
                            map["Code"] = self.code!
                        }
                        if self.count != nil {
                            map["Count"] = self.count!
                        }
                        if self.proportion != nil {
                            map["Proportion"] = self.proportion!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Code"] as? String {
                            self.code = value
                        }
                        if let value = dict["Count"] as? String {
                            self.count = value
                        }
                        if let value = dict["Proportion"] as? String {
                            self.proportion = value
                        }
                    }
                }
                public var realTimeCodeProportionData: [DescribeVodDomainRealTimeHttpCodeDataResponseBody.RealTimeHttpCodeData.UsageData.Value.RealTimeCodeProportionData]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.realTimeCodeProportionData != nil {
                        var tmp : [Any] = []
                        for k in self.realTimeCodeProportionData! {
                            tmp.append(k.toMap())
                        }
                        map["RealTimeCodeProportionData"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["RealTimeCodeProportionData"] as? [Any?] {
                        var tmp : [DescribeVodDomainRealTimeHttpCodeDataResponseBody.RealTimeHttpCodeData.UsageData.Value.RealTimeCodeProportionData] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeVodDomainRealTimeHttpCodeDataResponseBody.RealTimeHttpCodeData.UsageData.Value.RealTimeCodeProportionData()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.realTimeCodeProportionData = tmp
                    }
                }
            }
            public var timeStamp: String?

            public var value: DescribeVodDomainRealTimeHttpCodeDataResponseBody.RealTimeHttpCodeData.UsageData.Value?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.value?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.timeStamp != nil {
                    map["TimeStamp"] = self.timeStamp!
                }
                if self.value != nil {
                    map["Value"] = self.value?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["TimeStamp"] as? String {
                    self.timeStamp = value
                }
                if let value = dict["Value"] as? [String: Any?] {
                    var model = DescribeVodDomainRealTimeHttpCodeDataResponseBody.RealTimeHttpCodeData.UsageData.Value()
                    model.fromMap(value)
                    self.value = model
                }
            }
        }
        public var usageData: [DescribeVodDomainRealTimeHttpCodeDataResponseBody.RealTimeHttpCodeData.UsageData]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.usageData != nil {
                var tmp : [Any] = []
                for k in self.usageData! {
                    tmp.append(k.toMap())
                }
                map["UsageData"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["UsageData"] as? [Any?] {
                var tmp : [DescribeVodDomainRealTimeHttpCodeDataResponseBody.RealTimeHttpCodeData.UsageData] = []
                for v in value {
                    if v != nil {
                        var model = DescribeVodDomainRealTimeHttpCodeDataResponseBody.RealTimeHttpCodeData.UsageData()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.usageData = tmp
            }
        }
    }
    public var dataInterval: String?

    public var domainName: String?

    public var endTime: String?

    public var realTimeHttpCodeData: DescribeVodDomainRealTimeHttpCodeDataResponseBody.RealTimeHttpCodeData?

    public var requestId: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.realTimeHttpCodeData?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dataInterval != nil {
            map["DataInterval"] = self.dataInterval!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.realTimeHttpCodeData != nil {
            map["RealTimeHttpCodeData"] = self.realTimeHttpCodeData?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DataInterval"] as? String {
            self.dataInterval = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["RealTimeHttpCodeData"] as? [String: Any?] {
            var model = DescribeVodDomainRealTimeHttpCodeDataResponseBody.RealTimeHttpCodeData()
            model.fromMap(value)
            self.realTimeHttpCodeData = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeVodDomainRealTimeHttpCodeDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodDomainRealTimeHttpCodeDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodDomainRealTimeHttpCodeDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodDomainRealTimeQpsDataRequest : Tea.TeaModel {
    public var domainName: String?

    public var endTime: String?

    public var ispNameEn: String?

    public var locationNameEn: String?

    public var ownerId: Int64?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.ispNameEn != nil {
            map["IspNameEn"] = self.ispNameEn!
        }
        if self.locationNameEn != nil {
            map["LocationNameEn"] = self.locationNameEn!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["IspNameEn"] as? String {
            self.ispNameEn = value
        }
        if let value = dict["LocationNameEn"] as? String {
            self.locationNameEn = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeVodDomainRealTimeQpsDataResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class QpsModel : Tea.TeaModel {
            public var qps: Double?

            public var timeStamp: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.qps != nil {
                    map["Qps"] = self.qps!
                }
                if self.timeStamp != nil {
                    map["TimeStamp"] = self.timeStamp!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Qps"] as? Double {
                    self.qps = value
                }
                if let value = dict["TimeStamp"] as? String {
                    self.timeStamp = value
                }
            }
        }
        public var qpsModel: [DescribeVodDomainRealTimeQpsDataResponseBody.Data.QpsModel]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.qpsModel != nil {
                var tmp : [Any] = []
                for k in self.qpsModel! {
                    tmp.append(k.toMap())
                }
                map["QpsModel"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["QpsModel"] as? [Any?] {
                var tmp : [DescribeVodDomainRealTimeQpsDataResponseBody.Data.QpsModel] = []
                for v in value {
                    if v != nil {
                        var model = DescribeVodDomainRealTimeQpsDataResponseBody.Data.QpsModel()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.qpsModel = tmp
            }
        }
    }
    public var data: DescribeVodDomainRealTimeQpsDataResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeVodDomainRealTimeQpsDataResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeVodDomainRealTimeQpsDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodDomainRealTimeQpsDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodDomainRealTimeQpsDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodDomainRealTimeReqHitRateDataRequest : Tea.TeaModel {
    public var domainName: String?

    public var endTime: String?

    public var ownerId: Int64?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeVodDomainRealTimeReqHitRateDataResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ReqHitRateDataModel : Tea.TeaModel {
            public var reqHitRate: Double?

            public var timeStamp: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.reqHitRate != nil {
                    map["ReqHitRate"] = self.reqHitRate!
                }
                if self.timeStamp != nil {
                    map["TimeStamp"] = self.timeStamp!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ReqHitRate"] as? Double {
                    self.reqHitRate = value
                }
                if let value = dict["TimeStamp"] as? String {
                    self.timeStamp = value
                }
            }
        }
        public var reqHitRateDataModel: [DescribeVodDomainRealTimeReqHitRateDataResponseBody.Data.ReqHitRateDataModel]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.reqHitRateDataModel != nil {
                var tmp : [Any] = []
                for k in self.reqHitRateDataModel! {
                    tmp.append(k.toMap())
                }
                map["ReqHitRateDataModel"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ReqHitRateDataModel"] as? [Any?] {
                var tmp : [DescribeVodDomainRealTimeReqHitRateDataResponseBody.Data.ReqHitRateDataModel] = []
                for v in value {
                    if v != nil {
                        var model = DescribeVodDomainRealTimeReqHitRateDataResponseBody.Data.ReqHitRateDataModel()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.reqHitRateDataModel = tmp
            }
        }
    }
    public var data: DescribeVodDomainRealTimeReqHitRateDataResponseBody.Data?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeVodDomainRealTimeReqHitRateDataResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeVodDomainRealTimeReqHitRateDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodDomainRealTimeReqHitRateDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodDomainRealTimeReqHitRateDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodDomainRealTimeTrafficDataRequest : Tea.TeaModel {
    public var domainName: String?

    public var endTime: String?

    public var ispNameEn: String?

    public var locationNameEn: String?

    public var ownerId: Int64?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.ispNameEn != nil {
            map["IspNameEn"] = self.ispNameEn!
        }
        if self.locationNameEn != nil {
            map["LocationNameEn"] = self.locationNameEn!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["IspNameEn"] as? String {
            self.ispNameEn = value
        }
        if let value = dict["LocationNameEn"] as? String {
            self.locationNameEn = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeVodDomainRealTimeTrafficDataResponseBody : Tea.TeaModel {
    public class RealTimeTrafficDataPerInterval : Tea.TeaModel {
        public class DataModule : Tea.TeaModel {
            public var timeStamp: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.timeStamp != nil {
                    map["TimeStamp"] = self.timeStamp!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["TimeStamp"] as? String {
                    self.timeStamp = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var dataModule: [DescribeVodDomainRealTimeTrafficDataResponseBody.RealTimeTrafficDataPerInterval.DataModule]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dataModule != nil {
                var tmp : [Any] = []
                for k in self.dataModule! {
                    tmp.append(k.toMap())
                }
                map["DataModule"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DataModule"] as? [Any?] {
                var tmp : [DescribeVodDomainRealTimeTrafficDataResponseBody.RealTimeTrafficDataPerInterval.DataModule] = []
                for v in value {
                    if v != nil {
                        var model = DescribeVodDomainRealTimeTrafficDataResponseBody.RealTimeTrafficDataPerInterval.DataModule()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.dataModule = tmp
            }
        }
    }
    public var dataInterval: String?

    public var domainName: String?

    public var endTime: String?

    public var realTimeTrafficDataPerInterval: DescribeVodDomainRealTimeTrafficDataResponseBody.RealTimeTrafficDataPerInterval?

    public var requestId: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.realTimeTrafficDataPerInterval?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dataInterval != nil {
            map["DataInterval"] = self.dataInterval!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.realTimeTrafficDataPerInterval != nil {
            map["RealTimeTrafficDataPerInterval"] = self.realTimeTrafficDataPerInterval?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DataInterval"] as? String {
            self.dataInterval = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["RealTimeTrafficDataPerInterval"] as? [String: Any?] {
            var model = DescribeVodDomainRealTimeTrafficDataResponseBody.RealTimeTrafficDataPerInterval()
            model.fromMap(value)
            self.realTimeTrafficDataPerInterval = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeVodDomainRealTimeTrafficDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodDomainRealTimeTrafficDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodDomainRealTimeTrafficDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodDomainReqHitRateDataRequest : Tea.TeaModel {
    public var domainName: String?

    public var endTime: String?

    public var interval: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Interval"] as? String {
            self.interval = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeVodDomainReqHitRateDataResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class DataModule : Tea.TeaModel {
            public var httpsValue: String?

            public var timeStamp: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.httpsValue != nil {
                    map["HttpsValue"] = self.httpsValue!
                }
                if self.timeStamp != nil {
                    map["TimeStamp"] = self.timeStamp!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["HttpsValue"] as? String {
                    self.httpsValue = value
                }
                if let value = dict["TimeStamp"] as? String {
                    self.timeStamp = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var dataModule: [DescribeVodDomainReqHitRateDataResponseBody.Data.DataModule]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dataModule != nil {
                var tmp : [Any] = []
                for k in self.dataModule! {
                    tmp.append(k.toMap())
                }
                map["DataModule"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DataModule"] as? [Any?] {
                var tmp : [DescribeVodDomainReqHitRateDataResponseBody.Data.DataModule] = []
                for v in value {
                    if v != nil {
                        var model = DescribeVodDomainReqHitRateDataResponseBody.Data.DataModule()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.dataModule = tmp
            }
        }
    }
    public var data: DescribeVodDomainReqHitRateDataResponseBody.Data?

    public var dataInterval: String?

    public var domainName: String?

    public var endTime: String?

    public var requestId: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.dataInterval != nil {
            map["DataInterval"] = self.dataInterval!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DescribeVodDomainReqHitRateDataResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["DataInterval"] as? String {
            self.dataInterval = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeVodDomainReqHitRateDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodDomainReqHitRateDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodDomainReqHitRateDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodDomainSrcBpsDataRequest : Tea.TeaModel {
    public var domainName: String?

    public var endTime: String?

    public var interval: String?

    public var ownerId: Int64?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Interval"] as? String {
            self.interval = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeVodDomainSrcBpsDataResponseBody : Tea.TeaModel {
    public class SrcBpsDataPerInterval : Tea.TeaModel {
        public class DataModule : Tea.TeaModel {
            public var httpsValue: String?

            public var timeStamp: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.httpsValue != nil {
                    map["HttpsValue"] = self.httpsValue!
                }
                if self.timeStamp != nil {
                    map["TimeStamp"] = self.timeStamp!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["HttpsValue"] as? String {
                    self.httpsValue = value
                }
                if let value = dict["TimeStamp"] as? String {
                    self.timeStamp = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var dataModule: [DescribeVodDomainSrcBpsDataResponseBody.SrcBpsDataPerInterval.DataModule]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dataModule != nil {
                var tmp : [Any] = []
                for k in self.dataModule! {
                    tmp.append(k.toMap())
                }
                map["DataModule"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DataModule"] as? [Any?] {
                var tmp : [DescribeVodDomainSrcBpsDataResponseBody.SrcBpsDataPerInterval.DataModule] = []
                for v in value {
                    if v != nil {
                        var model = DescribeVodDomainSrcBpsDataResponseBody.SrcBpsDataPerInterval.DataModule()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.dataModule = tmp
            }
        }
    }
    public var dataInterval: String?

    public var domainName: String?

    public var endTime: String?

    public var requestId: String?

    public var srcBpsDataPerInterval: DescribeVodDomainSrcBpsDataResponseBody.SrcBpsDataPerInterval?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.srcBpsDataPerInterval?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dataInterval != nil {
            map["DataInterval"] = self.dataInterval!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.srcBpsDataPerInterval != nil {
            map["SrcBpsDataPerInterval"] = self.srcBpsDataPerInterval?.toMap()
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DataInterval"] as? String {
            self.dataInterval = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SrcBpsDataPerInterval"] as? [String: Any?] {
            var model = DescribeVodDomainSrcBpsDataResponseBody.SrcBpsDataPerInterval()
            model.fromMap(value)
            self.srcBpsDataPerInterval = model
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeVodDomainSrcBpsDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodDomainSrcBpsDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodDomainSrcBpsDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodDomainSrcTrafficDataRequest : Tea.TeaModel {
    public var domainName: String?

    public var endTime: String?

    public var interval: String?

    public var ownerId: Int64?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Interval"] as? String {
            self.interval = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeVodDomainSrcTrafficDataResponseBody : Tea.TeaModel {
    public class SrcTrafficDataPerInterval : Tea.TeaModel {
        public class DataModule : Tea.TeaModel {
            public var httpsValue: String?

            public var timeStamp: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.httpsValue != nil {
                    map["HttpsValue"] = self.httpsValue!
                }
                if self.timeStamp != nil {
                    map["TimeStamp"] = self.timeStamp!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["HttpsValue"] as? String {
                    self.httpsValue = value
                }
                if let value = dict["TimeStamp"] as? String {
                    self.timeStamp = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var dataModule: [DescribeVodDomainSrcTrafficDataResponseBody.SrcTrafficDataPerInterval.DataModule]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dataModule != nil {
                var tmp : [Any] = []
                for k in self.dataModule! {
                    tmp.append(k.toMap())
                }
                map["DataModule"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DataModule"] as? [Any?] {
                var tmp : [DescribeVodDomainSrcTrafficDataResponseBody.SrcTrafficDataPerInterval.DataModule] = []
                for v in value {
                    if v != nil {
                        var model = DescribeVodDomainSrcTrafficDataResponseBody.SrcTrafficDataPerInterval.DataModule()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.dataModule = tmp
            }
        }
    }
    public var dataInterval: String?

    public var domainName: String?

    public var endTime: String?

    public var requestId: String?

    public var srcTrafficDataPerInterval: DescribeVodDomainSrcTrafficDataResponseBody.SrcTrafficDataPerInterval?

    public var startTime: String?

    public var totalTraffic: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.srcTrafficDataPerInterval?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dataInterval != nil {
            map["DataInterval"] = self.dataInterval!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.srcTrafficDataPerInterval != nil {
            map["SrcTrafficDataPerInterval"] = self.srcTrafficDataPerInterval?.toMap()
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.totalTraffic != nil {
            map["TotalTraffic"] = self.totalTraffic!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DataInterval"] as? String {
            self.dataInterval = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SrcTrafficDataPerInterval"] as? [String: Any?] {
            var model = DescribeVodDomainSrcTrafficDataResponseBody.SrcTrafficDataPerInterval()
            model.fromMap(value)
            self.srcTrafficDataPerInterval = model
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["TotalTraffic"] as? String {
            self.totalTraffic = value
        }
    }
}

public class DescribeVodDomainSrcTrafficDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodDomainSrcTrafficDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodDomainSrcTrafficDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodDomainTrafficDataRequest : Tea.TeaModel {
    public var domainName: String?

    public var endTime: String?

    public var interval: String?

    public var ispNameEn: String?

    public var locationNameEn: String?

    public var ownerId: Int64?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.ispNameEn != nil {
            map["IspNameEn"] = self.ispNameEn!
        }
        if self.locationNameEn != nil {
            map["LocationNameEn"] = self.locationNameEn!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Interval"] as? String {
            self.interval = value
        }
        if let value = dict["IspNameEn"] as? String {
            self.ispNameEn = value
        }
        if let value = dict["LocationNameEn"] as? String {
            self.locationNameEn = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeVodDomainTrafficDataResponseBody : Tea.TeaModel {
    public class TrafficDataPerInterval : Tea.TeaModel {
        public class DataModule : Tea.TeaModel {
            public var domesticValue: String?

            public var httpsDomesticValue: String?

            public var httpsOverseasValue: String?

            public var httpsValue: String?

            public var overseasValue: String?

            public var timeStamp: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.domesticValue != nil {
                    map["DomesticValue"] = self.domesticValue!
                }
                if self.httpsDomesticValue != nil {
                    map["HttpsDomesticValue"] = self.httpsDomesticValue!
                }
                if self.httpsOverseasValue != nil {
                    map["HttpsOverseasValue"] = self.httpsOverseasValue!
                }
                if self.httpsValue != nil {
                    map["HttpsValue"] = self.httpsValue!
                }
                if self.overseasValue != nil {
                    map["OverseasValue"] = self.overseasValue!
                }
                if self.timeStamp != nil {
                    map["TimeStamp"] = self.timeStamp!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DomesticValue"] as? String {
                    self.domesticValue = value
                }
                if let value = dict["HttpsDomesticValue"] as? String {
                    self.httpsDomesticValue = value
                }
                if let value = dict["HttpsOverseasValue"] as? String {
                    self.httpsOverseasValue = value
                }
                if let value = dict["HttpsValue"] as? String {
                    self.httpsValue = value
                }
                if let value = dict["OverseasValue"] as? String {
                    self.overseasValue = value
                }
                if let value = dict["TimeStamp"] as? String {
                    self.timeStamp = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var dataModule: [DescribeVodDomainTrafficDataResponseBody.TrafficDataPerInterval.DataModule]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dataModule != nil {
                var tmp : [Any] = []
                for k in self.dataModule! {
                    tmp.append(k.toMap())
                }
                map["DataModule"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DataModule"] as? [Any?] {
                var tmp : [DescribeVodDomainTrafficDataResponseBody.TrafficDataPerInterval.DataModule] = []
                for v in value {
                    if v != nil {
                        var model = DescribeVodDomainTrafficDataResponseBody.TrafficDataPerInterval.DataModule()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.dataModule = tmp
            }
        }
    }
    public var dataInterval: String?

    public var domainName: String?

    public var endTime: String?

    public var requestId: String?

    public var startTime: String?

    public var totalTraffic: String?

    public var trafficDataPerInterval: DescribeVodDomainTrafficDataResponseBody.TrafficDataPerInterval?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.trafficDataPerInterval?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dataInterval != nil {
            map["DataInterval"] = self.dataInterval!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.totalTraffic != nil {
            map["TotalTraffic"] = self.totalTraffic!
        }
        if self.trafficDataPerInterval != nil {
            map["TrafficDataPerInterval"] = self.trafficDataPerInterval?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DataInterval"] as? String {
            self.dataInterval = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["TotalTraffic"] as? String {
            self.totalTraffic = value
        }
        if let value = dict["TrafficDataPerInterval"] as? [String: Any?] {
            var model = DescribeVodDomainTrafficDataResponseBody.TrafficDataPerInterval()
            model.fromMap(value)
            self.trafficDataPerInterval = model
        }
    }
}

public class DescribeVodDomainTrafficDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodDomainTrafficDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodDomainTrafficDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodDomainUsageDataRequest : Tea.TeaModel {
    public var area: String?

    public var domainName: String?

    public var endTime: String?

    public var field: String?

    public var interval: String?

    public var ownerId: Int64?

    public var startTime: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.area != nil {
            map["Area"] = self.area!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.field != nil {
            map["Field"] = self.field!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Area"] as? String {
            self.area = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Field"] as? String {
            self.field = value
        }
        if let value = dict["Interval"] as? String {
            self.interval = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class DescribeVodDomainUsageDataResponseBody : Tea.TeaModel {
    public class UsageDataPerInterval : Tea.TeaModel {
        public class DataModule : Tea.TeaModel {
            public var timeStamp: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.timeStamp != nil {
                    map["TimeStamp"] = self.timeStamp!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["TimeStamp"] as? String {
                    self.timeStamp = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var dataModule: [DescribeVodDomainUsageDataResponseBody.UsageDataPerInterval.DataModule]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dataModule != nil {
                var tmp : [Any] = []
                for k in self.dataModule! {
                    tmp.append(k.toMap())
                }
                map["DataModule"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DataModule"] as? [Any?] {
                var tmp : [DescribeVodDomainUsageDataResponseBody.UsageDataPerInterval.DataModule] = []
                for v in value {
                    if v != nil {
                        var model = DescribeVodDomainUsageDataResponseBody.UsageDataPerInterval.DataModule()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.dataModule = tmp
            }
        }
    }
    public var area: String?

    public var dataInterval: String?

    public var domainName: String?

    public var endTime: String?

    public var requestId: String?

    public var startTime: String?

    public var type: String?

    public var usageDataPerInterval: DescribeVodDomainUsageDataResponseBody.UsageDataPerInterval?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.usageDataPerInterval?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.area != nil {
            map["Area"] = self.area!
        }
        if self.dataInterval != nil {
            map["DataInterval"] = self.dataInterval!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        if self.usageDataPerInterval != nil {
            map["UsageDataPerInterval"] = self.usageDataPerInterval?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Area"] as? String {
            self.area = value
        }
        if let value = dict["DataInterval"] as? String {
            self.dataInterval = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
        if let value = dict["UsageDataPerInterval"] as? [String: Any?] {
            var model = DescribeVodDomainUsageDataResponseBody.UsageDataPerInterval()
            model.fromMap(value)
            self.usageDataPerInterval = model
        }
    }
}

public class DescribeVodDomainUsageDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodDomainUsageDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodDomainUsageDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodEditingUsageDataRequest : Tea.TeaModel {
    public var appId: String?

    public var endTime: String?

    public var ownerId: Int64?

    public var region: String?

    public var specification: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.region != nil {
            map["Region"] = self.region!
        }
        if self.specification != nil {
            map["Specification"] = self.specification!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["Region"] as? String {
            self.region = value
        }
        if let value = dict["Specification"] as? String {
            self.specification = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeVodEditingUsageDataResponseBody : Tea.TeaModel {
    public class EditingData : Tea.TeaModel {
        public var duration: Int64?

        public var region: String?

        public var specification: String?

        public var timeStamp: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.region != nil {
                map["Region"] = self.region!
            }
            if self.specification != nil {
                map["Specification"] = self.specification!
            }
            if self.timeStamp != nil {
                map["TimeStamp"] = self.timeStamp!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Duration"] as? Int64 {
                self.duration = value
            }
            if let value = dict["Region"] as? String {
                self.region = value
            }
            if let value = dict["Specification"] as? String {
                self.specification = value
            }
            if let value = dict["TimeStamp"] as? String {
                self.timeStamp = value
            }
        }
    }
    public var editingData: [DescribeVodEditingUsageDataResponseBody.EditingData]?

    public var endTime: String?

    public var requestId: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.editingData != nil {
            var tmp : [Any] = []
            for k in self.editingData! {
                tmp.append(k.toMap())
            }
            map["EditingData"] = tmp
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EditingData"] as? [Any?] {
            var tmp : [DescribeVodEditingUsageDataResponseBody.EditingData] = []
            for v in value {
                if v != nil {
                    var model = DescribeVodEditingUsageDataResponseBody.EditingData()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.editingData = tmp
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeVodEditingUsageDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodEditingUsageDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodEditingUsageDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodMediaPlayDataRequest : Tea.TeaModel {
    public var mediaId: String?

    public var orderName: String?

    public var orderType: String?

    public var os: String?

    public var pageNo: Int64?

    public var pageSize: Int64?

    public var playDate: String?

    public var region: String?

    public var terminalType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mediaId != nil {
            map["MediaId"] = self.mediaId!
        }
        if self.orderName != nil {
            map["OrderName"] = self.orderName!
        }
        if self.orderType != nil {
            map["OrderType"] = self.orderType!
        }
        if self.os != nil {
            map["Os"] = self.os!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.playDate != nil {
            map["PlayDate"] = self.playDate!
        }
        if self.region != nil {
            map["Region"] = self.region!
        }
        if self.terminalType != nil {
            map["TerminalType"] = self.terminalType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MediaId"] as? String {
            self.mediaId = value
        }
        if let value = dict["OrderName"] as? String {
            self.orderName = value
        }
        if let value = dict["OrderType"] as? String {
            self.orderType = value
        }
        if let value = dict["Os"] as? String {
            self.os = value
        }
        if let value = dict["PageNo"] as? Int64 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["PlayDate"] as? String {
            self.playDate = value
        }
        if let value = dict["Region"] as? String {
            self.region = value
        }
        if let value = dict["TerminalType"] as? String {
            self.terminalType = value
        }
    }
}

public class DescribeVodMediaPlayDataResponseBody : Tea.TeaModel {
    public class QoeInfoList : Tea.TeaModel {
        public var DAU: Double?

        public var mediaId: String?

        public var playDuration: Double?

        public var playDurationPerUv: Double?

        public var playPerVv: Double?

        public var playSuccessVv: Double?

        public var videoDuration: Double?

        public var videoTitle: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.DAU != nil {
                map["DAU"] = self.DAU!
            }
            if self.mediaId != nil {
                map["MediaId"] = self.mediaId!
            }
            if self.playDuration != nil {
                map["PlayDuration"] = self.playDuration!
            }
            if self.playDurationPerUv != nil {
                map["PlayDurationPerUv"] = self.playDurationPerUv!
            }
            if self.playPerVv != nil {
                map["PlayPerVv"] = self.playPerVv!
            }
            if self.playSuccessVv != nil {
                map["PlaySuccessVv"] = self.playSuccessVv!
            }
            if self.videoDuration != nil {
                map["VideoDuration"] = self.videoDuration!
            }
            if self.videoTitle != nil {
                map["VideoTitle"] = self.videoTitle!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DAU"] as? Double {
                self.DAU = value
            }
            if let value = dict["MediaId"] as? String {
                self.mediaId = value
            }
            if let value = dict["PlayDuration"] as? Double {
                self.playDuration = value
            }
            if let value = dict["PlayDurationPerUv"] as? Double {
                self.playDurationPerUv = value
            }
            if let value = dict["PlayPerVv"] as? Double {
                self.playPerVv = value
            }
            if let value = dict["PlaySuccessVv"] as? Double {
                self.playSuccessVv = value
            }
            if let value = dict["VideoDuration"] as? Double {
                self.videoDuration = value
            }
            if let value = dict["VideoTitle"] as? String {
                self.videoTitle = value
            }
        }
    }
    public var pageNo: Int64?

    public var pageSize: Int64?

    public var qoeInfoList: [DescribeVodMediaPlayDataResponseBody.QoeInfoList]?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.qoeInfoList != nil {
            var tmp : [Any] = []
            for k in self.qoeInfoList! {
                tmp.append(k.toMap())
            }
            map["QoeInfoList"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNo"] as? Int64 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["QoeInfoList"] as? [Any?] {
            var tmp : [DescribeVodMediaPlayDataResponseBody.QoeInfoList] = []
            for v in value {
                if v != nil {
                    var model = DescribeVodMediaPlayDataResponseBody.QoeInfoList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.qoeInfoList = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeVodMediaPlayDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodMediaPlayDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodMediaPlayDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodPlayerCollectDataRequest : Tea.TeaModel {
    public var appId: String?

    public var endTime: String?

    public var interval: String?

    public var metrics: String?

    public var os: String?

    public var period: String?

    public var startTime: String?

    public var terminalType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.metrics != nil {
            map["Metrics"] = self.metrics!
        }
        if self.os != nil {
            map["Os"] = self.os!
        }
        if self.period != nil {
            map["Period"] = self.period!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.terminalType != nil {
            map["TerminalType"] = self.terminalType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Interval"] as? String {
            self.interval = value
        }
        if let value = dict["Metrics"] as? String {
            self.metrics = value
        }
        if let value = dict["Os"] as? String {
            self.os = value
        }
        if let value = dict["Period"] as? String {
            self.period = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["TerminalType"] as? String {
            self.terminalType = value
        }
    }
}

public class DescribeVodPlayerCollectDataResponseBody : Tea.TeaModel {
    public class DataList : Tea.TeaModel {
        public var metric: String?

        public var value: Double?

        public var valueRatio: Double?

        public var valueRefer: Double?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.metric != nil {
                map["Metric"] = self.metric!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            if self.valueRatio != nil {
                map["ValueRatio"] = self.valueRatio!
            }
            if self.valueRefer != nil {
                map["ValueRefer"] = self.valueRefer!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Metric"] as? String {
                self.metric = value
            }
            if let value = dict["Value"] as? Double {
                self.value = value
            }
            if let value = dict["ValueRatio"] as? Double {
                self.valueRatio = value
            }
            if let value = dict["ValueRefer"] as? Double {
                self.valueRefer = value
            }
        }
    }
    public var dataList: [DescribeVodPlayerCollectDataResponseBody.DataList]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dataList != nil {
            var tmp : [Any] = []
            for k in self.dataList! {
                tmp.append(k.toMap())
            }
            map["DataList"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DataList"] as? [Any?] {
            var tmp : [DescribeVodPlayerCollectDataResponseBody.DataList] = []
            for v in value {
                if v != nil {
                    var model = DescribeVodPlayerCollectDataResponseBody.DataList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.dataList = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeVodPlayerCollectDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodPlayerCollectDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodPlayerCollectDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodPlayerDimensionDataRequest : Tea.TeaModel {
    public var appId: String?

    public var dimension: String?

    public var endTime: String?

    public var region: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.dimension != nil {
            map["Dimension"] = self.dimension!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.region != nil {
            map["Region"] = self.region!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["Dimension"] as? String {
            self.dimension = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Region"] as? String {
            self.region = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeVodPlayerDimensionDataResponseBody : Tea.TeaModel {
    public var dataList: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dataList != nil {
            map["DataList"] = self.dataList!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DataList"] as? [String] {
            self.dataList = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeVodPlayerDimensionDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodPlayerDimensionDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodPlayerDimensionDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodPlayerMetricDataRequest : Tea.TeaModel {
    public var appId: String?

    public var endTime: String?

    public var filters: String?

    public var interval: String?

    public var language: String?

    public var metrics: String?

    public var os: String?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var startTime: String?

    public var terminalType: String?

    public var top: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.filters != nil {
            map["Filters"] = self.filters!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.metrics != nil {
            map["Metrics"] = self.metrics!
        }
        if self.os != nil {
            map["Os"] = self.os!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.terminalType != nil {
            map["TerminalType"] = self.terminalType!
        }
        if self.top != nil {
            map["Top"] = self.top!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Filters"] as? String {
            self.filters = value
        }
        if let value = dict["Interval"] as? String {
            self.interval = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["Metrics"] as? String {
            self.metrics = value
        }
        if let value = dict["Os"] as? String {
            self.os = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["TerminalType"] as? String {
            self.terminalType = value
        }
        if let value = dict["Top"] as? Int64 {
            self.top = value
        }
    }
}

public class DescribeVodPlayerMetricDataResponseBody : Tea.TeaModel {
    public class DataList : Tea.TeaModel {
        public var avgPerCompletionVv: Double?

        public var avgPerPlayDuration: Double?

        public var avgPerVv: Double?

        public var avgPlayBitrate: Double?

        public var avgPlayDuration: Double?

        public var avgStartBitrate: Double?

        public var avgVideoDuration: Double?

        public var completionRate: Double?

        public var completionVv: Double?

        public var dimension: String?

        public var errorCount100s: Double?

        public var firstFrame: Double?

        public var jumpRate5s: Double?

        public var playFailRate: Double?

        public var realVv: Double?

        public var secondPlayRate: Double?

        public var seedFailRate: Double?

        public var seekDuration: Double?

        public var slowPlayRate: Double?

        public var stuckCount100s: String?

        public var stuckCountRate: Double?

        public var stuckDuration100s: Double?

        public var timeStamp: String?

        public var totalPlayDuration: Double?

        public var uv: Double?

        public var vv: Double?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.avgPerCompletionVv != nil {
                map["AvgPerCompletionVv"] = self.avgPerCompletionVv!
            }
            if self.avgPerPlayDuration != nil {
                map["AvgPerPlayDuration"] = self.avgPerPlayDuration!
            }
            if self.avgPerVv != nil {
                map["AvgPerVv"] = self.avgPerVv!
            }
            if self.avgPlayBitrate != nil {
                map["AvgPlayBitrate"] = self.avgPlayBitrate!
            }
            if self.avgPlayDuration != nil {
                map["AvgPlayDuration"] = self.avgPlayDuration!
            }
            if self.avgStartBitrate != nil {
                map["AvgStartBitrate"] = self.avgStartBitrate!
            }
            if self.avgVideoDuration != nil {
                map["AvgVideoDuration"] = self.avgVideoDuration!
            }
            if self.completionRate != nil {
                map["CompletionRate"] = self.completionRate!
            }
            if self.completionVv != nil {
                map["CompletionVv"] = self.completionVv!
            }
            if self.dimension != nil {
                map["Dimension"] = self.dimension!
            }
            if self.errorCount100s != nil {
                map["ErrorCount100s"] = self.errorCount100s!
            }
            if self.firstFrame != nil {
                map["FirstFrame"] = self.firstFrame!
            }
            if self.jumpRate5s != nil {
                map["JumpRate5s"] = self.jumpRate5s!
            }
            if self.playFailRate != nil {
                map["PlayFailRate"] = self.playFailRate!
            }
            if self.realVv != nil {
                map["RealVv"] = self.realVv!
            }
            if self.secondPlayRate != nil {
                map["SecondPlayRate"] = self.secondPlayRate!
            }
            if self.seedFailRate != nil {
                map["SeedFailRate"] = self.seedFailRate!
            }
            if self.seekDuration != nil {
                map["SeekDuration"] = self.seekDuration!
            }
            if self.slowPlayRate != nil {
                map["SlowPlayRate"] = self.slowPlayRate!
            }
            if self.stuckCount100s != nil {
                map["StuckCount100s"] = self.stuckCount100s!
            }
            if self.stuckCountRate != nil {
                map["StuckCountRate"] = self.stuckCountRate!
            }
            if self.stuckDuration100s != nil {
                map["StuckDuration100s"] = self.stuckDuration100s!
            }
            if self.timeStamp != nil {
                map["TimeStamp"] = self.timeStamp!
            }
            if self.totalPlayDuration != nil {
                map["TotalPlayDuration"] = self.totalPlayDuration!
            }
            if self.uv != nil {
                map["Uv"] = self.uv!
            }
            if self.vv != nil {
                map["Vv"] = self.vv!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AvgPerCompletionVv"] as? Double {
                self.avgPerCompletionVv = value
            }
            if let value = dict["AvgPerPlayDuration"] as? Double {
                self.avgPerPlayDuration = value
            }
            if let value = dict["AvgPerVv"] as? Double {
                self.avgPerVv = value
            }
            if let value = dict["AvgPlayBitrate"] as? Double {
                self.avgPlayBitrate = value
            }
            if let value = dict["AvgPlayDuration"] as? Double {
                self.avgPlayDuration = value
            }
            if let value = dict["AvgStartBitrate"] as? Double {
                self.avgStartBitrate = value
            }
            if let value = dict["AvgVideoDuration"] as? Double {
                self.avgVideoDuration = value
            }
            if let value = dict["CompletionRate"] as? Double {
                self.completionRate = value
            }
            if let value = dict["CompletionVv"] as? Double {
                self.completionVv = value
            }
            if let value = dict["Dimension"] as? String {
                self.dimension = value
            }
            if let value = dict["ErrorCount100s"] as? Double {
                self.errorCount100s = value
            }
            if let value = dict["FirstFrame"] as? Double {
                self.firstFrame = value
            }
            if let value = dict["JumpRate5s"] as? Double {
                self.jumpRate5s = value
            }
            if let value = dict["PlayFailRate"] as? Double {
                self.playFailRate = value
            }
            if let value = dict["RealVv"] as? Double {
                self.realVv = value
            }
            if let value = dict["SecondPlayRate"] as? Double {
                self.secondPlayRate = value
            }
            if let value = dict["SeedFailRate"] as? Double {
                self.seedFailRate = value
            }
            if let value = dict["SeekDuration"] as? Double {
                self.seekDuration = value
            }
            if let value = dict["SlowPlayRate"] as? Double {
                self.slowPlayRate = value
            }
            if let value = dict["StuckCount100s"] as? String {
                self.stuckCount100s = value
            }
            if let value = dict["StuckCountRate"] as? Double {
                self.stuckCountRate = value
            }
            if let value = dict["StuckDuration100s"] as? Double {
                self.stuckDuration100s = value
            }
            if let value = dict["TimeStamp"] as? String {
                self.timeStamp = value
            }
            if let value = dict["TotalPlayDuration"] as? Double {
                self.totalPlayDuration = value
            }
            if let value = dict["Uv"] as? Double {
                self.uv = value
            }
            if let value = dict["Vv"] as? Double {
                self.vv = value
            }
        }
    }
    public class Extend : Tea.TeaModel {
        public var actualEndTime: String?

        public var actualStartTime: String?

        public var intervalSeconds: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.actualEndTime != nil {
                map["ActualEndTime"] = self.actualEndTime!
            }
            if self.actualStartTime != nil {
                map["ActualStartTime"] = self.actualStartTime!
            }
            if self.intervalSeconds != nil {
                map["IntervalSeconds"] = self.intervalSeconds!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ActualEndTime"] as? String {
                self.actualEndTime = value
            }
            if let value = dict["ActualStartTime"] as? String {
                self.actualStartTime = value
            }
            if let value = dict["IntervalSeconds"] as? Int64 {
                self.intervalSeconds = value
            }
        }
    }
    public var dataList: [DescribeVodPlayerMetricDataResponseBody.DataList]?

    public var extend: DescribeVodPlayerMetricDataResponseBody.Extend?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var requestId: String?

    public var totalCnt: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.extend?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dataList != nil {
            var tmp : [Any] = []
            for k in self.dataList! {
                tmp.append(k.toMap())
            }
            map["DataList"] = tmp
        }
        if self.extend != nil {
            map["Extend"] = self.extend?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCnt != nil {
            map["TotalCnt"] = self.totalCnt!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DataList"] as? [Any?] {
            var tmp : [DescribeVodPlayerMetricDataResponseBody.DataList] = []
            for v in value {
                if v != nil {
                    var model = DescribeVodPlayerMetricDataResponseBody.DataList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.dataList = tmp
        }
        if let value = dict["Extend"] as? [String: Any?] {
            var model = DescribeVodPlayerMetricDataResponseBody.Extend()
            model.fromMap(value)
            self.extend = model
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCnt"] as? Int64 {
            self.totalCnt = value
        }
    }
}

public class DescribeVodPlayerMetricDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodPlayerMetricDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodPlayerMetricDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodRangeDataByLocateAndIspServiceRequest : Tea.TeaModel {
    public var domainName: String?

    public var endTime: String?

    public var ispNameEn: String?

    public var locationNameEn: String?

    public var ownerId: Int64?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.ispNameEn != nil {
            map["IspNameEn"] = self.ispNameEn!
        }
        if self.locationNameEn != nil {
            map["LocationNameEn"] = self.locationNameEn!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["IspNameEn"] as? String {
            self.ispNameEn = value
        }
        if let value = dict["LocationNameEn"] as? String {
            self.locationNameEn = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeVodRangeDataByLocateAndIspServiceResponseBody : Tea.TeaModel {
    public var jsonResult: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.jsonResult != nil {
            map["JsonResult"] = self.jsonResult!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["JsonResult"] as? String {
            self.jsonResult = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeVodRangeDataByLocateAndIspServiceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodRangeDataByLocateAndIspServiceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodRangeDataByLocateAndIspServiceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodRefreshQuotaRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeVodRefreshQuotaResponseBody : Tea.TeaModel {
    public var blockQuota: String?

    public var dirQuota: String?

    public var dirRemain: String?

    public var preloadQuota: String?

    public var preloadRemain: String?

    public var requestId: String?

    public var urlQuota: String?

    public var urlRemain: String?

    public var blockRemain: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.blockQuota != nil {
            map["BlockQuota"] = self.blockQuota!
        }
        if self.dirQuota != nil {
            map["DirQuota"] = self.dirQuota!
        }
        if self.dirRemain != nil {
            map["DirRemain"] = self.dirRemain!
        }
        if self.preloadQuota != nil {
            map["PreloadQuota"] = self.preloadQuota!
        }
        if self.preloadRemain != nil {
            map["PreloadRemain"] = self.preloadRemain!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.urlQuota != nil {
            map["UrlQuota"] = self.urlQuota!
        }
        if self.urlRemain != nil {
            map["UrlRemain"] = self.urlRemain!
        }
        if self.blockRemain != nil {
            map["blockRemain"] = self.blockRemain!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BlockQuota"] as? String {
            self.blockQuota = value
        }
        if let value = dict["DirQuota"] as? String {
            self.dirQuota = value
        }
        if let value = dict["DirRemain"] as? String {
            self.dirRemain = value
        }
        if let value = dict["PreloadQuota"] as? String {
            self.preloadQuota = value
        }
        if let value = dict["PreloadRemain"] as? String {
            self.preloadRemain = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["UrlQuota"] as? String {
            self.urlQuota = value
        }
        if let value = dict["UrlRemain"] as? String {
            self.urlRemain = value
        }
        if let value = dict["blockRemain"] as? String {
            self.blockRemain = value
        }
    }
}

public class DescribeVodRefreshQuotaResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodRefreshQuotaResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodRefreshQuotaResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodRefreshTasksRequest : Tea.TeaModel {
    public var domainName: String?

    public var endTime: String?

    public var objectPath: String?

    public var objectType: String?

    public var ownerId: Int64?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public var startTime: String?

    public var status: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.objectPath != nil {
            map["ObjectPath"] = self.objectPath!
        }
        if self.objectType != nil {
            map["ObjectType"] = self.objectType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["ObjectPath"] as? String {
            self.objectPath = value
        }
        if let value = dict["ObjectType"] as? String {
            self.objectType = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class DescribeVodRefreshTasksResponseBody : Tea.TeaModel {
    public class Tasks : Tea.TeaModel {
        public class Task : Tea.TeaModel {
            public var creationTime: String?

            public var description_: String?

            public var objectPath: String?

            public var objectType: String?

            public var process: String?

            public var status: String?

            public var taskId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.creationTime != nil {
                    map["CreationTime"] = self.creationTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.objectPath != nil {
                    map["ObjectPath"] = self.objectPath!
                }
                if self.objectType != nil {
                    map["ObjectType"] = self.objectType!
                }
                if self.process != nil {
                    map["Process"] = self.process!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.taskId != nil {
                    map["TaskId"] = self.taskId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CreationTime"] as? String {
                    self.creationTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["ObjectPath"] as? String {
                    self.objectPath = value
                }
                if let value = dict["ObjectType"] as? String {
                    self.objectType = value
                }
                if let value = dict["Process"] as? String {
                    self.process = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["TaskId"] as? String {
                    self.taskId = value
                }
            }
        }
        public var task: [DescribeVodRefreshTasksResponseBody.Tasks.Task]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.task != nil {
                var tmp : [Any] = []
                for k in self.task! {
                    tmp.append(k.toMap())
                }
                map["Task"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Task"] as? [Any?] {
                var tmp : [DescribeVodRefreshTasksResponseBody.Tasks.Task] = []
                for v in value {
                    if v != nil {
                        var model = DescribeVodRefreshTasksResponseBody.Tasks.Task()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.task = tmp
            }
        }
    }
    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var requestId: String?

    public var tasks: DescribeVodRefreshTasksResponseBody.Tasks?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tasks?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.tasks != nil {
            map["Tasks"] = self.tasks?.toMap()
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Tasks"] as? [String: Any?] {
            var model = DescribeVodRefreshTasksResponseBody.Tasks()
            model.fromMap(value)
            self.tasks = model
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeVodRefreshTasksResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodRefreshTasksResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodRefreshTasksResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodSSLCertificateListRequest : Tea.TeaModel {
    public var domainName: String?

    public var ownerId: Int64?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var searchKeyword: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.searchKeyword != nil {
            map["SearchKeyword"] = self.searchKeyword!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["SearchKeyword"] as? String {
            self.searchKeyword = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeVodSSLCertificateListResponseBody : Tea.TeaModel {
    public class CertificateListModel : Tea.TeaModel {
        public class CertList : Tea.TeaModel {
            public class Cert : Tea.TeaModel {
                public var certId: Int64?

                public var certName: String?

                public var certRegion: String?

                public var common: String?

                public var fingerprint: String?

                public var issuer: String?

                public var lastTime: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.certId != nil {
                        map["CertId"] = self.certId!
                    }
                    if self.certName != nil {
                        map["CertName"] = self.certName!
                    }
                    if self.certRegion != nil {
                        map["CertRegion"] = self.certRegion!
                    }
                    if self.common != nil {
                        map["Common"] = self.common!
                    }
                    if self.fingerprint != nil {
                        map["Fingerprint"] = self.fingerprint!
                    }
                    if self.issuer != nil {
                        map["Issuer"] = self.issuer!
                    }
                    if self.lastTime != nil {
                        map["LastTime"] = self.lastTime!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CertId"] as? Int64 {
                        self.certId = value
                    }
                    if let value = dict["CertName"] as? String {
                        self.certName = value
                    }
                    if let value = dict["CertRegion"] as? String {
                        self.certRegion = value
                    }
                    if let value = dict["Common"] as? String {
                        self.common = value
                    }
                    if let value = dict["Fingerprint"] as? String {
                        self.fingerprint = value
                    }
                    if let value = dict["Issuer"] as? String {
                        self.issuer = value
                    }
                    if let value = dict["LastTime"] as? Int64 {
                        self.lastTime = value
                    }
                }
            }
            public var cert: [DescribeVodSSLCertificateListResponseBody.CertificateListModel.CertList.Cert]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cert != nil {
                    var tmp : [Any] = []
                    for k in self.cert! {
                        tmp.append(k.toMap())
                    }
                    map["Cert"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Cert"] as? [Any?] {
                    var tmp : [DescribeVodSSLCertificateListResponseBody.CertificateListModel.CertList.Cert] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeVodSSLCertificateListResponseBody.CertificateListModel.CertList.Cert()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.cert = tmp
                }
            }
        }
        public var certList: DescribeVodSSLCertificateListResponseBody.CertificateListModel.CertList?

        public var count: Int32?

        public var pageNumber: Int64?

        public var pageSize: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.certList?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.certList != nil {
                map["CertList"] = self.certList?.toMap()
            }
            if self.count != nil {
                map["Count"] = self.count!
            }
            if self.pageNumber != nil {
                map["PageNumber"] = self.pageNumber!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CertList"] as? [String: Any?] {
                var model = DescribeVodSSLCertificateListResponseBody.CertificateListModel.CertList()
                model.fromMap(value)
                self.certList = model
            }
            if let value = dict["Count"] as? Int32 {
                self.count = value
            }
            if let value = dict["PageNumber"] as? Int64 {
                self.pageNumber = value
            }
            if let value = dict["PageSize"] as? Int64 {
                self.pageSize = value
            }
        }
    }
    public var certificateListModel: DescribeVodSSLCertificateListResponseBody.CertificateListModel?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.certificateListModel?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certificateListModel != nil {
            map["CertificateListModel"] = self.certificateListModel?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CertificateListModel"] as? [String: Any?] {
            var model = DescribeVodSSLCertificateListResponseBody.CertificateListModel()
            model.fromMap(value)
            self.certificateListModel = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeVodSSLCertificateListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodSSLCertificateListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodSSLCertificateListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodStorageDataRequest : Tea.TeaModel {
    public var appId: String?

    public var endTime: String?

    public var ownerId: Int64?

    public var region: String?

    public var startTime: String?

    public var storage: String?

    public var storageType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.region != nil {
            map["Region"] = self.region!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.storage != nil {
            map["Storage"] = self.storage!
        }
        if self.storageType != nil {
            map["StorageType"] = self.storageType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["Region"] as? String {
            self.region = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["Storage"] as? String {
            self.storage = value
        }
        if let value = dict["StorageType"] as? String {
            self.storageType = value
        }
    }
}

public class DescribeVodStorageDataResponseBody : Tea.TeaModel {
    public class StorageData : Tea.TeaModel {
        public class StorageDataItem : Tea.TeaModel {
            public var networkOut: String?

            public var storageUtilization: String?

            public var timeStamp: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.networkOut != nil {
                    map["NetworkOut"] = self.networkOut!
                }
                if self.storageUtilization != nil {
                    map["StorageUtilization"] = self.storageUtilization!
                }
                if self.timeStamp != nil {
                    map["TimeStamp"] = self.timeStamp!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["NetworkOut"] as? String {
                    self.networkOut = value
                }
                if let value = dict["StorageUtilization"] as? String {
                    self.storageUtilization = value
                }
                if let value = dict["TimeStamp"] as? String {
                    self.timeStamp = value
                }
            }
        }
        public var storageDataItem: [DescribeVodStorageDataResponseBody.StorageData.StorageDataItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.storageDataItem != nil {
                var tmp : [Any] = []
                for k in self.storageDataItem! {
                    tmp.append(k.toMap())
                }
                map["StorageDataItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["StorageDataItem"] as? [Any?] {
                var tmp : [DescribeVodStorageDataResponseBody.StorageData.StorageDataItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeVodStorageDataResponseBody.StorageData.StorageDataItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.storageDataItem = tmp
            }
        }
    }
    public var dataInterval: String?

    public var requestId: String?

    public var storageData: DescribeVodStorageDataResponseBody.StorageData?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.storageData?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dataInterval != nil {
            map["DataInterval"] = self.dataInterval!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.storageData != nil {
            map["StorageData"] = self.storageData?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DataInterval"] as? String {
            self.dataInterval = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["StorageData"] as? [String: Any?] {
            var model = DescribeVodStorageDataResponseBody.StorageData()
            model.fromMap(value)
            self.storageData = model
        }
    }
}

public class DescribeVodStorageDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodStorageDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodStorageDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodTieringStorageDataRequest : Tea.TeaModel {
    public var appId: String?

    public var endTime: String?

    public var ownerId: Int64?

    public var region: String?

    public var startTime: String?

    public var storageClass: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.region != nil {
            map["Region"] = self.region!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.storageClass != nil {
            map["StorageClass"] = self.storageClass!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["Region"] as? String {
            self.region = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["StorageClass"] as? String {
            self.storageClass = value
        }
    }
}

public class DescribeVodTieringStorageDataResponseBody : Tea.TeaModel {
    public class StorageData : Tea.TeaModel {
        public var lessthanMonthDatasize: Int64?

        public var region: String?

        public var storageClass: String?

        public var storageUtilization: Int64?

        public var timeStamp: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.lessthanMonthDatasize != nil {
                map["LessthanMonthDatasize"] = self.lessthanMonthDatasize!
            }
            if self.region != nil {
                map["Region"] = self.region!
            }
            if self.storageClass != nil {
                map["StorageClass"] = self.storageClass!
            }
            if self.storageUtilization != nil {
                map["StorageUtilization"] = self.storageUtilization!
            }
            if self.timeStamp != nil {
                map["TimeStamp"] = self.timeStamp!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["LessthanMonthDatasize"] as? Int64 {
                self.lessthanMonthDatasize = value
            }
            if let value = dict["Region"] as? String {
                self.region = value
            }
            if let value = dict["StorageClass"] as? String {
                self.storageClass = value
            }
            if let value = dict["StorageUtilization"] as? Int64 {
                self.storageUtilization = value
            }
            if let value = dict["TimeStamp"] as? String {
                self.timeStamp = value
            }
        }
    }
    public var requestId: String?

    public var storageData: [DescribeVodTieringStorageDataResponseBody.StorageData]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.storageData != nil {
            var tmp : [Any] = []
            for k in self.storageData! {
                tmp.append(k.toMap())
            }
            map["StorageData"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["StorageData"] as? [Any?] {
            var tmp : [DescribeVodTieringStorageDataResponseBody.StorageData] = []
            for v in value {
                if v != nil {
                    var model = DescribeVodTieringStorageDataResponseBody.StorageData()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.storageData = tmp
        }
    }
}

public class DescribeVodTieringStorageDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodTieringStorageDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodTieringStorageDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodTieringStorageRetrievalDataRequest : Tea.TeaModel {
    public var appId: String?

    public var endTime: String?

    public var ownerId: Int64?

    public var region: String?

    public var startTime: String?

    public var storageClass: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.region != nil {
            map["Region"] = self.region!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.storageClass != nil {
            map["StorageClass"] = self.storageClass!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["Region"] as? String {
            self.region = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["StorageClass"] as? String {
            self.storageClass = value
        }
    }
}

public class DescribeVodTieringStorageRetrievalDataResponseBody : Tea.TeaModel {
    public class RetrievalData : Tea.TeaModel {
        public var CABulkRetrievalData: Int64?

        public var CAHighPriorRetrievalData: Int64?

        public var CAStdRetrievalData: Int64?

        public var region: String?

        public var retrievalData: Int64?

        public var storageClass: String?

        public var timeStamp: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.CABulkRetrievalData != nil {
                map["CABulkRetrievalData"] = self.CABulkRetrievalData!
            }
            if self.CAHighPriorRetrievalData != nil {
                map["CAHighPriorRetrievalData"] = self.CAHighPriorRetrievalData!
            }
            if self.CAStdRetrievalData != nil {
                map["CAStdRetrievalData"] = self.CAStdRetrievalData!
            }
            if self.region != nil {
                map["Region"] = self.region!
            }
            if self.retrievalData != nil {
                map["RetrievalData"] = self.retrievalData!
            }
            if self.storageClass != nil {
                map["StorageClass"] = self.storageClass!
            }
            if self.timeStamp != nil {
                map["TimeStamp"] = self.timeStamp!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CABulkRetrievalData"] as? Int64 {
                self.CABulkRetrievalData = value
            }
            if let value = dict["CAHighPriorRetrievalData"] as? Int64 {
                self.CAHighPriorRetrievalData = value
            }
            if let value = dict["CAStdRetrievalData"] as? Int64 {
                self.CAStdRetrievalData = value
            }
            if let value = dict["Region"] as? String {
                self.region = value
            }
            if let value = dict["RetrievalData"] as? Int64 {
                self.retrievalData = value
            }
            if let value = dict["StorageClass"] as? String {
                self.storageClass = value
            }
            if let value = dict["TimeStamp"] as? String {
                self.timeStamp = value
            }
        }
    }
    public var requestId: String?

    public var retrievalData: [DescribeVodTieringStorageRetrievalDataResponseBody.RetrievalData]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.retrievalData != nil {
            var tmp : [Any] = []
            for k in self.retrievalData! {
                tmp.append(k.toMap())
            }
            map["RetrievalData"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RetrievalData"] as? [Any?] {
            var tmp : [DescribeVodTieringStorageRetrievalDataResponseBody.RetrievalData] = []
            for v in value {
                if v != nil {
                    var model = DescribeVodTieringStorageRetrievalDataResponseBody.RetrievalData()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.retrievalData = tmp
        }
    }
}

public class DescribeVodTieringStorageRetrievalDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodTieringStorageRetrievalDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodTieringStorageRetrievalDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodTranscodeDataRequest : Tea.TeaModel {
    public var appId: String?

    public var endTime: String?

    public var interval: String?

    public var ownerId: Int64?

    public var region: String?

    public var specification: String?

    public var startTime: String?

    public var storage: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.region != nil {
            map["Region"] = self.region!
        }
        if self.specification != nil {
            map["Specification"] = self.specification!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.storage != nil {
            map["Storage"] = self.storage!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["Interval"] as? String {
            self.interval = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["Region"] as? String {
            self.region = value
        }
        if let value = dict["Specification"] as? String {
            self.specification = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["Storage"] as? String {
            self.storage = value
        }
    }
}

public class DescribeVodTranscodeDataResponseBody : Tea.TeaModel {
    public class TranscodeData : Tea.TeaModel {
        public class TranscodeDataItem : Tea.TeaModel {
            public class Data : Tea.TeaModel {
                public class DataItem : Tea.TeaModel {
                    public var name: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var dataItem: [DescribeVodTranscodeDataResponseBody.TranscodeData.TranscodeDataItem.Data.DataItem]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.dataItem != nil {
                        var tmp : [Any] = []
                        for k in self.dataItem! {
                            tmp.append(k.toMap())
                        }
                        map["DataItem"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["DataItem"] as? [Any?] {
                        var tmp : [DescribeVodTranscodeDataResponseBody.TranscodeData.TranscodeDataItem.Data.DataItem] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeVodTranscodeDataResponseBody.TranscodeData.TranscodeDataItem.Data.DataItem()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.dataItem = tmp
                    }
                }
            }
            public var data: DescribeVodTranscodeDataResponseBody.TranscodeData.TranscodeDataItem.Data?

            public var timeStamp: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.data?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.data != nil {
                    map["Data"] = self.data?.toMap()
                }
                if self.timeStamp != nil {
                    map["TimeStamp"] = self.timeStamp!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Data"] as? [String: Any?] {
                    var model = DescribeVodTranscodeDataResponseBody.TranscodeData.TranscodeDataItem.Data()
                    model.fromMap(value)
                    self.data = model
                }
                if let value = dict["TimeStamp"] as? String {
                    self.timeStamp = value
                }
            }
        }
        public var transcodeDataItem: [DescribeVodTranscodeDataResponseBody.TranscodeData.TranscodeDataItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.transcodeDataItem != nil {
                var tmp : [Any] = []
                for k in self.transcodeDataItem! {
                    tmp.append(k.toMap())
                }
                map["TranscodeDataItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TranscodeDataItem"] as? [Any?] {
                var tmp : [DescribeVodTranscodeDataResponseBody.TranscodeData.TranscodeDataItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeVodTranscodeDataResponseBody.TranscodeData.TranscodeDataItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.transcodeDataItem = tmp
            }
        }
    }
    public var dataInterval: String?

    public var requestId: String?

    public var transcodeData: DescribeVodTranscodeDataResponseBody.TranscodeData?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.transcodeData?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dataInterval != nil {
            map["DataInterval"] = self.dataInterval!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.transcodeData != nil {
            map["TranscodeData"] = self.transcodeData?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DataInterval"] as? String {
            self.dataInterval = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TranscodeData"] as? [String: Any?] {
            var model = DescribeVodTranscodeDataResponseBody.TranscodeData()
            model.fromMap(value)
            self.transcodeData = model
        }
    }
}

public class DescribeVodTranscodeDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodTranscodeDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodTranscodeDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodUserDomainsRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var domainName: String?

    public var domainSearchType: String?

    public var domainStatus: String?

    public var ownerId: Int64?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public var tag: [DescribeVodUserDomainsRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.domainSearchType != nil {
            map["DomainSearchType"] = self.domainSearchType!
        }
        if self.domainStatus != nil {
            map["DomainStatus"] = self.domainStatus!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["DomainSearchType"] as? String {
            self.domainSearchType = value
        }
        if let value = dict["DomainStatus"] as? String {
            self.domainStatus = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [DescribeVodUserDomainsRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = DescribeVodUserDomainsRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class DescribeVodUserDomainsResponseBody : Tea.TeaModel {
    public class Domains : Tea.TeaModel {
        public class PageData : Tea.TeaModel {
            public class Sources : Tea.TeaModel {
                public class Source : Tea.TeaModel {
                    public var content: String?

                    public var port: Int32?

                    public var priority: String?

                    public var type: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.content != nil {
                            map["Content"] = self.content!
                        }
                        if self.port != nil {
                            map["Port"] = self.port!
                        }
                        if self.priority != nil {
                            map["Priority"] = self.priority!
                        }
                        if self.type != nil {
                            map["Type"] = self.type!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Content"] as? String {
                            self.content = value
                        }
                        if let value = dict["Port"] as? Int32 {
                            self.port = value
                        }
                        if let value = dict["Priority"] as? String {
                            self.priority = value
                        }
                        if let value = dict["Type"] as? String {
                            self.type = value
                        }
                    }
                }
                public var source: [DescribeVodUserDomainsResponseBody.Domains.PageData.Sources.Source]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.source != nil {
                        var tmp : [Any] = []
                        for k in self.source! {
                            tmp.append(k.toMap())
                        }
                        map["Source"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Source"] as? [Any?] {
                        var tmp : [DescribeVodUserDomainsResponseBody.Domains.PageData.Sources.Source] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeVodUserDomainsResponseBody.Domains.PageData.Sources.Source()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.source = tmp
                    }
                }
            }
            public var cname: String?

            public var description_: String?

            public var domainName: String?

            public var domainStatus: String?

            public var gmtCreated: String?

            public var gmtModified: String?

            public var sandbox: String?

            public var sources: DescribeVodUserDomainsResponseBody.Domains.PageData.Sources?

            public var sslProtocol: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.sources?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cname != nil {
                    map["Cname"] = self.cname!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.domainName != nil {
                    map["DomainName"] = self.domainName!
                }
                if self.domainStatus != nil {
                    map["DomainStatus"] = self.domainStatus!
                }
                if self.gmtCreated != nil {
                    map["GmtCreated"] = self.gmtCreated!
                }
                if self.gmtModified != nil {
                    map["GmtModified"] = self.gmtModified!
                }
                if self.sandbox != nil {
                    map["Sandbox"] = self.sandbox!
                }
                if self.sources != nil {
                    map["Sources"] = self.sources?.toMap()
                }
                if self.sslProtocol != nil {
                    map["SslProtocol"] = self.sslProtocol!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Cname"] as? String {
                    self.cname = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DomainName"] as? String {
                    self.domainName = value
                }
                if let value = dict["DomainStatus"] as? String {
                    self.domainStatus = value
                }
                if let value = dict["GmtCreated"] as? String {
                    self.gmtCreated = value
                }
                if let value = dict["GmtModified"] as? String {
                    self.gmtModified = value
                }
                if let value = dict["Sandbox"] as? String {
                    self.sandbox = value
                }
                if let value = dict["Sources"] as? [String: Any?] {
                    var model = DescribeVodUserDomainsResponseBody.Domains.PageData.Sources()
                    model.fromMap(value)
                    self.sources = model
                }
                if let value = dict["SslProtocol"] as? String {
                    self.sslProtocol = value
                }
            }
        }
        public var pageData: [DescribeVodUserDomainsResponseBody.Domains.PageData]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.pageData != nil {
                var tmp : [Any] = []
                for k in self.pageData! {
                    tmp.append(k.toMap())
                }
                map["PageData"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PageData"] as? [Any?] {
                var tmp : [DescribeVodUserDomainsResponseBody.Domains.PageData] = []
                for v in value {
                    if v != nil {
                        var model = DescribeVodUserDomainsResponseBody.Domains.PageData()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.pageData = tmp
            }
        }
    }
    public var domains: DescribeVodUserDomainsResponseBody.Domains?

    public var pageNumber: Int64?

    public var pageSize: Int64?

    public var requestId: String?

    public var totalCount: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.domains?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domains != nil {
            map["Domains"] = self.domains?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Domains"] as? [String: Any?] {
            var model = DescribeVodUserDomainsResponseBody.Domains()
            model.fromMap(value)
            self.domains = model
        }
        if let value = dict["PageNumber"] as? Int64 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int64 {
            self.totalCount = value
        }
    }
}

public class DescribeVodUserDomainsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodUserDomainsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodUserDomainsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVodVerifyContentRequest : Tea.TeaModel {
    public var domainName: String?

    public var ownerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
    }
}

public class DescribeVodVerifyContentResponseBody : Tea.TeaModel {
    public var content: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeVodVerifyContentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVodVerifyContentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVodVerifyContentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DetachAppPolicyFromIdentityRequest : Tea.TeaModel {
    public var appId: String?

    public var identityName: String?

    public var identityType: String?

    public var policyNames: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.identityName != nil {
            map["IdentityName"] = self.identityName!
        }
        if self.identityType != nil {
            map["IdentityType"] = self.identityType!
        }
        if self.policyNames != nil {
            map["PolicyNames"] = self.policyNames!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["IdentityName"] as? String {
            self.identityName = value
        }
        if let value = dict["IdentityType"] as? String {
            self.identityType = value
        }
        if let value = dict["PolicyNames"] as? String {
            self.policyNames = value
        }
    }
}

public class DetachAppPolicyFromIdentityResponseBody : Tea.TeaModel {
    public var failedPolicyNames: [String]?

    public var nonExistPolicyNames: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.failedPolicyNames != nil {
            map["FailedPolicyNames"] = self.failedPolicyNames!
        }
        if self.nonExistPolicyNames != nil {
            map["NonExistPolicyNames"] = self.nonExistPolicyNames!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FailedPolicyNames"] as? [String] {
            self.failedPolicyNames = value
        }
        if let value = dict["NonExistPolicyNames"] as? [String] {
            self.nonExistPolicyNames = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DetachAppPolicyFromIdentityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DetachAppPolicyFromIdentityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DetachAppPolicyFromIdentityResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GenerateDownloadSecretKeyRequest : Tea.TeaModel {
    public var appDecryptKey: String?

    public var appIdentification: String?

    public var ownerId: Int64?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appDecryptKey != nil {
            map["AppDecryptKey"] = self.appDecryptKey!
        }
        if self.appIdentification != nil {
            map["AppIdentification"] = self.appIdentification!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppDecryptKey"] as? String {
            self.appDecryptKey = value
        }
        if let value = dict["AppIdentification"] as? String {
            self.appIdentification = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
    }
}

public class GenerateDownloadSecretKeyResponseBody : Tea.TeaModel {
    public var appEncryptKey: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appEncryptKey != nil {
            map["AppEncryptKey"] = self.appEncryptKey!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppEncryptKey"] as? String {
            self.appEncryptKey = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GenerateDownloadSecretKeyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GenerateDownloadSecretKeyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GenerateDownloadSecretKeyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GenerateKMSDataKeyRequest : Tea.TeaModel {
    public var ownerAccount: String?

    public var ownerId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
        if let value = dict["OwnerId"] as? String {
            self.ownerId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? String {
            self.resourceOwnerId = value
        }
    }
}

public class GenerateKMSDataKeyResponseBody : Tea.TeaModel {
    public var ciphertextBlob: String?

    public var keyId: String?

    public var plaintext: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ciphertextBlob != nil {
            map["CiphertextBlob"] = self.ciphertextBlob!
        }
        if self.keyId != nil {
            map["KeyId"] = self.keyId!
        }
        if self.plaintext != nil {
            map["Plaintext"] = self.plaintext!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CiphertextBlob"] as? String {
            self.ciphertextBlob = value
        }
        if let value = dict["KeyId"] as? String {
            self.keyId = value
        }
        if let value = dict["Plaintext"] as? String {
            self.plaintext = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GenerateKMSDataKeyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GenerateKMSDataKeyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GenerateKMSDataKeyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetAIImageJobsRequest : Tea.TeaModel {
    public var jobIds: String?

    public var ownerAccount: String?

    public var ownerId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.jobIds != nil {
            map["JobIds"] = self.jobIds!
        }
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["JobIds"] as? String {
            self.jobIds = value
        }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
        if let value = dict["OwnerId"] as? String {
            self.ownerId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? String {
            self.resourceOwnerId = value
        }
    }
}

public class GetAIImageJobsResponseBody : Tea.TeaModel {
    public class AIImageJobList : Tea.TeaModel {
        public var AIImageResult: String?

        public var code: String?

        public var creationTime: String?

        public var jobId: String?

        public var message: String?

        public var status: String?

        public var templateConfig: String?

        public var templateId: String?

        public var userData: String?

        public var videoId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.AIImageResult != nil {
                map["AIImageResult"] = self.AIImageResult!
            }
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            if self.message != nil {
                map["Message"] = self.message!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.templateConfig != nil {
                map["TemplateConfig"] = self.templateConfig!
            }
            if self.templateId != nil {
                map["TemplateId"] = self.templateId!
            }
            if self.userData != nil {
                map["UserData"] = self.userData!
            }
            if self.videoId != nil {
                map["VideoId"] = self.videoId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AIImageResult"] as? String {
                self.AIImageResult = value
            }
            if let value = dict["Code"] as? String {
                self.code = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
            if let value = dict["Message"] as? String {
                self.message = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TemplateConfig"] as? String {
                self.templateConfig = value
            }
            if let value = dict["TemplateId"] as? String {
                self.templateId = value
            }
            if let value = dict["UserData"] as? String {
                self.userData = value
            }
            if let value = dict["VideoId"] as? String {
                self.videoId = value
            }
        }
    }
    public var AIImageJobList: [GetAIImageJobsResponseBody.AIImageJobList]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.AIImageJobList != nil {
            var tmp : [Any] = []
            for k in self.AIImageJobList! {
                tmp.append(k.toMap())
            }
            map["AIImageJobList"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AIImageJobList"] as? [Any?] {
            var tmp : [GetAIImageJobsResponseBody.AIImageJobList] = []
            for v in value {
                if v != nil {
                    var model = GetAIImageJobsResponseBody.AIImageJobList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.AIImageJobList = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetAIImageJobsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetAIImageJobsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetAIImageJobsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetAIMediaAuditJobRequest : Tea.TeaModel {
    public var jobId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
    }
}

public class GetAIMediaAuditJobResponseBody : Tea.TeaModel {
    public class MediaAuditJob : Tea.TeaModel {
        public class Data : Tea.TeaModel {
            public class AudioResult : Tea.TeaModel {
                public var label: String?

                public var scene: String?

                public var score: String?

                public var suggestion: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.label != nil {
                        map["Label"] = self.label!
                    }
                    if self.scene != nil {
                        map["Scene"] = self.scene!
                    }
                    if self.score != nil {
                        map["Score"] = self.score!
                    }
                    if self.suggestion != nil {
                        map["Suggestion"] = self.suggestion!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Label"] as? String {
                        self.label = value
                    }
                    if let value = dict["Scene"] as? String {
                        self.scene = value
                    }
                    if let value = dict["Score"] as? String {
                        self.score = value
                    }
                    if let value = dict["Suggestion"] as? String {
                        self.suggestion = value
                    }
                }
            }
            public class ImageResult : Tea.TeaModel {
                public class Result : Tea.TeaModel {
                    public var label: String?

                    public var scene: String?

                    public var score: String?

                    public var suggestion: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.label != nil {
                            map["Label"] = self.label!
                        }
                        if self.scene != nil {
                            map["Scene"] = self.scene!
                        }
                        if self.score != nil {
                            map["Score"] = self.score!
                        }
                        if self.suggestion != nil {
                            map["Suggestion"] = self.suggestion!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Label"] as? String {
                            self.label = value
                        }
                        if let value = dict["Scene"] as? String {
                            self.scene = value
                        }
                        if let value = dict["Score"] as? String {
                            self.score = value
                        }
                        if let value = dict["Suggestion"] as? String {
                            self.suggestion = value
                        }
                    }
                }
                public var label: String?

                public var result: [GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.ImageResult.Result]?

                public var suggestion: String?

                public var type: String?

                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.label != nil {
                        map["Label"] = self.label!
                    }
                    if self.result != nil {
                        var tmp : [Any] = []
                        for k in self.result! {
                            tmp.append(k.toMap())
                        }
                        map["Result"] = tmp
                    }
                    if self.suggestion != nil {
                        map["Suggestion"] = self.suggestion!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    if self.url != nil {
                        map["Url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Label"] as? String {
                        self.label = value
                    }
                    if let value = dict["Result"] as? [Any?] {
                        var tmp : [GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.ImageResult.Result] = []
                        for v in value {
                            if v != nil {
                                var model = GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.ImageResult.Result()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.result = tmp
                    }
                    if let value = dict["Suggestion"] as? String {
                        self.suggestion = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                    if let value = dict["Url"] as? String {
                        self.url = value
                    }
                }
            }
            public class TextResult : Tea.TeaModel {
                public var content: String?

                public var label: String?

                public var scene: String?

                public var score: String?

                public var suggestion: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.content != nil {
                        map["Content"] = self.content!
                    }
                    if self.label != nil {
                        map["Label"] = self.label!
                    }
                    if self.scene != nil {
                        map["Scene"] = self.scene!
                    }
                    if self.score != nil {
                        map["Score"] = self.score!
                    }
                    if self.suggestion != nil {
                        map["Suggestion"] = self.suggestion!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Content"] as? String {
                        self.content = value
                    }
                    if let value = dict["Label"] as? String {
                        self.label = value
                    }
                    if let value = dict["Scene"] as? String {
                        self.scene = value
                    }
                    if let value = dict["Score"] as? String {
                        self.score = value
                    }
                    if let value = dict["Suggestion"] as? String {
                        self.suggestion = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public class VideoResult : Tea.TeaModel {
                public class AdResult : Tea.TeaModel {
                    public class CounterList : Tea.TeaModel {
                        public var count: Int32?

                        public var label: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.count != nil {
                                map["Count"] = self.count!
                            }
                            if self.label != nil {
                                map["Label"] = self.label!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Count"] as? Int32 {
                                self.count = value
                            }
                            if let value = dict["Label"] as? String {
                                self.label = value
                            }
                        }
                    }
                    public class TopList : Tea.TeaModel {
                        public var label: String?

                        public var score: String?

                        public var timestamp: String?

                        public var url: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.label != nil {
                                map["Label"] = self.label!
                            }
                            if self.score != nil {
                                map["Score"] = self.score!
                            }
                            if self.timestamp != nil {
                                map["Timestamp"] = self.timestamp!
                            }
                            if self.url != nil {
                                map["Url"] = self.url!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Label"] as? String {
                                self.label = value
                            }
                            if let value = dict["Score"] as? String {
                                self.score = value
                            }
                            if let value = dict["Timestamp"] as? String {
                                self.timestamp = value
                            }
                            if let value = dict["Url"] as? String {
                                self.url = value
                            }
                        }
                    }
                    public var averageScore: String?

                    public var counterList: [GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.AdResult.CounterList]?

                    public var label: String?

                    public var maxScore: String?

                    public var suggestion: String?

                    public var topList: [GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.AdResult.TopList]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.averageScore != nil {
                            map["AverageScore"] = self.averageScore!
                        }
                        if self.counterList != nil {
                            var tmp : [Any] = []
                            for k in self.counterList! {
                                tmp.append(k.toMap())
                            }
                            map["CounterList"] = tmp
                        }
                        if self.label != nil {
                            map["Label"] = self.label!
                        }
                        if self.maxScore != nil {
                            map["MaxScore"] = self.maxScore!
                        }
                        if self.suggestion != nil {
                            map["Suggestion"] = self.suggestion!
                        }
                        if self.topList != nil {
                            var tmp : [Any] = []
                            for k in self.topList! {
                                tmp.append(k.toMap())
                            }
                            map["TopList"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["AverageScore"] as? String {
                            self.averageScore = value
                        }
                        if let value = dict["CounterList"] as? [Any?] {
                            var tmp : [GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.AdResult.CounterList] = []
                            for v in value {
                                if v != nil {
                                    var model = GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.AdResult.CounterList()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.counterList = tmp
                        }
                        if let value = dict["Label"] as? String {
                            self.label = value
                        }
                        if let value = dict["MaxScore"] as? String {
                            self.maxScore = value
                        }
                        if let value = dict["Suggestion"] as? String {
                            self.suggestion = value
                        }
                        if let value = dict["TopList"] as? [Any?] {
                            var tmp : [GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.AdResult.TopList] = []
                            for v in value {
                                if v != nil {
                                    var model = GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.AdResult.TopList()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.topList = tmp
                        }
                    }
                }
                public class LiveResult : Tea.TeaModel {
                    public class CounterList : Tea.TeaModel {
                        public var count: Int32?

                        public var label: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.count != nil {
                                map["Count"] = self.count!
                            }
                            if self.label != nil {
                                map["Label"] = self.label!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Count"] as? Int32 {
                                self.count = value
                            }
                            if let value = dict["Label"] as? String {
                                self.label = value
                            }
                        }
                    }
                    public class TopList : Tea.TeaModel {
                        public var label: String?

                        public var score: String?

                        public var timestamp: String?

                        public var url: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.label != nil {
                                map["Label"] = self.label!
                            }
                            if self.score != nil {
                                map["Score"] = self.score!
                            }
                            if self.timestamp != nil {
                                map["Timestamp"] = self.timestamp!
                            }
                            if self.url != nil {
                                map["Url"] = self.url!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Label"] as? String {
                                self.label = value
                            }
                            if let value = dict["Score"] as? String {
                                self.score = value
                            }
                            if let value = dict["Timestamp"] as? String {
                                self.timestamp = value
                            }
                            if let value = dict["Url"] as? String {
                                self.url = value
                            }
                        }
                    }
                    public var averageScore: String?

                    public var counterList: [GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.LiveResult.CounterList]?

                    public var label: String?

                    public var maxScore: String?

                    public var suggestion: String?

                    public var topList: [GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.LiveResult.TopList]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.averageScore != nil {
                            map["AverageScore"] = self.averageScore!
                        }
                        if self.counterList != nil {
                            var tmp : [Any] = []
                            for k in self.counterList! {
                                tmp.append(k.toMap())
                            }
                            map["CounterList"] = tmp
                        }
                        if self.label != nil {
                            map["Label"] = self.label!
                        }
                        if self.maxScore != nil {
                            map["MaxScore"] = self.maxScore!
                        }
                        if self.suggestion != nil {
                            map["Suggestion"] = self.suggestion!
                        }
                        if self.topList != nil {
                            var tmp : [Any] = []
                            for k in self.topList! {
                                tmp.append(k.toMap())
                            }
                            map["TopList"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["AverageScore"] as? String {
                            self.averageScore = value
                        }
                        if let value = dict["CounterList"] as? [Any?] {
                            var tmp : [GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.LiveResult.CounterList] = []
                            for v in value {
                                if v != nil {
                                    var model = GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.LiveResult.CounterList()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.counterList = tmp
                        }
                        if let value = dict["Label"] as? String {
                            self.label = value
                        }
                        if let value = dict["MaxScore"] as? String {
                            self.maxScore = value
                        }
                        if let value = dict["Suggestion"] as? String {
                            self.suggestion = value
                        }
                        if let value = dict["TopList"] as? [Any?] {
                            var tmp : [GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.LiveResult.TopList] = []
                            for v in value {
                                if v != nil {
                                    var model = GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.LiveResult.TopList()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.topList = tmp
                        }
                    }
                }
                public class LogoResult : Tea.TeaModel {
                    public class CounterList : Tea.TeaModel {
                        public var count: Int32?

                        public var label: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.count != nil {
                                map["Count"] = self.count!
                            }
                            if self.label != nil {
                                map["Label"] = self.label!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Count"] as? Int32 {
                                self.count = value
                            }
                            if let value = dict["Label"] as? String {
                                self.label = value
                            }
                        }
                    }
                    public class TopList : Tea.TeaModel {
                        public var label: String?

                        public var score: String?

                        public var timestamp: String?

                        public var url: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.label != nil {
                                map["Label"] = self.label!
                            }
                            if self.score != nil {
                                map["Score"] = self.score!
                            }
                            if self.timestamp != nil {
                                map["Timestamp"] = self.timestamp!
                            }
                            if self.url != nil {
                                map["Url"] = self.url!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Label"] as? String {
                                self.label = value
                            }
                            if let value = dict["Score"] as? String {
                                self.score = value
                            }
                            if let value = dict["Timestamp"] as? String {
                                self.timestamp = value
                            }
                            if let value = dict["Url"] as? String {
                                self.url = value
                            }
                        }
                    }
                    public var averageScore: String?

                    public var counterList: [GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.LogoResult.CounterList]?

                    public var label: String?

                    public var maxScore: String?

                    public var suggestion: String?

                    public var topList: [GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.LogoResult.TopList]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.averageScore != nil {
                            map["AverageScore"] = self.averageScore!
                        }
                        if self.counterList != nil {
                            var tmp : [Any] = []
                            for k in self.counterList! {
                                tmp.append(k.toMap())
                            }
                            map["CounterList"] = tmp
                        }
                        if self.label != nil {
                            map["Label"] = self.label!
                        }
                        if self.maxScore != nil {
                            map["MaxScore"] = self.maxScore!
                        }
                        if self.suggestion != nil {
                            map["Suggestion"] = self.suggestion!
                        }
                        if self.topList != nil {
                            var tmp : [Any] = []
                            for k in self.topList! {
                                tmp.append(k.toMap())
                            }
                            map["TopList"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["AverageScore"] as? String {
                            self.averageScore = value
                        }
                        if let value = dict["CounterList"] as? [Any?] {
                            var tmp : [GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.LogoResult.CounterList] = []
                            for v in value {
                                if v != nil {
                                    var model = GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.LogoResult.CounterList()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.counterList = tmp
                        }
                        if let value = dict["Label"] as? String {
                            self.label = value
                        }
                        if let value = dict["MaxScore"] as? String {
                            self.maxScore = value
                        }
                        if let value = dict["Suggestion"] as? String {
                            self.suggestion = value
                        }
                        if let value = dict["TopList"] as? [Any?] {
                            var tmp : [GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.LogoResult.TopList] = []
                            for v in value {
                                if v != nil {
                                    var model = GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.LogoResult.TopList()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.topList = tmp
                        }
                    }
                }
                public class PornResult : Tea.TeaModel {
                    public class CounterList : Tea.TeaModel {
                        public var count: Int32?

                        public var label: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.count != nil {
                                map["Count"] = self.count!
                            }
                            if self.label != nil {
                                map["Label"] = self.label!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Count"] as? Int32 {
                                self.count = value
                            }
                            if let value = dict["Label"] as? String {
                                self.label = value
                            }
                        }
                    }
                    public class TopList : Tea.TeaModel {
                        public var label: String?

                        public var score: String?

                        public var timestamp: String?

                        public var url: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.label != nil {
                                map["Label"] = self.label!
                            }
                            if self.score != nil {
                                map["Score"] = self.score!
                            }
                            if self.timestamp != nil {
                                map["Timestamp"] = self.timestamp!
                            }
                            if self.url != nil {
                                map["Url"] = self.url!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Label"] as? String {
                                self.label = value
                            }
                            if let value = dict["Score"] as? String {
                                self.score = value
                            }
                            if let value = dict["Timestamp"] as? String {
                                self.timestamp = value
                            }
                            if let value = dict["Url"] as? String {
                                self.url = value
                            }
                        }
                    }
                    public var averageScore: String?

                    public var counterList: [GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.PornResult.CounterList]?

                    public var label: String?

                    public var maxScore: String?

                    public var suggestion: String?

                    public var topList: [GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.PornResult.TopList]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.averageScore != nil {
                            map["AverageScore"] = self.averageScore!
                        }
                        if self.counterList != nil {
                            var tmp : [Any] = []
                            for k in self.counterList! {
                                tmp.append(k.toMap())
                            }
                            map["CounterList"] = tmp
                        }
                        if self.label != nil {
                            map["Label"] = self.label!
                        }
                        if self.maxScore != nil {
                            map["MaxScore"] = self.maxScore!
                        }
                        if self.suggestion != nil {
                            map["Suggestion"] = self.suggestion!
                        }
                        if self.topList != nil {
                            var tmp : [Any] = []
                            for k in self.topList! {
                                tmp.append(k.toMap())
                            }
                            map["TopList"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["AverageScore"] as? String {
                            self.averageScore = value
                        }
                        if let value = dict["CounterList"] as? [Any?] {
                            var tmp : [GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.PornResult.CounterList] = []
                            for v in value {
                                if v != nil {
                                    var model = GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.PornResult.CounterList()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.counterList = tmp
                        }
                        if let value = dict["Label"] as? String {
                            self.label = value
                        }
                        if let value = dict["MaxScore"] as? String {
                            self.maxScore = value
                        }
                        if let value = dict["Suggestion"] as? String {
                            self.suggestion = value
                        }
                        if let value = dict["TopList"] as? [Any?] {
                            var tmp : [GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.PornResult.TopList] = []
                            for v in value {
                                if v != nil {
                                    var model = GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.PornResult.TopList()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.topList = tmp
                        }
                    }
                }
                public class TerrorismResult : Tea.TeaModel {
                    public class CounterList : Tea.TeaModel {
                        public var count: Int32?

                        public var label: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.count != nil {
                                map["Count"] = self.count!
                            }
                            if self.label != nil {
                                map["Label"] = self.label!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Count"] as? Int32 {
                                self.count = value
                            }
                            if let value = dict["Label"] as? String {
                                self.label = value
                            }
                        }
                    }
                    public class TopList : Tea.TeaModel {
                        public var label: String?

                        public var score: String?

                        public var timestamp: String?

                        public var url: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.label != nil {
                                map["Label"] = self.label!
                            }
                            if self.score != nil {
                                map["Score"] = self.score!
                            }
                            if self.timestamp != nil {
                                map["Timestamp"] = self.timestamp!
                            }
                            if self.url != nil {
                                map["Url"] = self.url!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Label"] as? String {
                                self.label = value
                            }
                            if let value = dict["Score"] as? String {
                                self.score = value
                            }
                            if let value = dict["Timestamp"] as? String {
                                self.timestamp = value
                            }
                            if let value = dict["Url"] as? String {
                                self.url = value
                            }
                        }
                    }
                    public var averageScore: String?

                    public var counterList: [GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.TerrorismResult.CounterList]?

                    public var label: String?

                    public var maxScore: String?

                    public var suggestion: String?

                    public var topList: [GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.TerrorismResult.TopList]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.averageScore != nil {
                            map["AverageScore"] = self.averageScore!
                        }
                        if self.counterList != nil {
                            var tmp : [Any] = []
                            for k in self.counterList! {
                                tmp.append(k.toMap())
                            }
                            map["CounterList"] = tmp
                        }
                        if self.label != nil {
                            map["Label"] = self.label!
                        }
                        if self.maxScore != nil {
                            map["MaxScore"] = self.maxScore!
                        }
                        if self.suggestion != nil {
                            map["Suggestion"] = self.suggestion!
                        }
                        if self.topList != nil {
                            var tmp : [Any] = []
                            for k in self.topList! {
                                tmp.append(k.toMap())
                            }
                            map["TopList"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["AverageScore"] as? String {
                            self.averageScore = value
                        }
                        if let value = dict["CounterList"] as? [Any?] {
                            var tmp : [GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.TerrorismResult.CounterList] = []
                            for v in value {
                                if v != nil {
                                    var model = GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.TerrorismResult.CounterList()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.counterList = tmp
                        }
                        if let value = dict["Label"] as? String {
                            self.label = value
                        }
                        if let value = dict["MaxScore"] as? String {
                            self.maxScore = value
                        }
                        if let value = dict["Suggestion"] as? String {
                            self.suggestion = value
                        }
                        if let value = dict["TopList"] as? [Any?] {
                            var tmp : [GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.TerrorismResult.TopList] = []
                            for v in value {
                                if v != nil {
                                    var model = GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.TerrorismResult.TopList()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.topList = tmp
                        }
                    }
                }
                public var adResult: GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.AdResult?

                public var label: String?

                public var liveResult: GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.LiveResult?

                public var logoResult: GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.LogoResult?

                public var pornResult: GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.PornResult?

                public var suggestion: String?

                public var terrorismResult: GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.TerrorismResult?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.adResult?.validate()
                    try self.liveResult?.validate()
                    try self.logoResult?.validate()
                    try self.pornResult?.validate()
                    try self.terrorismResult?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.adResult != nil {
                        map["AdResult"] = self.adResult?.toMap()
                    }
                    if self.label != nil {
                        map["Label"] = self.label!
                    }
                    if self.liveResult != nil {
                        map["LiveResult"] = self.liveResult?.toMap()
                    }
                    if self.logoResult != nil {
                        map["LogoResult"] = self.logoResult?.toMap()
                    }
                    if self.pornResult != nil {
                        map["PornResult"] = self.pornResult?.toMap()
                    }
                    if self.suggestion != nil {
                        map["Suggestion"] = self.suggestion!
                    }
                    if self.terrorismResult != nil {
                        map["TerrorismResult"] = self.terrorismResult?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AdResult"] as? [String: Any?] {
                        var model = GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.AdResult()
                        model.fromMap(value)
                        self.adResult = model
                    }
                    if let value = dict["Label"] as? String {
                        self.label = value
                    }
                    if let value = dict["LiveResult"] as? [String: Any?] {
                        var model = GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.LiveResult()
                        model.fromMap(value)
                        self.liveResult = model
                    }
                    if let value = dict["LogoResult"] as? [String: Any?] {
                        var model = GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.LogoResult()
                        model.fromMap(value)
                        self.logoResult = model
                    }
                    if let value = dict["PornResult"] as? [String: Any?] {
                        var model = GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.PornResult()
                        model.fromMap(value)
                        self.pornResult = model
                    }
                    if let value = dict["Suggestion"] as? String {
                        self.suggestion = value
                    }
                    if let value = dict["TerrorismResult"] as? [String: Any?] {
                        var model = GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult.TerrorismResult()
                        model.fromMap(value)
                        self.terrorismResult = model
                    }
                }
            }
            public var abnormalModules: String?

            public var audioResult: [GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.AudioResult]?

            public var imageResult: [GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.ImageResult]?

            public var label: String?

            public var suggestion: String?

            public var textResult: [GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.TextResult]?

            public var videoResult: GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.videoResult?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.abnormalModules != nil {
                    map["AbnormalModules"] = self.abnormalModules!
                }
                if self.audioResult != nil {
                    var tmp : [Any] = []
                    for k in self.audioResult! {
                        tmp.append(k.toMap())
                    }
                    map["AudioResult"] = tmp
                }
                if self.imageResult != nil {
                    var tmp : [Any] = []
                    for k in self.imageResult! {
                        tmp.append(k.toMap())
                    }
                    map["ImageResult"] = tmp
                }
                if self.label != nil {
                    map["Label"] = self.label!
                }
                if self.suggestion != nil {
                    map["Suggestion"] = self.suggestion!
                }
                if self.textResult != nil {
                    var tmp : [Any] = []
                    for k in self.textResult! {
                        tmp.append(k.toMap())
                    }
                    map["TextResult"] = tmp
                }
                if self.videoResult != nil {
                    map["VideoResult"] = self.videoResult?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AbnormalModules"] as? String {
                    self.abnormalModules = value
                }
                if let value = dict["AudioResult"] as? [Any?] {
                    var tmp : [GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.AudioResult] = []
                    for v in value {
                        if v != nil {
                            var model = GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.AudioResult()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.audioResult = tmp
                }
                if let value = dict["ImageResult"] as? [Any?] {
                    var tmp : [GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.ImageResult] = []
                    for v in value {
                        if v != nil {
                            var model = GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.ImageResult()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.imageResult = tmp
                }
                if let value = dict["Label"] as? String {
                    self.label = value
                }
                if let value = dict["Suggestion"] as? String {
                    self.suggestion = value
                }
                if let value = dict["TextResult"] as? [Any?] {
                    var tmp : [GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.TextResult] = []
                    for v in value {
                        if v != nil {
                            var model = GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.TextResult()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.textResult = tmp
                }
                if let value = dict["VideoResult"] as? [String: Any?] {
                    var model = GetAIMediaAuditJobResponseBody.MediaAuditJob.Data.VideoResult()
                    model.fromMap(value)
                    self.videoResult = model
                }
            }
        }
        public var code: String?

        public var completeTime: String?

        public var creationTime: String?

        public var data: GetAIMediaAuditJobResponseBody.MediaAuditJob.Data?

        public var jobId: String?

        public var mediaId: String?

        public var message: String?

        public var status: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.data?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.completeTime != nil {
                map["CompleteTime"] = self.completeTime!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.data != nil {
                map["Data"] = self.data?.toMap()
            }
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            if self.mediaId != nil {
                map["MediaId"] = self.mediaId!
            }
            if self.message != nil {
                map["Message"] = self.message!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? String {
                self.code = value
            }
            if let value = dict["CompleteTime"] as? String {
                self.completeTime = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["Data"] as? [String: Any?] {
                var model = GetAIMediaAuditJobResponseBody.MediaAuditJob.Data()
                model.fromMap(value)
                self.data = model
            }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
            if let value = dict["MediaId"] as? String {
                self.mediaId = value
            }
            if let value = dict["Message"] as? String {
                self.message = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var mediaAuditJob: GetAIMediaAuditJobResponseBody.MediaAuditJob?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.mediaAuditJob?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mediaAuditJob != nil {
            map["MediaAuditJob"] = self.mediaAuditJob?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MediaAuditJob"] as? [String: Any?] {
            var model = GetAIMediaAuditJobResponseBody.MediaAuditJob()
            model.fromMap(value)
            self.mediaAuditJob = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetAIMediaAuditJobResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetAIMediaAuditJobResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetAIMediaAuditJobResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetAITemplateRequest : Tea.TeaModel {
    public var templateId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TemplateId"] as? String {
            self.templateId = value
        }
    }
}

public class GetAITemplateResponseBody : Tea.TeaModel {
    public class TemplateInfo : Tea.TeaModel {
        public var creationTime: String?

        public var isDefault: String?

        public var modifyTime: String?

        public var source: String?

        public var templateConfig: String?

        public var templateId: String?

        public var templateName: String?

        public var templateType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.isDefault != nil {
                map["IsDefault"] = self.isDefault!
            }
            if self.modifyTime != nil {
                map["ModifyTime"] = self.modifyTime!
            }
            if self.source != nil {
                map["Source"] = self.source!
            }
            if self.templateConfig != nil {
                map["TemplateConfig"] = self.templateConfig!
            }
            if self.templateId != nil {
                map["TemplateId"] = self.templateId!
            }
            if self.templateName != nil {
                map["TemplateName"] = self.templateName!
            }
            if self.templateType != nil {
                map["TemplateType"] = self.templateType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["IsDefault"] as? String {
                self.isDefault = value
            }
            if let value = dict["ModifyTime"] as? String {
                self.modifyTime = value
            }
            if let value = dict["Source"] as? String {
                self.source = value
            }
            if let value = dict["TemplateConfig"] as? String {
                self.templateConfig = value
            }
            if let value = dict["TemplateId"] as? String {
                self.templateId = value
            }
            if let value = dict["TemplateName"] as? String {
                self.templateName = value
            }
            if let value = dict["TemplateType"] as? String {
                self.templateType = value
            }
        }
    }
    public var requestId: String?

    public var templateInfo: GetAITemplateResponseBody.TemplateInfo?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.templateInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.templateInfo != nil {
            map["TemplateInfo"] = self.templateInfo?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TemplateInfo"] as? [String: Any?] {
            var model = GetAITemplateResponseBody.TemplateInfo()
            model.fromMap(value)
            self.templateInfo = model
        }
    }
}

public class GetAITemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetAITemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetAITemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetAIVideoTagResultRequest : Tea.TeaModel {
    public var mediaId: String?

    public var ownerAccount: String?

    public var ownerId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mediaId != nil {
            map["MediaId"] = self.mediaId!
        }
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MediaId"] as? String {
            self.mediaId = value
        }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
        if let value = dict["OwnerId"] as? String {
            self.ownerId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? String {
            self.resourceOwnerId = value
        }
    }
}

public class GetAIVideoTagResultResponseBody : Tea.TeaModel {
    public class VideoTagResult : Tea.TeaModel {
        public class Category : Tea.TeaModel {
            public var tag: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.tag != nil {
                    map["Tag"] = self.tag!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Tag"] as? String {
                    self.tag = value
                }
            }
        }
        public class Keyword : Tea.TeaModel {
            public var tag: String?

            public var times: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.tag != nil {
                    map["Tag"] = self.tag!
                }
                if self.times != nil {
                    map["Times"] = self.times!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Tag"] as? String {
                    self.tag = value
                }
                if let value = dict["Times"] as? [String] {
                    self.times = value
                }
            }
        }
        public class Location : Tea.TeaModel {
            public var tag: String?

            public var times: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.tag != nil {
                    map["Tag"] = self.tag!
                }
                if self.times != nil {
                    map["Times"] = self.times!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Tag"] as? String {
                    self.tag = value
                }
                if let value = dict["Times"] as? [String] {
                    self.times = value
                }
            }
        }
        public class Person : Tea.TeaModel {
            public var faceUrl: String?

            public var tag: String?

            public var times: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.faceUrl != nil {
                    map["FaceUrl"] = self.faceUrl!
                }
                if self.tag != nil {
                    map["Tag"] = self.tag!
                }
                if self.times != nil {
                    map["Times"] = self.times!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FaceUrl"] as? String {
                    self.faceUrl = value
                }
                if let value = dict["Tag"] as? String {
                    self.tag = value
                }
                if let value = dict["Times"] as? [String] {
                    self.times = value
                }
            }
        }
        public class Time : Tea.TeaModel {
            public var tag: String?

            public var times: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.tag != nil {
                    map["Tag"] = self.tag!
                }
                if self.times != nil {
                    map["Times"] = self.times!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Tag"] as? String {
                    self.tag = value
                }
                if let value = dict["Times"] as? [String] {
                    self.times = value
                }
            }
        }
        public var category: [GetAIVideoTagResultResponseBody.VideoTagResult.Category]?

        public var keyword: [GetAIVideoTagResultResponseBody.VideoTagResult.Keyword]?

        public var location: [GetAIVideoTagResultResponseBody.VideoTagResult.Location]?

        public var person: [GetAIVideoTagResultResponseBody.VideoTagResult.Person]?

        public var time: [GetAIVideoTagResultResponseBody.VideoTagResult.Time]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.category != nil {
                var tmp : [Any] = []
                for k in self.category! {
                    tmp.append(k.toMap())
                }
                map["Category"] = tmp
            }
            if self.keyword != nil {
                var tmp : [Any] = []
                for k in self.keyword! {
                    tmp.append(k.toMap())
                }
                map["Keyword"] = tmp
            }
            if self.location != nil {
                var tmp : [Any] = []
                for k in self.location! {
                    tmp.append(k.toMap())
                }
                map["Location"] = tmp
            }
            if self.person != nil {
                var tmp : [Any] = []
                for k in self.person! {
                    tmp.append(k.toMap())
                }
                map["Person"] = tmp
            }
            if self.time != nil {
                var tmp : [Any] = []
                for k in self.time! {
                    tmp.append(k.toMap())
                }
                map["Time"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Category"] as? [Any?] {
                var tmp : [GetAIVideoTagResultResponseBody.VideoTagResult.Category] = []
                for v in value {
                    if v != nil {
                        var model = GetAIVideoTagResultResponseBody.VideoTagResult.Category()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.category = tmp
            }
            if let value = dict["Keyword"] as? [Any?] {
                var tmp : [GetAIVideoTagResultResponseBody.VideoTagResult.Keyword] = []
                for v in value {
                    if v != nil {
                        var model = GetAIVideoTagResultResponseBody.VideoTagResult.Keyword()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.keyword = tmp
            }
            if let value = dict["Location"] as? [Any?] {
                var tmp : [GetAIVideoTagResultResponseBody.VideoTagResult.Location] = []
                for v in value {
                    if v != nil {
                        var model = GetAIVideoTagResultResponseBody.VideoTagResult.Location()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.location = tmp
            }
            if let value = dict["Person"] as? [Any?] {
                var tmp : [GetAIVideoTagResultResponseBody.VideoTagResult.Person] = []
                for v in value {
                    if v != nil {
                        var model = GetAIVideoTagResultResponseBody.VideoTagResult.Person()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.person = tmp
            }
            if let value = dict["Time"] as? [Any?] {
                var tmp : [GetAIVideoTagResultResponseBody.VideoTagResult.Time] = []
                for v in value {
                    if v != nil {
                        var model = GetAIVideoTagResultResponseBody.VideoTagResult.Time()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.time = tmp
            }
        }
    }
    public var requestId: String?

    public var videoTagResult: GetAIVideoTagResultResponseBody.VideoTagResult?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.videoTagResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.videoTagResult != nil {
            map["VideoTagResult"] = self.videoTagResult?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["VideoTagResult"] as? [String: Any?] {
            var model = GetAIVideoTagResultResponseBody.VideoTagResult()
            model.fromMap(value)
            self.videoTagResult = model
        }
    }
}

public class GetAIVideoTagResultResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetAIVideoTagResultResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetAIVideoTagResultResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetAppInfosRequest : Tea.TeaModel {
    public var appIds: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appIds != nil {
            map["AppIds"] = self.appIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppIds"] as? String {
            self.appIds = value
        }
    }
}

public class GetAppInfosResponseBody : Tea.TeaModel {
    public class AppInfoList : Tea.TeaModel {
        public var appId: String?

        public var appName: String?

        public var creationTime: String?

        public var description_: String?

        public var modificationTime: String?

        public var resourceGroupId: String?

        public var status: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.appName != nil {
                map["AppName"] = self.appName!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.modificationTime != nil {
                map["ModificationTime"] = self.modificationTime!
            }
            if self.resourceGroupId != nil {
                map["ResourceGroupId"] = self.resourceGroupId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppId"] as? String {
                self.appId = value
            }
            if let value = dict["AppName"] as? String {
                self.appName = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["ModificationTime"] as? String {
                self.modificationTime = value
            }
            if let value = dict["ResourceGroupId"] as? String {
                self.resourceGroupId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var appInfoList: [GetAppInfosResponseBody.AppInfoList]?

    public var code: String?

    public var nonExistAppIds: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appInfoList != nil {
            var tmp : [Any] = []
            for k in self.appInfoList! {
                tmp.append(k.toMap())
            }
            map["AppInfoList"] = tmp
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.nonExistAppIds != nil {
            map["NonExistAppIds"] = self.nonExistAppIds!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppInfoList"] as? [Any?] {
            var tmp : [GetAppInfosResponseBody.AppInfoList] = []
            for v in value {
                if v != nil {
                    var model = GetAppInfosResponseBody.AppInfoList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.appInfoList = tmp
        }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["NonExistAppIds"] as? [String] {
            self.nonExistAppIds = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetAppInfosResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetAppInfosResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetAppInfosResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetAttachedMediaInfoRequest : Tea.TeaModel {
    public var authTimeout: Int64?

    public var mediaIds: String?

    public var outputType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.authTimeout != nil {
            map["AuthTimeout"] = self.authTimeout!
        }
        if self.mediaIds != nil {
            map["MediaIds"] = self.mediaIds!
        }
        if self.outputType != nil {
            map["OutputType"] = self.outputType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuthTimeout"] as? Int64 {
            self.authTimeout = value
        }
        if let value = dict["MediaIds"] as? String {
            self.mediaIds = value
        }
        if let value = dict["OutputType"] as? String {
            self.outputType = value
        }
    }
}

public class GetAttachedMediaInfoResponseBody : Tea.TeaModel {
    public class AttachedMediaList : Tea.TeaModel {
        public class Categories : Tea.TeaModel {
            public var cateId: Int64?

            public var cateName: String?

            public var level: Int64?

            public var parentId: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cateId != nil {
                    map["CateId"] = self.cateId!
                }
                if self.cateName != nil {
                    map["CateName"] = self.cateName!
                }
                if self.level != nil {
                    map["Level"] = self.level!
                }
                if self.parentId != nil {
                    map["ParentId"] = self.parentId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CateId"] as? Int64 {
                    self.cateId = value
                }
                if let value = dict["CateName"] as? String {
                    self.cateName = value
                }
                if let value = dict["Level"] as? Int64 {
                    self.level = value
                }
                if let value = dict["ParentId"] as? Int64 {
                    self.parentId = value
                }
            }
        }
        public var appId: String?

        public var categories: [GetAttachedMediaInfoResponseBody.AttachedMediaList.Categories]?

        public var creationTime: String?

        public var description_: String?

        public var mediaId: String?

        public var modificationTime: String?

        public var status: String?

        public var storageLocation: String?

        public var tags: String?

        public var title: String?

        public var type: String?

        public var URL: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.categories != nil {
                var tmp : [Any] = []
                for k in self.categories! {
                    tmp.append(k.toMap())
                }
                map["Categories"] = tmp
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.mediaId != nil {
                map["MediaId"] = self.mediaId!
            }
            if self.modificationTime != nil {
                map["ModificationTime"] = self.modificationTime!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.storageLocation != nil {
                map["StorageLocation"] = self.storageLocation!
            }
            if self.tags != nil {
                map["Tags"] = self.tags!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.URL != nil {
                map["URL"] = self.URL!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppId"] as? String {
                self.appId = value
            }
            if let value = dict["Categories"] as? [Any?] {
                var tmp : [GetAttachedMediaInfoResponseBody.AttachedMediaList.Categories] = []
                for v in value {
                    if v != nil {
                        var model = GetAttachedMediaInfoResponseBody.AttachedMediaList.Categories()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.categories = tmp
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["MediaId"] as? String {
                self.mediaId = value
            }
            if let value = dict["ModificationTime"] as? String {
                self.modificationTime = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["StorageLocation"] as? String {
                self.storageLocation = value
            }
            if let value = dict["Tags"] as? String {
                self.tags = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["URL"] as? String {
                self.URL = value
            }
        }
    }
    public var attachedMediaList: [GetAttachedMediaInfoResponseBody.AttachedMediaList]?

    public var nonExistMediaIds: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.attachedMediaList != nil {
            var tmp : [Any] = []
            for k in self.attachedMediaList! {
                tmp.append(k.toMap())
            }
            map["AttachedMediaList"] = tmp
        }
        if self.nonExistMediaIds != nil {
            map["NonExistMediaIds"] = self.nonExistMediaIds!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AttachedMediaList"] as? [Any?] {
            var tmp : [GetAttachedMediaInfoResponseBody.AttachedMediaList] = []
            for v in value {
                if v != nil {
                    var model = GetAttachedMediaInfoResponseBody.AttachedMediaList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.attachedMediaList = tmp
        }
        if let value = dict["NonExistMediaIds"] as? [String] {
            self.nonExistMediaIds = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetAttachedMediaInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetAttachedMediaInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetAttachedMediaInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetAuditHistoryRequest : Tea.TeaModel {
    public var pageNo: Int64?

    public var pageSize: Int64?

    public var sortBy: String?

    public var videoId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.sortBy != nil {
            map["SortBy"] = self.sortBy!
        }
        if self.videoId != nil {
            map["VideoId"] = self.videoId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNo"] as? Int64 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["SortBy"] as? String {
            self.sortBy = value
        }
        if let value = dict["VideoId"] as? String {
            self.videoId = value
        }
    }
}

public class GetAuditHistoryResponseBody : Tea.TeaModel {
    public class Histories : Tea.TeaModel {
        public var auditor: String?

        public var comment: String?

        public var creationTime: String?

        public var reason: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.auditor != nil {
                map["Auditor"] = self.auditor!
            }
            if self.comment != nil {
                map["Comment"] = self.comment!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.reason != nil {
                map["Reason"] = self.reason!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Auditor"] as? String {
                self.auditor = value
            }
            if let value = dict["Comment"] as? String {
                self.comment = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["Reason"] as? String {
                self.reason = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var histories: [GetAuditHistoryResponseBody.Histories]?

    public var requestId: String?

    public var status: String?

    public var total: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.histories != nil {
            var tmp : [Any] = []
            for k in self.histories! {
                tmp.append(k.toMap())
            }
            map["Histories"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Histories"] as? [Any?] {
            var tmp : [GetAuditHistoryResponseBody.Histories] = []
            for v in value {
                if v != nil {
                    var model = GetAuditHistoryResponseBody.Histories()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.histories = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["Total"] as? Int64 {
            self.total = value
        }
    }
}

public class GetAuditHistoryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetAuditHistoryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetAuditHistoryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetCategoriesRequest : Tea.TeaModel {
    public var cateId: Int64?

    public var pageNo: Int64?

    public var pageSize: Int64?

    public var sortBy: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cateId != nil {
            map["CateId"] = self.cateId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.sortBy != nil {
            map["SortBy"] = self.sortBy!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CateId"] as? Int64 {
            self.cateId = value
        }
        if let value = dict["PageNo"] as? Int64 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int64 {
            self.pageSize = value
        }
        if let value = dict["SortBy"] as? String {
            self.sortBy = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class GetCategoriesResponseBody : Tea.TeaModel {
    public class Category : Tea.TeaModel {
        public var cateId: Int64?

        public var cateName: String?

        public var level: Int64?

        public var parentId: Int64?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cateId != nil {
                map["CateId"] = self.cateId!
            }
            if self.cateName != nil {
                map["CateName"] = self.cateName!
            }
            if self.level != nil {
                map["Level"] = self.level!
            }
            if self.parentId != nil {
                map["ParentId"] = self.parentId!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CateId"] as? Int64 {
                self.cateId = value
            }
            if let value = dict["CateName"] as? String {
                self.cateName = value
            }
            if let value = dict["Level"] as? Int64 {
                self.level = value
            }
            if let value = dict["ParentId"] as? Int64 {
                self.parentId = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public class SubCategories : Tea.TeaModel {
        public class Category : Tea.TeaModel {
            public var cateId: Int64?

            public var cateName: String?

            public var level: Int64?

            public var parentId: Int64?

            public var subTotal: Int64?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cateId != nil {
                    map["CateId"] = self.cateId!
                }
                if self.cateName != nil {
                    map["CateName"] = self.cateName!
                }
                if self.level != nil {
                    map["Level"] = self.level!
                }
                if self.parentId != nil {
                    map["ParentId"] = self.parentId!
                }
                if self.subTotal != nil {
                    map["SubTotal"] = self.subTotal!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CateId"] as? Int64 {
                    self.cateId = value
                }
                if let value = dict["CateName"] as? String {
                    self.cateName = value
                }
                if let value = dict["Level"] as? Int64 {
                    self.level = value
                }
                if let value = dict["ParentId"] as? Int64 {
                    self.parentId = value
                }
                if let value = dict["SubTotal"] as? Int64 {
                    self.subTotal = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var category: [GetCategoriesResponseBody.SubCategories.Category]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.category != nil {
                var tmp : [Any] = []
                for k in self.category! {
                    tmp.append(k.toMap())
                }
                map["Category"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Category"] as? [Any?] {
                var tmp : [GetCategoriesResponseBody.SubCategories.Category] = []
                for v in value {
                    if v != nil {
                        var model = GetCategoriesResponseBody.SubCategories.Category()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.category = tmp
            }
        }
    }
    public var category: GetCategoriesResponseBody.Category?

    public var requestId: String?

    public var subCategories: GetCategoriesResponseBody.SubCategories?

    public var subTotal: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.category?.validate()
        try self.subCategories?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.category != nil {
            map["Category"] = self.category?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.subCategories != nil {
            map["SubCategories"] = self.subCategories?.toMap()
        }
        if self.subTotal != nil {
            map["SubTotal"] = self.subTotal!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Category"] as? [String: Any?] {
            var model = GetCategoriesResponseBody.Category()
            model.fromMap(value)
            self.category = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SubCategories"] as? [String: Any?] {
            var model = GetCategoriesResponseBody.SubCategories()
            model.fromMap(value)
            self.subCategories = model
        }
        if let value = dict["SubTotal"] as? Int64 {
            self.subTotal = value
        }
    }
}

public class GetCategoriesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetCategoriesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetCategoriesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDailyPlayRegionStatisRequest : Tea.TeaModel {
    public var date: String?

    public var mediaRegion: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.date != nil {
            map["Date"] = self.date!
        }
        if self.mediaRegion != nil {
            map["MediaRegion"] = self.mediaRegion!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Date"] as? String {
            self.date = value
        }
        if let value = dict["MediaRegion"] as? String {
            self.mediaRegion = value
        }
    }
}

public class GetDailyPlayRegionStatisResponseBody : Tea.TeaModel {
    public class DailyPlayRegionStatisList : Tea.TeaModel {
        public var date: String?

        public var fileUrl: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.date != nil {
                map["Date"] = self.date!
            }
            if self.fileUrl != nil {
                map["FileUrl"] = self.fileUrl!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Date"] as? String {
                self.date = value
            }
            if let value = dict["FileUrl"] as? String {
                self.fileUrl = value
            }
        }
    }
    public var dailyPlayRegionStatisList: [GetDailyPlayRegionStatisResponseBody.DailyPlayRegionStatisList]?

    public var emptyDates: [String]?

    public var failDates: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dailyPlayRegionStatisList != nil {
            var tmp : [Any] = []
            for k in self.dailyPlayRegionStatisList! {
                tmp.append(k.toMap())
            }
            map["DailyPlayRegionStatisList"] = tmp
        }
        if self.emptyDates != nil {
            map["EmptyDates"] = self.emptyDates!
        }
        if self.failDates != nil {
            map["FailDates"] = self.failDates!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DailyPlayRegionStatisList"] as? [Any?] {
            var tmp : [GetDailyPlayRegionStatisResponseBody.DailyPlayRegionStatisList] = []
            for v in value {
                if v != nil {
                    var model = GetDailyPlayRegionStatisResponseBody.DailyPlayRegionStatisList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.dailyPlayRegionStatisList = tmp
        }
        if let value = dict["EmptyDates"] as? [String] {
            self.emptyDates = value
        }
        if let value = dict["FailDates"] as? [String] {
            self.failDates = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetDailyPlayRegionStatisResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDailyPlayRegionStatisResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDailyPlayRegionStatisResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDefaultAITemplateRequest : Tea.TeaModel {
    public var templateType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.templateType != nil {
            map["TemplateType"] = self.templateType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TemplateType"] as? String {
            self.templateType = value
        }
    }
}

public class GetDefaultAITemplateResponseBody : Tea.TeaModel {
    public class TemplateInfo : Tea.TeaModel {
        public var creationTime: String?

        public var isDefault: String?

        public var modifyTime: String?

        public var source: String?

        public var templateConfig: String?

        public var templateId: String?

        public var templateName: String?

        public var templateType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.isDefault != nil {
                map["IsDefault"] = self.isDefault!
            }
            if self.modifyTime != nil {
                map["ModifyTime"] = self.modifyTime!
            }
            if self.source != nil {
                map["Source"] = self.source!
            }
            if self.templateConfig != nil {
                map["TemplateConfig"] = self.templateConfig!
            }
            if self.templateId != nil {
                map["TemplateId"] = self.templateId!
            }
            if self.templateName != nil {
                map["TemplateName"] = self.templateName!
            }
            if self.templateType != nil {
                map["TemplateType"] = self.templateType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["IsDefault"] as? String {
                self.isDefault = value
            }
            if let value = dict["ModifyTime"] as? String {
                self.modifyTime = value
            }
            if let value = dict["Source"] as? String {
                self.source = value
            }
            if let value = dict["TemplateConfig"] as? String {
                self.templateConfig = value
            }
            if let value = dict["TemplateId"] as? String {
                self.templateId = value
            }
            if let value = dict["TemplateName"] as? String {
                self.templateName = value
            }
            if let value = dict["TemplateType"] as? String {
                self.templateType = value
            }
        }
    }
    public var requestId: String?

    public var templateInfo: GetDefaultAITemplateResponseBody.TemplateInfo?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.templateInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.templateInfo != nil {
            map["TemplateInfo"] = self.templateInfo?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TemplateInfo"] as? [String: Any?] {
            var model = GetDefaultAITemplateResponseBody.TemplateInfo()
            model.fromMap(value)
            self.templateInfo = model
        }
    }
}

public class GetDefaultAITemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDefaultAITemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDefaultAITemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDigitalWatermarkExtractResultRequest : Tea.TeaModel {
    public var extractType: String?

    public var jobId: String?

    public var mediaId: String?

    public var ownerAccount: String?

    public var ownerId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.extractType != nil {
            map["ExtractType"] = self.extractType!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.mediaId != nil {
            map["MediaId"] = self.mediaId!
        }
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ExtractType"] as? String {
            self.extractType = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["MediaId"] as? String {
            self.mediaId = value
        }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
        if let value = dict["OwnerId"] as? String {
            self.ownerId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? String {
            self.resourceOwnerId = value
        }
    }
}

public class GetDigitalWatermarkExtractResultResponseBody : Tea.TeaModel {
    public class AiExtractResultList : Tea.TeaModel {
        public var createTime: String?

        public var errorMessage: String?

        public var jobId: String?

        public var modifyTime: String?

        public var status: String?

        public var waterMarkText: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            if self.modifyTime != nil {
                map["ModifyTime"] = self.modifyTime!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.waterMarkText != nil {
                map["WaterMarkText"] = self.waterMarkText!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
            if let value = dict["ModifyTime"] as? String {
                self.modifyTime = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["WaterMarkText"] as? String {
                self.waterMarkText = value
            }
        }
    }
    public var aiExtractResultList: [GetDigitalWatermarkExtractResultResponseBody.AiExtractResultList]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aiExtractResultList != nil {
            var tmp : [Any] = []
            for k in self.aiExtractResultList! {
                tmp.append(k.toMap())
            }
            map["AiExtractResultList"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AiExtractResultList"] as? [Any?] {
            var tmp : [GetDigitalWatermarkExtractResultResponseBody.AiExtractResultList] = []
            for v in value {
                if v != nil {
                    var model = GetDigitalWatermarkExtractResultResponseBody.AiExtractResultList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.aiExtractResultList = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetDigitalWatermarkExtractResultResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDigitalWatermarkExtractResultResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDigitalWatermarkExtractResultResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetEditingProjectRequest : Tea.TeaModel {
    public var ownerAccount: String?

    public var ownerId: String?

    public var projectId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
        if let value = dict["OwnerId"] as? String {
            self.ownerId = value
        }
        if let value = dict["ProjectId"] as? String {
            self.projectId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? String {
            self.resourceOwnerId = value
        }
    }
}

public class GetEditingProjectResponseBody : Tea.TeaModel {
    public class Project : Tea.TeaModel {
        public var coverURL: String?

        public var creationTime: String?

        public var description_: String?

        public var modifiedTime: String?

        public var projectId: String?

        public var regionId: String?

        public var status: String?

        public var storageLocation: String?

        public var timeline: String?

        public var title: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.coverURL != nil {
                map["CoverURL"] = self.coverURL!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.modifiedTime != nil {
                map["ModifiedTime"] = self.modifiedTime!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.storageLocation != nil {
                map["StorageLocation"] = self.storageLocation!
            }
            if self.timeline != nil {
                map["Timeline"] = self.timeline!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CoverURL"] as? String {
                self.coverURL = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["ModifiedTime"] as? String {
                self.modifiedTime = value
            }
            if let value = dict["ProjectId"] as? String {
                self.projectId = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["StorageLocation"] as? String {
                self.storageLocation = value
            }
            if let value = dict["Timeline"] as? String {
                self.timeline = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
        }
    }
    public var project: GetEditingProjectResponseBody.Project?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.project?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.project != nil {
            map["Project"] = self.project?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Project"] as? [String: Any?] {
            var model = GetEditingProjectResponseBody.Project()
            model.fromMap(value)
            self.project = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetEditingProjectResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetEditingProjectResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetEditingProjectResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetEditingProjectMaterialsRequest : Tea.TeaModel {
    public var materialType: String?

    public var ownerAccount: String?

    public var ownerId: String?

    public var projectId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.materialType != nil {
            map["MaterialType"] = self.materialType!
        }
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaterialType"] as? String {
            self.materialType = value
        }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
        if let value = dict["OwnerId"] as? String {
            self.ownerId = value
        }
        if let value = dict["ProjectId"] as? String {
            self.projectId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? String {
            self.resourceOwnerId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class GetEditingProjectMaterialsResponseBody : Tea.TeaModel {
    public class MaterialList : Tea.TeaModel {
        public class Material : Tea.TeaModel {
            public class Snapshots : Tea.TeaModel {
                public var snapshot: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.snapshot != nil {
                        map["Snapshot"] = self.snapshot!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Snapshot"] as? [String] {
                        self.snapshot = value
                    }
                }
            }
            public class Sprites : Tea.TeaModel {
                public var sprite: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.sprite != nil {
                        map["Sprite"] = self.sprite!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Sprite"] as? [String] {
                        self.sprite = value
                    }
                }
            }
            public var cateId: Int32?

            public var cateName: String?

            public var coverURL: String?

            public var creationTime: String?

            public var description_: String?

            public var duration: Double?

            public var materialId: String?

            public var materialType: String?

            public var modifiedTime: String?

            public var size: Int64?

            public var snapshots: GetEditingProjectMaterialsResponseBody.MaterialList.Material.Snapshots?

            public var source: String?

            public var spriteConfig: String?

            public var sprites: GetEditingProjectMaterialsResponseBody.MaterialList.Material.Sprites?

            public var status: String?

            public var tags: String?

            public var title: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.snapshots?.validate()
                try self.sprites?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.cateId != nil {
                    map["CateId"] = self.cateId!
                }
                if self.cateName != nil {
                    map["CateName"] = self.cateName!
                }
                if self.coverURL != nil {
                    map["CoverURL"] = self.coverURL!
                }
                if self.creationTime != nil {
                    map["CreationTime"] = self.creationTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.duration != nil {
                    map["Duration"] = self.duration!
                }
                if self.materialId != nil {
                    map["MaterialId"] = self.materialId!
                }
                if self.materialType != nil {
                    map["MaterialType"] = self.materialType!
                }
                if self.modifiedTime != nil {
                    map["ModifiedTime"] = self.modifiedTime!
                }
                if self.size != nil {
                    map["Size"] = self.size!
                }
                if self.snapshots != nil {
                    map["Snapshots"] = self.snapshots?.toMap()
                }
                if self.source != nil {
                    map["Source"] = self.source!
                }
                if self.spriteConfig != nil {
                    map["SpriteConfig"] = self.spriteConfig!
                }
                if self.sprites != nil {
                    map["Sprites"] = self.sprites?.toMap()
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.tags != nil {
                    map["Tags"] = self.tags!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CateId"] as? Int32 {
                    self.cateId = value
                }
                if let value = dict["CateName"] as? String {
                    self.cateName = value
                }
                if let value = dict["CoverURL"] as? String {
                    self.coverURL = value
                }
                if let value = dict["CreationTime"] as? String {
                    self.creationTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Duration"] as? Double {
                    self.duration = value
                }
                if let value = dict["MaterialId"] as? String {
                    self.materialId = value
                }
                if let value = dict["MaterialType"] as? String {
                    self.materialType = value
                }
                if let value = dict["ModifiedTime"] as? String {
                    self.modifiedTime = value
                }
                if let value = dict["Size"] as? Int64 {
                    self.size = value
                }
                if let value = dict["Snapshots"] as? [String: Any?] {
                    var model = GetEditingProjectMaterialsResponseBody.MaterialList.Material.Snapshots()
                    model.fromMap(value)
                    self.snapshots = model
                }
                if let value = dict["Source"] as? String {
                    self.source = value
                }
                if let value = dict["SpriteConfig"] as? String {
                    self.spriteConfig = value
                }
                if let value = dict["Sprites"] as? [String: Any?] {
                    var model = GetEditingProjectMaterialsResponseBody.MaterialList.Material.Sprites()
                    model.fromMap(value)
                    self.sprites = model
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["Tags"] as? String {
                    self.tags = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
            }
        }
        public var material: [GetEditingProjectMaterialsResponseBody.MaterialList.Material]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.material != nil {
                var tmp : [Any] = []
                for k in self.material! {
                    tmp.append(k.toMap())
                }
                map["Material"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Material"] as? [Any?] {
                var tmp : [GetEditingProjectMaterialsResponseBody.MaterialList.Material] = []
                for v in value {
                    if v != nil {
                        var model = GetEditingProjectMaterialsResponseBody.MaterialList.Material()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.material = tmp
            }
        }
    }
    public var materialList: GetEditingProjectMaterialsResponseBody.MaterialList?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.materialList?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.materialList != nil {
            map["MaterialList"] = self.materialList?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaterialList"] as? [String: Any?] {
            var model = GetEditingProjectMaterialsResponseBody.MaterialList()
            model.fromMap(value)
            self.materialList = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetEditingProjectMaterialsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetEditingProjectMaterialsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetEditingProjectMaterialsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetImageInfoRequest : Tea.TeaModel {
    public var authTimeout: Int64?

    public var imageId: String?

    public var outputType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.authTimeout != nil {
            map["AuthTimeout"] = self.authTimeout!
        }
        if self.imageId != nil {
            map["ImageId"] = self.imageId!
        }
        if self.outputType != nil {
            map["OutputType"] = self.outputType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuthTimeout"] as? Int64 {
            self.authTimeout = value
        }
        if let value = dict["ImageId"] as? String {
            self.imageId = value
        }
        if let value = dict["OutputType"] as? String {
            self.outputType = value
        }
    }
}

public class GetImageInfoResponseBody : Tea.TeaModel {
    public class ImageInfo : Tea.TeaModel {
        public class Mezzanine : Tea.TeaModel {
            public var fileSize: String?

            public var fileURL: String?

            public var height: Int32?

            public var originalFileName: String?

            public var width: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fileSize != nil {
                    map["FileSize"] = self.fileSize!
                }
                if self.fileURL != nil {
                    map["FileURL"] = self.fileURL!
                }
                if self.height != nil {
                    map["Height"] = self.height!
                }
                if self.originalFileName != nil {
                    map["OriginalFileName"] = self.originalFileName!
                }
                if self.width != nil {
                    map["Width"] = self.width!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FileSize"] as? String {
                    self.fileSize = value
                }
                if let value = dict["FileURL"] as? String {
                    self.fileURL = value
                }
                if let value = dict["Height"] as? Int32 {
                    self.height = value
                }
                if let value = dict["OriginalFileName"] as? String {
                    self.originalFileName = value
                }
                if let value = dict["Width"] as? Int32 {
                    self.width = value
                }
            }
        }
        public var appId: String?

        public var cateId: Int64?

        public var cateName: String?

        public var creationTime: String?

        public var description_: String?

        public var imageId: String?

        public var imageType: String?

        public var mezzanine: GetImageInfoResponseBody.ImageInfo.Mezzanine?

        public var status: String?

        public var storageLocation: String?

        public var tags: String?

        public var title: String?

        public var URL: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.mezzanine?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.cateId != nil {
                map["CateId"] = self.cateId!
            }
            if self.cateName != nil {
                map["CateName"] = self.cateName!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.imageId != nil {
                map["ImageId"] = self.imageId!
            }
            if self.imageType != nil {
                map["ImageType"] = self.imageType!
            }
            if self.mezzanine != nil {
                map["Mezzanine"] = self.mezzanine?.toMap()
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.storageLocation != nil {
                map["StorageLocation"] = self.storageLocation!
            }
            if self.tags != nil {
                map["Tags"] = self.tags!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.URL != nil {
                map["URL"] = self.URL!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppId"] as? String {
                self.appId = value
            }
            if let value = dict["CateId"] as? Int64 {
                self.cateId = value
            }
            if let value = dict["CateName"] as? String {
                self.cateName = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["ImageId"] as? String {
                self.imageId = value
            }
            if let value = dict["ImageType"] as? String {
                self.imageType = value
            }
            if let value = dict["Mezzanine"] as? [String: Any?] {
                var model = GetImageInfoResponseBody.ImageInfo.Mezzanine()
                model.fromMap(value)
                self.mezzanine = model
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["StorageLocation"] as? String {
                self.storageLocation = value
            }
            if let value = dict["Tags"] as? String {
                self.tags = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["URL"] as? String {
                self.URL = value
            }
        }
    }
    public var imageInfo: GetImageInfoResponseBody.ImageInfo?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.imageInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.imageInfo != nil {
            map["ImageInfo"] = self.imageInfo?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ImageInfo"] as? [String: Any?] {
            var model = GetImageInfoResponseBody.ImageInfo()
            model.fromMap(value)
            self.imageInfo = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetImageInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetImageInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetImageInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetImageInfosRequest : Tea.TeaModel {
    public var authTimeout: Int64?

    public var imageIds: String?

    public var outputType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.authTimeout != nil {
            map["AuthTimeout"] = self.authTimeout!
        }
        if self.imageIds != nil {
            map["ImageIds"] = self.imageIds!
        }
        if self.outputType != nil {
            map["OutputType"] = self.outputType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuthTimeout"] as? Int64 {
            self.authTimeout = value
        }
        if let value = dict["ImageIds"] as? String {
            self.imageIds = value
        }
        if let value = dict["OutputType"] as? String {
            self.outputType = value
        }
    }
}

public class GetImageInfosResponseBody : Tea.TeaModel {
    public class ImageInfo : Tea.TeaModel {
        public class Mezzanine : Tea.TeaModel {
            public var fileSize: String?

            public var fileURL: String?

            public var height: Int32?

            public var originalFileName: String?

            public var width: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fileSize != nil {
                    map["FileSize"] = self.fileSize!
                }
                if self.fileURL != nil {
                    map["FileURL"] = self.fileURL!
                }
                if self.height != nil {
                    map["Height"] = self.height!
                }
                if self.originalFileName != nil {
                    map["OriginalFileName"] = self.originalFileName!
                }
                if self.width != nil {
                    map["Width"] = self.width!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FileSize"] as? String {
                    self.fileSize = value
                }
                if let value = dict["FileURL"] as? String {
                    self.fileURL = value
                }
                if let value = dict["Height"] as? Int32 {
                    self.height = value
                }
                if let value = dict["OriginalFileName"] as? String {
                    self.originalFileName = value
                }
                if let value = dict["Width"] as? Int32 {
                    self.width = value
                }
            }
        }
        public var appId: String?

        public var cateId: Int64?

        public var cateName: String?

        public var creationTime: String?

        public var description_: String?

        public var imageId: String?

        public var imageType: String?

        public var mezzanine: GetImageInfosResponseBody.ImageInfo.Mezzanine?

        public var status: String?

        public var storageLocation: String?

        public var tags: String?

        public var title: String?

        public var URL: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.mezzanine?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.cateId != nil {
                map["CateId"] = self.cateId!
            }
            if self.cateName != nil {
                map["CateName"] = self.cateName!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.imageId != nil {
                map["ImageId"] = self.imageId!
            }
            if self.imageType != nil {
                map["ImageType"] = self.imageType!
            }
            if self.mezzanine != nil {
                map["Mezzanine"] = self.mezzanine?.toMap()
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.storageLocation != nil {
                map["StorageLocation"] = self.storageLocation!
            }
            if self.tags != nil {
                map["Tags"] = self.tags!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.URL != nil {
                map["URL"] = self.URL!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppId"] as? String {
                self.appId = value
            }
            if let value = dict["CateId"] as? Int64 {
                self.cateId = value
            }
            if let value = dict["CateName"] as? String {
                self.cateName = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["ImageId"] as? String {
                self.imageId = value
            }
            if let value = dict["ImageType"] as? String {
                self.imageType = value
            }
            if let value = dict["Mezzanine"] as? [String: Any?] {
                var model = GetImageInfosResponseBody.ImageInfo.Mezzanine()
                model.fromMap(value)
                self.mezzanine = model
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["StorageLocation"] as? String {
                self.storageLocation = value
            }
            if let value = dict["Tags"] as? String {
                self.tags = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["URL"] as? String {
                self.URL = value
            }
        }
    }
    public var imageInfo: [GetImageInfosResponseBody.ImageInfo]?

    public var nonExistImageIds: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.imageInfo != nil {
            var tmp : [Any] = []
            for k in self.imageInfo! {
                tmp.append(k.toMap())
            }
            map["ImageInfo"] = tmp
        }
        if self.nonExistImageIds != nil {
            map["NonExistImageIds"] = self.nonExistImageIds!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ImageInfo"] as? [Any?] {
            var tmp : [GetImageInfosResponseBody.ImageInfo] = []
            for v in value {
                if v != nil {
                    var model = GetImageInfosResponseBody.ImageInfo()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.imageInfo = tmp
        }
        if let value = dict["NonExistImageIds"] as? [String] {
            self.nonExistImageIds = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetImageInfosResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetImageInfosResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetImageInfosResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetJobDetailRequest : Tea.TeaModel {
    public var jobId: String?

    public var jobType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.jobType != nil {
            map["JobType"] = self.jobType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["JobType"] as? String {
            self.jobType = value
        }
    }
}

public class GetJobDetailResponseBody : Tea.TeaModel {
    public class AIJobDetail : Tea.TeaModel {
        public var completeTime: String?

        public var createTime: String?

        public var jobId: String?

        public var jobType: String?

        public var mediaId: String?

        public var status: String?

        public var templateConfig: String?

        public var trigger: String?

        public var userId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.completeTime != nil {
                map["CompleteTime"] = self.completeTime!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            if self.jobType != nil {
                map["JobType"] = self.jobType!
            }
            if self.mediaId != nil {
                map["MediaId"] = self.mediaId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.templateConfig != nil {
                map["TemplateConfig"] = self.templateConfig!
            }
            if self.trigger != nil {
                map["Trigger"] = self.trigger!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CompleteTime"] as? String {
                self.completeTime = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
            if let value = dict["JobType"] as? String {
                self.jobType = value
            }
            if let value = dict["MediaId"] as? String {
                self.mediaId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TemplateConfig"] as? String {
                self.templateConfig = value
            }
            if let value = dict["Trigger"] as? String {
                self.trigger = value
            }
            if let value = dict["UserId"] as? Int64 {
                self.userId = value
            }
        }
    }
    public class SnapshotJobDetail : Tea.TeaModel {
        public var completeTime: String?

        public var createTime: String?

        public var jobId: String?

        public var normalConfig: String?

        public var spriteConfig: String?

        public var status: String?

        public var trigger: String?

        public var userId: Int64?

        public var videoId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.completeTime != nil {
                map["CompleteTime"] = self.completeTime!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            if self.normalConfig != nil {
                map["NormalConfig"] = self.normalConfig!
            }
            if self.spriteConfig != nil {
                map["SpriteConfig"] = self.spriteConfig!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.trigger != nil {
                map["Trigger"] = self.trigger!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            if self.videoId != nil {
                map["VideoId"] = self.videoId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CompleteTime"] as? String {
                self.completeTime = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
            if let value = dict["NormalConfig"] as? String {
                self.normalConfig = value
            }
            if let value = dict["SpriteConfig"] as? String {
                self.spriteConfig = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Trigger"] as? String {
                self.trigger = value
            }
            if let value = dict["UserId"] as? Int64 {
                self.userId = value
            }
            if let value = dict["VideoId"] as? String {
                self.videoId = value
            }
        }
    }
    public class TranscodeJobDetail : Tea.TeaModel {
        public var completeTime: String?

        public var createTime: String?

        public var definition: String?

        public var jobId: String?

        public var status: String?

        public var templateId: String?

        public var userId: Int64?

        public var videoId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.completeTime != nil {
                map["CompleteTime"] = self.completeTime!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.definition != nil {
                map["Definition"] = self.definition!
            }
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.templateId != nil {
                map["TemplateId"] = self.templateId!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            if self.videoId != nil {
                map["VideoId"] = self.videoId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CompleteTime"] as? String {
                self.completeTime = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["Definition"] as? String {
                self.definition = value
            }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TemplateId"] as? String {
                self.templateId = value
            }
            if let value = dict["UserId"] as? Int64 {
                self.userId = value
            }
            if let value = dict["VideoId"] as? String {
                self.videoId = value
            }
        }
    }
    public class WorkflowTaskDetail : Tea.TeaModel {
        public class Workflow : Tea.TeaModel {
            public var appId: String?

            public var createTime: String?

            public var modifiedTime: String?

            public var name: String?

            public var status: String?

            public var type: String?

            public var workflowId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appId != nil {
                    map["AppId"] = self.appId!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.modifiedTime != nil {
                    map["ModifiedTime"] = self.modifiedTime!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.workflowId != nil {
                    map["WorkflowId"] = self.workflowId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AppId"] as? String {
                    self.appId = value
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["ModifiedTime"] as? String {
                    self.modifiedTime = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["WorkflowId"] as? String {
                    self.workflowId = value
                }
            }
        }
        public var activityResults: String?

        public var createTime: String?

        public var finishTime: String?

        public var status: String?

        public var taskId: String?

        public var taskInput: String?

        public var userData: String?

        public var workflow: GetJobDetailResponseBody.WorkflowTaskDetail.Workflow?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.workflow?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.activityResults != nil {
                map["ActivityResults"] = self.activityResults!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.finishTime != nil {
                map["FinishTime"] = self.finishTime!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.taskInput != nil {
                map["TaskInput"] = self.taskInput!
            }
            if self.userData != nil {
                map["UserData"] = self.userData!
            }
            if self.workflow != nil {
                map["Workflow"] = self.workflow?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ActivityResults"] as? String {
                self.activityResults = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["FinishTime"] as? String {
                self.finishTime = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TaskInput"] as? String {
                self.taskInput = value
            }
            if let value = dict["UserData"] as? String {
                self.userData = value
            }
            if let value = dict["Workflow"] as? [String: Any?] {
                var model = GetJobDetailResponseBody.WorkflowTaskDetail.Workflow()
                model.fromMap(value)
                self.workflow = model
            }
        }
    }
    public var AIJobDetail: GetJobDetailResponseBody.AIJobDetail?

    public var jobType: String?

    public var requestId: String?

    public var snapshotJobDetail: GetJobDetailResponseBody.SnapshotJobDetail?

    public var transcodeJobDetail: GetJobDetailResponseBody.TranscodeJobDetail?

    public var workflowTaskDetail: GetJobDetailResponseBody.WorkflowTaskDetail?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.AIJobDetail?.validate()
        try self.snapshotJobDetail?.validate()
        try self.transcodeJobDetail?.validate()
        try self.workflowTaskDetail?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.AIJobDetail != nil {
            map["AIJobDetail"] = self.AIJobDetail?.toMap()
        }
        if self.jobType != nil {
            map["JobType"] = self.jobType!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.snapshotJobDetail != nil {
            map["SnapshotJobDetail"] = self.snapshotJobDetail?.toMap()
        }
        if self.transcodeJobDetail != nil {
            map["TranscodeJobDetail"] = self.transcodeJobDetail?.toMap()
        }
        if self.workflowTaskDetail != nil {
            map["WorkflowTaskDetail"] = self.workflowTaskDetail?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AIJobDetail"] as? [String: Any?] {
            var model = GetJobDetailResponseBody.AIJobDetail()
            model.fromMap(value)
            self.AIJobDetail = model
        }
        if let value = dict["JobType"] as? String {
            self.jobType = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SnapshotJobDetail"] as? [String: Any?] {
            var model = GetJobDetailResponseBody.SnapshotJobDetail()
            model.fromMap(value)
            self.snapshotJobDetail = model
        }
        if let value = dict["TranscodeJobDetail"] as? [String: Any?] {
            var model = GetJobDetailResponseBody.TranscodeJobDetail()
            model.fromMap(value)
            self.transcodeJobDetail = model
        }
        if let value = dict["WorkflowTaskDetail"] as? [String: Any?] {
            var model = GetJobDetailResponseBody.WorkflowTaskDetail()
            model.fromMap(value)
            self.workflowTaskDetail = model
        }
    }
}

public class GetJobDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetJobDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetJobDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetMediaAuditAudioResultDetailRequest : Tea.TeaModel {
    public var mediaId: String?

    public var ownerAccount: String?

    public var ownerId: String?

    public var pageNo: Int32?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mediaId != nil {
            map["MediaId"] = self.mediaId!
        }
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MediaId"] as? String {
            self.mediaId = value
        }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
        if let value = dict["OwnerId"] as? String {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? String {
            self.resourceOwnerId = value
        }
    }
}

public class GetMediaAuditAudioResultDetailResponseBody : Tea.TeaModel {
    public class MediaAuditAudioResultDetail : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var endTime: Int64?

            public var label: String?

            public var startTime: Int64?

            public var text: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endTime != nil {
                    map["EndTime"] = self.endTime!
                }
                if self.label != nil {
                    map["Label"] = self.label!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                if self.text != nil {
                    map["Text"] = self.text!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndTime"] as? Int64 {
                    self.endTime = value
                }
                if let value = dict["Label"] as? String {
                    self.label = value
                }
                if let value = dict["StartTime"] as? Int64 {
                    self.startTime = value
                }
                if let value = dict["Text"] as? String {
                    self.text = value
                }
            }
        }
        public var list: [GetMediaAuditAudioResultDetailResponseBody.MediaAuditAudioResultDetail.List]?

        public var pageTotal: Int32?

        public var total: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.pageTotal != nil {
                map["PageTotal"] = self.pageTotal!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [GetMediaAuditAudioResultDetailResponseBody.MediaAuditAudioResultDetail.List] = []
                for v in value {
                    if v != nil {
                        var model = GetMediaAuditAudioResultDetailResponseBody.MediaAuditAudioResultDetail.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["PageTotal"] as? Int32 {
                self.pageTotal = value
            }
            if let value = dict["Total"] as? Int32 {
                self.total = value
            }
        }
    }
    public var mediaAuditAudioResultDetail: GetMediaAuditAudioResultDetailResponseBody.MediaAuditAudioResultDetail?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.mediaAuditAudioResultDetail?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mediaAuditAudioResultDetail != nil {
            map["MediaAuditAudioResultDetail"] = self.mediaAuditAudioResultDetail?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MediaAuditAudioResultDetail"] as? [String: Any?] {
            var model = GetMediaAuditAudioResultDetailResponseBody.MediaAuditAudioResultDetail()
            model.fromMap(value)
            self.mediaAuditAudioResultDetail = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetMediaAuditAudioResultDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetMediaAuditAudioResultDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetMediaAuditAudioResultDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetMediaAuditResultRequest : Tea.TeaModel {
    public var mediaId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mediaId != nil {
            map["MediaId"] = self.mediaId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MediaId"] as? String {
            self.mediaId = value
        }
    }
}

public class GetMediaAuditResultResponseBody : Tea.TeaModel {
    public class MediaAuditResult : Tea.TeaModel {
        public class AudioResult : Tea.TeaModel {
            public var label: String?

            public var scene: String?

            public var score: String?

            public var suggestion: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.label != nil {
                    map["Label"] = self.label!
                }
                if self.scene != nil {
                    map["Scene"] = self.scene!
                }
                if self.score != nil {
                    map["Score"] = self.score!
                }
                if self.suggestion != nil {
                    map["Suggestion"] = self.suggestion!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Label"] as? String {
                    self.label = value
                }
                if let value = dict["Scene"] as? String {
                    self.scene = value
                }
                if let value = dict["Score"] as? String {
                    self.score = value
                }
                if let value = dict["Suggestion"] as? String {
                    self.suggestion = value
                }
            }
        }
        public class ImageResult : Tea.TeaModel {
            public class Result : Tea.TeaModel {
                public var label: String?

                public var scene: String?

                public var score: String?

                public var suggestion: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.label != nil {
                        map["Label"] = self.label!
                    }
                    if self.scene != nil {
                        map["Scene"] = self.scene!
                    }
                    if self.score != nil {
                        map["Score"] = self.score!
                    }
                    if self.suggestion != nil {
                        map["Suggestion"] = self.suggestion!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Label"] as? String {
                        self.label = value
                    }
                    if let value = dict["Scene"] as? String {
                        self.scene = value
                    }
                    if let value = dict["Score"] as? String {
                        self.score = value
                    }
                    if let value = dict["Suggestion"] as? String {
                        self.suggestion = value
                    }
                }
            }
            public var label: String?

            public var result: [GetMediaAuditResultResponseBody.MediaAuditResult.ImageResult.Result]?

            public var suggestion: String?

            public var type: String?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.label != nil {
                    map["Label"] = self.label!
                }
                if self.result != nil {
                    var tmp : [Any] = []
                    for k in self.result! {
                        tmp.append(k.toMap())
                    }
                    map["Result"] = tmp
                }
                if self.suggestion != nil {
                    map["Suggestion"] = self.suggestion!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Label"] as? String {
                    self.label = value
                }
                if let value = dict["Result"] as? [Any?] {
                    var tmp : [GetMediaAuditResultResponseBody.MediaAuditResult.ImageResult.Result] = []
                    for v in value {
                        if v != nil {
                            var model = GetMediaAuditResultResponseBody.MediaAuditResult.ImageResult.Result()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.result = tmp
                }
                if let value = dict["Suggestion"] as? String {
                    self.suggestion = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
            }
        }
        public class TextResult : Tea.TeaModel {
            public var content: String?

            public var label: String?

            public var scene: String?

            public var score: String?

            public var suggestion: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.content != nil {
                    map["Content"] = self.content!
                }
                if self.label != nil {
                    map["Label"] = self.label!
                }
                if self.scene != nil {
                    map["Scene"] = self.scene!
                }
                if self.score != nil {
                    map["Score"] = self.score!
                }
                if self.suggestion != nil {
                    map["Suggestion"] = self.suggestion!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Content"] as? String {
                    self.content = value
                }
                if let value = dict["Label"] as? String {
                    self.label = value
                }
                if let value = dict["Scene"] as? String {
                    self.scene = value
                }
                if let value = dict["Score"] as? String {
                    self.score = value
                }
                if let value = dict["Suggestion"] as? String {
                    self.suggestion = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public class VideoResult : Tea.TeaModel {
            public class AdResult : Tea.TeaModel {
                public class CounterList : Tea.TeaModel {
                    public var count: Int32?

                    public var label: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.count != nil {
                            map["Count"] = self.count!
                        }
                        if self.label != nil {
                            map["Label"] = self.label!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Count"] as? Int32 {
                            self.count = value
                        }
                        if let value = dict["Label"] as? String {
                            self.label = value
                        }
                    }
                }
                public class TopList : Tea.TeaModel {
                    public var label: String?

                    public var score: String?

                    public var timestamp: String?

                    public var url: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.label != nil {
                            map["Label"] = self.label!
                        }
                        if self.score != nil {
                            map["Score"] = self.score!
                        }
                        if self.timestamp != nil {
                            map["Timestamp"] = self.timestamp!
                        }
                        if self.url != nil {
                            map["Url"] = self.url!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Label"] as? String {
                            self.label = value
                        }
                        if let value = dict["Score"] as? String {
                            self.score = value
                        }
                        if let value = dict["Timestamp"] as? String {
                            self.timestamp = value
                        }
                        if let value = dict["Url"] as? String {
                            self.url = value
                        }
                    }
                }
                public var averageScore: String?

                public var counterList: [GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.AdResult.CounterList]?

                public var label: String?

                public var maxScore: String?

                public var suggestion: String?

                public var topList: [GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.AdResult.TopList]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.averageScore != nil {
                        map["AverageScore"] = self.averageScore!
                    }
                    if self.counterList != nil {
                        var tmp : [Any] = []
                        for k in self.counterList! {
                            tmp.append(k.toMap())
                        }
                        map["CounterList"] = tmp
                    }
                    if self.label != nil {
                        map["Label"] = self.label!
                    }
                    if self.maxScore != nil {
                        map["MaxScore"] = self.maxScore!
                    }
                    if self.suggestion != nil {
                        map["Suggestion"] = self.suggestion!
                    }
                    if self.topList != nil {
                        var tmp : [Any] = []
                        for k in self.topList! {
                            tmp.append(k.toMap())
                        }
                        map["TopList"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AverageScore"] as? String {
                        self.averageScore = value
                    }
                    if let value = dict["CounterList"] as? [Any?] {
                        var tmp : [GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.AdResult.CounterList] = []
                        for v in value {
                            if v != nil {
                                var model = GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.AdResult.CounterList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.counterList = tmp
                    }
                    if let value = dict["Label"] as? String {
                        self.label = value
                    }
                    if let value = dict["MaxScore"] as? String {
                        self.maxScore = value
                    }
                    if let value = dict["Suggestion"] as? String {
                        self.suggestion = value
                    }
                    if let value = dict["TopList"] as? [Any?] {
                        var tmp : [GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.AdResult.TopList] = []
                        for v in value {
                            if v != nil {
                                var model = GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.AdResult.TopList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.topList = tmp
                    }
                }
            }
            public class LiveResult : Tea.TeaModel {
                public class CounterList : Tea.TeaModel {
                    public var count: Int32?

                    public var label: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.count != nil {
                            map["Count"] = self.count!
                        }
                        if self.label != nil {
                            map["Label"] = self.label!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Count"] as? Int32 {
                            self.count = value
                        }
                        if let value = dict["Label"] as? String {
                            self.label = value
                        }
                    }
                }
                public class TopList : Tea.TeaModel {
                    public var label: String?

                    public var score: String?

                    public var timestamp: String?

                    public var url: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.label != nil {
                            map["Label"] = self.label!
                        }
                        if self.score != nil {
                            map["Score"] = self.score!
                        }
                        if self.timestamp != nil {
                            map["Timestamp"] = self.timestamp!
                        }
                        if self.url != nil {
                            map["Url"] = self.url!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Label"] as? String {
                            self.label = value
                        }
                        if let value = dict["Score"] as? String {
                            self.score = value
                        }
                        if let value = dict["Timestamp"] as? String {
                            self.timestamp = value
                        }
                        if let value = dict["Url"] as? String {
                            self.url = value
                        }
                    }
                }
                public var averageScore: String?

                public var counterList: [GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.LiveResult.CounterList]?

                public var label: String?

                public var maxScore: String?

                public var suggestion: String?

                public var topList: [GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.LiveResult.TopList]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.averageScore != nil {
                        map["AverageScore"] = self.averageScore!
                    }
                    if self.counterList != nil {
                        var tmp : [Any] = []
                        for k in self.counterList! {
                            tmp.append(k.toMap())
                        }
                        map["CounterList"] = tmp
                    }
                    if self.label != nil {
                        map["Label"] = self.label!
                    }
                    if self.maxScore != nil {
                        map["MaxScore"] = self.maxScore!
                    }
                    if self.suggestion != nil {
                        map["Suggestion"] = self.suggestion!
                    }
                    if self.topList != nil {
                        var tmp : [Any] = []
                        for k in self.topList! {
                            tmp.append(k.toMap())
                        }
                        map["TopList"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AverageScore"] as? String {
                        self.averageScore = value
                    }
                    if let value = dict["CounterList"] as? [Any?] {
                        var tmp : [GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.LiveResult.CounterList] = []
                        for v in value {
                            if v != nil {
                                var model = GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.LiveResult.CounterList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.counterList = tmp
                    }
                    if let value = dict["Label"] as? String {
                        self.label = value
                    }
                    if let value = dict["MaxScore"] as? String {
                        self.maxScore = value
                    }
                    if let value = dict["Suggestion"] as? String {
                        self.suggestion = value
                    }
                    if let value = dict["TopList"] as? [Any?] {
                        var tmp : [GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.LiveResult.TopList] = []
                        for v in value {
                            if v != nil {
                                var model = GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.LiveResult.TopList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.topList = tmp
                    }
                }
            }
            public class LogoResult : Tea.TeaModel {
                public class CounterList : Tea.TeaModel {
                    public var count: Int32?

                    public var label: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.count != nil {
                            map["Count"] = self.count!
                        }
                        if self.label != nil {
                            map["Label"] = self.label!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Count"] as? Int32 {
                            self.count = value
                        }
                        if let value = dict["Label"] as? String {
                            self.label = value
                        }
                    }
                }
                public class TopList : Tea.TeaModel {
                    public var label: String?

                    public var score: String?

                    public var timestamp: String?

                    public var url: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.label != nil {
                            map["Label"] = self.label!
                        }
                        if self.score != nil {
                            map["Score"] = self.score!
                        }
                        if self.timestamp != nil {
                            map["Timestamp"] = self.timestamp!
                        }
                        if self.url != nil {
                            map["Url"] = self.url!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Label"] as? String {
                            self.label = value
                        }
                        if let value = dict["Score"] as? String {
                            self.score = value
                        }
                        if let value = dict["Timestamp"] as? String {
                            self.timestamp = value
                        }
                        if let value = dict["Url"] as? String {
                            self.url = value
                        }
                    }
                }
                public var averageScore: String?

                public var counterList: [GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.LogoResult.CounterList]?

                public var label: String?

                public var maxScore: String?

                public var suggestion: String?

                public var topList: [GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.LogoResult.TopList]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.averageScore != nil {
                        map["AverageScore"] = self.averageScore!
                    }
                    if self.counterList != nil {
                        var tmp : [Any] = []
                        for k in self.counterList! {
                            tmp.append(k.toMap())
                        }
                        map["CounterList"] = tmp
                    }
                    if self.label != nil {
                        map["Label"] = self.label!
                    }
                    if self.maxScore != nil {
                        map["MaxScore"] = self.maxScore!
                    }
                    if self.suggestion != nil {
                        map["Suggestion"] = self.suggestion!
                    }
                    if self.topList != nil {
                        var tmp : [Any] = []
                        for k in self.topList! {
                            tmp.append(k.toMap())
                        }
                        map["TopList"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AverageScore"] as? String {
                        self.averageScore = value
                    }
                    if let value = dict["CounterList"] as? [Any?] {
                        var tmp : [GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.LogoResult.CounterList] = []
                        for v in value {
                            if v != nil {
                                var model = GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.LogoResult.CounterList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.counterList = tmp
                    }
                    if let value = dict["Label"] as? String {
                        self.label = value
                    }
                    if let value = dict["MaxScore"] as? String {
                        self.maxScore = value
                    }
                    if let value = dict["Suggestion"] as? String {
                        self.suggestion = value
                    }
                    if let value = dict["TopList"] as? [Any?] {
                        var tmp : [GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.LogoResult.TopList] = []
                        for v in value {
                            if v != nil {
                                var model = GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.LogoResult.TopList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.topList = tmp
                    }
                }
            }
            public class PornResult : Tea.TeaModel {
                public class CounterList : Tea.TeaModel {
                    public var count: Int32?

                    public var label: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.count != nil {
                            map["Count"] = self.count!
                        }
                        if self.label != nil {
                            map["Label"] = self.label!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Count"] as? Int32 {
                            self.count = value
                        }
                        if let value = dict["Label"] as? String {
                            self.label = value
                        }
                    }
                }
                public class TopList : Tea.TeaModel {
                    public var label: String?

                    public var score: String?

                    public var timestamp: String?

                    public var url: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.label != nil {
                            map["Label"] = self.label!
                        }
                        if self.score != nil {
                            map["Score"] = self.score!
                        }
                        if self.timestamp != nil {
                            map["Timestamp"] = self.timestamp!
                        }
                        if self.url != nil {
                            map["Url"] = self.url!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Label"] as? String {
                            self.label = value
                        }
                        if let value = dict["Score"] as? String {
                            self.score = value
                        }
                        if let value = dict["Timestamp"] as? String {
                            self.timestamp = value
                        }
                        if let value = dict["Url"] as? String {
                            self.url = value
                        }
                    }
                }
                public var averageScore: String?

                public var counterList: [GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.PornResult.CounterList]?

                public var label: String?

                public var maxScore: String?

                public var suggestion: String?

                public var topList: [GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.PornResult.TopList]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.averageScore != nil {
                        map["AverageScore"] = self.averageScore!
                    }
                    if self.counterList != nil {
                        var tmp : [Any] = []
                        for k in self.counterList! {
                            tmp.append(k.toMap())
                        }
                        map["CounterList"] = tmp
                    }
                    if self.label != nil {
                        map["Label"] = self.label!
                    }
                    if self.maxScore != nil {
                        map["MaxScore"] = self.maxScore!
                    }
                    if self.suggestion != nil {
                        map["Suggestion"] = self.suggestion!
                    }
                    if self.topList != nil {
                        var tmp : [Any] = []
                        for k in self.topList! {
                            tmp.append(k.toMap())
                        }
                        map["TopList"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AverageScore"] as? String {
                        self.averageScore = value
                    }
                    if let value = dict["CounterList"] as? [Any?] {
                        var tmp : [GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.PornResult.CounterList] = []
                        for v in value {
                            if v != nil {
                                var model = GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.PornResult.CounterList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.counterList = tmp
                    }
                    if let value = dict["Label"] as? String {
                        self.label = value
                    }
                    if let value = dict["MaxScore"] as? String {
                        self.maxScore = value
                    }
                    if let value = dict["Suggestion"] as? String {
                        self.suggestion = value
                    }
                    if let value = dict["TopList"] as? [Any?] {
                        var tmp : [GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.PornResult.TopList] = []
                        for v in value {
                            if v != nil {
                                var model = GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.PornResult.TopList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.topList = tmp
                    }
                }
            }
            public class TerrorismResult : Tea.TeaModel {
                public class CounterList : Tea.TeaModel {
                    public var count: Int32?

                    public var label: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.count != nil {
                            map["Count"] = self.count!
                        }
                        if self.label != nil {
                            map["Label"] = self.label!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Count"] as? Int32 {
                            self.count = value
                        }
                        if let value = dict["Label"] as? String {
                            self.label = value
                        }
                    }
                }
                public class TopList : Tea.TeaModel {
                    public var label: String?

                    public var score: String?

                    public var timestamp: String?

                    public var url: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.label != nil {
                            map["Label"] = self.label!
                        }
                        if self.score != nil {
                            map["Score"] = self.score!
                        }
                        if self.timestamp != nil {
                            map["Timestamp"] = self.timestamp!
                        }
                        if self.url != nil {
                            map["Url"] = self.url!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Label"] as? String {
                            self.label = value
                        }
                        if let value = dict["Score"] as? String {
                            self.score = value
                        }
                        if let value = dict["Timestamp"] as? String {
                            self.timestamp = value
                        }
                        if let value = dict["Url"] as? String {
                            self.url = value
                        }
                    }
                }
                public var averageScore: String?

                public var counterList: [GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.TerrorismResult.CounterList]?

                public var label: String?

                public var maxScore: String?

                public var suggestion: String?

                public var topList: [GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.TerrorismResult.TopList]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.averageScore != nil {
                        map["AverageScore"] = self.averageScore!
                    }
                    if self.counterList != nil {
                        var tmp : [Any] = []
                        for k in self.counterList! {
                            tmp.append(k.toMap())
                        }
                        map["CounterList"] = tmp
                    }
                    if self.label != nil {
                        map["Label"] = self.label!
                    }
                    if self.maxScore != nil {
                        map["MaxScore"] = self.maxScore!
                    }
                    if self.suggestion != nil {
                        map["Suggestion"] = self.suggestion!
                    }
                    if self.topList != nil {
                        var tmp : [Any] = []
                        for k in self.topList! {
                            tmp.append(k.toMap())
                        }
                        map["TopList"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AverageScore"] as? String {
                        self.averageScore = value
                    }
                    if let value = dict["CounterList"] as? [Any?] {
                        var tmp : [GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.TerrorismResult.CounterList] = []
                        for v in value {
                            if v != nil {
                                var model = GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.TerrorismResult.CounterList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.counterList = tmp
                    }
                    if let value = dict["Label"] as? String {
                        self.label = value
                    }
                    if let value = dict["MaxScore"] as? String {
                        self.maxScore = value
                    }
                    if let value = dict["Suggestion"] as? String {
                        self.suggestion = value
                    }
                    if let value = dict["TopList"] as? [Any?] {
                        var tmp : [GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.TerrorismResult.TopList] = []
                        for v in value {
                            if v != nil {
                                var model = GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.TerrorismResult.TopList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.topList = tmp
                    }
                }
            }
            public var adResult: GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.AdResult?

            public var label: String?

            public var liveResult: GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.LiveResult?

            public var logoResult: GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.LogoResult?

            public var pornResult: GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.PornResult?

            public var suggestion: String?

            public var terrorismResult: GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.TerrorismResult?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.adResult?.validate()
                try self.liveResult?.validate()
                try self.logoResult?.validate()
                try self.pornResult?.validate()
                try self.terrorismResult?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.adResult != nil {
                    map["AdResult"] = self.adResult?.toMap()
                }
                if self.label != nil {
                    map["Label"] = self.label!
                }
                if self.liveResult != nil {
                    map["LiveResult"] = self.liveResult?.toMap()
                }
                if self.logoResult != nil {
                    map["LogoResult"] = self.logoResult?.toMap()
                }
                if self.pornResult != nil {
                    map["PornResult"] = self.pornResult?.toMap()
                }
                if self.suggestion != nil {
                    map["Suggestion"] = self.suggestion!
                }
                if self.terrorismResult != nil {
                    map["TerrorismResult"] = self.terrorismResult?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AdResult"] as? [String: Any?] {
                    var model = GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.AdResult()
                    model.fromMap(value)
                    self.adResult = model
                }
                if let value = dict["Label"] as? String {
                    self.label = value
                }
                if let value = dict["LiveResult"] as? [String: Any?] {
                    var model = GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.LiveResult()
                    model.fromMap(value)
                    self.liveResult = model
                }
                if let value = dict["LogoResult"] as? [String: Any?] {
                    var model = GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.LogoResult()
                    model.fromMap(value)
                    self.logoResult = model
                }
                if let value = dict["PornResult"] as? [String: Any?] {
                    var model = GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.PornResult()
                    model.fromMap(value)
                    self.pornResult = model
                }
                if let value = dict["Suggestion"] as? String {
                    self.suggestion = value
                }
                if let value = dict["TerrorismResult"] as? [String: Any?] {
                    var model = GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult.TerrorismResult()
                    model.fromMap(value)
                    self.terrorismResult = model
                }
            }
        }
        public var abnormalModules: String?

        public var audioResult: [GetMediaAuditResultResponseBody.MediaAuditResult.AudioResult]?

        public var imageResult: [GetMediaAuditResultResponseBody.MediaAuditResult.ImageResult]?

        public var label: String?

        public var suggestion: String?

        public var textResult: [GetMediaAuditResultResponseBody.MediaAuditResult.TextResult]?

        public var videoResult: GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.videoResult?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.abnormalModules != nil {
                map["AbnormalModules"] = self.abnormalModules!
            }
            if self.audioResult != nil {
                var tmp : [Any] = []
                for k in self.audioResult! {
                    tmp.append(k.toMap())
                }
                map["AudioResult"] = tmp
            }
            if self.imageResult != nil {
                var tmp : [Any] = []
                for k in self.imageResult! {
                    tmp.append(k.toMap())
                }
                map["ImageResult"] = tmp
            }
            if self.label != nil {
                map["Label"] = self.label!
            }
            if self.suggestion != nil {
                map["Suggestion"] = self.suggestion!
            }
            if self.textResult != nil {
                var tmp : [Any] = []
                for k in self.textResult! {
                    tmp.append(k.toMap())
                }
                map["TextResult"] = tmp
            }
            if self.videoResult != nil {
                map["VideoResult"] = self.videoResult?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AbnormalModules"] as? String {
                self.abnormalModules = value
            }
            if let value = dict["AudioResult"] as? [Any?] {
                var tmp : [GetMediaAuditResultResponseBody.MediaAuditResult.AudioResult] = []
                for v in value {
                    if v != nil {
                        var model = GetMediaAuditResultResponseBody.MediaAuditResult.AudioResult()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.audioResult = tmp
            }
            if let value = dict["ImageResult"] as? [Any?] {
                var tmp : [GetMediaAuditResultResponseBody.MediaAuditResult.ImageResult] = []
                for v in value {
                    if v != nil {
                        var model = GetMediaAuditResultResponseBody.MediaAuditResult.ImageResult()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.imageResult = tmp
            }
            if let value = dict["Label"] as? String {
                self.label = value
            }
            if let value = dict["Suggestion"] as? String {
                self.suggestion = value
            }
            if let value = dict["TextResult"] as? [Any?] {
                var tmp : [GetMediaAuditResultResponseBody.MediaAuditResult.TextResult] = []
                for v in value {
                    if v != nil {
                        var model = GetMediaAuditResultResponseBody.MediaAuditResult.TextResult()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.textResult = tmp
            }
            if let value = dict["VideoResult"] as? [String: Any?] {
                var model = GetMediaAuditResultResponseBody.MediaAuditResult.VideoResult()
                model.fromMap(value)
                self.videoResult = model
            }
        }
    }
    public var mediaAuditResult: GetMediaAuditResultResponseBody.MediaAuditResult?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.mediaAuditResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mediaAuditResult != nil {
            map["MediaAuditResult"] = self.mediaAuditResult?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MediaAuditResult"] as? [String: Any?] {
            var model = GetMediaAuditResultResponseBody.MediaAuditResult()
            model.fromMap(value)
            self.mediaAuditResult = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetMediaAuditResultResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetMediaAuditResultResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetMediaAuditResultResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetMediaAuditResultDetailRequest : Tea.TeaModel {
    public var mediaId: String?

    public var pageNo: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mediaId != nil {
            map["MediaId"] = self.mediaId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MediaId"] as? String {
            self.mediaId = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
    }
}

public class GetMediaAuditResultDetailResponseBody : Tea.TeaModel {
    public class MediaAuditResultDetail : Tea.TeaModel {
        public class List : Tea.TeaModel {
            public var adLabel: String?

            public var adScore: String?

            public var liveLabel: String?

            public var liveScore: String?

            public var logoLabel: String?

            public var logoScore: String?

            public var pornLabel: String?

            public var pornScore: String?

            public var terrorismLabel: String?

            public var terrorismScore: String?

            public var timestamp: String?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.adLabel != nil {
                    map["AdLabel"] = self.adLabel!
                }
                if self.adScore != nil {
                    map["AdScore"] = self.adScore!
                }
                if self.liveLabel != nil {
                    map["LiveLabel"] = self.liveLabel!
                }
                if self.liveScore != nil {
                    map["LiveScore"] = self.liveScore!
                }
                if self.logoLabel != nil {
                    map["LogoLabel"] = self.logoLabel!
                }
                if self.logoScore != nil {
                    map["LogoScore"] = self.logoScore!
                }
                if self.pornLabel != nil {
                    map["PornLabel"] = self.pornLabel!
                }
                if self.pornScore != nil {
                    map["PornScore"] = self.pornScore!
                }
                if self.terrorismLabel != nil {
                    map["TerrorismLabel"] = self.terrorismLabel!
                }
                if self.terrorismScore != nil {
                    map["TerrorismScore"] = self.terrorismScore!
                }
                if self.timestamp != nil {
                    map["Timestamp"] = self.timestamp!
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AdLabel"] as? String {
                    self.adLabel = value
                }
                if let value = dict["AdScore"] as? String {
                    self.adScore = value
                }
                if let value = dict["LiveLabel"] as? String {
                    self.liveLabel = value
                }
                if let value = dict["LiveScore"] as? String {
                    self.liveScore = value
                }
                if let value = dict["LogoLabel"] as? String {
                    self.logoLabel = value
                }
                if let value = dict["LogoScore"] as? String {
                    self.logoScore = value
                }
                if let value = dict["PornLabel"] as? String {
                    self.pornLabel = value
                }
                if let value = dict["PornScore"] as? String {
                    self.pornScore = value
                }
                if let value = dict["TerrorismLabel"] as? String {
                    self.terrorismLabel = value
                }
                if let value = dict["TerrorismScore"] as? String {
                    self.terrorismScore = value
                }
                if let value = dict["Timestamp"] as? String {
                    self.timestamp = value
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
            }
        }
        public var list: [GetMediaAuditResultDetailResponseBody.MediaAuditResultDetail.List]?

        public var total: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.list != nil {
                var tmp : [Any] = []
                for k in self.list! {
                    tmp.append(k.toMap())
                }
                map["List"] = tmp
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["List"] as? [Any?] {
                var tmp : [GetMediaAuditResultDetailResponseBody.MediaAuditResultDetail.List] = []
                for v in value {
                    if v != nil {
                        var model = GetMediaAuditResultDetailResponseBody.MediaAuditResultDetail.List()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.list = tmp
            }
            if let value = dict["Total"] as? Int32 {
                self.total = value
            }
        }
    }
    public var mediaAuditResultDetail: GetMediaAuditResultDetailResponseBody.MediaAuditResultDetail?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.mediaAuditResultDetail?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mediaAuditResultDetail != nil {
            map["MediaAuditResultDetail"] = self.mediaAuditResultDetail?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MediaAuditResultDetail"] as? [String: Any?] {
            var model = GetMediaAuditResultDetailResponseBody.MediaAuditResultDetail()
            model.fromMap(value)
            self.mediaAuditResultDetail = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetMediaAuditResultDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetMediaAuditResultDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetMediaAuditResultDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetMediaAuditResultTimelineRequest : Tea.TeaModel {
    public var mediaId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mediaId != nil {
            map["MediaId"] = self.mediaId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MediaId"] as? String {
            self.mediaId = value
        }
    }
}

public class GetMediaAuditResultTimelineResponseBody : Tea.TeaModel {
    public class MediaAuditResultTimeline : Tea.TeaModel {
        public class Ad : Tea.TeaModel {
            public var label: String?

            public var score: String?

            public var timestamp: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.label != nil {
                    map["Label"] = self.label!
                }
                if self.score != nil {
                    map["Score"] = self.score!
                }
                if self.timestamp != nil {
                    map["Timestamp"] = self.timestamp!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Label"] as? String {
                    self.label = value
                }
                if let value = dict["Score"] as? String {
                    self.score = value
                }
                if let value = dict["Timestamp"] as? String {
                    self.timestamp = value
                }
            }
        }
        public class Live : Tea.TeaModel {
            public var label: String?

            public var score: String?

            public var timestamp: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.label != nil {
                    map["Label"] = self.label!
                }
                if self.score != nil {
                    map["Score"] = self.score!
                }
                if self.timestamp != nil {
                    map["Timestamp"] = self.timestamp!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Label"] as? String {
                    self.label = value
                }
                if let value = dict["Score"] as? String {
                    self.score = value
                }
                if let value = dict["Timestamp"] as? String {
                    self.timestamp = value
                }
            }
        }
        public class Logo : Tea.TeaModel {
            public var label: String?

            public var score: String?

            public var timestamp: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.label != nil {
                    map["Label"] = self.label!
                }
                if self.score != nil {
                    map["Score"] = self.score!
                }
                if self.timestamp != nil {
                    map["Timestamp"] = self.timestamp!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Label"] as? String {
                    self.label = value
                }
                if let value = dict["Score"] as? String {
                    self.score = value
                }
                if let value = dict["Timestamp"] as? String {
                    self.timestamp = value
                }
            }
        }
        public class Porn : Tea.TeaModel {
            public var label: String?

            public var score: String?

            public var timestamp: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.label != nil {
                    map["Label"] = self.label!
                }
                if self.score != nil {
                    map["Score"] = self.score!
                }
                if self.timestamp != nil {
                    map["Timestamp"] = self.timestamp!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Label"] as? String {
                    self.label = value
                }
                if let value = dict["Score"] as? String {
                    self.score = value
                }
                if let value = dict["Timestamp"] as? String {
                    self.timestamp = value
                }
            }
        }
        public class Terrorism : Tea.TeaModel {
            public var label: String?

            public var score: String?

            public var timestamp: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.label != nil {
                    map["Label"] = self.label!
                }
                if self.score != nil {
                    map["Score"] = self.score!
                }
                if self.timestamp != nil {
                    map["Timestamp"] = self.timestamp!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Label"] as? String {
                    self.label = value
                }
                if let value = dict["Score"] as? String {
                    self.score = value
                }
                if let value = dict["Timestamp"] as? String {
                    self.timestamp = value
                }
            }
        }
        public var ad: [GetMediaAuditResultTimelineResponseBody.MediaAuditResultTimeline.Ad]?

        public var live: [GetMediaAuditResultTimelineResponseBody.MediaAuditResultTimeline.Live]?

        public var logo: [GetMediaAuditResultTimelineResponseBody.MediaAuditResultTimeline.Logo]?

        public var porn: [GetMediaAuditResultTimelineResponseBody.MediaAuditResultTimeline.Porn]?

        public var terrorism: [GetMediaAuditResultTimelineResponseBody.MediaAuditResultTimeline.Terrorism]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ad != nil {
                var tmp : [Any] = []
                for k in self.ad! {
                    tmp.append(k.toMap())
                }
                map["Ad"] = tmp
            }
            if self.live != nil {
                var tmp : [Any] = []
                for k in self.live! {
                    tmp.append(k.toMap())
                }
                map["Live"] = tmp
            }
            if self.logo != nil {
                var tmp : [Any] = []
                for k in self.logo! {
                    tmp.append(k.toMap())
                }
                map["Logo"] = tmp
            }
            if self.porn != nil {
                var tmp : [Any] = []
                for k in self.porn! {
                    tmp.append(k.toMap())
                }
                map["Porn"] = tmp
            }
            if self.terrorism != nil {
                var tmp : [Any] = []
                for k in self.terrorism! {
                    tmp.append(k.toMap())
                }
                map["Terrorism"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Ad"] as? [Any?] {
                var tmp : [GetMediaAuditResultTimelineResponseBody.MediaAuditResultTimeline.Ad] = []
                for v in value {
                    if v != nil {
                        var model = GetMediaAuditResultTimelineResponseBody.MediaAuditResultTimeline.Ad()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.ad = tmp
            }
            if let value = dict["Live"] as? [Any?] {
                var tmp : [GetMediaAuditResultTimelineResponseBody.MediaAuditResultTimeline.Live] = []
                for v in value {
                    if v != nil {
                        var model = GetMediaAuditResultTimelineResponseBody.MediaAuditResultTimeline.Live()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.live = tmp
            }
            if let value = dict["Logo"] as? [Any?] {
                var tmp : [GetMediaAuditResultTimelineResponseBody.MediaAuditResultTimeline.Logo] = []
                for v in value {
                    if v != nil {
                        var model = GetMediaAuditResultTimelineResponseBody.MediaAuditResultTimeline.Logo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.logo = tmp
            }
            if let value = dict["Porn"] as? [Any?] {
                var tmp : [GetMediaAuditResultTimelineResponseBody.MediaAuditResultTimeline.Porn] = []
                for v in value {
                    if v != nil {
                        var model = GetMediaAuditResultTimelineResponseBody.MediaAuditResultTimeline.Porn()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.porn = tmp
            }
            if let value = dict["Terrorism"] as? [Any?] {
                var tmp : [GetMediaAuditResultTimelineResponseBody.MediaAuditResultTimeline.Terrorism] = []
                for v in value {
                    if v != nil {
                        var model = GetMediaAuditResultTimelineResponseBody.MediaAuditResultTimeline.Terrorism()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.terrorism = tmp
            }
        }
    }
    public var mediaAuditResultTimeline: GetMediaAuditResultTimelineResponseBody.MediaAuditResultTimeline?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.mediaAuditResultTimeline?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mediaAuditResultTimeline != nil {
            map["MediaAuditResultTimeline"] = self.mediaAuditResultTimeline?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MediaAuditResultTimeline"] as? [String: Any?] {
            var model = GetMediaAuditResultTimelineResponseBody.MediaAuditResultTimeline()
            model.fromMap(value)
            self.mediaAuditResultTimeline = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetMediaAuditResultTimelineResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetMediaAuditResultTimelineResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetMediaAuditResultTimelineResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetMediaDNAResultRequest : Tea.TeaModel {
    public var mediaId: String?

    public var ownerAccount: String?

    public var ownerId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mediaId != nil {
            map["MediaId"] = self.mediaId!
        }
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MediaId"] as? String {
            self.mediaId = value
        }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
        if let value = dict["OwnerId"] as? String {
            self.ownerId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? String {
            self.resourceOwnerId = value
        }
    }
}

public class GetMediaDNAResultResponseBody : Tea.TeaModel {
    public class DNAResult : Tea.TeaModel {
        public class VideoDNA : Tea.TeaModel {
            public class Detail : Tea.TeaModel {
                public class Duplication : Tea.TeaModel {
                    public var duration: String?

                    public var start: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.duration != nil {
                            map["Duration"] = self.duration!
                        }
                        if self.start != nil {
                            map["Start"] = self.start!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Duration"] as? String {
                            self.duration = value
                        }
                        if let value = dict["Start"] as? String {
                            self.start = value
                        }
                    }
                }
                public class Input : Tea.TeaModel {
                    public var duration: String?

                    public var start: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.duration != nil {
                            map["Duration"] = self.duration!
                        }
                        if self.start != nil {
                            map["Start"] = self.start!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Duration"] as? String {
                            self.duration = value
                        }
                        if let value = dict["Start"] as? String {
                            self.start = value
                        }
                    }
                }
                public var duplication: GetMediaDNAResultResponseBody.DNAResult.VideoDNA.Detail.Duplication?

                public var input: GetMediaDNAResultResponseBody.DNAResult.VideoDNA.Detail.Input?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.duplication?.validate()
                    try self.input?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.duplication != nil {
                        map["Duplication"] = self.duplication?.toMap()
                    }
                    if self.input != nil {
                        map["Input"] = self.input?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Duplication"] as? [String: Any?] {
                        var model = GetMediaDNAResultResponseBody.DNAResult.VideoDNA.Detail.Duplication()
                        model.fromMap(value)
                        self.duplication = model
                    }
                    if let value = dict["Input"] as? [String: Any?] {
                        var model = GetMediaDNAResultResponseBody.DNAResult.VideoDNA.Detail.Input()
                        model.fromMap(value)
                        self.input = model
                    }
                }
            }
            public var detail: [GetMediaDNAResultResponseBody.DNAResult.VideoDNA.Detail]?

            public var primaryKey: String?

            public var similarity: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.detail != nil {
                    var tmp : [Any] = []
                    for k in self.detail! {
                        tmp.append(k.toMap())
                    }
                    map["Detail"] = tmp
                }
                if self.primaryKey != nil {
                    map["PrimaryKey"] = self.primaryKey!
                }
                if self.similarity != nil {
                    map["Similarity"] = self.similarity!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Detail"] as? [Any?] {
                    var tmp : [GetMediaDNAResultResponseBody.DNAResult.VideoDNA.Detail] = []
                    for v in value {
                        if v != nil {
                            var model = GetMediaDNAResultResponseBody.DNAResult.VideoDNA.Detail()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.detail = tmp
                }
                if let value = dict["PrimaryKey"] as? String {
                    self.primaryKey = value
                }
                if let value = dict["Similarity"] as? String {
                    self.similarity = value
                }
            }
        }
        public var videoDNA: [GetMediaDNAResultResponseBody.DNAResult.VideoDNA]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.videoDNA != nil {
                var tmp : [Any] = []
                for k in self.videoDNA! {
                    tmp.append(k.toMap())
                }
                map["VideoDNA"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["VideoDNA"] as? [Any?] {
                var tmp : [GetMediaDNAResultResponseBody.DNAResult.VideoDNA] = []
                for v in value {
                    if v != nil {
                        var model = GetMediaDNAResultResponseBody.DNAResult.VideoDNA()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.videoDNA = tmp
            }
        }
    }
    public var DNAResult: GetMediaDNAResultResponseBody.DNAResult?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.DNAResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.DNAResult != nil {
            map["DNAResult"] = self.DNAResult?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DNAResult"] as? [String: Any?] {
            var model = GetMediaDNAResultResponseBody.DNAResult()
            model.fromMap(value)
            self.DNAResult = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetMediaDNAResultResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetMediaDNAResultResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetMediaDNAResultResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetMediaRefreshJobsRequest : Tea.TeaModel {
    public var mediaId: String?

    public var mediaRefreshJobId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mediaId != nil {
            map["MediaId"] = self.mediaId!
        }
        if self.mediaRefreshJobId != nil {
            map["MediaRefreshJobId"] = self.mediaRefreshJobId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MediaId"] as? String {
            self.mediaId = value
        }
        if let value = dict["MediaRefreshJobId"] as? String {
            self.mediaRefreshJobId = value
        }
    }
}

public class GetMediaRefreshJobsResponseBody : Tea.TeaModel {
    public class MediaRefreshJobs : Tea.TeaModel {
        public var errorCode: String?

        public var errorMessage: String?

        public var filterPolicy: String?

        public var gmtCreate: String?

        public var gmtModified: String?

        public var mediaId: String?

        public var mediaRefreshJobId: String?

        public var status: String?

        public var successPlayUrls: String?

        public var taskIds: String?

        public var taskType: String?

        public var userData: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.filterPolicy != nil {
                map["FilterPolicy"] = self.filterPolicy!
            }
            if self.gmtCreate != nil {
                map["GmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.mediaId != nil {
                map["MediaId"] = self.mediaId!
            }
            if self.mediaRefreshJobId != nil {
                map["MediaRefreshJobId"] = self.mediaRefreshJobId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.successPlayUrls != nil {
                map["SuccessPlayUrls"] = self.successPlayUrls!
            }
            if self.taskIds != nil {
                map["TaskIds"] = self.taskIds!
            }
            if self.taskType != nil {
                map["TaskType"] = self.taskType!
            }
            if self.userData != nil {
                map["UserData"] = self.userData!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["FilterPolicy"] as? String {
                self.filterPolicy = value
            }
            if let value = dict["GmtCreate"] as? String {
                self.gmtCreate = value
            }
            if let value = dict["GmtModified"] as? String {
                self.gmtModified = value
            }
            if let value = dict["MediaId"] as? String {
                self.mediaId = value
            }
            if let value = dict["MediaRefreshJobId"] as? String {
                self.mediaRefreshJobId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["SuccessPlayUrls"] as? String {
                self.successPlayUrls = value
            }
            if let value = dict["TaskIds"] as? String {
                self.taskIds = value
            }
            if let value = dict["TaskType"] as? String {
                self.taskType = value
            }
            if let value = dict["UserData"] as? String {
                self.userData = value
            }
        }
    }
    public var mediaRefreshJobs: [GetMediaRefreshJobsResponseBody.MediaRefreshJobs]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mediaRefreshJobs != nil {
            var tmp : [Any] = []
            for k in self.mediaRefreshJobs! {
                tmp.append(k.toMap())
            }
            map["MediaRefreshJobs"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MediaRefreshJobs"] as? [Any?] {
            var tmp : [GetMediaRefreshJobsResponseBody.MediaRefreshJobs] = []
            for v in value {
                if v != nil {
                    var model = GetMediaRefreshJobsResponseBody.MediaRefreshJobs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.mediaRefreshJobs = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetMediaRefreshJobsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetMediaRefreshJobsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetMediaRefreshJobsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetMessageCallbackRequest : Tea.TeaModel {
    public var appId: String?

    public var ownerAccount: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
    }
}

public class GetMessageCallbackResponseBody : Tea.TeaModel {
    public class MessageCallback : Tea.TeaModel {
        public var appId: String?

        public var authKey: String?

        public var authSwitch: String?

        public var callbackType: String?

        public var callbackURL: String?

        public var eventTypeList: String?

        public var mnsEndpoint: String?

        public var mnsQueueName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.authKey != nil {
                map["AuthKey"] = self.authKey!
            }
            if self.authSwitch != nil {
                map["AuthSwitch"] = self.authSwitch!
            }
            if self.callbackType != nil {
                map["CallbackType"] = self.callbackType!
            }
            if self.callbackURL != nil {
                map["CallbackURL"] = self.callbackURL!
            }
            if self.eventTypeList != nil {
                map["EventTypeList"] = self.eventTypeList!
            }
            if self.mnsEndpoint != nil {
                map["MnsEndpoint"] = self.mnsEndpoint!
            }
            if self.mnsQueueName != nil {
                map["MnsQueueName"] = self.mnsQueueName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppId"] as? String {
                self.appId = value
            }
            if let value = dict["AuthKey"] as? String {
                self.authKey = value
            }
            if let value = dict["AuthSwitch"] as? String {
                self.authSwitch = value
            }
            if let value = dict["CallbackType"] as? String {
                self.callbackType = value
            }
            if let value = dict["CallbackURL"] as? String {
                self.callbackURL = value
            }
            if let value = dict["EventTypeList"] as? String {
                self.eventTypeList = value
            }
            if let value = dict["MnsEndpoint"] as? String {
                self.mnsEndpoint = value
            }
            if let value = dict["MnsQueueName"] as? String {
                self.mnsQueueName = value
            }
        }
    }
    public var messageCallback: GetMessageCallbackResponseBody.MessageCallback?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.messageCallback?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.messageCallback != nil {
            map["MessageCallback"] = self.messageCallback?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MessageCallback"] as? [String: Any?] {
            var model = GetMessageCallbackResponseBody.MessageCallback()
            model.fromMap(value)
            self.messageCallback = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetMessageCallbackResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetMessageCallbackResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetMessageCallbackResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetMezzanineInfoRequest : Tea.TeaModel {
    public var additionType: String?

    public var authTimeout: Int64?

    public var outputType: String?

    public var videoId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.additionType != nil {
            map["AdditionType"] = self.additionType!
        }
        if self.authTimeout != nil {
            map["AuthTimeout"] = self.authTimeout!
        }
        if self.outputType != nil {
            map["OutputType"] = self.outputType!
        }
        if self.videoId != nil {
            map["VideoId"] = self.videoId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdditionType"] as? String {
            self.additionType = value
        }
        if let value = dict["AuthTimeout"] as? Int64 {
            self.authTimeout = value
        }
        if let value = dict["OutputType"] as? String {
            self.outputType = value
        }
        if let value = dict["VideoId"] as? String {
            self.videoId = value
        }
    }
}

public class GetMezzanineInfoResponseBody : Tea.TeaModel {
    public class Mezzanine : Tea.TeaModel {
        public class AudioStreamList : Tea.TeaModel {
            public var bitrate: String?

            public var channelLayout: String?

            public var channels: String?

            public var codecLongName: String?

            public var codecName: String?

            public var codecTag: String?

            public var codecTagString: String?

            public var codecTimeBase: String?

            public var duration: String?

            public var index: String?

            public var lang: String?

            public var numFrames: String?

            public var sampleFmt: String?

            public var sampleRate: String?

            public var startTime: String?

            public var timebase: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bitrate != nil {
                    map["Bitrate"] = self.bitrate!
                }
                if self.channelLayout != nil {
                    map["ChannelLayout"] = self.channelLayout!
                }
                if self.channels != nil {
                    map["Channels"] = self.channels!
                }
                if self.codecLongName != nil {
                    map["CodecLongName"] = self.codecLongName!
                }
                if self.codecName != nil {
                    map["CodecName"] = self.codecName!
                }
                if self.codecTag != nil {
                    map["CodecTag"] = self.codecTag!
                }
                if self.codecTagString != nil {
                    map["CodecTagString"] = self.codecTagString!
                }
                if self.codecTimeBase != nil {
                    map["CodecTimeBase"] = self.codecTimeBase!
                }
                if self.duration != nil {
                    map["Duration"] = self.duration!
                }
                if self.index != nil {
                    map["Index"] = self.index!
                }
                if self.lang != nil {
                    map["Lang"] = self.lang!
                }
                if self.numFrames != nil {
                    map["NumFrames"] = self.numFrames!
                }
                if self.sampleFmt != nil {
                    map["SampleFmt"] = self.sampleFmt!
                }
                if self.sampleRate != nil {
                    map["SampleRate"] = self.sampleRate!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                if self.timebase != nil {
                    map["Timebase"] = self.timebase!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Bitrate"] as? String {
                    self.bitrate = value
                }
                if let value = dict["ChannelLayout"] as? String {
                    self.channelLayout = value
                }
                if let value = dict["Channels"] as? String {
                    self.channels = value
                }
                if let value = dict["CodecLongName"] as? String {
                    self.codecLongName = value
                }
                if let value = dict["CodecName"] as? String {
                    self.codecName = value
                }
                if let value = dict["CodecTag"] as? String {
                    self.codecTag = value
                }
                if let value = dict["CodecTagString"] as? String {
                    self.codecTagString = value
                }
                if let value = dict["CodecTimeBase"] as? String {
                    self.codecTimeBase = value
                }
                if let value = dict["Duration"] as? String {
                    self.duration = value
                }
                if let value = dict["Index"] as? String {
                    self.index = value
                }
                if let value = dict["Lang"] as? String {
                    self.lang = value
                }
                if let value = dict["NumFrames"] as? String {
                    self.numFrames = value
                }
                if let value = dict["SampleFmt"] as? String {
                    self.sampleFmt = value
                }
                if let value = dict["SampleRate"] as? String {
                    self.sampleRate = value
                }
                if let value = dict["StartTime"] as? String {
                    self.startTime = value
                }
                if let value = dict["Timebase"] as? String {
                    self.timebase = value
                }
            }
        }
        public class VideoStreamList : Tea.TeaModel {
            public var avgFPS: String?

            public var bitrate: String?

            public var codecLongName: String?

            public var codecName: String?

            public var codecTag: String?

            public var codecTagString: String?

            public var codecTimeBase: String?

            public var dar: String?

            public var duration: String?

            public var fps: String?

            public var HDRType: String?

            public var hasBFrames: String?

            public var height: String?

            public var index: String?

            public var lang: String?

            public var level: String?

            public var numFrames: String?

            public var pixFmt: String?

            public var profile: String?

            public var rotate: String?

            public var sar: String?

            public var startTime: String?

            public var timebase: String?

            public var width: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.avgFPS != nil {
                    map["AvgFPS"] = self.avgFPS!
                }
                if self.bitrate != nil {
                    map["Bitrate"] = self.bitrate!
                }
                if self.codecLongName != nil {
                    map["CodecLongName"] = self.codecLongName!
                }
                if self.codecName != nil {
                    map["CodecName"] = self.codecName!
                }
                if self.codecTag != nil {
                    map["CodecTag"] = self.codecTag!
                }
                if self.codecTagString != nil {
                    map["CodecTagString"] = self.codecTagString!
                }
                if self.codecTimeBase != nil {
                    map["CodecTimeBase"] = self.codecTimeBase!
                }
                if self.dar != nil {
                    map["Dar"] = self.dar!
                }
                if self.duration != nil {
                    map["Duration"] = self.duration!
                }
                if self.fps != nil {
                    map["Fps"] = self.fps!
                }
                if self.HDRType != nil {
                    map["HDRType"] = self.HDRType!
                }
                if self.hasBFrames != nil {
                    map["HasBFrames"] = self.hasBFrames!
                }
                if self.height != nil {
                    map["Height"] = self.height!
                }
                if self.index != nil {
                    map["Index"] = self.index!
                }
                if self.lang != nil {
                    map["Lang"] = self.lang!
                }
                if self.level != nil {
                    map["Level"] = self.level!
                }
                if self.numFrames != nil {
                    map["NumFrames"] = self.numFrames!
                }
                if self.pixFmt != nil {
                    map["PixFmt"] = self.pixFmt!
                }
                if self.profile != nil {
                    map["Profile"] = self.profile!
                }
                if self.rotate != nil {
                    map["Rotate"] = self.rotate!
                }
                if self.sar != nil {
                    map["Sar"] = self.sar!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                if self.timebase != nil {
                    map["Timebase"] = self.timebase!
                }
                if self.width != nil {
                    map["Width"] = self.width!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AvgFPS"] as? String {
                    self.avgFPS = value
                }
                if let value = dict["Bitrate"] as? String {
                    self.bitrate = value
                }
                if let value = dict["CodecLongName"] as? String {
                    self.codecLongName = value
                }
                if let value = dict["CodecName"] as? String {
                    self.codecName = value
                }
                if let value = dict["CodecTag"] as? String {
                    self.codecTag = value
                }
                if let value = dict["CodecTagString"] as? String {
                    self.codecTagString = value
                }
                if let value = dict["CodecTimeBase"] as? String {
                    self.codecTimeBase = value
                }
                if let value = dict["Dar"] as? String {
                    self.dar = value
                }
                if let value = dict["Duration"] as? String {
                    self.duration = value
                }
                if let value = dict["Fps"] as? String {
                    self.fps = value
                }
                if let value = dict["HDRType"] as? String {
                    self.HDRType = value
                }
                if let value = dict["HasBFrames"] as? String {
                    self.hasBFrames = value
                }
                if let value = dict["Height"] as? String {
                    self.height = value
                }
                if let value = dict["Index"] as? String {
                    self.index = value
                }
                if let value = dict["Lang"] as? String {
                    self.lang = value
                }
                if let value = dict["Level"] as? String {
                    self.level = value
                }
                if let value = dict["NumFrames"] as? String {
                    self.numFrames = value
                }
                if let value = dict["PixFmt"] as? String {
                    self.pixFmt = value
                }
                if let value = dict["Profile"] as? String {
                    self.profile = value
                }
                if let value = dict["Rotate"] as? String {
                    self.rotate = value
                }
                if let value = dict["Sar"] as? String {
                    self.sar = value
                }
                if let value = dict["StartTime"] as? String {
                    self.startTime = value
                }
                if let value = dict["Timebase"] as? String {
                    self.timebase = value
                }
                if let value = dict["Width"] as? String {
                    self.width = value
                }
            }
        }
        public var audioStreamList: [GetMezzanineInfoResponseBody.Mezzanine.AudioStreamList]?

        public var bitrate: String?

        public var creationTime: String?

        public var duration: String?

        public var fileName: String?

        public var fileURL: String?

        public var fps: String?

        public var height: Int64?

        public var outputType: String?

        public var preprocessStatus: String?

        public var restoreExpiration: String?

        public var restoreStatus: String?

        public var size: Int64?

        public var status: String?

        public var storageClass: String?

        public var videoId: String?

        public var videoStreamList: [GetMezzanineInfoResponseBody.Mezzanine.VideoStreamList]?

        public var width: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.audioStreamList != nil {
                var tmp : [Any] = []
                for k in self.audioStreamList! {
                    tmp.append(k.toMap())
                }
                map["AudioStreamList"] = tmp
            }
            if self.bitrate != nil {
                map["Bitrate"] = self.bitrate!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.fileName != nil {
                map["FileName"] = self.fileName!
            }
            if self.fileURL != nil {
                map["FileURL"] = self.fileURL!
            }
            if self.fps != nil {
                map["Fps"] = self.fps!
            }
            if self.height != nil {
                map["Height"] = self.height!
            }
            if self.outputType != nil {
                map["OutputType"] = self.outputType!
            }
            if self.preprocessStatus != nil {
                map["PreprocessStatus"] = self.preprocessStatus!
            }
            if self.restoreExpiration != nil {
                map["RestoreExpiration"] = self.restoreExpiration!
            }
            if self.restoreStatus != nil {
                map["RestoreStatus"] = self.restoreStatus!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.storageClass != nil {
                map["StorageClass"] = self.storageClass!
            }
            if self.videoId != nil {
                map["VideoId"] = self.videoId!
            }
            if self.videoStreamList != nil {
                var tmp : [Any] = []
                for k in self.videoStreamList! {
                    tmp.append(k.toMap())
                }
                map["VideoStreamList"] = tmp
            }
            if self.width != nil {
                map["Width"] = self.width!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AudioStreamList"] as? [Any?] {
                var tmp : [GetMezzanineInfoResponseBody.Mezzanine.AudioStreamList] = []
                for v in value {
                    if v != nil {
                        var model = GetMezzanineInfoResponseBody.Mezzanine.AudioStreamList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.audioStreamList = tmp
            }
            if let value = dict["Bitrate"] as? String {
                self.bitrate = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["Duration"] as? String {
                self.duration = value
            }
            if let value = dict["FileName"] as? String {
                self.fileName = value
            }
            if let value = dict["FileURL"] as? String {
                self.fileURL = value
            }
            if let value = dict["Fps"] as? String {
                self.fps = value
            }
            if let value = dict["Height"] as? Int64 {
                self.height = value
            }
            if let value = dict["OutputType"] as? String {
                self.outputType = value
            }
            if let value = dict["PreprocessStatus"] as? String {
                self.preprocessStatus = value
            }
            if let value = dict["RestoreExpiration"] as? String {
                self.restoreExpiration = value
            }
            if let value = dict["RestoreStatus"] as? String {
                self.restoreStatus = value
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["StorageClass"] as? String {
                self.storageClass = value
            }
            if let value = dict["VideoId"] as? String {
                self.videoId = value
            }
            if let value = dict["VideoStreamList"] as? [Any?] {
                var tmp : [GetMezzanineInfoResponseBody.Mezzanine.VideoStreamList] = []
                for v in value {
                    if v != nil {
                        var model = GetMezzanineInfoResponseBody.Mezzanine.VideoStreamList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.videoStreamList = tmp
            }
            if let value = dict["Width"] as? Int64 {
                self.width = value
            }
        }
    }
    public var mezzanine: GetMezzanineInfoResponseBody.Mezzanine?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.mezzanine?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mezzanine != nil {
            map["Mezzanine"] = self.mezzanine?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Mezzanine"] as? [String: Any?] {
            var model = GetMezzanineInfoResponseBody.Mezzanine()
            model.fromMap(value)
            self.mezzanine = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetMezzanineInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetMezzanineInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetMezzanineInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetPlayInfoRequest : Tea.TeaModel {
    public var additionType: String?

    public var authTimeout: Int64?

    public var definition: String?

    public var digitalWatermarkType: String?

    public var formats: String?

    public var outputType: String?

    public var playConfig: String?

    public var reAuthInfo: String?

    public var resultType: String?

    public var streamType: String?

    public var trace: String?

    public var videoId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.additionType != nil {
            map["AdditionType"] = self.additionType!
        }
        if self.authTimeout != nil {
            map["AuthTimeout"] = self.authTimeout!
        }
        if self.definition != nil {
            map["Definition"] = self.definition!
        }
        if self.digitalWatermarkType != nil {
            map["DigitalWatermarkType"] = self.digitalWatermarkType!
        }
        if self.formats != nil {
            map["Formats"] = self.formats!
        }
        if self.outputType != nil {
            map["OutputType"] = self.outputType!
        }
        if self.playConfig != nil {
            map["PlayConfig"] = self.playConfig!
        }
        if self.reAuthInfo != nil {
            map["ReAuthInfo"] = self.reAuthInfo!
        }
        if self.resultType != nil {
            map["ResultType"] = self.resultType!
        }
        if self.streamType != nil {
            map["StreamType"] = self.streamType!
        }
        if self.trace != nil {
            map["Trace"] = self.trace!
        }
        if self.videoId != nil {
            map["VideoId"] = self.videoId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AdditionType"] as? String {
            self.additionType = value
        }
        if let value = dict["AuthTimeout"] as? Int64 {
            self.authTimeout = value
        }
        if let value = dict["Definition"] as? String {
            self.definition = value
        }
        if let value = dict["DigitalWatermarkType"] as? String {
            self.digitalWatermarkType = value
        }
        if let value = dict["Formats"] as? String {
            self.formats = value
        }
        if let value = dict["OutputType"] as? String {
            self.outputType = value
        }
        if let value = dict["PlayConfig"] as? String {
            self.playConfig = value
        }
        if let value = dict["ReAuthInfo"] as? String {
            self.reAuthInfo = value
        }
        if let value = dict["ResultType"] as? String {
            self.resultType = value
        }
        if let value = dict["StreamType"] as? String {
            self.streamType = value
        }
        if let value = dict["Trace"] as? String {
            self.trace = value
        }
        if let value = dict["VideoId"] as? String {
            self.videoId = value
        }
    }
}

public class GetPlayInfoResponseBody : Tea.TeaModel {
    public class PlayInfoList : Tea.TeaModel {
        public class PlayInfo : Tea.TeaModel {
            public var bitDepth: Int32?

            public var bitrate: String?

            public var codecName: String?

            public var creationTime: String?

            public var definition: String?

            public var duration: String?

            public var encrypt: Int64?

            public var encryptMode: String?

            public var encryptType: String?

            public var format: String?

            public var fps: String?

            public var HDRType: String?

            public var height: Int64?

            public var jobExt: String?

            public var jobId: String?

            public var jobType: Int32?

            public var modificationTime: String?

            public var narrowBandType: String?

            public var playURL: String?

            public var size: Int64?

            public var specification: String?

            public var status: String?

            public var streamType: String?

            public var watermarkId: String?

            public var width: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bitDepth != nil {
                    map["BitDepth"] = self.bitDepth!
                }
                if self.bitrate != nil {
                    map["Bitrate"] = self.bitrate!
                }
                if self.codecName != nil {
                    map["CodecName"] = self.codecName!
                }
                if self.creationTime != nil {
                    map["CreationTime"] = self.creationTime!
                }
                if self.definition != nil {
                    map["Definition"] = self.definition!
                }
                if self.duration != nil {
                    map["Duration"] = self.duration!
                }
                if self.encrypt != nil {
                    map["Encrypt"] = self.encrypt!
                }
                if self.encryptMode != nil {
                    map["EncryptMode"] = self.encryptMode!
                }
                if self.encryptType != nil {
                    map["EncryptType"] = self.encryptType!
                }
                if self.format != nil {
                    map["Format"] = self.format!
                }
                if self.fps != nil {
                    map["Fps"] = self.fps!
                }
                if self.HDRType != nil {
                    map["HDRType"] = self.HDRType!
                }
                if self.height != nil {
                    map["Height"] = self.height!
                }
                if self.jobExt != nil {
                    map["JobExt"] = self.jobExt!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.jobType != nil {
                    map["JobType"] = self.jobType!
                }
                if self.modificationTime != nil {
                    map["ModificationTime"] = self.modificationTime!
                }
                if self.narrowBandType != nil {
                    map["NarrowBandType"] = self.narrowBandType!
                }
                if self.playURL != nil {
                    map["PlayURL"] = self.playURL!
                }
                if self.size != nil {
                    map["Size"] = self.size!
                }
                if self.specification != nil {
                    map["Specification"] = self.specification!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.streamType != nil {
                    map["StreamType"] = self.streamType!
                }
                if self.watermarkId != nil {
                    map["WatermarkId"] = self.watermarkId!
                }
                if self.width != nil {
                    map["Width"] = self.width!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BitDepth"] as? Int32 {
                    self.bitDepth = value
                }
                if let value = dict["Bitrate"] as? String {
                    self.bitrate = value
                }
                if let value = dict["CodecName"] as? String {
                    self.codecName = value
                }
                if let value = dict["CreationTime"] as? String {
                    self.creationTime = value
                }
                if let value = dict["Definition"] as? String {
                    self.definition = value
                }
                if let value = dict["Duration"] as? String {
                    self.duration = value
                }
                if let value = dict["Encrypt"] as? Int64 {
                    self.encrypt = value
                }
                if let value = dict["EncryptMode"] as? String {
                    self.encryptMode = value
                }
                if let value = dict["EncryptType"] as? String {
                    self.encryptType = value
                }
                if let value = dict["Format"] as? String {
                    self.format = value
                }
                if let value = dict["Fps"] as? String {
                    self.fps = value
                }
                if let value = dict["HDRType"] as? String {
                    self.HDRType = value
                }
                if let value = dict["Height"] as? Int64 {
                    self.height = value
                }
                if let value = dict["JobExt"] as? String {
                    self.jobExt = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["JobType"] as? Int32 {
                    self.jobType = value
                }
                if let value = dict["ModificationTime"] as? String {
                    self.modificationTime = value
                }
                if let value = dict["NarrowBandType"] as? String {
                    self.narrowBandType = value
                }
                if let value = dict["PlayURL"] as? String {
                    self.playURL = value
                }
                if let value = dict["Size"] as? Int64 {
                    self.size = value
                }
                if let value = dict["Specification"] as? String {
                    self.specification = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["StreamType"] as? String {
                    self.streamType = value
                }
                if let value = dict["WatermarkId"] as? String {
                    self.watermarkId = value
                }
                if let value = dict["Width"] as? Int64 {
                    self.width = value
                }
            }
        }
        public var playInfo: [GetPlayInfoResponseBody.PlayInfoList.PlayInfo]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.playInfo != nil {
                var tmp : [Any] = []
                for k in self.playInfo! {
                    tmp.append(k.toMap())
                }
                map["PlayInfo"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PlayInfo"] as? [Any?] {
                var tmp : [GetPlayInfoResponseBody.PlayInfoList.PlayInfo] = []
                for v in value {
                    if v != nil {
                        var model = GetPlayInfoResponseBody.PlayInfoList.PlayInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.playInfo = tmp
            }
        }
    }
    public class VideoBase : Tea.TeaModel {
        public var coverURL: String?

        public var creationTime: String?

        public var danMuURL: String?

        public var duration: String?

        public var mediaType: String?

        public var status: String?

        public var storageClass: String?

        public var title: String?

        public var videoId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.coverURL != nil {
                map["CoverURL"] = self.coverURL!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.danMuURL != nil {
                map["DanMuURL"] = self.danMuURL!
            }
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.mediaType != nil {
                map["MediaType"] = self.mediaType!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.storageClass != nil {
                map["StorageClass"] = self.storageClass!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.videoId != nil {
                map["VideoId"] = self.videoId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CoverURL"] as? String {
                self.coverURL = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["DanMuURL"] as? String {
                self.danMuURL = value
            }
            if let value = dict["Duration"] as? String {
                self.duration = value
            }
            if let value = dict["MediaType"] as? String {
                self.mediaType = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["StorageClass"] as? String {
                self.storageClass = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["VideoId"] as? String {
                self.videoId = value
            }
        }
    }
    public var playInfoList: GetPlayInfoResponseBody.PlayInfoList?

    public var requestId: String?

    public var videoBase: GetPlayInfoResponseBody.VideoBase?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.playInfoList?.validate()
        try self.videoBase?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.playInfoList != nil {
            map["PlayInfoList"] = self.playInfoList?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.videoBase != nil {
            map["VideoBase"] = self.videoBase?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PlayInfoList"] as? [String: Any?] {
            var model = GetPlayInfoResponseBody.PlayInfoList()
            model.fromMap(value)
            self.playInfoList = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["VideoBase"] as? [String: Any?] {
            var model = GetPlayInfoResponseBody.VideoBase()
            model.fromMap(value)
            self.videoBase = model
        }
    }
}

public class GetPlayInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetPlayInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetPlayInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetTranscodeSummaryRequest : Tea.TeaModel {
    public var videoIds: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.videoIds != nil {
            map["VideoIds"] = self.videoIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["VideoIds"] as? String {
            self.videoIds = value
        }
    }
}

public class GetTranscodeSummaryResponseBody : Tea.TeaModel {
    public class TranscodeSummaryList : Tea.TeaModel {
        public class TranscodeJobInfoSummaryList : Tea.TeaModel {
            public var bitrate: String?

            public var completeTime: String?

            public var creationTime: String?

            public var duration: String?

            public var errorCode: String?

            public var errorMessage: String?

            public var filesize: Int64?

            public var format: String?

            public var fps: String?

            public var height: String?

            public var transcodeJobStatus: String?

            public var transcodeProgress: Int64?

            public var transcodeTemplateId: String?

            public var watermarkIdList: [String]?

            public var width: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bitrate != nil {
                    map["Bitrate"] = self.bitrate!
                }
                if self.completeTime != nil {
                    map["CompleteTime"] = self.completeTime!
                }
                if self.creationTime != nil {
                    map["CreationTime"] = self.creationTime!
                }
                if self.duration != nil {
                    map["Duration"] = self.duration!
                }
                if self.errorCode != nil {
                    map["ErrorCode"] = self.errorCode!
                }
                if self.errorMessage != nil {
                    map["ErrorMessage"] = self.errorMessage!
                }
                if self.filesize != nil {
                    map["Filesize"] = self.filesize!
                }
                if self.format != nil {
                    map["Format"] = self.format!
                }
                if self.fps != nil {
                    map["Fps"] = self.fps!
                }
                if self.height != nil {
                    map["Height"] = self.height!
                }
                if self.transcodeJobStatus != nil {
                    map["TranscodeJobStatus"] = self.transcodeJobStatus!
                }
                if self.transcodeProgress != nil {
                    map["TranscodeProgress"] = self.transcodeProgress!
                }
                if self.transcodeTemplateId != nil {
                    map["TranscodeTemplateId"] = self.transcodeTemplateId!
                }
                if self.watermarkIdList != nil {
                    map["WatermarkIdList"] = self.watermarkIdList!
                }
                if self.width != nil {
                    map["Width"] = self.width!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Bitrate"] as? String {
                    self.bitrate = value
                }
                if let value = dict["CompleteTime"] as? String {
                    self.completeTime = value
                }
                if let value = dict["CreationTime"] as? String {
                    self.creationTime = value
                }
                if let value = dict["Duration"] as? String {
                    self.duration = value
                }
                if let value = dict["ErrorCode"] as? String {
                    self.errorCode = value
                }
                if let value = dict["ErrorMessage"] as? String {
                    self.errorMessage = value
                }
                if let value = dict["Filesize"] as? Int64 {
                    self.filesize = value
                }
                if let value = dict["Format"] as? String {
                    self.format = value
                }
                if let value = dict["Fps"] as? String {
                    self.fps = value
                }
                if let value = dict["Height"] as? String {
                    self.height = value
                }
                if let value = dict["TranscodeJobStatus"] as? String {
                    self.transcodeJobStatus = value
                }
                if let value = dict["TranscodeProgress"] as? Int64 {
                    self.transcodeProgress = value
                }
                if let value = dict["TranscodeTemplateId"] as? String {
                    self.transcodeTemplateId = value
                }
                if let value = dict["WatermarkIdList"] as? [String] {
                    self.watermarkIdList = value
                }
                if let value = dict["Width"] as? String {
                    self.width = value
                }
            }
        }
        public var completeTime: String?

        public var creationTime: String?

        public var transcodeJobInfoSummaryList: [GetTranscodeSummaryResponseBody.TranscodeSummaryList.TranscodeJobInfoSummaryList]?

        public var transcodeStatus: String?

        public var transcodeTemplateGroupId: String?

        public var videoId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.completeTime != nil {
                map["CompleteTime"] = self.completeTime!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.transcodeJobInfoSummaryList != nil {
                var tmp : [Any] = []
                for k in self.transcodeJobInfoSummaryList! {
                    tmp.append(k.toMap())
                }
                map["TranscodeJobInfoSummaryList"] = tmp
            }
            if self.transcodeStatus != nil {
                map["TranscodeStatus"] = self.transcodeStatus!
            }
            if self.transcodeTemplateGroupId != nil {
                map["TranscodeTemplateGroupId"] = self.transcodeTemplateGroupId!
            }
            if self.videoId != nil {
                map["VideoId"] = self.videoId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CompleteTime"] as? String {
                self.completeTime = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["TranscodeJobInfoSummaryList"] as? [Any?] {
                var tmp : [GetTranscodeSummaryResponseBody.TranscodeSummaryList.TranscodeJobInfoSummaryList] = []
                for v in value {
                    if v != nil {
                        var model = GetTranscodeSummaryResponseBody.TranscodeSummaryList.TranscodeJobInfoSummaryList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.transcodeJobInfoSummaryList = tmp
            }
            if let value = dict["TranscodeStatus"] as? String {
                self.transcodeStatus = value
            }
            if let value = dict["TranscodeTemplateGroupId"] as? String {
                self.transcodeTemplateGroupId = value
            }
            if let value = dict["VideoId"] as? String {
                self.videoId = value
            }
        }
    }
    public var nonExistVideoIds: [String]?

    public var requestId: String?

    public var transcodeSummaryList: [GetTranscodeSummaryResponseBody.TranscodeSummaryList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nonExistVideoIds != nil {
            map["NonExistVideoIds"] = self.nonExistVideoIds!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.transcodeSummaryList != nil {
            var tmp : [Any] = []
            for k in self.transcodeSummaryList! {
                tmp.append(k.toMap())
            }
            map["TranscodeSummaryList"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NonExistVideoIds"] as? [String] {
            self.nonExistVideoIds = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TranscodeSummaryList"] as? [Any?] {
            var tmp : [GetTranscodeSummaryResponseBody.TranscodeSummaryList] = []
            for v in value {
                if v != nil {
                    var model = GetTranscodeSummaryResponseBody.TranscodeSummaryList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.transcodeSummaryList = tmp
        }
    }
}

public class GetTranscodeSummaryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetTranscodeSummaryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetTranscodeSummaryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetTranscodeTaskRequest : Tea.TeaModel {
    public var jobIds: String?

    public var transcodeTaskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.jobIds != nil {
            map["JobIds"] = self.jobIds!
        }
        if self.transcodeTaskId != nil {
            map["TranscodeTaskId"] = self.transcodeTaskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["JobIds"] as? String {
            self.jobIds = value
        }
        if let value = dict["TranscodeTaskId"] as? String {
            self.transcodeTaskId = value
        }
    }
}

public class GetTranscodeTaskResponseBody : Tea.TeaModel {
    public class TranscodeJobInfoList : Tea.TeaModel {
        public class OutputFile : Tea.TeaModel {
            public var audioStreamList: String?

            public var bitrate: String?

            public var duration: String?

            public var encryption: String?

            public var filesize: Int64?

            public var format: String?

            public var fps: String?

            public var height: String?

            public var outputFileUrl: String?

            public var subtitleStreamList: String?

            public var videoStreamList: String?

            public var watermarkIdList: [String]?

            public var width: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.audioStreamList != nil {
                    map["AudioStreamList"] = self.audioStreamList!
                }
                if self.bitrate != nil {
                    map["Bitrate"] = self.bitrate!
                }
                if self.duration != nil {
                    map["Duration"] = self.duration!
                }
                if self.encryption != nil {
                    map["Encryption"] = self.encryption!
                }
                if self.filesize != nil {
                    map["Filesize"] = self.filesize!
                }
                if self.format != nil {
                    map["Format"] = self.format!
                }
                if self.fps != nil {
                    map["Fps"] = self.fps!
                }
                if self.height != nil {
                    map["Height"] = self.height!
                }
                if self.outputFileUrl != nil {
                    map["OutputFileUrl"] = self.outputFileUrl!
                }
                if self.subtitleStreamList != nil {
                    map["SubtitleStreamList"] = self.subtitleStreamList!
                }
                if self.videoStreamList != nil {
                    map["VideoStreamList"] = self.videoStreamList!
                }
                if self.watermarkIdList != nil {
                    map["WatermarkIdList"] = self.watermarkIdList!
                }
                if self.width != nil {
                    map["Width"] = self.width!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AudioStreamList"] as? String {
                    self.audioStreamList = value
                }
                if let value = dict["Bitrate"] as? String {
                    self.bitrate = value
                }
                if let value = dict["Duration"] as? String {
                    self.duration = value
                }
                if let value = dict["Encryption"] as? String {
                    self.encryption = value
                }
                if let value = dict["Filesize"] as? Int64 {
                    self.filesize = value
                }
                if let value = dict["Format"] as? String {
                    self.format = value
                }
                if let value = dict["Fps"] as? String {
                    self.fps = value
                }
                if let value = dict["Height"] as? String {
                    self.height = value
                }
                if let value = dict["OutputFileUrl"] as? String {
                    self.outputFileUrl = value
                }
                if let value = dict["SubtitleStreamList"] as? String {
                    self.subtitleStreamList = value
                }
                if let value = dict["VideoStreamList"] as? String {
                    self.videoStreamList = value
                }
                if let value = dict["WatermarkIdList"] as? [String] {
                    self.watermarkIdList = value
                }
                if let value = dict["Width"] as? String {
                    self.width = value
                }
            }
        }
        public var completeTime: String?

        public var creationTime: String?

        public var definition: String?

        public var errorCode: String?

        public var errorMessage: String?

        public var inputFileUrl: String?

        public var outputFile: GetTranscodeTaskResponseBody.TranscodeJobInfoList.OutputFile?

        public var priority: String?

        public var transcodeJobId: String?

        public var transcodeJobStatus: String?

        public var transcodeProgress: Int64?

        public var transcodeTemplateId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.outputFile?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.completeTime != nil {
                map["CompleteTime"] = self.completeTime!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.definition != nil {
                map["Definition"] = self.definition!
            }
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.inputFileUrl != nil {
                map["InputFileUrl"] = self.inputFileUrl!
            }
            if self.outputFile != nil {
                map["OutputFile"] = self.outputFile?.toMap()
            }
            if self.priority != nil {
                map["Priority"] = self.priority!
            }
            if self.transcodeJobId != nil {
                map["TranscodeJobId"] = self.transcodeJobId!
            }
            if self.transcodeJobStatus != nil {
                map["TranscodeJobStatus"] = self.transcodeJobStatus!
            }
            if self.transcodeProgress != nil {
                map["TranscodeProgress"] = self.transcodeProgress!
            }
            if self.transcodeTemplateId != nil {
                map["TranscodeTemplateId"] = self.transcodeTemplateId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CompleteTime"] as? String {
                self.completeTime = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["Definition"] as? String {
                self.definition = value
            }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["InputFileUrl"] as? String {
                self.inputFileUrl = value
            }
            if let value = dict["OutputFile"] as? [String: Any?] {
                var model = GetTranscodeTaskResponseBody.TranscodeJobInfoList.OutputFile()
                model.fromMap(value)
                self.outputFile = model
            }
            if let value = dict["Priority"] as? String {
                self.priority = value
            }
            if let value = dict["TranscodeJobId"] as? String {
                self.transcodeJobId = value
            }
            if let value = dict["TranscodeJobStatus"] as? String {
                self.transcodeJobStatus = value
            }
            if let value = dict["TranscodeProgress"] as? Int64 {
                self.transcodeProgress = value
            }
            if let value = dict["TranscodeTemplateId"] as? String {
                self.transcodeTemplateId = value
            }
        }
    }
    public class TranscodeTask : Tea.TeaModel {
        public class TranscodeJobInfoList : Tea.TeaModel {
            public class OutputFile : Tea.TeaModel {
                public var audioStreamList: String?

                public var bitrate: String?

                public var duration: String?

                public var encryption: String?

                public var filesize: Int64?

                public var format: String?

                public var fps: String?

                public var height: String?

                public var outputFileUrl: String?

                public var subtitleStreamList: String?

                public var videoStreamList: String?

                public var watermarkIdList: [String]?

                public var width: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.audioStreamList != nil {
                        map["AudioStreamList"] = self.audioStreamList!
                    }
                    if self.bitrate != nil {
                        map["Bitrate"] = self.bitrate!
                    }
                    if self.duration != nil {
                        map["Duration"] = self.duration!
                    }
                    if self.encryption != nil {
                        map["Encryption"] = self.encryption!
                    }
                    if self.filesize != nil {
                        map["Filesize"] = self.filesize!
                    }
                    if self.format != nil {
                        map["Format"] = self.format!
                    }
                    if self.fps != nil {
                        map["Fps"] = self.fps!
                    }
                    if self.height != nil {
                        map["Height"] = self.height!
                    }
                    if self.outputFileUrl != nil {
                        map["OutputFileUrl"] = self.outputFileUrl!
                    }
                    if self.subtitleStreamList != nil {
                        map["SubtitleStreamList"] = self.subtitleStreamList!
                    }
                    if self.videoStreamList != nil {
                        map["VideoStreamList"] = self.videoStreamList!
                    }
                    if self.watermarkIdList != nil {
                        map["WatermarkIdList"] = self.watermarkIdList!
                    }
                    if self.width != nil {
                        map["Width"] = self.width!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AudioStreamList"] as? String {
                        self.audioStreamList = value
                    }
                    if let value = dict["Bitrate"] as? String {
                        self.bitrate = value
                    }
                    if let value = dict["Duration"] as? String {
                        self.duration = value
                    }
                    if let value = dict["Encryption"] as? String {
                        self.encryption = value
                    }
                    if let value = dict["Filesize"] as? Int64 {
                        self.filesize = value
                    }
                    if let value = dict["Format"] as? String {
                        self.format = value
                    }
                    if let value = dict["Fps"] as? String {
                        self.fps = value
                    }
                    if let value = dict["Height"] as? String {
                        self.height = value
                    }
                    if let value = dict["OutputFileUrl"] as? String {
                        self.outputFileUrl = value
                    }
                    if let value = dict["SubtitleStreamList"] as? String {
                        self.subtitleStreamList = value
                    }
                    if let value = dict["VideoStreamList"] as? String {
                        self.videoStreamList = value
                    }
                    if let value = dict["WatermarkIdList"] as? [String] {
                        self.watermarkIdList = value
                    }
                    if let value = dict["Width"] as? String {
                        self.width = value
                    }
                }
            }
            public var completeTime: String?

            public var creationTime: String?

            public var definition: String?

            public var errorCode: String?

            public var errorMessage: String?

            public var inputFileUrl: String?

            public var outputFile: GetTranscodeTaskResponseBody.TranscodeTask.TranscodeJobInfoList.OutputFile?

            public var priority: String?

            public var transcodeJobId: String?

            public var transcodeJobStatus: String?

            public var transcodeProgress: Int64?

            public var transcodeTemplateId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.outputFile?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.completeTime != nil {
                    map["CompleteTime"] = self.completeTime!
                }
                if self.creationTime != nil {
                    map["CreationTime"] = self.creationTime!
                }
                if self.definition != nil {
                    map["Definition"] = self.definition!
                }
                if self.errorCode != nil {
                    map["ErrorCode"] = self.errorCode!
                }
                if self.errorMessage != nil {
                    map["ErrorMessage"] = self.errorMessage!
                }
                if self.inputFileUrl != nil {
                    map["InputFileUrl"] = self.inputFileUrl!
                }
                if self.outputFile != nil {
                    map["OutputFile"] = self.outputFile?.toMap()
                }
                if self.priority != nil {
                    map["Priority"] = self.priority!
                }
                if self.transcodeJobId != nil {
                    map["TranscodeJobId"] = self.transcodeJobId!
                }
                if self.transcodeJobStatus != nil {
                    map["TranscodeJobStatus"] = self.transcodeJobStatus!
                }
                if self.transcodeProgress != nil {
                    map["TranscodeProgress"] = self.transcodeProgress!
                }
                if self.transcodeTemplateId != nil {
                    map["TranscodeTemplateId"] = self.transcodeTemplateId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CompleteTime"] as? String {
                    self.completeTime = value
                }
                if let value = dict["CreationTime"] as? String {
                    self.creationTime = value
                }
                if let value = dict["Definition"] as? String {
                    self.definition = value
                }
                if let value = dict["ErrorCode"] as? String {
                    self.errorCode = value
                }
                if let value = dict["ErrorMessage"] as? String {
                    self.errorMessage = value
                }
                if let value = dict["InputFileUrl"] as? String {
                    self.inputFileUrl = value
                }
                if let value = dict["OutputFile"] as? [String: Any?] {
                    var model = GetTranscodeTaskResponseBody.TranscodeTask.TranscodeJobInfoList.OutputFile()
                    model.fromMap(value)
                    self.outputFile = model
                }
                if let value = dict["Priority"] as? String {
                    self.priority = value
                }
                if let value = dict["TranscodeJobId"] as? String {
                    self.transcodeJobId = value
                }
                if let value = dict["TranscodeJobStatus"] as? String {
                    self.transcodeJobStatus = value
                }
                if let value = dict["TranscodeProgress"] as? Int64 {
                    self.transcodeProgress = value
                }
                if let value = dict["TranscodeTemplateId"] as? String {
                    self.transcodeTemplateId = value
                }
            }
        }
        public var completeTime: String?

        public var creationTime: String?

        public var taskStatus: String?

        public var transcodeJobInfoList: [GetTranscodeTaskResponseBody.TranscodeTask.TranscodeJobInfoList]?

        public var transcodeTaskId: String?

        public var transcodeTemplateGroupId: String?

        public var trigger: String?

        public var videoId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.completeTime != nil {
                map["CompleteTime"] = self.completeTime!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.taskStatus != nil {
                map["TaskStatus"] = self.taskStatus!
            }
            if self.transcodeJobInfoList != nil {
                var tmp : [Any] = []
                for k in self.transcodeJobInfoList! {
                    tmp.append(k.toMap())
                }
                map["TranscodeJobInfoList"] = tmp
            }
            if self.transcodeTaskId != nil {
                map["TranscodeTaskId"] = self.transcodeTaskId!
            }
            if self.transcodeTemplateGroupId != nil {
                map["TranscodeTemplateGroupId"] = self.transcodeTemplateGroupId!
            }
            if self.trigger != nil {
                map["Trigger"] = self.trigger!
            }
            if self.videoId != nil {
                map["VideoId"] = self.videoId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CompleteTime"] as? String {
                self.completeTime = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["TaskStatus"] as? String {
                self.taskStatus = value
            }
            if let value = dict["TranscodeJobInfoList"] as? [Any?] {
                var tmp : [GetTranscodeTaskResponseBody.TranscodeTask.TranscodeJobInfoList] = []
                for v in value {
                    if v != nil {
                        var model = GetTranscodeTaskResponseBody.TranscodeTask.TranscodeJobInfoList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.transcodeJobInfoList = tmp
            }
            if let value = dict["TranscodeTaskId"] as? String {
                self.transcodeTaskId = value
            }
            if let value = dict["TranscodeTemplateGroupId"] as? String {
                self.transcodeTemplateGroupId = value
            }
            if let value = dict["Trigger"] as? String {
                self.trigger = value
            }
            if let value = dict["VideoId"] as? String {
                self.videoId = value
            }
        }
    }
    public var nonExistJobIds: [String]?

    public var requestId: String?

    public var transcodeJobInfoList: [GetTranscodeTaskResponseBody.TranscodeJobInfoList]?

    public var transcodeTask: GetTranscodeTaskResponseBody.TranscodeTask?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.transcodeTask?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nonExistJobIds != nil {
            map["NonExistJobIds"] = self.nonExistJobIds!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.transcodeJobInfoList != nil {
            var tmp : [Any] = []
            for k in self.transcodeJobInfoList! {
                tmp.append(k.toMap())
            }
            map["TranscodeJobInfoList"] = tmp
        }
        if self.transcodeTask != nil {
            map["TranscodeTask"] = self.transcodeTask?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NonExistJobIds"] as? [String] {
            self.nonExistJobIds = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TranscodeJobInfoList"] as? [Any?] {
            var tmp : [GetTranscodeTaskResponseBody.TranscodeJobInfoList] = []
            for v in value {
                if v != nil {
                    var model = GetTranscodeTaskResponseBody.TranscodeJobInfoList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.transcodeJobInfoList = tmp
        }
        if let value = dict["TranscodeTask"] as? [String: Any?] {
            var model = GetTranscodeTaskResponseBody.TranscodeTask()
            model.fromMap(value)
            self.transcodeTask = model
        }
    }
}

public class GetTranscodeTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetTranscodeTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetTranscodeTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetTranscodeTemplateGroupRequest : Tea.TeaModel {
    public var transcodeTemplateGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.transcodeTemplateGroupId != nil {
            map["TranscodeTemplateGroupId"] = self.transcodeTemplateGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TranscodeTemplateGroupId"] as? String {
            self.transcodeTemplateGroupId = value
        }
    }
}

public class GetTranscodeTemplateGroupResponseBody : Tea.TeaModel {
    public class TranscodeTemplateGroup : Tea.TeaModel {
        public class TranscodeTemplateList : Tea.TeaModel {
            public var audio: String?

            public var clip: String?

            public var container: String?

            public var copyrightMark: String?

            public var definition: String?

            public var encryptSetting: String?

            public var muxConfig: String?

            public var packageSetting: String?

            public var rotate: String?

            public var subtitleList: String?

            public var templateName: String?

            public var traceMark: String?

            public var transConfig: String?

            public var transcodeFileRegular: String?

            public var transcodeTemplateId: String?

            public var type: String?

            public var video: String?

            public var watermarkIds: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.audio != nil {
                    map["Audio"] = self.audio!
                }
                if self.clip != nil {
                    map["Clip"] = self.clip!
                }
                if self.container != nil {
                    map["Container"] = self.container!
                }
                if self.copyrightMark != nil {
                    map["CopyrightMark"] = self.copyrightMark!
                }
                if self.definition != nil {
                    map["Definition"] = self.definition!
                }
                if self.encryptSetting != nil {
                    map["EncryptSetting"] = self.encryptSetting!
                }
                if self.muxConfig != nil {
                    map["MuxConfig"] = self.muxConfig!
                }
                if self.packageSetting != nil {
                    map["PackageSetting"] = self.packageSetting!
                }
                if self.rotate != nil {
                    map["Rotate"] = self.rotate!
                }
                if self.subtitleList != nil {
                    map["SubtitleList"] = self.subtitleList!
                }
                if self.templateName != nil {
                    map["TemplateName"] = self.templateName!
                }
                if self.traceMark != nil {
                    map["TraceMark"] = self.traceMark!
                }
                if self.transConfig != nil {
                    map["TransConfig"] = self.transConfig!
                }
                if self.transcodeFileRegular != nil {
                    map["TranscodeFileRegular"] = self.transcodeFileRegular!
                }
                if self.transcodeTemplateId != nil {
                    map["TranscodeTemplateId"] = self.transcodeTemplateId!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.video != nil {
                    map["Video"] = self.video!
                }
                if self.watermarkIds != nil {
                    map["WatermarkIds"] = self.watermarkIds!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Audio"] as? String {
                    self.audio = value
                }
                if let value = dict["Clip"] as? String {
                    self.clip = value
                }
                if let value = dict["Container"] as? String {
                    self.container = value
                }
                if let value = dict["CopyrightMark"] as? String {
                    self.copyrightMark = value
                }
                if let value = dict["Definition"] as? String {
                    self.definition = value
                }
                if let value = dict["EncryptSetting"] as? String {
                    self.encryptSetting = value
                }
                if let value = dict["MuxConfig"] as? String {
                    self.muxConfig = value
                }
                if let value = dict["PackageSetting"] as? String {
                    self.packageSetting = value
                }
                if let value = dict["Rotate"] as? String {
                    self.rotate = value
                }
                if let value = dict["SubtitleList"] as? String {
                    self.subtitleList = value
                }
                if let value = dict["TemplateName"] as? String {
                    self.templateName = value
                }
                if let value = dict["TraceMark"] as? String {
                    self.traceMark = value
                }
                if let value = dict["TransConfig"] as? String {
                    self.transConfig = value
                }
                if let value = dict["TranscodeFileRegular"] as? String {
                    self.transcodeFileRegular = value
                }
                if let value = dict["TranscodeTemplateId"] as? String {
                    self.transcodeTemplateId = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["Video"] as? String {
                    self.video = value
                }
                if let value = dict["WatermarkIds"] as? [String] {
                    self.watermarkIds = value
                }
            }
        }
        public var appId: String?

        public var creationTime: String?

        public var isDefault: String?

        public var locked: String?

        public var modifyTime: String?

        public var name: String?

        public var transcodeTemplateGroupId: String?

        public var transcodeTemplateList: [GetTranscodeTemplateGroupResponseBody.TranscodeTemplateGroup.TranscodeTemplateList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.isDefault != nil {
                map["IsDefault"] = self.isDefault!
            }
            if self.locked != nil {
                map["Locked"] = self.locked!
            }
            if self.modifyTime != nil {
                map["ModifyTime"] = self.modifyTime!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.transcodeTemplateGroupId != nil {
                map["TranscodeTemplateGroupId"] = self.transcodeTemplateGroupId!
            }
            if self.transcodeTemplateList != nil {
                var tmp : [Any] = []
                for k in self.transcodeTemplateList! {
                    tmp.append(k.toMap())
                }
                map["TranscodeTemplateList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppId"] as? String {
                self.appId = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["IsDefault"] as? String {
                self.isDefault = value
            }
            if let value = dict["Locked"] as? String {
                self.locked = value
            }
            if let value = dict["ModifyTime"] as? String {
                self.modifyTime = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["TranscodeTemplateGroupId"] as? String {
                self.transcodeTemplateGroupId = value
            }
            if let value = dict["TranscodeTemplateList"] as? [Any?] {
                var tmp : [GetTranscodeTemplateGroupResponseBody.TranscodeTemplateGroup.TranscodeTemplateList] = []
                for v in value {
                    if v != nil {
                        var model = GetTranscodeTemplateGroupResponseBody.TranscodeTemplateGroup.TranscodeTemplateList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.transcodeTemplateList = tmp
            }
        }
    }
    public var requestId: String?

    public var transcodeTemplateGroup: GetTranscodeTemplateGroupResponseBody.TranscodeTemplateGroup?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.transcodeTemplateGroup?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.transcodeTemplateGroup != nil {
            map["TranscodeTemplateGroup"] = self.transcodeTemplateGroup?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TranscodeTemplateGroup"] as? [String: Any?] {
            var model = GetTranscodeTemplateGroupResponseBody.TranscodeTemplateGroup()
            model.fromMap(value)
            self.transcodeTemplateGroup = model
        }
    }
}

public class GetTranscodeTemplateGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetTranscodeTemplateGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetTranscodeTemplateGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetURLUploadInfosRequest : Tea.TeaModel {
    public var jobIds: String?

    public var uploadURLs: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.jobIds != nil {
            map["JobIds"] = self.jobIds!
        }
        if self.uploadURLs != nil {
            map["UploadURLs"] = self.uploadURLs!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["JobIds"] as? String {
            self.jobIds = value
        }
        if let value = dict["UploadURLs"] as? String {
            self.uploadURLs = value
        }
    }
}

public class GetURLUploadInfosResponseBody : Tea.TeaModel {
    public class URLUploadInfoList : Tea.TeaModel {
        public var completeTime: String?

        public var creationTime: String?

        public var errorCode: String?

        public var errorMessage: String?

        public var fileSize: String?

        public var jobId: String?

        public var mediaId: String?

        public var status: String?

        public var uploadURL: String?

        public var userData: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.completeTime != nil {
                map["CompleteTime"] = self.completeTime!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.errorCode != nil {
                map["ErrorCode"] = self.errorCode!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.fileSize != nil {
                map["FileSize"] = self.fileSize!
            }
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            if self.mediaId != nil {
                map["MediaId"] = self.mediaId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.uploadURL != nil {
                map["UploadURL"] = self.uploadURL!
            }
            if self.userData != nil {
                map["UserData"] = self.userData!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CompleteTime"] as? String {
                self.completeTime = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["ErrorCode"] as? String {
                self.errorCode = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["FileSize"] as? String {
                self.fileSize = value
            }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
            if let value = dict["MediaId"] as? String {
                self.mediaId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["UploadURL"] as? String {
                self.uploadURL = value
            }
            if let value = dict["UserData"] as? String {
                self.userData = value
            }
        }
    }
    public var nonExists: [String]?

    public var requestId: String?

    public var URLUploadInfoList: [GetURLUploadInfosResponseBody.URLUploadInfoList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nonExists != nil {
            map["NonExists"] = self.nonExists!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.URLUploadInfoList != nil {
            var tmp : [Any] = []
            for k in self.URLUploadInfoList! {
                tmp.append(k.toMap())
            }
            map["URLUploadInfoList"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NonExists"] as? [String] {
            self.nonExists = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["URLUploadInfoList"] as? [Any?] {
            var tmp : [GetURLUploadInfosResponseBody.URLUploadInfoList] = []
            for v in value {
                if v != nil {
                    var model = GetURLUploadInfosResponseBody.URLUploadInfoList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.URLUploadInfoList = tmp
        }
    }
}

public class GetURLUploadInfosResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetURLUploadInfosResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetURLUploadInfosResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetUploadDetailsRequest : Tea.TeaModel {
    public var mediaIds: String?

    public var mediaType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mediaIds != nil {
            map["MediaIds"] = self.mediaIds!
        }
        if self.mediaType != nil {
            map["MediaType"] = self.mediaType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MediaIds"] as? String {
            self.mediaIds = value
        }
        if let value = dict["MediaType"] as? String {
            self.mediaType = value
        }
    }
}

public class GetUploadDetailsResponseBody : Tea.TeaModel {
    public class UploadDetails : Tea.TeaModel {
        public var completionTime: String?

        public var creationTime: String?

        public var deviceModel: String?

        public var fileSize: Int64?

        public var mediaId: String?

        public var modificationTime: String?

        public var status: String?

        public var title: String?

        public var uploadIP: String?

        public var uploadRatio: Double?

        public var uploadSize: Int64?

        public var uploadSource: String?

        public var uploadStatus: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.completionTime != nil {
                map["CompletionTime"] = self.completionTime!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.deviceModel != nil {
                map["DeviceModel"] = self.deviceModel!
            }
            if self.fileSize != nil {
                map["FileSize"] = self.fileSize!
            }
            if self.mediaId != nil {
                map["MediaId"] = self.mediaId!
            }
            if self.modificationTime != nil {
                map["ModificationTime"] = self.modificationTime!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.uploadIP != nil {
                map["UploadIP"] = self.uploadIP!
            }
            if self.uploadRatio != nil {
                map["UploadRatio"] = self.uploadRatio!
            }
            if self.uploadSize != nil {
                map["UploadSize"] = self.uploadSize!
            }
            if self.uploadSource != nil {
                map["UploadSource"] = self.uploadSource!
            }
            if self.uploadStatus != nil {
                map["UploadStatus"] = self.uploadStatus!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CompletionTime"] as? String {
                self.completionTime = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["DeviceModel"] as? String {
                self.deviceModel = value
            }
            if let value = dict["FileSize"] as? Int64 {
                self.fileSize = value
            }
            if let value = dict["MediaId"] as? String {
                self.mediaId = value
            }
            if let value = dict["ModificationTime"] as? String {
                self.modificationTime = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["UploadIP"] as? String {
                self.uploadIP = value
            }
            if let value = dict["UploadRatio"] as? Double {
                self.uploadRatio = value
            }
            if let value = dict["UploadSize"] as? Int64 {
                self.uploadSize = value
            }
            if let value = dict["UploadSource"] as? String {
                self.uploadSource = value
            }
            if let value = dict["UploadStatus"] as? String {
                self.uploadStatus = value
            }
        }
    }
    public var forbiddenMediaIds: [String]?

    public var nonExistMediaIds: [String]?

    public var requestId: String?

    public var uploadDetails: [GetUploadDetailsResponseBody.UploadDetails]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.forbiddenMediaIds != nil {
            map["ForbiddenMediaIds"] = self.forbiddenMediaIds!
        }
        if self.nonExistMediaIds != nil {
            map["NonExistMediaIds"] = self.nonExistMediaIds!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.uploadDetails != nil {
            var tmp : [Any] = []
            for k in self.uploadDetails! {
                tmp.append(k.toMap())
            }
            map["UploadDetails"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ForbiddenMediaIds"] as? [String] {
            self.forbiddenMediaIds = value
        }
        if let value = dict["NonExistMediaIds"] as? [String] {
            self.nonExistMediaIds = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["UploadDetails"] as? [Any?] {
            var tmp : [GetUploadDetailsResponseBody.UploadDetails] = []
            for v in value {
                if v != nil {
                    var model = GetUploadDetailsResponseBody.UploadDetails()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.uploadDetails = tmp
        }
    }
}

public class GetUploadDetailsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetUploadDetailsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetUploadDetailsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetVideoInfoRequest : Tea.TeaModel {
    public var videoId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.videoId != nil {
            map["VideoId"] = self.videoId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["VideoId"] as? String {
            self.videoId = value
        }
    }
}

public class GetVideoInfoResponseBody : Tea.TeaModel {
    public class Video : Tea.TeaModel {
        public class Snapshots : Tea.TeaModel {
            public var snapshot: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.snapshot != nil {
                    map["Snapshot"] = self.snapshot!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Snapshot"] as? [String] {
                    self.snapshot = value
                }
            }
        }
        public var appId: String?

        public var auditStatus: String?

        public var cateId: Int64?

        public var cateName: String?

        public var coverURL: String?

        public var creationTime: String?

        public var customMediaInfo: String?

        public var description_: String?

        public var downloadSwitch: String?

        public var duration: Double?

        public var modificationTime: String?

        public var regionId: String?

        public var restoreExpiration: String?

        public var restoreStatus: String?

        public var size: Int64?

        public var snapshots: GetVideoInfoResponseBody.Video.Snapshots?

        public var status: String?

        public var storageClass: String?

        public var storageLocation: String?

        public var tags: String?

        public var templateGroupId: String?

        public var title: String?

        public var userData: String?

        public var videoId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.snapshots?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.auditStatus != nil {
                map["AuditStatus"] = self.auditStatus!
            }
            if self.cateId != nil {
                map["CateId"] = self.cateId!
            }
            if self.cateName != nil {
                map["CateName"] = self.cateName!
            }
            if self.coverURL != nil {
                map["CoverURL"] = self.coverURL!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.customMediaInfo != nil {
                map["CustomMediaInfo"] = self.customMediaInfo!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.downloadSwitch != nil {
                map["DownloadSwitch"] = self.downloadSwitch!
            }
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.modificationTime != nil {
                map["ModificationTime"] = self.modificationTime!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.restoreExpiration != nil {
                map["RestoreExpiration"] = self.restoreExpiration!
            }
            if self.restoreStatus != nil {
                map["RestoreStatus"] = self.restoreStatus!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.snapshots != nil {
                map["Snapshots"] = self.snapshots?.toMap()
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.storageClass != nil {
                map["StorageClass"] = self.storageClass!
            }
            if self.storageLocation != nil {
                map["StorageLocation"] = self.storageLocation!
            }
            if self.tags != nil {
                map["Tags"] = self.tags!
            }
            if self.templateGroupId != nil {
                map["TemplateGroupId"] = self.templateGroupId!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.userData != nil {
                map["UserData"] = self.userData!
            }
            if self.videoId != nil {
                map["VideoId"] = self.videoId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppId"] as? String {
                self.appId = value
            }
            if let value = dict["AuditStatus"] as? String {
                self.auditStatus = value
            }
            if let value = dict["CateId"] as? Int64 {
                self.cateId = value
            }
            if let value = dict["CateName"] as? String {
                self.cateName = value
            }
            if let value = dict["CoverURL"] as? String {
                self.coverURL = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["CustomMediaInfo"] as? String {
                self.customMediaInfo = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DownloadSwitch"] as? String {
                self.downloadSwitch = value
            }
            if let value = dict["Duration"] as? Double {
                self.duration = value
            }
            if let value = dict["ModificationTime"] as? String {
                self.modificationTime = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["RestoreExpiration"] as? String {
                self.restoreExpiration = value
            }
            if let value = dict["RestoreStatus"] as? String {
                self.restoreStatus = value
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["Snapshots"] as? [String: Any?] {
                var model = GetVideoInfoResponseBody.Video.Snapshots()
                model.fromMap(value)
                self.snapshots = model
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["StorageClass"] as? String {
                self.storageClass = value
            }
            if let value = dict["StorageLocation"] as? String {
                self.storageLocation = value
            }
            if let value = dict["Tags"] as? String {
                self.tags = value
            }
            if let value = dict["TemplateGroupId"] as? String {
                self.templateGroupId = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["UserData"] as? String {
                self.userData = value
            }
            if let value = dict["VideoId"] as? String {
                self.videoId = value
            }
        }
    }
    public var requestId: String?

    public var video: GetVideoInfoResponseBody.Video?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.video?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.video != nil {
            map["Video"] = self.video?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Video"] as? [String: Any?] {
            var model = GetVideoInfoResponseBody.Video()
            model.fromMap(value)
            self.video = model
        }
    }
}

public class GetVideoInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetVideoInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetVideoInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetVideoInfosRequest : Tea.TeaModel {
    public var videoIds: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.videoIds != nil {
            map["VideoIds"] = self.videoIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["VideoIds"] as? String {
            self.videoIds = value
        }
    }
}

public class GetVideoInfosResponseBody : Tea.TeaModel {
    public class VideoList : Tea.TeaModel {
        public var appId: String?

        public var cateId: Int64?

        public var cateName: String?

        public var coverURL: String?

        public var creationTime: String?

        public var description_: String?

        public var downloadSwitch: String?

        public var duration: Double?

        public var modificationTime: String?

        public var restoreExpiration: String?

        public var restoreStatus: String?

        public var size: Int64?

        public var snapshots: [String]?

        public var status: String?

        public var storageClass: String?

        public var storageLocation: String?

        public var tags: String?

        public var templateGroupId: String?

        public var title: String?

        public var userData: String?

        public var videoId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.cateId != nil {
                map["CateId"] = self.cateId!
            }
            if self.cateName != nil {
                map["CateName"] = self.cateName!
            }
            if self.coverURL != nil {
                map["CoverURL"] = self.coverURL!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.downloadSwitch != nil {
                map["DownloadSwitch"] = self.downloadSwitch!
            }
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.modificationTime != nil {
                map["ModificationTime"] = self.modificationTime!
            }
            if self.restoreExpiration != nil {
                map["RestoreExpiration"] = self.restoreExpiration!
            }
            if self.restoreStatus != nil {
                map["RestoreStatus"] = self.restoreStatus!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.snapshots != nil {
                map["Snapshots"] = self.snapshots!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.storageClass != nil {
                map["StorageClass"] = self.storageClass!
            }
            if self.storageLocation != nil {
                map["StorageLocation"] = self.storageLocation!
            }
            if self.tags != nil {
                map["Tags"] = self.tags!
            }
            if self.templateGroupId != nil {
                map["TemplateGroupId"] = self.templateGroupId!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.userData != nil {
                map["UserData"] = self.userData!
            }
            if self.videoId != nil {
                map["VideoId"] = self.videoId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppId"] as? String {
                self.appId = value
            }
            if let value = dict["CateId"] as? Int64 {
                self.cateId = value
            }
            if let value = dict["CateName"] as? String {
                self.cateName = value
            }
            if let value = dict["CoverURL"] as? String {
                self.coverURL = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DownloadSwitch"] as? String {
                self.downloadSwitch = value
            }
            if let value = dict["Duration"] as? Double {
                self.duration = value
            }
            if let value = dict["ModificationTime"] as? String {
                self.modificationTime = value
            }
            if let value = dict["RestoreExpiration"] as? String {
                self.restoreExpiration = value
            }
            if let value = dict["RestoreStatus"] as? String {
                self.restoreStatus = value
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["Snapshots"] as? [String] {
                self.snapshots = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["StorageClass"] as? String {
                self.storageClass = value
            }
            if let value = dict["StorageLocation"] as? String {
                self.storageLocation = value
            }
            if let value = dict["Tags"] as? String {
                self.tags = value
            }
            if let value = dict["TemplateGroupId"] as? String {
                self.templateGroupId = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["UserData"] as? String {
                self.userData = value
            }
            if let value = dict["VideoId"] as? String {
                self.videoId = value
            }
        }
    }
    public var nonExistVideoIds: [String]?

    public var requestId: String?

    public var videoList: [GetVideoInfosResponseBody.VideoList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nonExistVideoIds != nil {
            map["NonExistVideoIds"] = self.nonExistVideoIds!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.videoList != nil {
            var tmp : [Any] = []
            for k in self.videoList! {
                tmp.append(k.toMap())
            }
            map["VideoList"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NonExistVideoIds"] as? [String] {
            self.nonExistVideoIds = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["VideoList"] as? [Any?] {
            var tmp : [GetVideoInfosResponseBody.VideoList] = []
            for v in value {
                if v != nil {
                    var model = GetVideoInfosResponseBody.VideoList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.videoList = tmp
        }
    }
}

public class GetVideoInfosResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetVideoInfosResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetVideoInfosResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetVideoListRequest : Tea.TeaModel {
    public var cateId: Int64?

    public var endTime: String?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var sortBy: String?

    public var startTime: String?

    public var status: String?

    public var storageLocation: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cateId != nil {
            map["CateId"] = self.cateId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.sortBy != nil {
            map["SortBy"] = self.sortBy!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.storageLocation != nil {
            map["StorageLocation"] = self.storageLocation!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CateId"] as? Int64 {
            self.cateId = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SortBy"] as? String {
            self.sortBy = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["StorageLocation"] as? String {
            self.storageLocation = value
        }
    }
}

public class GetVideoListResponseBody : Tea.TeaModel {
    public class VideoList : Tea.TeaModel {
        public class Video : Tea.TeaModel {
            public class Snapshots : Tea.TeaModel {
                public var snapshot: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.snapshot != nil {
                        map["Snapshot"] = self.snapshot!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Snapshot"] as? [String] {
                        self.snapshot = value
                    }
                }
            }
            public var appId: String?

            public var cateId: Int64?

            public var cateName: String?

            public var coverURL: String?

            public var creationTime: String?

            public var description_: String?

            public var duration: Double?

            public var modificationTime: String?

            public var restoreExpiration: String?

            public var restoreStatus: String?

            public var size: Int64?

            public var snapshots: GetVideoListResponseBody.VideoList.Video.Snapshots?

            public var status: String?

            public var storageClass: String?

            public var storageLocation: String?

            public var tags: String?

            public var title: String?

            public var userData: String?

            public var videoId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.snapshots?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appId != nil {
                    map["AppId"] = self.appId!
                }
                if self.cateId != nil {
                    map["CateId"] = self.cateId!
                }
                if self.cateName != nil {
                    map["CateName"] = self.cateName!
                }
                if self.coverURL != nil {
                    map["CoverURL"] = self.coverURL!
                }
                if self.creationTime != nil {
                    map["CreationTime"] = self.creationTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.duration != nil {
                    map["Duration"] = self.duration!
                }
                if self.modificationTime != nil {
                    map["ModificationTime"] = self.modificationTime!
                }
                if self.restoreExpiration != nil {
                    map["RestoreExpiration"] = self.restoreExpiration!
                }
                if self.restoreStatus != nil {
                    map["RestoreStatus"] = self.restoreStatus!
                }
                if self.size != nil {
                    map["Size"] = self.size!
                }
                if self.snapshots != nil {
                    map["Snapshots"] = self.snapshots?.toMap()
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.storageClass != nil {
                    map["StorageClass"] = self.storageClass!
                }
                if self.storageLocation != nil {
                    map["StorageLocation"] = self.storageLocation!
                }
                if self.tags != nil {
                    map["Tags"] = self.tags!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                if self.userData != nil {
                    map["UserData"] = self.userData!
                }
                if self.videoId != nil {
                    map["VideoId"] = self.videoId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AppId"] as? String {
                    self.appId = value
                }
                if let value = dict["CateId"] as? Int64 {
                    self.cateId = value
                }
                if let value = dict["CateName"] as? String {
                    self.cateName = value
                }
                if let value = dict["CoverURL"] as? String {
                    self.coverURL = value
                }
                if let value = dict["CreationTime"] as? String {
                    self.creationTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Duration"] as? Double {
                    self.duration = value
                }
                if let value = dict["ModificationTime"] as? String {
                    self.modificationTime = value
                }
                if let value = dict["RestoreExpiration"] as? String {
                    self.restoreExpiration = value
                }
                if let value = dict["RestoreStatus"] as? String {
                    self.restoreStatus = value
                }
                if let value = dict["Size"] as? Int64 {
                    self.size = value
                }
                if let value = dict["Snapshots"] as? [String: Any?] {
                    var model = GetVideoListResponseBody.VideoList.Video.Snapshots()
                    model.fromMap(value)
                    self.snapshots = model
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["StorageClass"] as? String {
                    self.storageClass = value
                }
                if let value = dict["StorageLocation"] as? String {
                    self.storageLocation = value
                }
                if let value = dict["Tags"] as? String {
                    self.tags = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
                if let value = dict["UserData"] as? String {
                    self.userData = value
                }
                if let value = dict["VideoId"] as? String {
                    self.videoId = value
                }
            }
        }
        public var video: [GetVideoListResponseBody.VideoList.Video]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.video != nil {
                var tmp : [Any] = []
                for k in self.video! {
                    tmp.append(k.toMap())
                }
                map["Video"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Video"] as? [Any?] {
                var tmp : [GetVideoListResponseBody.VideoList.Video] = []
                for v in value {
                    if v != nil {
                        var model = GetVideoListResponseBody.VideoList.Video()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.video = tmp
            }
        }
    }
    public var requestId: String?

    public var total: Int32?

    public var videoList: GetVideoListResponseBody.VideoList?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.videoList?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        if self.videoList != nil {
            map["VideoList"] = self.videoList?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Total"] as? Int32 {
            self.total = value
        }
        if let value = dict["VideoList"] as? [String: Any?] {
            var model = GetVideoListResponseBody.VideoList()
            model.fromMap(value)
            self.videoList = model
        }
    }
}

public class GetVideoListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetVideoListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetVideoListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetVideoPlayAuthRequest : Tea.TeaModel {
    public var apiVersion: String?

    public var authInfoTimeout: Int64?

    public var videoId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiVersion != nil {
            map["ApiVersion"] = self.apiVersion!
        }
        if self.authInfoTimeout != nil {
            map["AuthInfoTimeout"] = self.authInfoTimeout!
        }
        if self.videoId != nil {
            map["VideoId"] = self.videoId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiVersion"] as? String {
            self.apiVersion = value
        }
        if let value = dict["AuthInfoTimeout"] as? Int64 {
            self.authInfoTimeout = value
        }
        if let value = dict["VideoId"] as? String {
            self.videoId = value
        }
    }
}

public class GetVideoPlayAuthResponseBody : Tea.TeaModel {
    public class VideoMeta : Tea.TeaModel {
        public var coverURL: String?

        public var duration: Double?

        public var status: String?

        public var title: String?

        public var videoId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.coverURL != nil {
                map["CoverURL"] = self.coverURL!
            }
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.videoId != nil {
                map["VideoId"] = self.videoId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CoverURL"] as? String {
                self.coverURL = value
            }
            if let value = dict["Duration"] as? Double {
                self.duration = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["VideoId"] as? String {
                self.videoId = value
            }
        }
    }
    public var playAuth: String?

    public var requestId: String?

    public var videoMeta: GetVideoPlayAuthResponseBody.VideoMeta?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.videoMeta?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.playAuth != nil {
            map["PlayAuth"] = self.playAuth!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.videoMeta != nil {
            map["VideoMeta"] = self.videoMeta?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PlayAuth"] as? String {
            self.playAuth = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["VideoMeta"] as? [String: Any?] {
            var model = GetVideoPlayAuthResponseBody.VideoMeta()
            model.fromMap(value)
            self.videoMeta = model
        }
    }
}

public class GetVideoPlayAuthResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetVideoPlayAuthResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetVideoPlayAuthResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetVodTemplateRequest : Tea.TeaModel {
    public var vodTemplateId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.vodTemplateId != nil {
            map["VodTemplateId"] = self.vodTemplateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["VodTemplateId"] as? String {
            self.vodTemplateId = value
        }
    }
}

public class GetVodTemplateResponseBody : Tea.TeaModel {
    public class VodTemplateInfo : Tea.TeaModel {
        public var creationTime: String?

        public var isDefault: String?

        public var modifyTime: String?

        public var name: String?

        public var templateConfig: String?

        public var templateType: String?

        public var vodTemplateId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.isDefault != nil {
                map["IsDefault"] = self.isDefault!
            }
            if self.modifyTime != nil {
                map["ModifyTime"] = self.modifyTime!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.templateConfig != nil {
                map["TemplateConfig"] = self.templateConfig!
            }
            if self.templateType != nil {
                map["TemplateType"] = self.templateType!
            }
            if self.vodTemplateId != nil {
                map["VodTemplateId"] = self.vodTemplateId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["IsDefault"] as? String {
                self.isDefault = value
            }
            if let value = dict["ModifyTime"] as? String {
                self.modifyTime = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["TemplateConfig"] as? String {
                self.templateConfig = value
            }
            if let value = dict["TemplateType"] as? String {
                self.templateType = value
            }
            if let value = dict["VodTemplateId"] as? String {
                self.vodTemplateId = value
            }
        }
    }
    public var requestId: String?

    public var vodTemplateInfo: GetVodTemplateResponseBody.VodTemplateInfo?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.vodTemplateInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.vodTemplateInfo != nil {
            map["VodTemplateInfo"] = self.vodTemplateInfo?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["VodTemplateInfo"] as? [String: Any?] {
            var model = GetVodTemplateResponseBody.VodTemplateInfo()
            model.fromMap(value)
            self.vodTemplateInfo = model
        }
    }
}

public class GetVodTemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetVodTemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetVodTemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetWatermarkRequest : Tea.TeaModel {
    public var watermarkId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.watermarkId != nil {
            map["WatermarkId"] = self.watermarkId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["WatermarkId"] as? String {
            self.watermarkId = value
        }
    }
}

public class GetWatermarkResponseBody : Tea.TeaModel {
    public class WatermarkInfo : Tea.TeaModel {
        public var appId: String?

        public var creationTime: String?

        public var fileUrl: String?

        public var isDefault: String?

        public var name: String?

        public var type: String?

        public var watermarkConfig: String?

        public var watermarkId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.fileUrl != nil {
                map["FileUrl"] = self.fileUrl!
            }
            if self.isDefault != nil {
                map["IsDefault"] = self.isDefault!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.watermarkConfig != nil {
                map["WatermarkConfig"] = self.watermarkConfig!
            }
            if self.watermarkId != nil {
                map["WatermarkId"] = self.watermarkId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppId"] as? String {
                self.appId = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["FileUrl"] as? String {
                self.fileUrl = value
            }
            if let value = dict["IsDefault"] as? String {
                self.isDefault = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["WatermarkConfig"] as? String {
                self.watermarkConfig = value
            }
            if let value = dict["WatermarkId"] as? String {
                self.watermarkId = value
            }
        }
    }
    public var requestId: String?

    public var watermarkInfo: GetWatermarkResponseBody.WatermarkInfo?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.watermarkInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.watermarkInfo != nil {
            map["WatermarkInfo"] = self.watermarkInfo?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["WatermarkInfo"] as? [String: Any?] {
            var model = GetWatermarkResponseBody.WatermarkInfo()
            model.fromMap(value)
            self.watermarkInfo = model
        }
    }
}

public class GetWatermarkResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetWatermarkResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetWatermarkResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListAIImageInfoRequest : Tea.TeaModel {
    public var videoId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.videoId != nil {
            map["VideoId"] = self.videoId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["VideoId"] as? String {
            self.videoId = value
        }
    }
}

public class ListAIImageInfoResponseBody : Tea.TeaModel {
    public class AIImageInfoList : Tea.TeaModel {
        public var AIImageInfoId: String?

        public var creationTime: String?

        public var fileURL: String?

        public var format: String?

        public var jobId: String?

        public var score: String?

        public var version: String?

        public var videoId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.AIImageInfoId != nil {
                map["AIImageInfoId"] = self.AIImageInfoId!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.fileURL != nil {
                map["FileURL"] = self.fileURL!
            }
            if self.format != nil {
                map["Format"] = self.format!
            }
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            if self.score != nil {
                map["Score"] = self.score!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            if self.videoId != nil {
                map["VideoId"] = self.videoId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AIImageInfoId"] as? String {
                self.AIImageInfoId = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["FileURL"] as? String {
                self.fileURL = value
            }
            if let value = dict["Format"] as? String {
                self.format = value
            }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
            if let value = dict["Score"] as? String {
                self.score = value
            }
            if let value = dict["Version"] as? String {
                self.version = value
            }
            if let value = dict["VideoId"] as? String {
                self.videoId = value
            }
        }
    }
    public var AIImageInfoList: [ListAIImageInfoResponseBody.AIImageInfoList]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.AIImageInfoList != nil {
            var tmp : [Any] = []
            for k in self.AIImageInfoList! {
                tmp.append(k.toMap())
            }
            map["AIImageInfoList"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AIImageInfoList"] as? [Any?] {
            var tmp : [ListAIImageInfoResponseBody.AIImageInfoList] = []
            for v in value {
                if v != nil {
                    var model = ListAIImageInfoResponseBody.AIImageInfoList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.AIImageInfoList = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListAIImageInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAIImageInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListAIImageInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListAIJobRequest : Tea.TeaModel {
    public var jobIds: String?

    public var ownerAccount: String?

    public var ownerId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.jobIds != nil {
            map["JobIds"] = self.jobIds!
        }
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["JobIds"] as? String {
            self.jobIds = value
        }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
        if let value = dict["OwnerId"] as? String {
            self.ownerId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? String {
            self.resourceOwnerId = value
        }
    }
}

public class ListAIJobResponseBody : Tea.TeaModel {
    public class AIJobList : Tea.TeaModel {
        public class AIJob : Tea.TeaModel {
            public var code: String?

            public var completeTime: String?

            public var creationTime: String?

            public var data: String?

            public var jobId: String?

            public var mediaId: String?

            public var message: String?

            public var status: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["Code"] = self.code!
                }
                if self.completeTime != nil {
                    map["CompleteTime"] = self.completeTime!
                }
                if self.creationTime != nil {
                    map["CreationTime"] = self.creationTime!
                }
                if self.data != nil {
                    map["Data"] = self.data!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.mediaId != nil {
                    map["MediaId"] = self.mediaId!
                }
                if self.message != nil {
                    map["Message"] = self.message!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Code"] as? String {
                    self.code = value
                }
                if let value = dict["CompleteTime"] as? String {
                    self.completeTime = value
                }
                if let value = dict["CreationTime"] as? String {
                    self.creationTime = value
                }
                if let value = dict["Data"] as? String {
                    self.data = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["MediaId"] as? String {
                    self.mediaId = value
                }
                if let value = dict["Message"] as? String {
                    self.message = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var AIJob: [ListAIJobResponseBody.AIJobList.AIJob]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.AIJob != nil {
                var tmp : [Any] = []
                for k in self.AIJob! {
                    tmp.append(k.toMap())
                }
                map["AIJob"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AIJob"] as? [Any?] {
                var tmp : [ListAIJobResponseBody.AIJobList.AIJob] = []
                for v in value {
                    if v != nil {
                        var model = ListAIJobResponseBody.AIJobList.AIJob()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.AIJob = tmp
            }
        }
    }
    public class NonExistAIJobIds : Tea.TeaModel {
        public var string: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.string != nil {
                map["String"] = self.string!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["String"] as? [String] {
                self.string = value
            }
        }
    }
    public var AIJobList: ListAIJobResponseBody.AIJobList?

    public var nonExistAIJobIds: ListAIJobResponseBody.NonExistAIJobIds?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.AIJobList?.validate()
        try self.nonExistAIJobIds?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.AIJobList != nil {
            map["AIJobList"] = self.AIJobList?.toMap()
        }
        if self.nonExistAIJobIds != nil {
            map["NonExistAIJobIds"] = self.nonExistAIJobIds?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AIJobList"] as? [String: Any?] {
            var model = ListAIJobResponseBody.AIJobList()
            model.fromMap(value)
            self.AIJobList = model
        }
        if let value = dict["NonExistAIJobIds"] as? [String: Any?] {
            var model = ListAIJobResponseBody.NonExistAIJobIds()
            model.fromMap(value)
            self.nonExistAIJobIds = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListAIJobResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAIJobResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListAIJobResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListAITemplateRequest : Tea.TeaModel {
    public var templateType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.templateType != nil {
            map["TemplateType"] = self.templateType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TemplateType"] as? String {
            self.templateType = value
        }
    }
}

public class ListAITemplateResponseBody : Tea.TeaModel {
    public class TemplateInfoList : Tea.TeaModel {
        public var creationTime: String?

        public var isDefault: String?

        public var modifyTime: String?

        public var source: String?

        public var templateConfig: String?

        public var templateId: String?

        public var templateName: String?

        public var templateType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.isDefault != nil {
                map["IsDefault"] = self.isDefault!
            }
            if self.modifyTime != nil {
                map["ModifyTime"] = self.modifyTime!
            }
            if self.source != nil {
                map["Source"] = self.source!
            }
            if self.templateConfig != nil {
                map["TemplateConfig"] = self.templateConfig!
            }
            if self.templateId != nil {
                map["TemplateId"] = self.templateId!
            }
            if self.templateName != nil {
                map["TemplateName"] = self.templateName!
            }
            if self.templateType != nil {
                map["TemplateType"] = self.templateType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["IsDefault"] as? String {
                self.isDefault = value
            }
            if let value = dict["ModifyTime"] as? String {
                self.modifyTime = value
            }
            if let value = dict["Source"] as? String {
                self.source = value
            }
            if let value = dict["TemplateConfig"] as? String {
                self.templateConfig = value
            }
            if let value = dict["TemplateId"] as? String {
                self.templateId = value
            }
            if let value = dict["TemplateName"] as? String {
                self.templateName = value
            }
            if let value = dict["TemplateType"] as? String {
                self.templateType = value
            }
        }
    }
    public var requestId: String?

    public var templateInfoList: [ListAITemplateResponseBody.TemplateInfoList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.templateInfoList != nil {
            var tmp : [Any] = []
            for k in self.templateInfoList! {
                tmp.append(k.toMap())
            }
            map["TemplateInfoList"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TemplateInfoList"] as? [Any?] {
            var tmp : [ListAITemplateResponseBody.TemplateInfoList] = []
            for v in value {
                if v != nil {
                    var model = ListAITemplateResponseBody.TemplateInfoList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.templateInfoList = tmp
        }
    }
}

public class ListAITemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAITemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListAITemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListAppInfoRequest : Tea.TeaModel {
    public var pageNo: Int32?

    public var pageSize: Int32?

    public var resourceGroupId: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.resourceGroupId != nil {
            map["ResourceGroupId"] = self.resourceGroupId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ResourceGroupId"] as? String {
            self.resourceGroupId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class ListAppInfoResponseBody : Tea.TeaModel {
    public class AppInfoList : Tea.TeaModel {
        public var appId: String?

        public var appName: String?

        public var creationTime: String?

        public var description_: String?

        public var modificationTime: String?

        public var regionId: String?

        public var resourceGroupId: String?

        public var status: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.appName != nil {
                map["AppName"] = self.appName!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.modificationTime != nil {
                map["ModificationTime"] = self.modificationTime!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.resourceGroupId != nil {
                map["ResourceGroupId"] = self.resourceGroupId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppId"] as? String {
                self.appId = value
            }
            if let value = dict["AppName"] as? String {
                self.appName = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["ModificationTime"] as? String {
                self.modificationTime = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["ResourceGroupId"] as? String {
                self.resourceGroupId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var appInfoList: [ListAppInfoResponseBody.AppInfoList]?

    public var requestId: String?

    public var total: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appInfoList != nil {
            var tmp : [Any] = []
            for k in self.appInfoList! {
                tmp.append(k.toMap())
            }
            map["AppInfoList"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppInfoList"] as? [Any?] {
            var tmp : [ListAppInfoResponseBody.AppInfoList] = []
            for v in value {
                if v != nil {
                    var model = ListAppInfoResponseBody.AppInfoList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.appInfoList = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Total"] as? Int32 {
            self.total = value
        }
    }
}

public class ListAppInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAppInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListAppInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListAppPoliciesForIdentityRequest : Tea.TeaModel {
    public var appId: String?

    public var identityName: String?

    public var identityType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.identityName != nil {
            map["IdentityName"] = self.identityName!
        }
        if self.identityType != nil {
            map["IdentityType"] = self.identityType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["IdentityName"] as? String {
            self.identityName = value
        }
        if let value = dict["IdentityType"] as? String {
            self.identityType = value
        }
    }
}

public class ListAppPoliciesForIdentityResponseBody : Tea.TeaModel {
    public class AppPolicyList : Tea.TeaModel {
        public var appId: String?

        public var creationTime: String?

        public var description_: String?

        public var modificationTime: String?

        public var policyName: String?

        public var policyType: String?

        public var policyValue: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.modificationTime != nil {
                map["ModificationTime"] = self.modificationTime!
            }
            if self.policyName != nil {
                map["PolicyName"] = self.policyName!
            }
            if self.policyType != nil {
                map["PolicyType"] = self.policyType!
            }
            if self.policyValue != nil {
                map["PolicyValue"] = self.policyValue!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppId"] as? String {
                self.appId = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["ModificationTime"] as? String {
                self.modificationTime = value
            }
            if let value = dict["PolicyName"] as? String {
                self.policyName = value
            }
            if let value = dict["PolicyType"] as? String {
                self.policyType = value
            }
            if let value = dict["PolicyValue"] as? String {
                self.policyValue = value
            }
        }
    }
    public var appPolicyList: [ListAppPoliciesForIdentityResponseBody.AppPolicyList]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appPolicyList != nil {
            var tmp : [Any] = []
            for k in self.appPolicyList! {
                tmp.append(k.toMap())
            }
            map["AppPolicyList"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppPolicyList"] as? [Any?] {
            var tmp : [ListAppPoliciesForIdentityResponseBody.AppPolicyList] = []
            for v in value {
                if v != nil {
                    var model = ListAppPoliciesForIdentityResponseBody.AppPolicyList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.appPolicyList = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListAppPoliciesForIdentityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAppPoliciesForIdentityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListAppPoliciesForIdentityResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListAuditSecurityIpRequest : Tea.TeaModel {
    public var securityGroupName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.securityGroupName != nil {
            map["SecurityGroupName"] = self.securityGroupName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SecurityGroupName"] as? String {
            self.securityGroupName = value
        }
    }
}

public class ListAuditSecurityIpResponseBody : Tea.TeaModel {
    public class SecurityIpList : Tea.TeaModel {
        public var creationTime: String?

        public var ips: String?

        public var modificationTime: String?

        public var securityGroupName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.ips != nil {
                map["Ips"] = self.ips!
            }
            if self.modificationTime != nil {
                map["ModificationTime"] = self.modificationTime!
            }
            if self.securityGroupName != nil {
                map["SecurityGroupName"] = self.securityGroupName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["Ips"] as? String {
                self.ips = value
            }
            if let value = dict["ModificationTime"] as? String {
                self.modificationTime = value
            }
            if let value = dict["SecurityGroupName"] as? String {
                self.securityGroupName = value
            }
        }
    }
    public var requestId: String?

    public var securityIpList: [ListAuditSecurityIpResponseBody.SecurityIpList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.securityIpList != nil {
            var tmp : [Any] = []
            for k in self.securityIpList! {
                tmp.append(k.toMap())
            }
            map["SecurityIpList"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SecurityIpList"] as? [Any?] {
            var tmp : [ListAuditSecurityIpResponseBody.SecurityIpList] = []
            for v in value {
                if v != nil {
                    var model = ListAuditSecurityIpResponseBody.SecurityIpList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.securityIpList = tmp
        }
    }
}

public class ListAuditSecurityIpResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAuditSecurityIpResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListAuditSecurityIpResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListDynamicImageRequest : Tea.TeaModel {
    public var videoId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.videoId != nil {
            map["VideoId"] = self.videoId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["VideoId"] as? String {
            self.videoId = value
        }
    }
}

public class ListDynamicImageResponseBody : Tea.TeaModel {
    public class DynamicImageList : Tea.TeaModel {
        public var creationTime: String?

        public var duration: String?

        public var dynamicImageId: String?

        public var fileSize: String?

        public var fileURL: String?

        public var format: String?

        public var fps: String?

        public var height: String?

        public var jobId: String?

        public var videoId: String?

        public var width: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.dynamicImageId != nil {
                map["DynamicImageId"] = self.dynamicImageId!
            }
            if self.fileSize != nil {
                map["FileSize"] = self.fileSize!
            }
            if self.fileURL != nil {
                map["FileURL"] = self.fileURL!
            }
            if self.format != nil {
                map["Format"] = self.format!
            }
            if self.fps != nil {
                map["Fps"] = self.fps!
            }
            if self.height != nil {
                map["Height"] = self.height!
            }
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            if self.videoId != nil {
                map["VideoId"] = self.videoId!
            }
            if self.width != nil {
                map["Width"] = self.width!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["Duration"] as? String {
                self.duration = value
            }
            if let value = dict["DynamicImageId"] as? String {
                self.dynamicImageId = value
            }
            if let value = dict["FileSize"] as? String {
                self.fileSize = value
            }
            if let value = dict["FileURL"] as? String {
                self.fileURL = value
            }
            if let value = dict["Format"] as? String {
                self.format = value
            }
            if let value = dict["Fps"] as? String {
                self.fps = value
            }
            if let value = dict["Height"] as? String {
                self.height = value
            }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
            if let value = dict["VideoId"] as? String {
                self.videoId = value
            }
            if let value = dict["Width"] as? String {
                self.width = value
            }
        }
    }
    public var dynamicImageList: [ListDynamicImageResponseBody.DynamicImageList]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dynamicImageList != nil {
            var tmp : [Any] = []
            for k in self.dynamicImageList! {
                tmp.append(k.toMap())
            }
            map["DynamicImageList"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DynamicImageList"] as? [Any?] {
            var tmp : [ListDynamicImageResponseBody.DynamicImageList] = []
            for v in value {
                if v != nil {
                    var model = ListDynamicImageResponseBody.DynamicImageList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.dynamicImageList = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListDynamicImageResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListDynamicImageResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListDynamicImageResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListJobInfoRequest : Tea.TeaModel {
    public var jobType: String?

    public var mediaId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.jobType != nil {
            map["JobType"] = self.jobType!
        }
        if self.mediaId != nil {
            map["MediaId"] = self.mediaId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["JobType"] as? String {
            self.jobType = value
        }
        if let value = dict["MediaId"] as? String {
            self.mediaId = value
        }
    }
}

public class ListJobInfoResponseBody : Tea.TeaModel {
    public class JobInfoList : Tea.TeaModel {
        public var completeTime: String?

        public var createTime: String?

        public var jobId: String?

        public var status: String?

        public var userId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.completeTime != nil {
                map["CompleteTime"] = self.completeTime!
            }
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CompleteTime"] as? String {
                self.completeTime = value
            }
            if let value = dict["CreateTime"] as? String {
                self.createTime = value
            }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["UserId"] as? Int64 {
                self.userId = value
            }
        }
    }
    public var jobInfoList: [ListJobInfoResponseBody.JobInfoList]?

    public var jobType: String?

    public var mediaId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.jobInfoList != nil {
            var tmp : [Any] = []
            for k in self.jobInfoList! {
                tmp.append(k.toMap())
            }
            map["JobInfoList"] = tmp
        }
        if self.jobType != nil {
            map["JobType"] = self.jobType!
        }
        if self.mediaId != nil {
            map["MediaId"] = self.mediaId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["JobInfoList"] as? [Any?] {
            var tmp : [ListJobInfoResponseBody.JobInfoList] = []
            for v in value {
                if v != nil {
                    var model = ListJobInfoResponseBody.JobInfoList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.jobInfoList = tmp
        }
        if let value = dict["JobType"] as? String {
            self.jobType = value
        }
        if let value = dict["MediaId"] as? String {
            self.mediaId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListJobInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListJobInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListJobInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListLiveRecordVideoRequest : Tea.TeaModel {
    public var appName: String?

    public var domainName: String?

    public var endTime: String?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var sortBy: String?

    public var startTime: String?

    public var streamName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appName != nil {
            map["AppName"] = self.appName!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.sortBy != nil {
            map["SortBy"] = self.sortBy!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.streamName != nil {
            map["StreamName"] = self.streamName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppName"] as? String {
            self.appName = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SortBy"] as? String {
            self.sortBy = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["StreamName"] as? String {
            self.streamName = value
        }
    }
}

public class ListLiveRecordVideoResponseBody : Tea.TeaModel {
    public class LiveRecordVideoList : Tea.TeaModel {
        public class LiveRecordVideo : Tea.TeaModel {
            public class Video : Tea.TeaModel {
                public class Snapshots : Tea.TeaModel {
                    public var snapshot: [String]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.snapshot != nil {
                            map["Snapshot"] = self.snapshot!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Snapshot"] as? [String] {
                            self.snapshot = value
                        }
                    }
                }
                public var cateId: Int32?

                public var cateName: String?

                public var coverURL: String?

                public var creationTime: String?

                public var description_: String?

                public var duration: Double?

                public var modifyTime: String?

                public var size: Int64?

                public var snapshots: ListLiveRecordVideoResponseBody.LiveRecordVideoList.LiveRecordVideo.Video.Snapshots?

                public var status: String?

                public var tags: String?

                public var templateGroupId: String?

                public var title: String?

                public var videoId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.snapshots?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.cateId != nil {
                        map["CateId"] = self.cateId!
                    }
                    if self.cateName != nil {
                        map["CateName"] = self.cateName!
                    }
                    if self.coverURL != nil {
                        map["CoverURL"] = self.coverURL!
                    }
                    if self.creationTime != nil {
                        map["CreationTime"] = self.creationTime!
                    }
                    if self.description_ != nil {
                        map["Description"] = self.description_!
                    }
                    if self.duration != nil {
                        map["Duration"] = self.duration!
                    }
                    if self.modifyTime != nil {
                        map["ModifyTime"] = self.modifyTime!
                    }
                    if self.size != nil {
                        map["Size"] = self.size!
                    }
                    if self.snapshots != nil {
                        map["Snapshots"] = self.snapshots?.toMap()
                    }
                    if self.status != nil {
                        map["Status"] = self.status!
                    }
                    if self.tags != nil {
                        map["Tags"] = self.tags!
                    }
                    if self.templateGroupId != nil {
                        map["TemplateGroupId"] = self.templateGroupId!
                    }
                    if self.title != nil {
                        map["Title"] = self.title!
                    }
                    if self.videoId != nil {
                        map["VideoId"] = self.videoId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CateId"] as? Int32 {
                        self.cateId = value
                    }
                    if let value = dict["CateName"] as? String {
                        self.cateName = value
                    }
                    if let value = dict["CoverURL"] as? String {
                        self.coverURL = value
                    }
                    if let value = dict["CreationTime"] as? String {
                        self.creationTime = value
                    }
                    if let value = dict["Description"] as? String {
                        self.description_ = value
                    }
                    if let value = dict["Duration"] as? Double {
                        self.duration = value
                    }
                    if let value = dict["ModifyTime"] as? String {
                        self.modifyTime = value
                    }
                    if let value = dict["Size"] as? Int64 {
                        self.size = value
                    }
                    if let value = dict["Snapshots"] as? [String: Any?] {
                        var model = ListLiveRecordVideoResponseBody.LiveRecordVideoList.LiveRecordVideo.Video.Snapshots()
                        model.fromMap(value)
                        self.snapshots = model
                    }
                    if let value = dict["Status"] as? String {
                        self.status = value
                    }
                    if let value = dict["Tags"] as? String {
                        self.tags = value
                    }
                    if let value = dict["TemplateGroupId"] as? String {
                        self.templateGroupId = value
                    }
                    if let value = dict["Title"] as? String {
                        self.title = value
                    }
                    if let value = dict["VideoId"] as? String {
                        self.videoId = value
                    }
                }
            }
            public var appName: String?

            public var domainName: String?

            public var playlistId: String?

            public var recordEndTime: String?

            public var recordStartTime: String?

            public var streamName: String?

            public var video: ListLiveRecordVideoResponseBody.LiveRecordVideoList.LiveRecordVideo.Video?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.video?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appName != nil {
                    map["AppName"] = self.appName!
                }
                if self.domainName != nil {
                    map["DomainName"] = self.domainName!
                }
                if self.playlistId != nil {
                    map["PlaylistId"] = self.playlistId!
                }
                if self.recordEndTime != nil {
                    map["RecordEndTime"] = self.recordEndTime!
                }
                if self.recordStartTime != nil {
                    map["RecordStartTime"] = self.recordStartTime!
                }
                if self.streamName != nil {
                    map["StreamName"] = self.streamName!
                }
                if self.video != nil {
                    map["Video"] = self.video?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AppName"] as? String {
                    self.appName = value
                }
                if let value = dict["DomainName"] as? String {
                    self.domainName = value
                }
                if let value = dict["PlaylistId"] as? String {
                    self.playlistId = value
                }
                if let value = dict["RecordEndTime"] as? String {
                    self.recordEndTime = value
                }
                if let value = dict["RecordStartTime"] as? String {
                    self.recordStartTime = value
                }
                if let value = dict["StreamName"] as? String {
                    self.streamName = value
                }
                if let value = dict["Video"] as? [String: Any?] {
                    var model = ListLiveRecordVideoResponseBody.LiveRecordVideoList.LiveRecordVideo.Video()
                    model.fromMap(value)
                    self.video = model
                }
            }
        }
        public var liveRecordVideo: [ListLiveRecordVideoResponseBody.LiveRecordVideoList.LiveRecordVideo]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.liveRecordVideo != nil {
                var tmp : [Any] = []
                for k in self.liveRecordVideo! {
                    tmp.append(k.toMap())
                }
                map["LiveRecordVideo"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["LiveRecordVideo"] as? [Any?] {
                var tmp : [ListLiveRecordVideoResponseBody.LiveRecordVideoList.LiveRecordVideo] = []
                for v in value {
                    if v != nil {
                        var model = ListLiveRecordVideoResponseBody.LiveRecordVideoList.LiveRecordVideo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.liveRecordVideo = tmp
            }
        }
    }
    public var liveRecordVideoList: ListLiveRecordVideoResponseBody.LiveRecordVideoList?

    public var requestId: String?

    public var total: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.liveRecordVideoList?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.liveRecordVideoList != nil {
            map["LiveRecordVideoList"] = self.liveRecordVideoList?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["LiveRecordVideoList"] as? [String: Any?] {
            var model = ListLiveRecordVideoResponseBody.LiveRecordVideoList()
            model.fromMap(value)
            self.liveRecordVideoList = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Total"] as? Int32 {
            self.total = value
        }
    }
}

public class ListLiveRecordVideoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListLiveRecordVideoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListLiveRecordVideoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListSnapshotsRequest : Tea.TeaModel {
    public var authTimeout: String?

    public var pageNo: String?

    public var pageSize: String?

    public var snapshotType: String?

    public var videoId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.authTimeout != nil {
            map["AuthTimeout"] = self.authTimeout!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.snapshotType != nil {
            map["SnapshotType"] = self.snapshotType!
        }
        if self.videoId != nil {
            map["VideoId"] = self.videoId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuthTimeout"] as? String {
            self.authTimeout = value
        }
        if let value = dict["PageNo"] as? String {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["SnapshotType"] as? String {
            self.snapshotType = value
        }
        if let value = dict["VideoId"] as? String {
            self.videoId = value
        }
    }
}

public class ListSnapshotsResponseBody : Tea.TeaModel {
    public class MediaSnapshot : Tea.TeaModel {
        public class Snapshots : Tea.TeaModel {
            public class Snapshot : Tea.TeaModel {
                public var index: Int64?

                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.index != nil {
                        map["Index"] = self.index!
                    }
                    if self.url != nil {
                        map["Url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Index"] as? Int64 {
                        self.index = value
                    }
                    if let value = dict["Url"] as? String {
                        self.url = value
                    }
                }
            }
            public var snapshot: [ListSnapshotsResponseBody.MediaSnapshot.Snapshots.Snapshot]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.snapshot != nil {
                    var tmp : [Any] = []
                    for k in self.snapshot! {
                        tmp.append(k.toMap())
                    }
                    map["Snapshot"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Snapshot"] as? [Any?] {
                    var tmp : [ListSnapshotsResponseBody.MediaSnapshot.Snapshots.Snapshot] = []
                    for v in value {
                        if v != nil {
                            var model = ListSnapshotsResponseBody.MediaSnapshot.Snapshots.Snapshot()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.snapshot = tmp
                }
            }
        }
        public var creationTime: String?

        public var jobId: String?

        public var regular: String?

        public var snapshots: ListSnapshotsResponseBody.MediaSnapshot.Snapshots?

        public var total: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.snapshots?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            if self.regular != nil {
                map["Regular"] = self.regular!
            }
            if self.snapshots != nil {
                map["Snapshots"] = self.snapshots?.toMap()
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
            if let value = dict["Regular"] as? String {
                self.regular = value
            }
            if let value = dict["Snapshots"] as? [String: Any?] {
                var model = ListSnapshotsResponseBody.MediaSnapshot.Snapshots()
                model.fromMap(value)
                self.snapshots = model
            }
            if let value = dict["Total"] as? Int64 {
                self.total = value
            }
        }
    }
    public var mediaSnapshot: ListSnapshotsResponseBody.MediaSnapshot?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.mediaSnapshot?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mediaSnapshot != nil {
            map["MediaSnapshot"] = self.mediaSnapshot?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MediaSnapshot"] as? [String: Any?] {
            var model = ListSnapshotsResponseBody.MediaSnapshot()
            model.fromMap(value)
            self.mediaSnapshot = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListSnapshotsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListSnapshotsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListSnapshotsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListTranscodeTaskRequest : Tea.TeaModel {
    public var endTime: String?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var startTime: String?

    public var videoId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.videoId != nil {
            map["VideoId"] = self.videoId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["VideoId"] as? String {
            self.videoId = value
        }
    }
}

public class ListTranscodeTaskResponseBody : Tea.TeaModel {
    public class TranscodeTaskList : Tea.TeaModel {
        public var completeTime: String?

        public var creationTime: String?

        public var taskStatus: String?

        public var transcodeTaskId: String?

        public var transcodeTemplateGroupId: String?

        public var trigger: String?

        public var videoId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.completeTime != nil {
                map["CompleteTime"] = self.completeTime!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.taskStatus != nil {
                map["TaskStatus"] = self.taskStatus!
            }
            if self.transcodeTaskId != nil {
                map["TranscodeTaskId"] = self.transcodeTaskId!
            }
            if self.transcodeTemplateGroupId != nil {
                map["TranscodeTemplateGroupId"] = self.transcodeTemplateGroupId!
            }
            if self.trigger != nil {
                map["Trigger"] = self.trigger!
            }
            if self.videoId != nil {
                map["VideoId"] = self.videoId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CompleteTime"] as? String {
                self.completeTime = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["TaskStatus"] as? String {
                self.taskStatus = value
            }
            if let value = dict["TranscodeTaskId"] as? String {
                self.transcodeTaskId = value
            }
            if let value = dict["TranscodeTemplateGroupId"] as? String {
                self.transcodeTemplateGroupId = value
            }
            if let value = dict["Trigger"] as? String {
                self.trigger = value
            }
            if let value = dict["VideoId"] as? String {
                self.videoId = value
            }
        }
    }
    public var requestId: String?

    public var transcodeTaskList: [ListTranscodeTaskResponseBody.TranscodeTaskList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.transcodeTaskList != nil {
            var tmp : [Any] = []
            for k in self.transcodeTaskList! {
                tmp.append(k.toMap())
            }
            map["TranscodeTaskList"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TranscodeTaskList"] as? [Any?] {
            var tmp : [ListTranscodeTaskResponseBody.TranscodeTaskList] = []
            for v in value {
                if v != nil {
                    var model = ListTranscodeTaskResponseBody.TranscodeTaskList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.transcodeTaskList = tmp
        }
    }
}

public class ListTranscodeTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTranscodeTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListTranscodeTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListTranscodeTemplateGroupRequest : Tea.TeaModel {
    public var appId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
    }
}

public class ListTranscodeTemplateGroupResponseBody : Tea.TeaModel {
    public class TranscodeTemplateGroupList : Tea.TeaModel {
        public var appId: String?

        public var creationTime: String?

        public var isDefault: String?

        public var locked: String?

        public var modifyTime: String?

        public var name: String?

        public var transcodeTemplateGroupId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.isDefault != nil {
                map["IsDefault"] = self.isDefault!
            }
            if self.locked != nil {
                map["Locked"] = self.locked!
            }
            if self.modifyTime != nil {
                map["ModifyTime"] = self.modifyTime!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.transcodeTemplateGroupId != nil {
                map["TranscodeTemplateGroupId"] = self.transcodeTemplateGroupId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppId"] as? String {
                self.appId = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["IsDefault"] as? String {
                self.isDefault = value
            }
            if let value = dict["Locked"] as? String {
                self.locked = value
            }
            if let value = dict["ModifyTime"] as? String {
                self.modifyTime = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["TranscodeTemplateGroupId"] as? String {
                self.transcodeTemplateGroupId = value
            }
        }
    }
    public var requestId: String?

    public var transcodeTemplateGroupList: [ListTranscodeTemplateGroupResponseBody.TranscodeTemplateGroupList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.transcodeTemplateGroupList != nil {
            var tmp : [Any] = []
            for k in self.transcodeTemplateGroupList! {
                tmp.append(k.toMap())
            }
            map["TranscodeTemplateGroupList"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TranscodeTemplateGroupList"] as? [Any?] {
            var tmp : [ListTranscodeTemplateGroupResponseBody.TranscodeTemplateGroupList] = []
            for v in value {
                if v != nil {
                    var model = ListTranscodeTemplateGroupResponseBody.TranscodeTemplateGroupList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.transcodeTemplateGroupList = tmp
        }
    }
}

public class ListTranscodeTemplateGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTranscodeTemplateGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListTranscodeTemplateGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListVodTemplateRequest : Tea.TeaModel {
    public var appId: String?

    public var templateType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.templateType != nil {
            map["TemplateType"] = self.templateType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["TemplateType"] as? String {
            self.templateType = value
        }
    }
}

public class ListVodTemplateResponseBody : Tea.TeaModel {
    public class VodTemplateInfoList : Tea.TeaModel {
        public var appId: String?

        public var creationTime: String?

        public var isDefault: String?

        public var modifyTime: String?

        public var name: String?

        public var templateConfig: String?

        public var templateType: String?

        public var vodTemplateId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.isDefault != nil {
                map["IsDefault"] = self.isDefault!
            }
            if self.modifyTime != nil {
                map["ModifyTime"] = self.modifyTime!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.templateConfig != nil {
                map["TemplateConfig"] = self.templateConfig!
            }
            if self.templateType != nil {
                map["TemplateType"] = self.templateType!
            }
            if self.vodTemplateId != nil {
                map["VodTemplateId"] = self.vodTemplateId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppId"] as? String {
                self.appId = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["IsDefault"] as? String {
                self.isDefault = value
            }
            if let value = dict["ModifyTime"] as? String {
                self.modifyTime = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["TemplateConfig"] as? String {
                self.templateConfig = value
            }
            if let value = dict["TemplateType"] as? String {
                self.templateType = value
            }
            if let value = dict["VodTemplateId"] as? String {
                self.vodTemplateId = value
            }
        }
    }
    public var requestId: String?

    public var vodTemplateInfoList: [ListVodTemplateResponseBody.VodTemplateInfoList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.vodTemplateInfoList != nil {
            var tmp : [Any] = []
            for k in self.vodTemplateInfoList! {
                tmp.append(k.toMap())
            }
            map["VodTemplateInfoList"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["VodTemplateInfoList"] as? [Any?] {
            var tmp : [ListVodTemplateResponseBody.VodTemplateInfoList] = []
            for v in value {
                if v != nil {
                    var model = ListVodTemplateResponseBody.VodTemplateInfoList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.vodTemplateInfoList = tmp
        }
    }
}

public class ListVodTemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListVodTemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListVodTemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListWatermarkRequest : Tea.TeaModel {
    public var appId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
    }
}

public class ListWatermarkResponseBody : Tea.TeaModel {
    public class WatermarkInfos : Tea.TeaModel {
        public var appId: String?

        public var creationTime: String?

        public var fileUrl: String?

        public var isDefault: String?

        public var name: String?

        public var type: String?

        public var watermarkConfig: String?

        public var watermarkId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.fileUrl != nil {
                map["FileUrl"] = self.fileUrl!
            }
            if self.isDefault != nil {
                map["IsDefault"] = self.isDefault!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.watermarkConfig != nil {
                map["WatermarkConfig"] = self.watermarkConfig!
            }
            if self.watermarkId != nil {
                map["WatermarkId"] = self.watermarkId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppId"] as? String {
                self.appId = value
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["FileUrl"] as? String {
                self.fileUrl = value
            }
            if let value = dict["IsDefault"] as? String {
                self.isDefault = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["WatermarkConfig"] as? String {
                self.watermarkConfig = value
            }
            if let value = dict["WatermarkId"] as? String {
                self.watermarkId = value
            }
        }
    }
    public var requestId: String?

    public var watermarkInfos: [ListWatermarkResponseBody.WatermarkInfos]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.watermarkInfos != nil {
            var tmp : [Any] = []
            for k in self.watermarkInfos! {
                tmp.append(k.toMap())
            }
            map["WatermarkInfos"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["WatermarkInfos"] as? [Any?] {
            var tmp : [ListWatermarkResponseBody.WatermarkInfos] = []
            for v in value {
                if v != nil {
                    var model = ListWatermarkResponseBody.WatermarkInfos()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.watermarkInfos = tmp
        }
    }
}

public class ListWatermarkResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListWatermarkResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListWatermarkResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class MoveAppResourceRequest : Tea.TeaModel {
    public var resourceIds: String?

    public var resourceType: String?

    public var targetAppId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.resourceIds != nil {
            map["ResourceIds"] = self.resourceIds!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.targetAppId != nil {
            map["TargetAppId"] = self.targetAppId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ResourceIds"] as? String {
            self.resourceIds = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["TargetAppId"] as? String {
            self.targetAppId = value
        }
    }
}

public class MoveAppResourceResponseBody : Tea.TeaModel {
    public var failedResourceIds: [String]?

    public var nonExistResourceIds: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.failedResourceIds != nil {
            map["FailedResourceIds"] = self.failedResourceIds!
        }
        if self.nonExistResourceIds != nil {
            map["NonExistResourceIds"] = self.nonExistResourceIds!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FailedResourceIds"] as? [String] {
            self.failedResourceIds = value
        }
        if let value = dict["NonExistResourceIds"] as? [String] {
            self.nonExistResourceIds = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class MoveAppResourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: MoveAppResourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = MoveAppResourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PreloadVodObjectCachesRequest : Tea.TeaModel {
    public var area: String?

    public var l2Preload: Bool?

    public var objectPath: String?

    public var ownerId: Int64?

    public var securityToken: String?

    public var withHeader: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.area != nil {
            map["Area"] = self.area!
        }
        if self.l2Preload != nil {
            map["L2Preload"] = self.l2Preload!
        }
        if self.objectPath != nil {
            map["ObjectPath"] = self.objectPath!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.withHeader != nil {
            map["WithHeader"] = self.withHeader!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Area"] as? String {
            self.area = value
        }
        if let value = dict["L2Preload"] as? Bool {
            self.l2Preload = value
        }
        if let value = dict["ObjectPath"] as? String {
            self.objectPath = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["WithHeader"] as? String {
            self.withHeader = value
        }
    }
}

public class PreloadVodObjectCachesResponseBody : Tea.TeaModel {
    public var preloadTaskId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.preloadTaskId != nil {
            map["PreloadTaskId"] = self.preloadTaskId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PreloadTaskId"] as? String {
            self.preloadTaskId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class PreloadVodObjectCachesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PreloadVodObjectCachesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PreloadVodObjectCachesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ProduceEditingProjectVideoRequest : Tea.TeaModel {
    public var appId: String?

    public var coverURL: String?

    public var description_: String?

    public var mediaMetadata: String?

    public var ownerId: Int64?

    public var produceConfig: String?

    public var projectId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var timeline: String?

    public var title: String?

    public var userData: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.coverURL != nil {
            map["CoverURL"] = self.coverURL!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.mediaMetadata != nil {
            map["MediaMetadata"] = self.mediaMetadata!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.produceConfig != nil {
            map["ProduceConfig"] = self.produceConfig!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.timeline != nil {
            map["Timeline"] = self.timeline!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        if self.userData != nil {
            map["UserData"] = self.userData!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["CoverURL"] as? String {
            self.coverURL = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["MediaMetadata"] as? String {
            self.mediaMetadata = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ProduceConfig"] as? String {
            self.produceConfig = value
        }
        if let value = dict["ProjectId"] as? String {
            self.projectId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["Timeline"] as? String {
            self.timeline = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
        if let value = dict["UserData"] as? String {
            self.userData = value
        }
    }
}

public class ProduceEditingProjectVideoResponseBody : Tea.TeaModel {
    public var mediaId: String?

    public var projectId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mediaId != nil {
            map["MediaId"] = self.mediaId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MediaId"] as? String {
            self.mediaId = value
        }
        if let value = dict["ProjectId"] as? String {
            self.projectId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ProduceEditingProjectVideoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ProduceEditingProjectVideoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ProduceEditingProjectVideoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RefreshMediaPlayUrlsRequest : Tea.TeaModel {
    public var definitions: String?

    public var formats: String?

    public var mediaIds: String?

    public var resultType: String?

    public var sliceCount: Int32?

    public var sliceFlag: Bool?

    public var streamType: String?

    public var taskType: String?

    public var userData: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.definitions != nil {
            map["Definitions"] = self.definitions!
        }
        if self.formats != nil {
            map["Formats"] = self.formats!
        }
        if self.mediaIds != nil {
            map["MediaIds"] = self.mediaIds!
        }
        if self.resultType != nil {
            map["ResultType"] = self.resultType!
        }
        if self.sliceCount != nil {
            map["SliceCount"] = self.sliceCount!
        }
        if self.sliceFlag != nil {
            map["SliceFlag"] = self.sliceFlag!
        }
        if self.streamType != nil {
            map["StreamType"] = self.streamType!
        }
        if self.taskType != nil {
            map["TaskType"] = self.taskType!
        }
        if self.userData != nil {
            map["UserData"] = self.userData!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Definitions"] as? String {
            self.definitions = value
        }
        if let value = dict["Formats"] as? String {
            self.formats = value
        }
        if let value = dict["MediaIds"] as? String {
            self.mediaIds = value
        }
        if let value = dict["ResultType"] as? String {
            self.resultType = value
        }
        if let value = dict["SliceCount"] as? Int32 {
            self.sliceCount = value
        }
        if let value = dict["SliceFlag"] as? Bool {
            self.sliceFlag = value
        }
        if let value = dict["StreamType"] as? String {
            self.streamType = value
        }
        if let value = dict["TaskType"] as? String {
            self.taskType = value
        }
        if let value = dict["UserData"] as? String {
            self.userData = value
        }
    }
}

public class RefreshMediaPlayUrlsResponseBody : Tea.TeaModel {
    public var forbiddenMediaIds: String?

    public var mediaRefreshJobId: String?

    public var nonExistMediaIds: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.forbiddenMediaIds != nil {
            map["ForbiddenMediaIds"] = self.forbiddenMediaIds!
        }
        if self.mediaRefreshJobId != nil {
            map["MediaRefreshJobId"] = self.mediaRefreshJobId!
        }
        if self.nonExistMediaIds != nil {
            map["NonExistMediaIds"] = self.nonExistMediaIds!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ForbiddenMediaIds"] as? String {
            self.forbiddenMediaIds = value
        }
        if let value = dict["MediaRefreshJobId"] as? String {
            self.mediaRefreshJobId = value
        }
        if let value = dict["NonExistMediaIds"] as? String {
            self.nonExistMediaIds = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RefreshMediaPlayUrlsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RefreshMediaPlayUrlsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RefreshMediaPlayUrlsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RefreshUploadVideoRequest : Tea.TeaModel {
    public var ownerId: Int64?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: Int64?

    public var videoId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.videoId != nil {
            map["VideoId"] = self.videoId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? Int64 {
            self.resourceOwnerId = value
        }
        if let value = dict["VideoId"] as? String {
            self.videoId = value
        }
    }
}

public class RefreshUploadVideoResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var uploadAddress: String?

    public var uploadAuth: String?

    public var videoId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.uploadAddress != nil {
            map["UploadAddress"] = self.uploadAddress!
        }
        if self.uploadAuth != nil {
            map["UploadAuth"] = self.uploadAuth!
        }
        if self.videoId != nil {
            map["VideoId"] = self.videoId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["UploadAddress"] as? String {
            self.uploadAddress = value
        }
        if let value = dict["UploadAuth"] as? String {
            self.uploadAuth = value
        }
        if let value = dict["VideoId"] as? String {
            self.videoId = value
        }
    }
}

public class RefreshUploadVideoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RefreshUploadVideoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RefreshUploadVideoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RefreshVodObjectCachesRequest : Tea.TeaModel {
    public var force: Bool?

    public var objectPath: String?

    public var objectType: String?

    public var ownerId: Int64?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.force != nil {
            map["Force"] = self.force!
        }
        if self.objectPath != nil {
            map["ObjectPath"] = self.objectPath!
        }
        if self.objectType != nil {
            map["ObjectType"] = self.objectType!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Force"] as? Bool {
            self.force = value
        }
        if let value = dict["ObjectPath"] as? String {
            self.objectPath = value
        }
        if let value = dict["ObjectType"] as? String {
            self.objectType = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class RefreshVodObjectCachesResponseBody : Tea.TeaModel {
    public var refreshTaskId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.refreshTaskId != nil {
            map["RefreshTaskId"] = self.refreshTaskId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RefreshTaskId"] as? String {
            self.refreshTaskId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RefreshVodObjectCachesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RefreshVodObjectCachesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RefreshVodObjectCachesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RegisterMediaRequest : Tea.TeaModel {
    public var registerMetadatas: String?

    public var templateGroupId: String?

    public var userData: String?

    public var workflowId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.registerMetadatas != nil {
            map["RegisterMetadatas"] = self.registerMetadatas!
        }
        if self.templateGroupId != nil {
            map["TemplateGroupId"] = self.templateGroupId!
        }
        if self.userData != nil {
            map["UserData"] = self.userData!
        }
        if self.workflowId != nil {
            map["WorkflowId"] = self.workflowId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RegisterMetadatas"] as? String {
            self.registerMetadatas = value
        }
        if let value = dict["TemplateGroupId"] as? String {
            self.templateGroupId = value
        }
        if let value = dict["UserData"] as? String {
            self.userData = value
        }
        if let value = dict["WorkflowId"] as? String {
            self.workflowId = value
        }
    }
}

public class RegisterMediaResponseBody : Tea.TeaModel {
    public class RegisteredMediaList : Tea.TeaModel {
        public var fileURL: String?

        public var mediaId: String?

        public var newRegister: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fileURL != nil {
                map["FileURL"] = self.fileURL!
            }
            if self.mediaId != nil {
                map["MediaId"] = self.mediaId!
            }
            if self.newRegister != nil {
                map["NewRegister"] = self.newRegister!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FileURL"] as? String {
                self.fileURL = value
            }
            if let value = dict["MediaId"] as? String {
                self.mediaId = value
            }
            if let value = dict["NewRegister"] as? Bool {
                self.newRegister = value
            }
        }
    }
    public var failedFileURLs: [String]?

    public var registeredMediaList: [RegisterMediaResponseBody.RegisteredMediaList]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.failedFileURLs != nil {
            map["FailedFileURLs"] = self.failedFileURLs!
        }
        if self.registeredMediaList != nil {
            var tmp : [Any] = []
            for k in self.registeredMediaList! {
                tmp.append(k.toMap())
            }
            map["RegisteredMediaList"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FailedFileURLs"] as? [String] {
            self.failedFileURLs = value
        }
        if let value = dict["RegisteredMediaList"] as? [Any?] {
            var tmp : [RegisterMediaResponseBody.RegisteredMediaList] = []
            for v in value {
                if v != nil {
                    var model = RegisterMediaResponseBody.RegisteredMediaList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.registeredMediaList = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RegisterMediaResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RegisterMediaResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RegisterMediaResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RestoreMediaRequest : Tea.TeaModel {
    public var mediaIds: String?

    public var restoreDays: String?

    public var restoreTier: String?

    public var scope: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mediaIds != nil {
            map["MediaIds"] = self.mediaIds!
        }
        if self.restoreDays != nil {
            map["RestoreDays"] = self.restoreDays!
        }
        if self.restoreTier != nil {
            map["RestoreTier"] = self.restoreTier!
        }
        if self.scope != nil {
            map["Scope"] = self.scope!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MediaIds"] as? String {
            self.mediaIds = value
        }
        if let value = dict["RestoreDays"] as? String {
            self.restoreDays = value
        }
        if let value = dict["RestoreTier"] as? String {
            self.restoreTier = value
        }
        if let value = dict["Scope"] as? String {
            self.scope = value
        }
    }
}

public class RestoreMediaResponseBody : Tea.TeaModel {
    public class ForbiddenList : Tea.TeaModel {
        public class MediaForbiddenReasonDTO : Tea.TeaModel {
            public var mediaId: String?

            public var reason: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.mediaId != nil {
                    map["MediaId"] = self.mediaId!
                }
                if self.reason != nil {
                    map["Reason"] = self.reason!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["MediaId"] as? String {
                    self.mediaId = value
                }
                if let value = dict["Reason"] as? String {
                    self.reason = value
                }
            }
        }
        public var mediaForbiddenReasonDTO: [RestoreMediaResponseBody.ForbiddenList.MediaForbiddenReasonDTO]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.mediaForbiddenReasonDTO != nil {
                var tmp : [Any] = []
                for k in self.mediaForbiddenReasonDTO! {
                    tmp.append(k.toMap())
                }
                map["MediaForbiddenReasonDTO"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MediaForbiddenReasonDTO"] as? [Any?] {
                var tmp : [RestoreMediaResponseBody.ForbiddenList.MediaForbiddenReasonDTO] = []
                for v in value {
                    if v != nil {
                        var model = RestoreMediaResponseBody.ForbiddenList.MediaForbiddenReasonDTO()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.mediaForbiddenReasonDTO = tmp
            }
        }
    }
    public class IgnoredList : Tea.TeaModel {
        public var mediaId: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.mediaId != nil {
                map["MediaId"] = self.mediaId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MediaId"] as? [String] {
                self.mediaId = value
            }
        }
    }
    public var forbiddenList: RestoreMediaResponseBody.ForbiddenList?

    public var ignoredList: RestoreMediaResponseBody.IgnoredList?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.forbiddenList?.validate()
        try self.ignoredList?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.forbiddenList != nil {
            map["ForbiddenList"] = self.forbiddenList?.toMap()
        }
        if self.ignoredList != nil {
            map["IgnoredList"] = self.ignoredList?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ForbiddenList"] as? [String: Any?] {
            var model = RestoreMediaResponseBody.ForbiddenList()
            model.fromMap(value)
            self.forbiddenList = model
        }
        if let value = dict["IgnoredList"] as? [String: Any?] {
            var model = RestoreMediaResponseBody.IgnoredList()
            model.fromMap(value)
            self.ignoredList = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class RestoreMediaResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RestoreMediaResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RestoreMediaResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SearchEditingProjectRequest : Tea.TeaModel {
    public var endTime: String?

    public var ownerAccount: String?

    public var ownerId: String?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: String?

    public var sortBy: String?

    public var startTime: String?

    public var status: String?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.sortBy != nil {
            map["SortBy"] = self.sortBy!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
        if let value = dict["OwnerId"] as? String {
            self.ownerId = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? String {
            self.resourceOwnerId = value
        }
        if let value = dict["SortBy"] as? String {
            self.sortBy = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
    }
}

public class SearchEditingProjectResponseBody : Tea.TeaModel {
    public class ProjectList : Tea.TeaModel {
        public class Project : Tea.TeaModel {
            public var coverURL: String?

            public var creationTime: String?

            public var description_: String?

            public var duration: Double?

            public var modifiedTime: String?

            public var projectId: String?

            public var regionId: String?

            public var status: String?

            public var storageLocation: String?

            public var title: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.coverURL != nil {
                    map["CoverURL"] = self.coverURL!
                }
                if self.creationTime != nil {
                    map["CreationTime"] = self.creationTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.duration != nil {
                    map["Duration"] = self.duration!
                }
                if self.modifiedTime != nil {
                    map["ModifiedTime"] = self.modifiedTime!
                }
                if self.projectId != nil {
                    map["ProjectId"] = self.projectId!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.storageLocation != nil {
                    map["StorageLocation"] = self.storageLocation!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CoverURL"] as? String {
                    self.coverURL = value
                }
                if let value = dict["CreationTime"] as? String {
                    self.creationTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Duration"] as? Double {
                    self.duration = value
                }
                if let value = dict["ModifiedTime"] as? String {
                    self.modifiedTime = value
                }
                if let value = dict["ProjectId"] as? String {
                    self.projectId = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["StorageLocation"] as? String {
                    self.storageLocation = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
            }
        }
        public var project: [SearchEditingProjectResponseBody.ProjectList.Project]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.project != nil {
                var tmp : [Any] = []
                for k in self.project! {
                    tmp.append(k.toMap())
                }
                map["Project"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Project"] as? [Any?] {
                var tmp : [SearchEditingProjectResponseBody.ProjectList.Project] = []
                for v in value {
                    if v != nil {
                        var model = SearchEditingProjectResponseBody.ProjectList.Project()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.project = tmp
            }
        }
    }
    public var projectList: SearchEditingProjectResponseBody.ProjectList?

    public var requestId: String?

    public var total: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.projectList?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.projectList != nil {
            map["ProjectList"] = self.projectList?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ProjectList"] as? [String: Any?] {
            var model = SearchEditingProjectResponseBody.ProjectList()
            model.fromMap(value)
            self.projectList = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Total"] as? Int32 {
            self.total = value
        }
    }
}

public class SearchEditingProjectResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SearchEditingProjectResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SearchEditingProjectResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SearchMediaRequest : Tea.TeaModel {
    public var fields: String?

    public var match: String?

    public var pageNo: Int32?

    public var pageSize: Int32?

    public var scrollToken: String?

    public var searchType: String?

    public var sortBy: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fields != nil {
            map["Fields"] = self.fields!
        }
        if self.match != nil {
            map["Match"] = self.match!
        }
        if self.pageNo != nil {
            map["PageNo"] = self.pageNo!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.scrollToken != nil {
            map["ScrollToken"] = self.scrollToken!
        }
        if self.searchType != nil {
            map["SearchType"] = self.searchType!
        }
        if self.sortBy != nil {
            map["SortBy"] = self.sortBy!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Fields"] as? String {
            self.fields = value
        }
        if let value = dict["Match"] as? String {
            self.match = value
        }
        if let value = dict["PageNo"] as? Int32 {
            self.pageNo = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["ScrollToken"] as? String {
            self.scrollToken = value
        }
        if let value = dict["SearchType"] as? String {
            self.searchType = value
        }
        if let value = dict["SortBy"] as? String {
            self.sortBy = value
        }
    }
}

public class SearchMediaResponseBody : Tea.TeaModel {
    public class MediaList : Tea.TeaModel {
        public class AiData : Tea.TeaModel {
            public class AiLabelInfo : Tea.TeaModel {
                public class Occurrences : Tea.TeaModel {
                    public var from: Double?

                    public var score: Double?

                    public var to: Double?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.from != nil {
                            map["From"] = self.from!
                        }
                        if self.score != nil {
                            map["Score"] = self.score!
                        }
                        if self.to != nil {
                            map["To"] = self.to!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["From"] as? Double {
                            self.from = value
                        }
                        if let value = dict["Score"] as? Double {
                            self.score = value
                        }
                        if let value = dict["To"] as? Double {
                            self.to = value
                        }
                    }
                }
                public var category: String?

                public var labelId: String?

                public var labelName: String?

                public var occurrences: [SearchMediaResponseBody.MediaList.AiData.AiLabelInfo.Occurrences]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.category != nil {
                        map["Category"] = self.category!
                    }
                    if self.labelId != nil {
                        map["LabelId"] = self.labelId!
                    }
                    if self.labelName != nil {
                        map["LabelName"] = self.labelName!
                    }
                    if self.occurrences != nil {
                        var tmp : [Any] = []
                        for k in self.occurrences! {
                            tmp.append(k.toMap())
                        }
                        map["Occurrences"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Category"] as? String {
                        self.category = value
                    }
                    if let value = dict["LabelId"] as? String {
                        self.labelId = value
                    }
                    if let value = dict["LabelName"] as? String {
                        self.labelName = value
                    }
                    if let value = dict["Occurrences"] as? [Any?] {
                        var tmp : [SearchMediaResponseBody.MediaList.AiData.AiLabelInfo.Occurrences] = []
                        for v in value {
                            if v != nil {
                                var model = SearchMediaResponseBody.MediaList.AiData.AiLabelInfo.Occurrences()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.occurrences = tmp
                    }
                }
            }
            public class OcrInfo : Tea.TeaModel {
                public var content: String?

                public var from: Double?

                public var to: Double?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.content != nil {
                        map["Content"] = self.content!
                    }
                    if self.from != nil {
                        map["From"] = self.from!
                    }
                    if self.to != nil {
                        map["To"] = self.to!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Content"] as? String {
                        self.content = value
                    }
                    if let value = dict["From"] as? Double {
                        self.from = value
                    }
                    if let value = dict["To"] as? Double {
                        self.to = value
                    }
                }
            }
            public var aiLabelInfo: [SearchMediaResponseBody.MediaList.AiData.AiLabelInfo]?

            public var ocrInfo: [SearchMediaResponseBody.MediaList.AiData.OcrInfo]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.aiLabelInfo != nil {
                    var tmp : [Any] = []
                    for k in self.aiLabelInfo! {
                        tmp.append(k.toMap())
                    }
                    map["AiLabelInfo"] = tmp
                }
                if self.ocrInfo != nil {
                    var tmp : [Any] = []
                    for k in self.ocrInfo! {
                        tmp.append(k.toMap())
                    }
                    map["OcrInfo"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AiLabelInfo"] as? [Any?] {
                    var tmp : [SearchMediaResponseBody.MediaList.AiData.AiLabelInfo] = []
                    for v in value {
                        if v != nil {
                            var model = SearchMediaResponseBody.MediaList.AiData.AiLabelInfo()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.aiLabelInfo = tmp
                }
                if let value = dict["OcrInfo"] as? [Any?] {
                    var tmp : [SearchMediaResponseBody.MediaList.AiData.OcrInfo] = []
                    for v in value {
                        if v != nil {
                            var model = SearchMediaResponseBody.MediaList.AiData.OcrInfo()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.ocrInfo = tmp
                }
            }
        }
        public class AiRoughData : Tea.TeaModel {
            public var aiCategory: String?

            public var aiJobId: String?

            public var saveType: String?

            public var status: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.aiCategory != nil {
                    map["AiCategory"] = self.aiCategory!
                }
                if self.aiJobId != nil {
                    map["AiJobId"] = self.aiJobId!
                }
                if self.saveType != nil {
                    map["SaveType"] = self.saveType!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AiCategory"] as? String {
                    self.aiCategory = value
                }
                if let value = dict["AiJobId"] as? String {
                    self.aiJobId = value
                }
                if let value = dict["SaveType"] as? String {
                    self.saveType = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
            }
        }
        public class AttachedMedia : Tea.TeaModel {
            public class Categories : Tea.TeaModel {
                public var cateId: Int64?

                public var cateName: String?

                public var level: Int64?

                public var parentId: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.cateId != nil {
                        map["CateId"] = self.cateId!
                    }
                    if self.cateName != nil {
                        map["CateName"] = self.cateName!
                    }
                    if self.level != nil {
                        map["Level"] = self.level!
                    }
                    if self.parentId != nil {
                        map["ParentId"] = self.parentId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CateId"] as? Int64 {
                        self.cateId = value
                    }
                    if let value = dict["CateName"] as? String {
                        self.cateName = value
                    }
                    if let value = dict["Level"] as? Int64 {
                        self.level = value
                    }
                    if let value = dict["ParentId"] as? Int64 {
                        self.parentId = value
                    }
                }
            }
            public var appId: String?

            public var businessType: String?

            public var categories: [SearchMediaResponseBody.MediaList.AttachedMedia.Categories]?

            public var creationTime: String?

            public var description_: String?

            public var mediaId: String?

            public var modificationTime: String?

            public var status: String?

            public var storageLocation: String?

            public var tags: String?

            public var title: String?

            public var URL: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appId != nil {
                    map["AppId"] = self.appId!
                }
                if self.businessType != nil {
                    map["BusinessType"] = self.businessType!
                }
                if self.categories != nil {
                    var tmp : [Any] = []
                    for k in self.categories! {
                        tmp.append(k.toMap())
                    }
                    map["Categories"] = tmp
                }
                if self.creationTime != nil {
                    map["CreationTime"] = self.creationTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.mediaId != nil {
                    map["MediaId"] = self.mediaId!
                }
                if self.modificationTime != nil {
                    map["ModificationTime"] = self.modificationTime!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.storageLocation != nil {
                    map["StorageLocation"] = self.storageLocation!
                }
                if self.tags != nil {
                    map["Tags"] = self.tags!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                if self.URL != nil {
                    map["URL"] = self.URL!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AppId"] as? String {
                    self.appId = value
                }
                if let value = dict["BusinessType"] as? String {
                    self.businessType = value
                }
                if let value = dict["Categories"] as? [Any?] {
                    var tmp : [SearchMediaResponseBody.MediaList.AttachedMedia.Categories] = []
                    for v in value {
                        if v != nil {
                            var model = SearchMediaResponseBody.MediaList.AttachedMedia.Categories()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.categories = tmp
                }
                if let value = dict["CreationTime"] as? String {
                    self.creationTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["MediaId"] as? String {
                    self.mediaId = value
                }
                if let value = dict["ModificationTime"] as? String {
                    self.modificationTime = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["StorageLocation"] as? String {
                    self.storageLocation = value
                }
                if let value = dict["Tags"] as? String {
                    self.tags = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
                if let value = dict["URL"] as? String {
                    self.URL = value
                }
            }
        }
        public class Audio : Tea.TeaModel {
            public var appId: String?

            public var audioId: String?

            public var cateId: Int64?

            public var cateName: String?

            public var coverURL: String?

            public var creationTime: String?

            public var description_: String?

            public var downloadSwitch: String?

            public var duration: Double?

            public var mediaSource: String?

            public var modificationTime: String?

            public var preprocessStatus: String?

            public var restoreExpiration: String?

            public var restoreStatus: String?

            public var size: Int64?

            public var snapshots: [String]?

            public var spriteSnapshots: [String]?

            public var status: String?

            public var storageClass: String?

            public var storageLocation: String?

            public var tags: String?

            public var title: String?

            public var transcodeMode: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appId != nil {
                    map["AppId"] = self.appId!
                }
                if self.audioId != nil {
                    map["AudioId"] = self.audioId!
                }
                if self.cateId != nil {
                    map["CateId"] = self.cateId!
                }
                if self.cateName != nil {
                    map["CateName"] = self.cateName!
                }
                if self.coverURL != nil {
                    map["CoverURL"] = self.coverURL!
                }
                if self.creationTime != nil {
                    map["CreationTime"] = self.creationTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.downloadSwitch != nil {
                    map["DownloadSwitch"] = self.downloadSwitch!
                }
                if self.duration != nil {
                    map["Duration"] = self.duration!
                }
                if self.mediaSource != nil {
                    map["MediaSource"] = self.mediaSource!
                }
                if self.modificationTime != nil {
                    map["ModificationTime"] = self.modificationTime!
                }
                if self.preprocessStatus != nil {
                    map["PreprocessStatus"] = self.preprocessStatus!
                }
                if self.restoreExpiration != nil {
                    map["RestoreExpiration"] = self.restoreExpiration!
                }
                if self.restoreStatus != nil {
                    map["RestoreStatus"] = self.restoreStatus!
                }
                if self.size != nil {
                    map["Size"] = self.size!
                }
                if self.snapshots != nil {
                    map["Snapshots"] = self.snapshots!
                }
                if self.spriteSnapshots != nil {
                    map["SpriteSnapshots"] = self.spriteSnapshots!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.storageClass != nil {
                    map["StorageClass"] = self.storageClass!
                }
                if self.storageLocation != nil {
                    map["StorageLocation"] = self.storageLocation!
                }
                if self.tags != nil {
                    map["Tags"] = self.tags!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                if self.transcodeMode != nil {
                    map["TranscodeMode"] = self.transcodeMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AppId"] as? String {
                    self.appId = value
                }
                if let value = dict["AudioId"] as? String {
                    self.audioId = value
                }
                if let value = dict["CateId"] as? Int64 {
                    self.cateId = value
                }
                if let value = dict["CateName"] as? String {
                    self.cateName = value
                }
                if let value = dict["CoverURL"] as? String {
                    self.coverURL = value
                }
                if let value = dict["CreationTime"] as? String {
                    self.creationTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DownloadSwitch"] as? String {
                    self.downloadSwitch = value
                }
                if let value = dict["Duration"] as? Double {
                    self.duration = value
                }
                if let value = dict["MediaSource"] as? String {
                    self.mediaSource = value
                }
                if let value = dict["ModificationTime"] as? String {
                    self.modificationTime = value
                }
                if let value = dict["PreprocessStatus"] as? String {
                    self.preprocessStatus = value
                }
                if let value = dict["RestoreExpiration"] as? String {
                    self.restoreExpiration = value
                }
                if let value = dict["RestoreStatus"] as? String {
                    self.restoreStatus = value
                }
                if let value = dict["Size"] as? Int64 {
                    self.size = value
                }
                if let value = dict["Snapshots"] as? [String] {
                    self.snapshots = value
                }
                if let value = dict["SpriteSnapshots"] as? [String] {
                    self.spriteSnapshots = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["StorageClass"] as? String {
                    self.storageClass = value
                }
                if let value = dict["StorageLocation"] as? String {
                    self.storageLocation = value
                }
                if let value = dict["Tags"] as? String {
                    self.tags = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
                if let value = dict["TranscodeMode"] as? String {
                    self.transcodeMode = value
                }
            }
        }
        public class Image : Tea.TeaModel {
            public var appId: String?

            public var cateId: Int64?

            public var cateName: String?

            public var creationTime: String?

            public var description_: String?

            public var imageId: String?

            public var modificationTime: String?

            public var status: String?

            public var storageLocation: String?

            public var tags: String?

            public var title: String?

            public var URL: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appId != nil {
                    map["AppId"] = self.appId!
                }
                if self.cateId != nil {
                    map["CateId"] = self.cateId!
                }
                if self.cateName != nil {
                    map["CateName"] = self.cateName!
                }
                if self.creationTime != nil {
                    map["CreationTime"] = self.creationTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.imageId != nil {
                    map["ImageId"] = self.imageId!
                }
                if self.modificationTime != nil {
                    map["ModificationTime"] = self.modificationTime!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.storageLocation != nil {
                    map["StorageLocation"] = self.storageLocation!
                }
                if self.tags != nil {
                    map["Tags"] = self.tags!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                if self.URL != nil {
                    map["URL"] = self.URL!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AppId"] as? String {
                    self.appId = value
                }
                if let value = dict["CateId"] as? Int64 {
                    self.cateId = value
                }
                if let value = dict["CateName"] as? String {
                    self.cateName = value
                }
                if let value = dict["CreationTime"] as? String {
                    self.creationTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["ImageId"] as? String {
                    self.imageId = value
                }
                if let value = dict["ModificationTime"] as? String {
                    self.modificationTime = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["StorageLocation"] as? String {
                    self.storageLocation = value
                }
                if let value = dict["Tags"] as? String {
                    self.tags = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
                if let value = dict["URL"] as? String {
                    self.URL = value
                }
            }
        }
        public class Video : Tea.TeaModel {
            public var appId: String?

            public var cateId: Int64?

            public var cateName: String?

            public var coverURL: String?

            public var creationTime: String?

            public var description_: String?

            public var downloadSwitch: String?

            public var duration: Double?

            public var mediaSource: String?

            public var modificationTime: String?

            public var preprocessStatus: String?

            public var restoreExpiration: String?

            public var restoreStatus: String?

            public var size: Int64?

            public var snapshots: [String]?

            public var spriteSnapshots: [String]?

            public var status: String?

            public var storageClass: String?

            public var storageLocation: String?

            public var tags: String?

            public var title: String?

            public var transcodeMode: String?

            public var videoId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appId != nil {
                    map["AppId"] = self.appId!
                }
                if self.cateId != nil {
                    map["CateId"] = self.cateId!
                }
                if self.cateName != nil {
                    map["CateName"] = self.cateName!
                }
                if self.coverURL != nil {
                    map["CoverURL"] = self.coverURL!
                }
                if self.creationTime != nil {
                    map["CreationTime"] = self.creationTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.downloadSwitch != nil {
                    map["DownloadSwitch"] = self.downloadSwitch!
                }
                if self.duration != nil {
                    map["Duration"] = self.duration!
                }
                if self.mediaSource != nil {
                    map["MediaSource"] = self.mediaSource!
                }
                if self.modificationTime != nil {
                    map["ModificationTime"] = self.modificationTime!
                }
                if self.preprocessStatus != nil {
                    map["PreprocessStatus"] = self.preprocessStatus!
                }
                if self.restoreExpiration != nil {
                    map["RestoreExpiration"] = self.restoreExpiration!
                }
                if self.restoreStatus != nil {
                    map["RestoreStatus"] = self.restoreStatus!
                }
                if self.size != nil {
                    map["Size"] = self.size!
                }
                if self.snapshots != nil {
                    map["Snapshots"] = self.snapshots!
                }
                if self.spriteSnapshots != nil {
                    map["SpriteSnapshots"] = self.spriteSnapshots!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.storageClass != nil {
                    map["StorageClass"] = self.storageClass!
                }
                if self.storageLocation != nil {
                    map["StorageLocation"] = self.storageLocation!
                }
                if self.tags != nil {
                    map["Tags"] = self.tags!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                if self.transcodeMode != nil {
                    map["TranscodeMode"] = self.transcodeMode!
                }
                if self.videoId != nil {
                    map["VideoId"] = self.videoId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AppId"] as? String {
                    self.appId = value
                }
                if let value = dict["CateId"] as? Int64 {
                    self.cateId = value
                }
                if let value = dict["CateName"] as? String {
                    self.cateName = value
                }
                if let value = dict["CoverURL"] as? String {
                    self.coverURL = value
                }
                if let value = dict["CreationTime"] as? String {
                    self.creationTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DownloadSwitch"] as? String {
                    self.downloadSwitch = value
                }
                if let value = dict["Duration"] as? Double {
                    self.duration = value
                }
                if let value = dict["MediaSource"] as? String {
                    self.mediaSource = value
                }
                if let value = dict["ModificationTime"] as? String {
                    self.modificationTime = value
                }
                if let value = dict["PreprocessStatus"] as? String {
                    self.preprocessStatus = value
                }
                if let value = dict["RestoreExpiration"] as? String {
                    self.restoreExpiration = value
                }
                if let value = dict["RestoreStatus"] as? String {
                    self.restoreStatus = value
                }
                if let value = dict["Size"] as? Int64 {
                    self.size = value
                }
                if let value = dict["Snapshots"] as? [String] {
                    self.snapshots = value
                }
                if let value = dict["SpriteSnapshots"] as? [String] {
                    self.spriteSnapshots = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["StorageClass"] as? String {
                    self.storageClass = value
                }
                if let value = dict["StorageLocation"] as? String {
                    self.storageLocation = value
                }
                if let value = dict["Tags"] as? String {
                    self.tags = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
                if let value = dict["TranscodeMode"] as? String {
                    self.transcodeMode = value
                }
                if let value = dict["VideoId"] as? String {
                    self.videoId = value
                }
            }
        }
        public var aiData: SearchMediaResponseBody.MediaList.AiData?

        public var aiRoughData: SearchMediaResponseBody.MediaList.AiRoughData?

        public var attachedMedia: SearchMediaResponseBody.MediaList.AttachedMedia?

        public var audio: SearchMediaResponseBody.MediaList.Audio?

        public var creationTime: String?

        public var image: SearchMediaResponseBody.MediaList.Image?

        public var mediaId: String?

        public var mediaType: String?

        public var video: SearchMediaResponseBody.MediaList.Video?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.aiData?.validate()
            try self.aiRoughData?.validate()
            try self.attachedMedia?.validate()
            try self.audio?.validate()
            try self.image?.validate()
            try self.video?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.aiData != nil {
                map["AiData"] = self.aiData?.toMap()
            }
            if self.aiRoughData != nil {
                map["AiRoughData"] = self.aiRoughData?.toMap()
            }
            if self.attachedMedia != nil {
                map["AttachedMedia"] = self.attachedMedia?.toMap()
            }
            if self.audio != nil {
                map["Audio"] = self.audio?.toMap()
            }
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.image != nil {
                map["Image"] = self.image?.toMap()
            }
            if self.mediaId != nil {
                map["MediaId"] = self.mediaId!
            }
            if self.mediaType != nil {
                map["MediaType"] = self.mediaType!
            }
            if self.video != nil {
                map["Video"] = self.video?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AiData"] as? [String: Any?] {
                var model = SearchMediaResponseBody.MediaList.AiData()
                model.fromMap(value)
                self.aiData = model
            }
            if let value = dict["AiRoughData"] as? [String: Any?] {
                var model = SearchMediaResponseBody.MediaList.AiRoughData()
                model.fromMap(value)
                self.aiRoughData = model
            }
            if let value = dict["AttachedMedia"] as? [String: Any?] {
                var model = SearchMediaResponseBody.MediaList.AttachedMedia()
                model.fromMap(value)
                self.attachedMedia = model
            }
            if let value = dict["Audio"] as? [String: Any?] {
                var model = SearchMediaResponseBody.MediaList.Audio()
                model.fromMap(value)
                self.audio = model
            }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["Image"] as? [String: Any?] {
                var model = SearchMediaResponseBody.MediaList.Image()
                model.fromMap(value)
                self.image = model
            }
            if let value = dict["MediaId"] as? String {
                self.mediaId = value
            }
            if let value = dict["MediaType"] as? String {
                self.mediaType = value
            }
            if let value = dict["Video"] as? [String: Any?] {
                var model = SearchMediaResponseBody.MediaList.Video()
                model.fromMap(value)
                self.video = model
            }
        }
    }
    public var mediaList: [SearchMediaResponseBody.MediaList]?

    public var requestId: String?

    public var scrollToken: String?

    public var total: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mediaList != nil {
            var tmp : [Any] = []
            for k in self.mediaList! {
                tmp.append(k.toMap())
            }
            map["MediaList"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.scrollToken != nil {
            map["ScrollToken"] = self.scrollToken!
        }
        if self.total != nil {
            map["Total"] = self.total!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MediaList"] as? [Any?] {
            var tmp : [SearchMediaResponseBody.MediaList] = []
            for v in value {
                if v != nil {
                    var model = SearchMediaResponseBody.MediaList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.mediaList = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ScrollToken"] as? String {
            self.scrollToken = value
        }
        if let value = dict["Total"] as? Int64 {
            self.total = value
        }
    }
}

public class SearchMediaResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SearchMediaResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SearchMediaResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetAuditSecurityIpRequest : Tea.TeaModel {
    public var ips: String?

    public var operateMode: String?

    public var securityGroupName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ips != nil {
            map["Ips"] = self.ips!
        }
        if self.operateMode != nil {
            map["OperateMode"] = self.operateMode!
        }
        if self.securityGroupName != nil {
            map["SecurityGroupName"] = self.securityGroupName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Ips"] as? String {
            self.ips = value
        }
        if let value = dict["OperateMode"] as? String {
            self.operateMode = value
        }
        if let value = dict["SecurityGroupName"] as? String {
            self.securityGroupName = value
        }
    }
}

public class SetAuditSecurityIpResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetAuditSecurityIpResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetAuditSecurityIpResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetAuditSecurityIpResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetCrossdomainContentRequest : Tea.TeaModel {
    public var content: String?

    public var ownerAccount: String?

    public var ownerId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: String?

    public var resourceRealOwnerId: String?

    public var storageLocation: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.resourceRealOwnerId != nil {
            map["ResourceRealOwnerId"] = self.resourceRealOwnerId!
        }
        if self.storageLocation != nil {
            map["StorageLocation"] = self.storageLocation!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
        if let value = dict["OwnerId"] as? String {
            self.ownerId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? String {
            self.resourceOwnerId = value
        }
        if let value = dict["ResourceRealOwnerId"] as? String {
            self.resourceRealOwnerId = value
        }
        if let value = dict["StorageLocation"] as? String {
            self.storageLocation = value
        }
    }
}

public class SetCrossdomainContentResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetCrossdomainContentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetCrossdomainContentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetCrossdomainContentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetDefaultAITemplateRequest : Tea.TeaModel {
    public var templateId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TemplateId"] as? String {
            self.templateId = value
        }
    }
}

public class SetDefaultAITemplateResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var templateId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TemplateId"] as? String {
            self.templateId = value
        }
    }
}

public class SetDefaultAITemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetDefaultAITemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetDefaultAITemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetDefaultTranscodeTemplateGroupRequest : Tea.TeaModel {
    public var transcodeTemplateGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.transcodeTemplateGroupId != nil {
            map["TranscodeTemplateGroupId"] = self.transcodeTemplateGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TranscodeTemplateGroupId"] as? String {
            self.transcodeTemplateGroupId = value
        }
    }
}

public class SetDefaultTranscodeTemplateGroupResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetDefaultTranscodeTemplateGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetDefaultTranscodeTemplateGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetDefaultTranscodeTemplateGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetDefaultWatermarkRequest : Tea.TeaModel {
    public var watermarkId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.watermarkId != nil {
            map["WatermarkId"] = self.watermarkId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["WatermarkId"] as? String {
            self.watermarkId = value
        }
    }
}

public class SetDefaultWatermarkResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetDefaultWatermarkResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetDefaultWatermarkResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetDefaultWatermarkResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetEditingProjectMaterialsRequest : Tea.TeaModel {
    public var materialIds: String?

    public var ownerAccount: String?

    public var ownerId: String?

    public var projectId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.materialIds != nil {
            map["MaterialIds"] = self.materialIds!
        }
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MaterialIds"] as? String {
            self.materialIds = value
        }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
        if let value = dict["OwnerId"] as? String {
            self.ownerId = value
        }
        if let value = dict["ProjectId"] as? String {
            self.projectId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? String {
            self.resourceOwnerId = value
        }
    }
}

public class SetEditingProjectMaterialsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetEditingProjectMaterialsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetEditingProjectMaterialsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetEditingProjectMaterialsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetMessageCallbackRequest : Tea.TeaModel {
    public var appId: String?

    public var authKey: String?

    public var authSwitch: String?

    public var callbackType: String?

    public var callbackURL: String?

    public var eventTypeList: String?

    public var mnsEndpoint: String?

    public var mnsQueueName: String?

    public var ownerAccount: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.authKey != nil {
            map["AuthKey"] = self.authKey!
        }
        if self.authSwitch != nil {
            map["AuthSwitch"] = self.authSwitch!
        }
        if self.callbackType != nil {
            map["CallbackType"] = self.callbackType!
        }
        if self.callbackURL != nil {
            map["CallbackURL"] = self.callbackURL!
        }
        if self.eventTypeList != nil {
            map["EventTypeList"] = self.eventTypeList!
        }
        if self.mnsEndpoint != nil {
            map["MnsEndpoint"] = self.mnsEndpoint!
        }
        if self.mnsQueueName != nil {
            map["MnsQueueName"] = self.mnsQueueName!
        }
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["AuthKey"] as? String {
            self.authKey = value
        }
        if let value = dict["AuthSwitch"] as? String {
            self.authSwitch = value
        }
        if let value = dict["CallbackType"] as? String {
            self.callbackType = value
        }
        if let value = dict["CallbackURL"] as? String {
            self.callbackURL = value
        }
        if let value = dict["EventTypeList"] as? String {
            self.eventTypeList = value
        }
        if let value = dict["MnsEndpoint"] as? String {
            self.mnsEndpoint = value
        }
        if let value = dict["MnsQueueName"] as? String {
            self.mnsQueueName = value
        }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
    }
}

public class SetMessageCallbackResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetMessageCallbackResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetMessageCallbackResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetMessageCallbackResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetVodDomainCertificateRequest : Tea.TeaModel {
    public var certName: String?

    public var domainName: String?

    public var ownerId: Int64?

    public var SSLPri: String?

    public var SSLProtocol: String?

    public var SSLPub: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certName != nil {
            map["CertName"] = self.certName!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.SSLPri != nil {
            map["SSLPri"] = self.SSLPri!
        }
        if self.SSLProtocol != nil {
            map["SSLProtocol"] = self.SSLProtocol!
        }
        if self.SSLPub != nil {
            map["SSLPub"] = self.SSLPub!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CertName"] as? String {
            self.certName = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["SSLPri"] as? String {
            self.SSLPri = value
        }
        if let value = dict["SSLProtocol"] as? String {
            self.SSLProtocol = value
        }
        if let value = dict["SSLPub"] as? String {
            self.SSLPub = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class SetVodDomainCertificateResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetVodDomainCertificateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetVodDomainCertificateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetVodDomainCertificateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetVodDomainSSLCertificateRequest : Tea.TeaModel {
    public var certId: Int64?

    public var certName: String?

    public var certRegion: String?

    public var certType: String?

    public var domainName: String?

    public var env: String?

    public var ownerId: Int64?

    public var SSLPri: String?

    public var SSLProtocol: String?

    public var SSLPub: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certId != nil {
            map["CertId"] = self.certId!
        }
        if self.certName != nil {
            map["CertName"] = self.certName!
        }
        if self.certRegion != nil {
            map["CertRegion"] = self.certRegion!
        }
        if self.certType != nil {
            map["CertType"] = self.certType!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.SSLPri != nil {
            map["SSLPri"] = self.SSLPri!
        }
        if self.SSLProtocol != nil {
            map["SSLProtocol"] = self.SSLProtocol!
        }
        if self.SSLPub != nil {
            map["SSLPub"] = self.SSLPub!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CertId"] as? Int64 {
            self.certId = value
        }
        if let value = dict["CertName"] as? String {
            self.certName = value
        }
        if let value = dict["CertRegion"] as? String {
            self.certRegion = value
        }
        if let value = dict["CertType"] as? String {
            self.certType = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["SSLPri"] as? String {
            self.SSLPri = value
        }
        if let value = dict["SSLProtocol"] as? String {
            self.SSLProtocol = value
        }
        if let value = dict["SSLPub"] as? String {
            self.SSLPub = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class SetVodDomainSSLCertificateResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetVodDomainSSLCertificateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetVodDomainSSLCertificateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetVodDomainSSLCertificateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubmitAIImageAuditJobRequest : Tea.TeaModel {
    public var mediaAuditConfiguration: String?

    public var mediaId: String?

    public var ownerAccount: String?

    public var ownerId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: String?

    public var templateId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mediaAuditConfiguration != nil {
            map["MediaAuditConfiguration"] = self.mediaAuditConfiguration!
        }
        if self.mediaId != nil {
            map["MediaId"] = self.mediaId!
        }
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MediaAuditConfiguration"] as? String {
            self.mediaAuditConfiguration = value
        }
        if let value = dict["MediaId"] as? String {
            self.mediaId = value
        }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
        if let value = dict["OwnerId"] as? String {
            self.ownerId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? String {
            self.resourceOwnerId = value
        }
        if let value = dict["TemplateId"] as? String {
            self.templateId = value
        }
    }
}

public class SubmitAIImageAuditJobResponseBody : Tea.TeaModel {
    public var jobId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SubmitAIImageAuditJobResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubmitAIImageAuditJobResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubmitAIImageAuditJobResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubmitAIImageJobRequest : Tea.TeaModel {
    public var AIPipelineId: String?

    public var AITemplateId: String?

    public var ownerAccount: String?

    public var ownerId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: String?

    public var userData: String?

    public var videoId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.AIPipelineId != nil {
            map["AIPipelineId"] = self.AIPipelineId!
        }
        if self.AITemplateId != nil {
            map["AITemplateId"] = self.AITemplateId!
        }
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.userData != nil {
            map["UserData"] = self.userData!
        }
        if self.videoId != nil {
            map["VideoId"] = self.videoId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AIPipelineId"] as? String {
            self.AIPipelineId = value
        }
        if let value = dict["AITemplateId"] as? String {
            self.AITemplateId = value
        }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
        if let value = dict["OwnerId"] as? String {
            self.ownerId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? String {
            self.resourceOwnerId = value
        }
        if let value = dict["UserData"] as? String {
            self.userData = value
        }
        if let value = dict["VideoId"] as? String {
            self.videoId = value
        }
    }
}

public class SubmitAIImageJobResponseBody : Tea.TeaModel {
    public var jobId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SubmitAIImageJobResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubmitAIImageJobResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubmitAIImageJobResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubmitAIJobRequest : Tea.TeaModel {
    public var config: String?

    public var mediaId: String?

    public var ownerAccount: String?

    public var ownerId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: String?

    public var types: String?

    public var userData: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.config != nil {
            map["Config"] = self.config!
        }
        if self.mediaId != nil {
            map["MediaId"] = self.mediaId!
        }
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.types != nil {
            map["Types"] = self.types!
        }
        if self.userData != nil {
            map["UserData"] = self.userData!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Config"] as? String {
            self.config = value
        }
        if let value = dict["MediaId"] as? String {
            self.mediaId = value
        }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
        if let value = dict["OwnerId"] as? String {
            self.ownerId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? String {
            self.resourceOwnerId = value
        }
        if let value = dict["Types"] as? String {
            self.types = value
        }
        if let value = dict["UserData"] as? String {
            self.userData = value
        }
    }
}

public class SubmitAIJobResponseBody : Tea.TeaModel {
    public class AIJobList : Tea.TeaModel {
        public class AIJob : Tea.TeaModel {
            public var jobId: String?

            public var mediaId: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.mediaId != nil {
                    map["MediaId"] = self.mediaId!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["MediaId"] as? String {
                    self.mediaId = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var AIJob: [SubmitAIJobResponseBody.AIJobList.AIJob]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.AIJob != nil {
                var tmp : [Any] = []
                for k in self.AIJob! {
                    tmp.append(k.toMap())
                }
                map["AIJob"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AIJob"] as? [Any?] {
                var tmp : [SubmitAIJobResponseBody.AIJobList.AIJob] = []
                for v in value {
                    if v != nil {
                        var model = SubmitAIJobResponseBody.AIJobList.AIJob()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.AIJob = tmp
            }
        }
    }
    public var AIJobList: SubmitAIJobResponseBody.AIJobList?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.AIJobList?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.AIJobList != nil {
            map["AIJobList"] = self.AIJobList?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AIJobList"] as? [String: Any?] {
            var model = SubmitAIJobResponseBody.AIJobList()
            model.fromMap(value)
            self.AIJobList = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SubmitAIJobResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubmitAIJobResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubmitAIJobResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubmitAIMediaAuditJobRequest : Tea.TeaModel {
    public var mediaAuditConfiguration: String?

    public var mediaId: String?

    public var mediaType: String?

    public var templateId: String?

    public var userData: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mediaAuditConfiguration != nil {
            map["MediaAuditConfiguration"] = self.mediaAuditConfiguration!
        }
        if self.mediaId != nil {
            map["MediaId"] = self.mediaId!
        }
        if self.mediaType != nil {
            map["MediaType"] = self.mediaType!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        if self.userData != nil {
            map["UserData"] = self.userData!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MediaAuditConfiguration"] as? String {
            self.mediaAuditConfiguration = value
        }
        if let value = dict["MediaId"] as? String {
            self.mediaId = value
        }
        if let value = dict["MediaType"] as? String {
            self.mediaType = value
        }
        if let value = dict["TemplateId"] as? String {
            self.templateId = value
        }
        if let value = dict["UserData"] as? String {
            self.userData = value
        }
    }
}

public class SubmitAIMediaAuditJobResponseBody : Tea.TeaModel {
    public var jobId: String?

    public var mediaId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.mediaId != nil {
            map["MediaId"] = self.mediaId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["MediaId"] as? String {
            self.mediaId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SubmitAIMediaAuditJobResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubmitAIMediaAuditJobResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubmitAIMediaAuditJobResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubmitDigitalWatermarkExtractJobRequest : Tea.TeaModel {
    public var extractType: String?

    public var mediaId: String?

    public var ownerAccount: String?

    public var ownerId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.extractType != nil {
            map["ExtractType"] = self.extractType!
        }
        if self.mediaId != nil {
            map["MediaId"] = self.mediaId!
        }
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ExtractType"] as? String {
            self.extractType = value
        }
        if let value = dict["MediaId"] as? String {
            self.mediaId = value
        }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
        if let value = dict["OwnerId"] as? String {
            self.ownerId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? String {
            self.resourceOwnerId = value
        }
    }
}

public class SubmitDigitalWatermarkExtractJobResponseBody : Tea.TeaModel {
    public var jobId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SubmitDigitalWatermarkExtractJobResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubmitDigitalWatermarkExtractJobResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubmitDigitalWatermarkExtractJobResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubmitDynamicImageJobRequest : Tea.TeaModel {
    public var dynamicImageTemplateId: String?

    public var overrideParams: String?

    public var videoId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dynamicImageTemplateId != nil {
            map["DynamicImageTemplateId"] = self.dynamicImageTemplateId!
        }
        if self.overrideParams != nil {
            map["OverrideParams"] = self.overrideParams!
        }
        if self.videoId != nil {
            map["VideoId"] = self.videoId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DynamicImageTemplateId"] as? String {
            self.dynamicImageTemplateId = value
        }
        if let value = dict["OverrideParams"] as? String {
            self.overrideParams = value
        }
        if let value = dict["VideoId"] as? String {
            self.videoId = value
        }
    }
}

public class SubmitDynamicImageJobResponseBody : Tea.TeaModel {
    public class DynamicImageJob : Tea.TeaModel {
        public var jobId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
        }
    }
    public var dynamicImageJob: SubmitDynamicImageJobResponseBody.DynamicImageJob?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.dynamicImageJob?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dynamicImageJob != nil {
            map["DynamicImageJob"] = self.dynamicImageJob?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DynamicImageJob"] as? [String: Any?] {
            var model = SubmitDynamicImageJobResponseBody.DynamicImageJob()
            model.fromMap(value)
            self.dynamicImageJob = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SubmitDynamicImageJobResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubmitDynamicImageJobResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubmitDynamicImageJobResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubmitMediaDNADeleteJobRequest : Tea.TeaModel {
    public var mediaId: String?

    public var ownerAccount: String?

    public var ownerId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mediaId != nil {
            map["MediaId"] = self.mediaId!
        }
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MediaId"] as? String {
            self.mediaId = value
        }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
        if let value = dict["OwnerId"] as? String {
            self.ownerId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? String {
            self.resourceOwnerId = value
        }
    }
}

public class SubmitMediaDNADeleteJobResponseBody : Tea.TeaModel {
    public var jobId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SubmitMediaDNADeleteJobResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubmitMediaDNADeleteJobResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubmitMediaDNADeleteJobResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubmitPreprocessJobsRequest : Tea.TeaModel {
    public var preprocessType: String?

    public var videoId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.preprocessType != nil {
            map["PreprocessType"] = self.preprocessType!
        }
        if self.videoId != nil {
            map["VideoId"] = self.videoId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PreprocessType"] as? String {
            self.preprocessType = value
        }
        if let value = dict["VideoId"] as? String {
            self.videoId = value
        }
    }
}

public class SubmitPreprocessJobsResponseBody : Tea.TeaModel {
    public class PreprocessJobs : Tea.TeaModel {
        public class PreprocessJob : Tea.TeaModel {
            public var jobId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
            }
        }
        public var preprocessJob: [SubmitPreprocessJobsResponseBody.PreprocessJobs.PreprocessJob]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.preprocessJob != nil {
                var tmp : [Any] = []
                for k in self.preprocessJob! {
                    tmp.append(k.toMap())
                }
                map["PreprocessJob"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PreprocessJob"] as? [Any?] {
                var tmp : [SubmitPreprocessJobsResponseBody.PreprocessJobs.PreprocessJob] = []
                for v in value {
                    if v != nil {
                        var model = SubmitPreprocessJobsResponseBody.PreprocessJobs.PreprocessJob()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.preprocessJob = tmp
            }
        }
    }
    public var preprocessJobs: SubmitPreprocessJobsResponseBody.PreprocessJobs?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.preprocessJobs?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.preprocessJobs != nil {
            map["PreprocessJobs"] = self.preprocessJobs?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PreprocessJobs"] as? [String: Any?] {
            var model = SubmitPreprocessJobsResponseBody.PreprocessJobs()
            model.fromMap(value)
            self.preprocessJobs = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SubmitPreprocessJobsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubmitPreprocessJobsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubmitPreprocessJobsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubmitSnapshotJobRequest : Tea.TeaModel {
    public var count: Int64?

    public var height: String?

    public var interval: Int64?

    public var snapshotTemplateId: String?

    public var specifiedOffsetTime: Int64?

    public var specifiedOffsetTimes: [Int64]?

    public var spriteSnapshotConfig: String?

    public var userData: String?

    public var videoId: String?

    public var width: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.height != nil {
            map["Height"] = self.height!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.snapshotTemplateId != nil {
            map["SnapshotTemplateId"] = self.snapshotTemplateId!
        }
        if self.specifiedOffsetTime != nil {
            map["SpecifiedOffsetTime"] = self.specifiedOffsetTime!
        }
        if self.specifiedOffsetTimes != nil {
            map["SpecifiedOffsetTimes"] = self.specifiedOffsetTimes!
        }
        if self.spriteSnapshotConfig != nil {
            map["SpriteSnapshotConfig"] = self.spriteSnapshotConfig!
        }
        if self.userData != nil {
            map["UserData"] = self.userData!
        }
        if self.videoId != nil {
            map["VideoId"] = self.videoId!
        }
        if self.width != nil {
            map["Width"] = self.width!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Count"] as? Int64 {
            self.count = value
        }
        if let value = dict["Height"] as? String {
            self.height = value
        }
        if let value = dict["Interval"] as? Int64 {
            self.interval = value
        }
        if let value = dict["SnapshotTemplateId"] as? String {
            self.snapshotTemplateId = value
        }
        if let value = dict["SpecifiedOffsetTime"] as? Int64 {
            self.specifiedOffsetTime = value
        }
        if let value = dict["SpecifiedOffsetTimes"] as? [Int64] {
            self.specifiedOffsetTimes = value
        }
        if let value = dict["SpriteSnapshotConfig"] as? String {
            self.spriteSnapshotConfig = value
        }
        if let value = dict["UserData"] as? String {
            self.userData = value
        }
        if let value = dict["VideoId"] as? String {
            self.videoId = value
        }
        if let value = dict["Width"] as? String {
            self.width = value
        }
    }
}

public class SubmitSnapshotJobShrinkRequest : Tea.TeaModel {
    public var count: Int64?

    public var height: String?

    public var interval: Int64?

    public var snapshotTemplateId: String?

    public var specifiedOffsetTime: Int64?

    public var specifiedOffsetTimesShrink: String?

    public var spriteSnapshotConfig: String?

    public var userData: String?

    public var videoId: String?

    public var width: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.count != nil {
            map["Count"] = self.count!
        }
        if self.height != nil {
            map["Height"] = self.height!
        }
        if self.interval != nil {
            map["Interval"] = self.interval!
        }
        if self.snapshotTemplateId != nil {
            map["SnapshotTemplateId"] = self.snapshotTemplateId!
        }
        if self.specifiedOffsetTime != nil {
            map["SpecifiedOffsetTime"] = self.specifiedOffsetTime!
        }
        if self.specifiedOffsetTimesShrink != nil {
            map["SpecifiedOffsetTimes"] = self.specifiedOffsetTimesShrink!
        }
        if self.spriteSnapshotConfig != nil {
            map["SpriteSnapshotConfig"] = self.spriteSnapshotConfig!
        }
        if self.userData != nil {
            map["UserData"] = self.userData!
        }
        if self.videoId != nil {
            map["VideoId"] = self.videoId!
        }
        if self.width != nil {
            map["Width"] = self.width!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Count"] as? Int64 {
            self.count = value
        }
        if let value = dict["Height"] as? String {
            self.height = value
        }
        if let value = dict["Interval"] as? Int64 {
            self.interval = value
        }
        if let value = dict["SnapshotTemplateId"] as? String {
            self.snapshotTemplateId = value
        }
        if let value = dict["SpecifiedOffsetTime"] as? Int64 {
            self.specifiedOffsetTime = value
        }
        if let value = dict["SpecifiedOffsetTimes"] as? String {
            self.specifiedOffsetTimesShrink = value
        }
        if let value = dict["SpriteSnapshotConfig"] as? String {
            self.spriteSnapshotConfig = value
        }
        if let value = dict["UserData"] as? String {
            self.userData = value
        }
        if let value = dict["VideoId"] as? String {
            self.videoId = value
        }
        if let value = dict["Width"] as? String {
            self.width = value
        }
    }
}

public class SubmitSnapshotJobResponseBody : Tea.TeaModel {
    public class SnapshotJob : Tea.TeaModel {
        public var jobId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
        }
    }
    public var requestId: String?

    public var snapshotJob: SubmitSnapshotJobResponseBody.SnapshotJob?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.snapshotJob?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.snapshotJob != nil {
            map["SnapshotJob"] = self.snapshotJob?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SnapshotJob"] as? [String: Any?] {
            var model = SubmitSnapshotJobResponseBody.SnapshotJob()
            model.fromMap(value)
            self.snapshotJob = model
        }
    }
}

public class SubmitSnapshotJobResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubmitSnapshotJobResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubmitSnapshotJobResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubmitTranscodeJobsRequest : Tea.TeaModel {
    public var encryptConfig: String?

    public var overrideParams: String?

    public var pipelineId: String?

    public var priority: String?

    public var sessionId: String?

    public var templateGroupId: String?

    public var userData: String?

    public var videoId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.encryptConfig != nil {
            map["EncryptConfig"] = self.encryptConfig!
        }
        if self.overrideParams != nil {
            map["OverrideParams"] = self.overrideParams!
        }
        if self.pipelineId != nil {
            map["PipelineId"] = self.pipelineId!
        }
        if self.priority != nil {
            map["Priority"] = self.priority!
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.templateGroupId != nil {
            map["TemplateGroupId"] = self.templateGroupId!
        }
        if self.userData != nil {
            map["UserData"] = self.userData!
        }
        if self.videoId != nil {
            map["VideoId"] = self.videoId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EncryptConfig"] as? String {
            self.encryptConfig = value
        }
        if let value = dict["OverrideParams"] as? String {
            self.overrideParams = value
        }
        if let value = dict["PipelineId"] as? String {
            self.pipelineId = value
        }
        if let value = dict["Priority"] as? String {
            self.priority = value
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["TemplateGroupId"] as? String {
            self.templateGroupId = value
        }
        if let value = dict["UserData"] as? String {
            self.userData = value
        }
        if let value = dict["VideoId"] as? String {
            self.videoId = value
        }
    }
}

public class SubmitTranscodeJobsResponseBody : Tea.TeaModel {
    public class TranscodeJobs : Tea.TeaModel {
        public class TranscodeJob : Tea.TeaModel {
            public var jobId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
            }
        }
        public var transcodeJob: [SubmitTranscodeJobsResponseBody.TranscodeJobs.TranscodeJob]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.transcodeJob != nil {
                var tmp : [Any] = []
                for k in self.transcodeJob! {
                    tmp.append(k.toMap())
                }
                map["TranscodeJob"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TranscodeJob"] as? [Any?] {
                var tmp : [SubmitTranscodeJobsResponseBody.TranscodeJobs.TranscodeJob] = []
                for v in value {
                    if v != nil {
                        var model = SubmitTranscodeJobsResponseBody.TranscodeJobs.TranscodeJob()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.transcodeJob = tmp
            }
        }
    }
    public var requestId: String?

    public var transcodeJobs: SubmitTranscodeJobsResponseBody.TranscodeJobs?

    public var transcodeTaskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.transcodeJobs?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.transcodeJobs != nil {
            map["TranscodeJobs"] = self.transcodeJobs?.toMap()
        }
        if self.transcodeTaskId != nil {
            map["TranscodeTaskId"] = self.transcodeTaskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TranscodeJobs"] as? [String: Any?] {
            var model = SubmitTranscodeJobsResponseBody.TranscodeJobs()
            model.fromMap(value)
            self.transcodeJobs = model
        }
        if let value = dict["TranscodeTaskId"] as? String {
            self.transcodeTaskId = value
        }
    }
}

public class SubmitTranscodeJobsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubmitTranscodeJobsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubmitTranscodeJobsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubmitWorkflowJobRequest : Tea.TeaModel {
    public var mediaId: String?

    public var workflowId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.mediaId != nil {
            map["MediaId"] = self.mediaId!
        }
        if self.workflowId != nil {
            map["WorkflowId"] = self.workflowId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MediaId"] as? String {
            self.mediaId = value
        }
        if let value = dict["WorkflowId"] as? String {
            self.workflowId = value
        }
    }
}

public class SubmitWorkflowJobResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class SubmitWorkflowJobResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubmitWorkflowJobResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubmitWorkflowJobResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateAITemplateRequest : Tea.TeaModel {
    public var templateConfig: String?

    public var templateId: String?

    public var templateName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.templateConfig != nil {
            map["TemplateConfig"] = self.templateConfig!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        if self.templateName != nil {
            map["TemplateName"] = self.templateName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["TemplateConfig"] as? String {
            self.templateConfig = value
        }
        if let value = dict["TemplateId"] as? String {
            self.templateId = value
        }
        if let value = dict["TemplateName"] as? String {
            self.templateName = value
        }
    }
}

public class UpdateAITemplateResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var templateId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.templateId != nil {
            map["TemplateId"] = self.templateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TemplateId"] as? String {
            self.templateId = value
        }
    }
}

public class UpdateAITemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateAITemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateAITemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateAppInfoRequest : Tea.TeaModel {
    public var appId: String?

    public var appName: String?

    public var description_: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.appName != nil {
            map["AppName"] = self.appName!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["AppName"] as? String {
            self.appName = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class UpdateAppInfoResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateAppInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateAppInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateAppInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateAttachedMediaInfosRequest : Tea.TeaModel {
    public var updateContent: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.updateContent != nil {
            map["UpdateContent"] = self.updateContent!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["UpdateContent"] as? String {
            self.updateContent = value
        }
    }
}

public class UpdateAttachedMediaInfosResponseBody : Tea.TeaModel {
    public var nonExistMediaIds: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nonExistMediaIds != nil {
            map["NonExistMediaIds"] = self.nonExistMediaIds!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NonExistMediaIds"] as? [String] {
            self.nonExistMediaIds = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateAttachedMediaInfosResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateAttachedMediaInfosResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateAttachedMediaInfosResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateCategoryRequest : Tea.TeaModel {
    public var cateId: Int64?

    public var cateName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cateId != nil {
            map["CateId"] = self.cateId!
        }
        if self.cateName != nil {
            map["CateName"] = self.cateName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CateId"] as? Int64 {
            self.cateId = value
        }
        if let value = dict["CateName"] as? String {
            self.cateName = value
        }
    }
}

public class UpdateCategoryResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateCategoryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateCategoryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateCategoryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateEditingProjectRequest : Tea.TeaModel {
    public var coverURL: String?

    public var description_: String?

    public var ownerAccount: String?

    public var ownerId: String?

    public var projectId: String?

    public var resourceOwnerAccount: String?

    public var resourceOwnerId: String?

    public var timeline: String?

    public var title: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.coverURL != nil {
            map["CoverURL"] = self.coverURL!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.ownerAccount != nil {
            map["OwnerAccount"] = self.ownerAccount!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        if self.resourceOwnerAccount != nil {
            map["ResourceOwnerAccount"] = self.resourceOwnerAccount!
        }
        if self.resourceOwnerId != nil {
            map["ResourceOwnerId"] = self.resourceOwnerId!
        }
        if self.timeline != nil {
            map["Timeline"] = self.timeline!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CoverURL"] as? String {
            self.coverURL = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["OwnerAccount"] as? String {
            self.ownerAccount = value
        }
        if let value = dict["OwnerId"] as? String {
            self.ownerId = value
        }
        if let value = dict["ProjectId"] as? String {
            self.projectId = value
        }
        if let value = dict["ResourceOwnerAccount"] as? String {
            self.resourceOwnerAccount = value
        }
        if let value = dict["ResourceOwnerId"] as? String {
            self.resourceOwnerId = value
        }
        if let value = dict["Timeline"] as? String {
            self.timeline = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
    }
}

public class UpdateEditingProjectResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateEditingProjectResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateEditingProjectResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateEditingProjectResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateImageInfosRequest : Tea.TeaModel {
    public var updateContent: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.updateContent != nil {
            map["UpdateContent"] = self.updateContent!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["UpdateContent"] as? String {
            self.updateContent = value
        }
    }
}

public class UpdateImageInfosResponseBody : Tea.TeaModel {
    public class NonExistImageIds : Tea.TeaModel {
        public var imageId: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.imageId != nil {
                map["ImageId"] = self.imageId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ImageId"] as? [String] {
                self.imageId = value
            }
        }
    }
    public var nonExistImageIds: UpdateImageInfosResponseBody.NonExistImageIds?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.nonExistImageIds?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nonExistImageIds != nil {
            map["NonExistImageIds"] = self.nonExistImageIds?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NonExistImageIds"] as? [String: Any?] {
            var model = UpdateImageInfosResponseBody.NonExistImageIds()
            model.fromMap(value)
            self.nonExistImageIds = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateImageInfosResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateImageInfosResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateImageInfosResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateMediaStorageClassRequest : Tea.TeaModel {
    public var allowUpdateWithoutTimeLimit: Bool?

    public var mediaIds: String?

    public var restoreTier: String?

    public var scope: String?

    public var storageClass: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.allowUpdateWithoutTimeLimit != nil {
            map["AllowUpdateWithoutTimeLimit"] = self.allowUpdateWithoutTimeLimit!
        }
        if self.mediaIds != nil {
            map["MediaIds"] = self.mediaIds!
        }
        if self.restoreTier != nil {
            map["RestoreTier"] = self.restoreTier!
        }
        if self.scope != nil {
            map["Scope"] = self.scope!
        }
        if self.storageClass != nil {
            map["StorageClass"] = self.storageClass!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AllowUpdateWithoutTimeLimit"] as? Bool {
            self.allowUpdateWithoutTimeLimit = value
        }
        if let value = dict["MediaIds"] as? String {
            self.mediaIds = value
        }
        if let value = dict["RestoreTier"] as? String {
            self.restoreTier = value
        }
        if let value = dict["Scope"] as? String {
            self.scope = value
        }
        if let value = dict["StorageClass"] as? String {
            self.storageClass = value
        }
    }
}

public class UpdateMediaStorageClassResponseBody : Tea.TeaModel {
    public class ForbiddenList : Tea.TeaModel {
        public class MediaForbiddenReasonDTO : Tea.TeaModel {
            public var mediaId: String?

            public var reason: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.mediaId != nil {
                    map["MediaId"] = self.mediaId!
                }
                if self.reason != nil {
                    map["Reason"] = self.reason!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["MediaId"] as? String {
                    self.mediaId = value
                }
                if let value = dict["Reason"] as? String {
                    self.reason = value
                }
            }
        }
        public var mediaForbiddenReasonDTO: [UpdateMediaStorageClassResponseBody.ForbiddenList.MediaForbiddenReasonDTO]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.mediaForbiddenReasonDTO != nil {
                var tmp : [Any] = []
                for k in self.mediaForbiddenReasonDTO! {
                    tmp.append(k.toMap())
                }
                map["MediaForbiddenReasonDTO"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MediaForbiddenReasonDTO"] as? [Any?] {
                var tmp : [UpdateMediaStorageClassResponseBody.ForbiddenList.MediaForbiddenReasonDTO] = []
                for v in value {
                    if v != nil {
                        var model = UpdateMediaStorageClassResponseBody.ForbiddenList.MediaForbiddenReasonDTO()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.mediaForbiddenReasonDTO = tmp
            }
        }
    }
    public class IgnoredList : Tea.TeaModel {
        public var mediaId: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.mediaId != nil {
                map["MediaId"] = self.mediaId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MediaId"] as? [String] {
                self.mediaId = value
            }
        }
    }
    public var forbiddenList: UpdateMediaStorageClassResponseBody.ForbiddenList?

    public var ignoredList: UpdateMediaStorageClassResponseBody.IgnoredList?

    public var requestId: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.forbiddenList?.validate()
        try self.ignoredList?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.forbiddenList != nil {
            map["ForbiddenList"] = self.forbiddenList?.toMap()
        }
        if self.ignoredList != nil {
            map["IgnoredList"] = self.ignoredList?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ForbiddenList"] as? [String: Any?] {
            var model = UpdateMediaStorageClassResponseBody.ForbiddenList()
            model.fromMap(value)
            self.forbiddenList = model
        }
        if let value = dict["IgnoredList"] as? [String: Any?] {
            var model = UpdateMediaStorageClassResponseBody.IgnoredList()
            model.fromMap(value)
            self.ignoredList = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class UpdateMediaStorageClassResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateMediaStorageClassResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateMediaStorageClassResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateTranscodeTemplateGroupRequest : Tea.TeaModel {
    public var locked: String?

    public var name: String?

    public var transcodeTemplateGroupId: String?

    public var transcodeTemplateList: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.locked != nil {
            map["Locked"] = self.locked!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.transcodeTemplateGroupId != nil {
            map["TranscodeTemplateGroupId"] = self.transcodeTemplateGroupId!
        }
        if self.transcodeTemplateList != nil {
            map["TranscodeTemplateList"] = self.transcodeTemplateList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Locked"] as? String {
            self.locked = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["TranscodeTemplateGroupId"] as? String {
            self.transcodeTemplateGroupId = value
        }
        if let value = dict["TranscodeTemplateList"] as? String {
            self.transcodeTemplateList = value
        }
    }
}

public class UpdateTranscodeTemplateGroupResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var transcodeTemplateGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.transcodeTemplateGroupId != nil {
            map["TranscodeTemplateGroupId"] = self.transcodeTemplateGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TranscodeTemplateGroupId"] as? String {
            self.transcodeTemplateGroupId = value
        }
    }
}

public class UpdateTranscodeTemplateGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateTranscodeTemplateGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateTranscodeTemplateGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateVideoInfoRequest : Tea.TeaModel {
    public var cateId: Int64?

    public var coverURL: String?

    public var description_: String?

    public var tags: String?

    public var title: String?

    public var userData: String?

    public var videoId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.cateId != nil {
            map["CateId"] = self.cateId!
        }
        if self.coverURL != nil {
            map["CoverURL"] = self.coverURL!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.tags != nil {
            map["Tags"] = self.tags!
        }
        if self.title != nil {
            map["Title"] = self.title!
        }
        if self.userData != nil {
            map["UserData"] = self.userData!
        }
        if self.videoId != nil {
            map["VideoId"] = self.videoId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CateId"] as? Int64 {
            self.cateId = value
        }
        if let value = dict["CoverURL"] as? String {
            self.coverURL = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Tags"] as? String {
            self.tags = value
        }
        if let value = dict["Title"] as? String {
            self.title = value
        }
        if let value = dict["UserData"] as? String {
            self.userData = value
        }
        if let value = dict["VideoId"] as? String {
            self.videoId = value
        }
    }
}

public class UpdateVideoInfoResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateVideoInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateVideoInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateVideoInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateVideoInfosRequest : Tea.TeaModel {
    public var updateContent: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.updateContent != nil {
            map["UpdateContent"] = self.updateContent!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["UpdateContent"] as? String {
            self.updateContent = value
        }
    }
}

public class UpdateVideoInfosResponseBody : Tea.TeaModel {
    public var forbiddenVideoIds: [String]?

    public var nonExistVideoIds: [String]?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.forbiddenVideoIds != nil {
            map["ForbiddenVideoIds"] = self.forbiddenVideoIds!
        }
        if self.nonExistVideoIds != nil {
            map["NonExistVideoIds"] = self.nonExistVideoIds!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ForbiddenVideoIds"] as? [String] {
            self.forbiddenVideoIds = value
        }
        if let value = dict["NonExistVideoIds"] as? [String] {
            self.nonExistVideoIds = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateVideoInfosResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateVideoInfosResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateVideoInfosResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateVodDomainRequest : Tea.TeaModel {
    public var domainName: String?

    public var ownerId: Int64?

    public var securityToken: String?

    public var sources: String?

    public var topLevelDomain: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.sources != nil {
            map["Sources"] = self.sources!
        }
        if self.topLevelDomain != nil {
            map["TopLevelDomain"] = self.topLevelDomain!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Sources"] as? String {
            self.sources = value
        }
        if let value = dict["TopLevelDomain"] as? String {
            self.topLevelDomain = value
        }
    }
}

public class UpdateVodDomainResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateVodDomainResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateVodDomainResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateVodDomainResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateVodTemplateRequest : Tea.TeaModel {
    public var name: String?

    public var templateConfig: String?

    public var vodTemplateId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.templateConfig != nil {
            map["TemplateConfig"] = self.templateConfig!
        }
        if self.vodTemplateId != nil {
            map["VodTemplateId"] = self.vodTemplateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["TemplateConfig"] as? String {
            self.templateConfig = value
        }
        if let value = dict["VodTemplateId"] as? String {
            self.vodTemplateId = value
        }
    }
}

public class UpdateVodTemplateResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var vodTemplateId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.vodTemplateId != nil {
            map["VodTemplateId"] = self.vodTemplateId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["VodTemplateId"] as? String {
            self.vodTemplateId = value
        }
    }
}

public class UpdateVodTemplateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateVodTemplateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateVodTemplateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateWatermarkRequest : Tea.TeaModel {
    public var name: String?

    public var watermarkConfig: String?

    public var watermarkId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.watermarkConfig != nil {
            map["WatermarkConfig"] = self.watermarkConfig!
        }
        if self.watermarkId != nil {
            map["WatermarkId"] = self.watermarkId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["WatermarkConfig"] as? String {
            self.watermarkConfig = value
        }
        if let value = dict["WatermarkId"] as? String {
            self.watermarkId = value
        }
    }
}

public class UpdateWatermarkResponseBody : Tea.TeaModel {
    public class WatermarkInfo : Tea.TeaModel {
        public var creationTime: String?

        public var fileUrl: String?

        public var isDefault: String?

        public var name: String?

        public var type: String?

        public var watermarkConfig: String?

        public var watermarkId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.creationTime != nil {
                map["CreationTime"] = self.creationTime!
            }
            if self.fileUrl != nil {
                map["FileUrl"] = self.fileUrl!
            }
            if self.isDefault != nil {
                map["IsDefault"] = self.isDefault!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.watermarkConfig != nil {
                map["WatermarkConfig"] = self.watermarkConfig!
            }
            if self.watermarkId != nil {
                map["WatermarkId"] = self.watermarkId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreationTime"] as? String {
                self.creationTime = value
            }
            if let value = dict["FileUrl"] as? String {
                self.fileUrl = value
            }
            if let value = dict["IsDefault"] as? String {
                self.isDefault = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["WatermarkConfig"] as? String {
                self.watermarkConfig = value
            }
            if let value = dict["WatermarkId"] as? String {
                self.watermarkId = value
            }
        }
    }
    public var requestId: String?

    public var watermarkInfo: UpdateWatermarkResponseBody.WatermarkInfo?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.watermarkInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.watermarkInfo != nil {
            map["WatermarkInfo"] = self.watermarkInfo?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["WatermarkInfo"] as? [String: Any?] {
            var model = UpdateWatermarkResponseBody.WatermarkInfo()
            model.fromMap(value)
            self.watermarkInfo = model
        }
    }
}

public class UpdateWatermarkResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateWatermarkResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateWatermarkResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UploadMediaByURLRequest : Tea.TeaModel {
    public var appId: String?

    public var sessionId: String?

    public var storageLocation: String?

    public var templateGroupId: String?

    public var uploadMetadatas: String?

    public var uploadURLs: String?

    public var userData: String?

    public var workflowId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.sessionId != nil {
            map["SessionId"] = self.sessionId!
        }
        if self.storageLocation != nil {
            map["StorageLocation"] = self.storageLocation!
        }
        if self.templateGroupId != nil {
            map["TemplateGroupId"] = self.templateGroupId!
        }
        if self.uploadMetadatas != nil {
            map["UploadMetadatas"] = self.uploadMetadatas!
        }
        if self.uploadURLs != nil {
            map["UploadURLs"] = self.uploadURLs!
        }
        if self.userData != nil {
            map["UserData"] = self.userData!
        }
        if self.workflowId != nil {
            map["WorkflowId"] = self.workflowId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["SessionId"] as? String {
            self.sessionId = value
        }
        if let value = dict["StorageLocation"] as? String {
            self.storageLocation = value
        }
        if let value = dict["TemplateGroupId"] as? String {
            self.templateGroupId = value
        }
        if let value = dict["UploadMetadatas"] as? String {
            self.uploadMetadatas = value
        }
        if let value = dict["UploadURLs"] as? String {
            self.uploadURLs = value
        }
        if let value = dict["UserData"] as? String {
            self.userData = value
        }
        if let value = dict["WorkflowId"] as? String {
            self.workflowId = value
        }
    }
}

public class UploadMediaByURLResponseBody : Tea.TeaModel {
    public class UploadJobs : Tea.TeaModel {
        public var jobId: String?

        public var sourceURL: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            if self.sourceURL != nil {
                map["SourceURL"] = self.sourceURL!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
            if let value = dict["SourceURL"] as? String {
                self.sourceURL = value
            }
        }
    }
    public var requestId: String?

    public var uploadJobs: [UploadMediaByURLResponseBody.UploadJobs]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.uploadJobs != nil {
            var tmp : [Any] = []
            for k in self.uploadJobs! {
                tmp.append(k.toMap())
            }
            map["UploadJobs"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["UploadJobs"] as? [Any?] {
            var tmp : [UploadMediaByURLResponseBody.UploadJobs] = []
            for v in value {
                if v != nil {
                    var model = UploadMediaByURLResponseBody.UploadJobs()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.uploadJobs = tmp
        }
    }
}

public class UploadMediaByURLResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UploadMediaByURLResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UploadMediaByURLResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UploadStreamByURLRequest : Tea.TeaModel {
    public var definition: String?

    public var fileExtension: String?

    public var HDRType: String?

    public var mediaId: String?

    public var streamURL: String?

    public var uploadMetadata: String?

    public var userData: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.definition != nil {
            map["Definition"] = self.definition!
        }
        if self.fileExtension != nil {
            map["FileExtension"] = self.fileExtension!
        }
        if self.HDRType != nil {
            map["HDRType"] = self.HDRType!
        }
        if self.mediaId != nil {
            map["MediaId"] = self.mediaId!
        }
        if self.streamURL != nil {
            map["StreamURL"] = self.streamURL!
        }
        if self.uploadMetadata != nil {
            map["UploadMetadata"] = self.uploadMetadata!
        }
        if self.userData != nil {
            map["UserData"] = self.userData!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Definition"] as? String {
            self.definition = value
        }
        if let value = dict["FileExtension"] as? String {
            self.fileExtension = value
        }
        if let value = dict["HDRType"] as? String {
            self.HDRType = value
        }
        if let value = dict["MediaId"] as? String {
            self.mediaId = value
        }
        if let value = dict["StreamURL"] as? String {
            self.streamURL = value
        }
        if let value = dict["UploadMetadata"] as? String {
            self.uploadMetadata = value
        }
        if let value = dict["UserData"] as? String {
            self.userData = value
        }
    }
}

public class UploadStreamByURLResponseBody : Tea.TeaModel {
    public var fileURL: String?

    public var requestId: String?

    public var sourceURL: String?

    public var streamJobId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fileURL != nil {
            map["FileURL"] = self.fileURL!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.sourceURL != nil {
            map["SourceURL"] = self.sourceURL!
        }
        if self.streamJobId != nil {
            map["StreamJobId"] = self.streamJobId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FileURL"] as? String {
            self.fileURL = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SourceURL"] as? String {
            self.sourceURL = value
        }
        if let value = dict["StreamJobId"] as? String {
            self.streamJobId = value
        }
    }
}

public class UploadStreamByURLResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UploadStreamByURLResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UploadStreamByURLResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class VerifyVodDomainOwnerRequest : Tea.TeaModel {
    public var domainName: String?

    public var ownerId: Int64?

    public var verifyType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.ownerId != nil {
            map["OwnerId"] = self.ownerId!
        }
        if self.verifyType != nil {
            map["VerifyType"] = self.verifyType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["OwnerId"] as? Int64 {
            self.ownerId = value
        }
        if let value = dict["VerifyType"] as? String {
            self.verifyType = value
        }
    }
}

public class VerifyVodDomainOwnerResponseBody : Tea.TeaModel {
    public var content: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.content != nil {
            map["Content"] = self.content!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Content"] as? String {
            self.content = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class VerifyVodDomainOwnerResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: VerifyVodDomainOwnerResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = VerifyVodDomainOwnerResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}
