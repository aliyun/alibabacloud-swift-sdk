import Foundation
import Tea
import TeaUtils
import AlibabacloudOpenApi
import AlibabaCloudOpenApiUtil
import AlibabacloudEndpointUtil

public class SinkBaiLianParameters : Tea.TeaModel {
    public class After : Tea.TeaModel {
        public var form: String?

        public var template: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.form != nil {
                map["Form"] = self.form!
            }
            if self.template != nil {
                map["Template"] = self.template!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Form"] as? String {
                self.form = value
            }
            if let value = dict["Template"] as? String {
                self.template = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public class Before : Tea.TeaModel {
        public var form: String?

        public var template: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.form != nil {
                map["Form"] = self.form!
            }
            if self.template != nil {
                map["Template"] = self.template!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Form"] as? String {
                self.form = value
            }
            if let value = dict["Template"] as? String {
                self.template = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public class Offset : Tea.TeaModel {
        public var form: String?

        public var template: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.form != nil {
                map["Form"] = self.form!
            }
            if self.template != nil {
                map["Template"] = self.template!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Form"] as? String {
                self.form = value
            }
            if let value = dict["Template"] as? String {
                self.template = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public class Op : Tea.TeaModel {
        public var form: String?

        public var template: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.form != nil {
                map["Form"] = self.form!
            }
            if self.template != nil {
                map["Template"] = self.template!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Form"] as? String {
                self.form = value
            }
            if let value = dict["Template"] as? String {
                self.template = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public class Partition : Tea.TeaModel {
        public var form: String?

        public var template: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.form != nil {
                map["Form"] = self.form!
            }
            if self.template != nil {
                map["Template"] = self.template!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Form"] as? String {
                self.form = value
            }
            if let value = dict["Template"] as? String {
                self.template = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var after: SinkBaiLianParameters.After?

    public var applicationType: String?

    public var before: SinkBaiLianParameters.Before?

    public var context: Any?

    public var extend: Any?

    public var offset: SinkBaiLianParameters.Offset?

    public var op: SinkBaiLianParameters.Op?

    public var partition: SinkBaiLianParameters.Partition?

    public var workspaceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.after?.validate()
        try self.before?.validate()
        try self.offset?.validate()
        try self.op?.validate()
        try self.partition?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.after != nil {
            map["After"] = self.after?.toMap()
        }
        if self.applicationType != nil {
            map["ApplicationType"] = self.applicationType!
        }
        if self.before != nil {
            map["Before"] = self.before?.toMap()
        }
        if self.context != nil {
            map["Context"] = self.context!
        }
        if self.extend != nil {
            map["Extend"] = self.extend!
        }
        if self.offset != nil {
            map["Offset"] = self.offset?.toMap()
        }
        if self.op != nil {
            map["Op"] = self.op?.toMap()
        }
        if self.partition != nil {
            map["Partition"] = self.partition?.toMap()
        }
        if self.workspaceId != nil {
            map["WorkspaceId"] = self.workspaceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["After"] as? [String: Any?] {
            var model = SinkBaiLianParameters.After()
            model.fromMap(value)
            self.after = model
        }
        if let value = dict["ApplicationType"] as? String {
            self.applicationType = value
        }
        if let value = dict["Before"] as? [String: Any?] {
            var model = SinkBaiLianParameters.Before()
            model.fromMap(value)
            self.before = model
        }
        if let value = dict["Context"] as? Any {
            self.context = value
        }
        if let value = dict["Extend"] as? Any {
            self.extend = value
        }
        if let value = dict["Offset"] as? [String: Any?] {
            var model = SinkBaiLianParameters.Offset()
            model.fromMap(value)
            self.offset = model
        }
        if let value = dict["Op"] as? [String: Any?] {
            var model = SinkBaiLianParameters.Op()
            model.fromMap(value)
            self.op = model
        }
        if let value = dict["Partition"] as? [String: Any?] {
            var model = SinkBaiLianParameters.Partition()
            model.fromMap(value)
            self.partition = model
        }
        if let value = dict["WorkspaceId"] as? String {
            self.workspaceId = value
        }
    }
}

public class SourceMySQLParameters : Tea.TeaModel {
    public var databaseName: String?

    public var hostName: String?

    public var includeSchemaChanges: String?

    public var networkType: String?

    public var password: String?

    public var port: Int32?

    public var regionId: String?

    public var securityGroupId: String?

    public var snapshotMode: String?

    public var tableNames: String?

    public var user: String?

    public var vSwitchIds: String?

    public var vpcId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.databaseName != nil {
            map["DatabaseName"] = self.databaseName!
        }
        if self.hostName != nil {
            map["HostName"] = self.hostName!
        }
        if self.includeSchemaChanges != nil {
            map["IncludeSchemaChanges"] = self.includeSchemaChanges!
        }
        if self.networkType != nil {
            map["NetworkType"] = self.networkType!
        }
        if self.password != nil {
            map["Password"] = self.password!
        }
        if self.port != nil {
            map["Port"] = self.port!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.securityGroupId != nil {
            map["SecurityGroupId"] = self.securityGroupId!
        }
        if self.snapshotMode != nil {
            map["SnapshotMode"] = self.snapshotMode!
        }
        if self.tableNames != nil {
            map["TableNames"] = self.tableNames!
        }
        if self.user != nil {
            map["User"] = self.user!
        }
        if self.vSwitchIds != nil {
            map["VSwitchIds"] = self.vSwitchIds!
        }
        if self.vpcId != nil {
            map["VpcId"] = self.vpcId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatabaseName"] as? String {
            self.databaseName = value
        }
        if let value = dict["HostName"] as? String {
            self.hostName = value
        }
        if let value = dict["IncludeSchemaChanges"] as? String {
            self.includeSchemaChanges = value
        }
        if let value = dict["NetworkType"] as? String {
            self.networkType = value
        }
        if let value = dict["Password"] as? String {
            self.password = value
        }
        if let value = dict["Port"] as? Int32 {
            self.port = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["SecurityGroupId"] as? String {
            self.securityGroupId = value
        }
        if let value = dict["SnapshotMode"] as? String {
            self.snapshotMode = value
        }
        if let value = dict["TableNames"] as? String {
            self.tableNames = value
        }
        if let value = dict["User"] as? String {
            self.user = value
        }
        if let value = dict["VSwitchIds"] as? String {
            self.vSwitchIds = value
        }
        if let value = dict["VpcId"] as? String {
            self.vpcId = value
        }
    }
}

public class CheckServiceLinkedRoleForProductRequest : Tea.TeaModel {
    public var productName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.productName != nil {
            map["ProductName"] = self.productName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ProductName"] as? String {
            self.productName = value
        }
    }
}

public class CheckServiceLinkedRoleForProductResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var checkPass: Bool?

        public var stsRoleName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.checkPass != nil {
                map["CheckPass"] = self.checkPass!
            }
            if self.stsRoleName != nil {
                map["StsRoleName"] = self.stsRoleName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CheckPass"] as? Bool {
                self.checkPass = value
            }
            if let value = dict["StsRoleName"] as? String {
                self.stsRoleName = value
            }
        }
    }
    public var code: String?

    public var data: CheckServiceLinkedRoleForProductResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CheckServiceLinkedRoleForProductResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CheckServiceLinkedRoleForProductResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CheckServiceLinkedRoleForProductResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CheckServiceLinkedRoleForProductResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateApiDestinationRequest : Tea.TeaModel {
    public class HttpApiParameters : Tea.TeaModel {
        public var endpoint: String?

        public var method: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.endpoint != nil {
                map["Endpoint"] = self.endpoint!
            }
            if self.method != nil {
                map["Method"] = self.method!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Endpoint"] as? String {
                self.endpoint = value
            }
            if let value = dict["Method"] as? String {
                self.method = value
            }
        }
    }
    public var apiDestinationName: String?

    public var connectionName: String?

    public var description_: String?

    public var httpApiParameters: CreateApiDestinationRequest.HttpApiParameters?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.httpApiParameters?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiDestinationName != nil {
            map["ApiDestinationName"] = self.apiDestinationName!
        }
        if self.connectionName != nil {
            map["ConnectionName"] = self.connectionName!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.httpApiParameters != nil {
            map["HttpApiParameters"] = self.httpApiParameters?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiDestinationName"] as? String {
            self.apiDestinationName = value
        }
        if let value = dict["ConnectionName"] as? String {
            self.connectionName = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["HttpApiParameters"] as? [String: Any?] {
            var model = CreateApiDestinationRequest.HttpApiParameters()
            model.fromMap(value)
            self.httpApiParameters = model
        }
    }
}

public class CreateApiDestinationShrinkRequest : Tea.TeaModel {
    public var apiDestinationName: String?

    public var connectionName: String?

    public var description_: String?

    public var httpApiParametersShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiDestinationName != nil {
            map["ApiDestinationName"] = self.apiDestinationName!
        }
        if self.connectionName != nil {
            map["ConnectionName"] = self.connectionName!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.httpApiParametersShrink != nil {
            map["HttpApiParameters"] = self.httpApiParametersShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiDestinationName"] as? String {
            self.apiDestinationName = value
        }
        if let value = dict["ConnectionName"] as? String {
            self.connectionName = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["HttpApiParameters"] as? String {
            self.httpApiParametersShrink = value
        }
    }
}

public class CreateApiDestinationResponseBody : Tea.TeaModel {
    public class Date : Tea.TeaModel {
        public var apiDestinationName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiDestinationName != nil {
                map["ApiDestinationName"] = self.apiDestinationName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiDestinationName"] as? String {
                self.apiDestinationName = value
            }
        }
    }
    public var code: String?

    public var date: CreateApiDestinationResponseBody.Date?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.date?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.date != nil {
            map["Date"] = self.date?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Date"] as? [String: Any?] {
            var model = CreateApiDestinationResponseBody.Date()
            model.fromMap(value)
            self.date = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateApiDestinationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateApiDestinationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateApiDestinationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateConnectionRequest : Tea.TeaModel {
    public class AuthParameters : Tea.TeaModel {
        public class ApiKeyAuthParameters : Tea.TeaModel {
            public var apiKeyName: String?

            public var apiKeyValue: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiKeyName != nil {
                    map["ApiKeyName"] = self.apiKeyName!
                }
                if self.apiKeyValue != nil {
                    map["ApiKeyValue"] = self.apiKeyValue!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiKeyName"] as? String {
                    self.apiKeyName = value
                }
                if let value = dict["ApiKeyValue"] as? String {
                    self.apiKeyValue = value
                }
            }
        }
        public class BasicAuthParameters : Tea.TeaModel {
            public var password: String?

            public var username: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.password != nil {
                    map["Password"] = self.password!
                }
                if self.username != nil {
                    map["Username"] = self.username!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Password"] as? String {
                    self.password = value
                }
                if let value = dict["Username"] as? String {
                    self.username = value
                }
            }
        }
        public class OAuthParameters : Tea.TeaModel {
            public class ClientParameters : Tea.TeaModel {
                public var clientID: String?

                public var clientSecret: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.clientID != nil {
                        map["ClientID"] = self.clientID!
                    }
                    if self.clientSecret != nil {
                        map["ClientSecret"] = self.clientSecret!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ClientID"] as? String {
                        self.clientID = value
                    }
                    if let value = dict["ClientSecret"] as? String {
                        self.clientSecret = value
                    }
                }
            }
            public class OAuthHttpParameters : Tea.TeaModel {
                public class BodyParameters : Tea.TeaModel {
                    public var isValueSecret: String?

                    public var key: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.isValueSecret != nil {
                            map["IsValueSecret"] = self.isValueSecret!
                        }
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["IsValueSecret"] as? String {
                            self.isValueSecret = value
                        }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class HeaderParameters : Tea.TeaModel {
                    public var isValueSecret: String?

                    public var key: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.isValueSecret != nil {
                            map["IsValueSecret"] = self.isValueSecret!
                        }
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["IsValueSecret"] as? String {
                            self.isValueSecret = value
                        }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class QueryStringParameters : Tea.TeaModel {
                    public var isValueSecret: String?

                    public var key: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.isValueSecret != nil {
                            map["IsValueSecret"] = self.isValueSecret!
                        }
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["IsValueSecret"] as? String {
                            self.isValueSecret = value
                        }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var bodyParameters: [CreateConnectionRequest.AuthParameters.OAuthParameters.OAuthHttpParameters.BodyParameters]?

                public var headerParameters: [CreateConnectionRequest.AuthParameters.OAuthParameters.OAuthHttpParameters.HeaderParameters]?

                public var queryStringParameters: [CreateConnectionRequest.AuthParameters.OAuthParameters.OAuthHttpParameters.QueryStringParameters]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.bodyParameters != nil {
                        var tmp : [Any] = []
                        for k in self.bodyParameters! {
                            tmp.append(k.toMap())
                        }
                        map["BodyParameters"] = tmp
                    }
                    if self.headerParameters != nil {
                        var tmp : [Any] = []
                        for k in self.headerParameters! {
                            tmp.append(k.toMap())
                        }
                        map["HeaderParameters"] = tmp
                    }
                    if self.queryStringParameters != nil {
                        var tmp : [Any] = []
                        for k in self.queryStringParameters! {
                            tmp.append(k.toMap())
                        }
                        map["QueryStringParameters"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["BodyParameters"] as? [Any?] {
                        var tmp : [CreateConnectionRequest.AuthParameters.OAuthParameters.OAuthHttpParameters.BodyParameters] = []
                        for v in value {
                            if v != nil {
                                var model = CreateConnectionRequest.AuthParameters.OAuthParameters.OAuthHttpParameters.BodyParameters()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.bodyParameters = tmp
                    }
                    if let value = dict["HeaderParameters"] as? [Any?] {
                        var tmp : [CreateConnectionRequest.AuthParameters.OAuthParameters.OAuthHttpParameters.HeaderParameters] = []
                        for v in value {
                            if v != nil {
                                var model = CreateConnectionRequest.AuthParameters.OAuthParameters.OAuthHttpParameters.HeaderParameters()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.headerParameters = tmp
                    }
                    if let value = dict["QueryStringParameters"] as? [Any?] {
                        var tmp : [CreateConnectionRequest.AuthParameters.OAuthParameters.OAuthHttpParameters.QueryStringParameters] = []
                        for v in value {
                            if v != nil {
                                var model = CreateConnectionRequest.AuthParameters.OAuthParameters.OAuthHttpParameters.QueryStringParameters()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.queryStringParameters = tmp
                    }
                }
            }
            public var authorizationEndpoint: String?

            public var clientParameters: CreateConnectionRequest.AuthParameters.OAuthParameters.ClientParameters?

            public var httpMethod: String?

            public var OAuthHttpParameters: CreateConnectionRequest.AuthParameters.OAuthParameters.OAuthHttpParameters?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.clientParameters?.validate()
                try self.OAuthHttpParameters?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.authorizationEndpoint != nil {
                    map["AuthorizationEndpoint"] = self.authorizationEndpoint!
                }
                if self.clientParameters != nil {
                    map["ClientParameters"] = self.clientParameters?.toMap()
                }
                if self.httpMethod != nil {
                    map["HttpMethod"] = self.httpMethod!
                }
                if self.OAuthHttpParameters != nil {
                    map["OAuthHttpParameters"] = self.OAuthHttpParameters?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AuthorizationEndpoint"] as? String {
                    self.authorizationEndpoint = value
                }
                if let value = dict["ClientParameters"] as? [String: Any?] {
                    var model = CreateConnectionRequest.AuthParameters.OAuthParameters.ClientParameters()
                    model.fromMap(value)
                    self.clientParameters = model
                }
                if let value = dict["HttpMethod"] as? String {
                    self.httpMethod = value
                }
                if let value = dict["OAuthHttpParameters"] as? [String: Any?] {
                    var model = CreateConnectionRequest.AuthParameters.OAuthParameters.OAuthHttpParameters()
                    model.fromMap(value)
                    self.OAuthHttpParameters = model
                }
            }
        }
        public var apiKeyAuthParameters: CreateConnectionRequest.AuthParameters.ApiKeyAuthParameters?

        public var authorizationType: String?

        public var basicAuthParameters: CreateConnectionRequest.AuthParameters.BasicAuthParameters?

        public var OAuthParameters: CreateConnectionRequest.AuthParameters.OAuthParameters?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.apiKeyAuthParameters?.validate()
            try self.basicAuthParameters?.validate()
            try self.OAuthParameters?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiKeyAuthParameters != nil {
                map["ApiKeyAuthParameters"] = self.apiKeyAuthParameters?.toMap()
            }
            if self.authorizationType != nil {
                map["AuthorizationType"] = self.authorizationType!
            }
            if self.basicAuthParameters != nil {
                map["BasicAuthParameters"] = self.basicAuthParameters?.toMap()
            }
            if self.OAuthParameters != nil {
                map["OAuthParameters"] = self.OAuthParameters?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiKeyAuthParameters"] as? [String: Any?] {
                var model = CreateConnectionRequest.AuthParameters.ApiKeyAuthParameters()
                model.fromMap(value)
                self.apiKeyAuthParameters = model
            }
            if let value = dict["AuthorizationType"] as? String {
                self.authorizationType = value
            }
            if let value = dict["BasicAuthParameters"] as? [String: Any?] {
                var model = CreateConnectionRequest.AuthParameters.BasicAuthParameters()
                model.fromMap(value)
                self.basicAuthParameters = model
            }
            if let value = dict["OAuthParameters"] as? [String: Any?] {
                var model = CreateConnectionRequest.AuthParameters.OAuthParameters()
                model.fromMap(value)
                self.OAuthParameters = model
            }
        }
    }
    public class NetworkParameters : Tea.TeaModel {
        public var networkType: String?

        public var securityGroupId: String?

        public var vpcId: String?

        public var vswitcheId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.networkType != nil {
                map["NetworkType"] = self.networkType!
            }
            if self.securityGroupId != nil {
                map["SecurityGroupId"] = self.securityGroupId!
            }
            if self.vpcId != nil {
                map["VpcId"] = self.vpcId!
            }
            if self.vswitcheId != nil {
                map["VswitcheId"] = self.vswitcheId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["NetworkType"] as? String {
                self.networkType = value
            }
            if let value = dict["SecurityGroupId"] as? String {
                self.securityGroupId = value
            }
            if let value = dict["VpcId"] as? String {
                self.vpcId = value
            }
            if let value = dict["VswitcheId"] as? String {
                self.vswitcheId = value
            }
        }
    }
    public var authParameters: CreateConnectionRequest.AuthParameters?

    public var connectionName: String?

    public var description_: String?

    public var networkParameters: CreateConnectionRequest.NetworkParameters?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.authParameters?.validate()
        try self.networkParameters?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.authParameters != nil {
            map["AuthParameters"] = self.authParameters?.toMap()
        }
        if self.connectionName != nil {
            map["ConnectionName"] = self.connectionName!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.networkParameters != nil {
            map["NetworkParameters"] = self.networkParameters?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuthParameters"] as? [String: Any?] {
            var model = CreateConnectionRequest.AuthParameters()
            model.fromMap(value)
            self.authParameters = model
        }
        if let value = dict["ConnectionName"] as? String {
            self.connectionName = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["NetworkParameters"] as? [String: Any?] {
            var model = CreateConnectionRequest.NetworkParameters()
            model.fromMap(value)
            self.networkParameters = model
        }
    }
}

public class CreateConnectionShrinkRequest : Tea.TeaModel {
    public var authParametersShrink: String?

    public var connectionName: String?

    public var description_: String?

    public var networkParametersShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.authParametersShrink != nil {
            map["AuthParameters"] = self.authParametersShrink!
        }
        if self.connectionName != nil {
            map["ConnectionName"] = self.connectionName!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.networkParametersShrink != nil {
            map["NetworkParameters"] = self.networkParametersShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuthParameters"] as? String {
            self.authParametersShrink = value
        }
        if let value = dict["ConnectionName"] as? String {
            self.connectionName = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["NetworkParameters"] as? String {
            self.networkParametersShrink = value
        }
    }
}

public class CreateConnectionResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var connectionName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.connectionName != nil {
                map["ConnectionName"] = self.connectionName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConnectionName"] as? String {
                self.connectionName = value
            }
        }
    }
    public var code: String?

    public var data: CreateConnectionResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CreateConnectionResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateConnectionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateConnectionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateConnectionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateEventBusRequest : Tea.TeaModel {
    public var description_: String?

    public var eventBusName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.eventBusName != nil {
            map["EventBusName"] = self.eventBusName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["EventBusName"] as? String {
            self.eventBusName = value
        }
    }
}

public class CreateEventBusResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var eventBusARN: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.eventBusARN != nil {
                map["EventBusARN"] = self.eventBusARN!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EventBusARN"] as? String {
                self.eventBusARN = value
            }
        }
    }
    public var code: String?

    public var data: CreateEventBusResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CreateEventBusResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateEventBusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateEventBusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateEventBusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateEventSourceRequest : Tea.TeaModel {
    public class SourceHttpEventParameters : Tea.TeaModel {
        public var ip: [String]?

        public var method: [String]?

        public var referer: [String]?

        public var securityConfig: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ip != nil {
                map["Ip"] = self.ip!
            }
            if self.method != nil {
                map["Method"] = self.method!
            }
            if self.referer != nil {
                map["Referer"] = self.referer!
            }
            if self.securityConfig != nil {
                map["SecurityConfig"] = self.securityConfig!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Ip"] as? [String] {
                self.ip = value
            }
            if let value = dict["Method"] as? [String] {
                self.method = value
            }
            if let value = dict["Referer"] as? [String] {
                self.referer = value
            }
            if let value = dict["SecurityConfig"] as? String {
                self.securityConfig = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public class SourceKafkaParameters : Tea.TeaModel {
        public var consumerGroup: String?

        public var instanceId: String?

        public var maximumTasks: Int32?

        public var network: String?

        public var offsetReset: String?

        public var regionId: String?

        public var securityGroupId: String?

        public var topic: String?

        public var vSwitchIds: String?

        public var vpcId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.consumerGroup != nil {
                map["ConsumerGroup"] = self.consumerGroup!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.maximumTasks != nil {
                map["MaximumTasks"] = self.maximumTasks!
            }
            if self.network != nil {
                map["Network"] = self.network!
            }
            if self.offsetReset != nil {
                map["OffsetReset"] = self.offsetReset!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.securityGroupId != nil {
                map["SecurityGroupId"] = self.securityGroupId!
            }
            if self.topic != nil {
                map["Topic"] = self.topic!
            }
            if self.vSwitchIds != nil {
                map["VSwitchIds"] = self.vSwitchIds!
            }
            if self.vpcId != nil {
                map["VpcId"] = self.vpcId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConsumerGroup"] as? String {
                self.consumerGroup = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["MaximumTasks"] as? Int32 {
                self.maximumTasks = value
            }
            if let value = dict["Network"] as? String {
                self.network = value
            }
            if let value = dict["OffsetReset"] as? String {
                self.offsetReset = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["SecurityGroupId"] as? String {
                self.securityGroupId = value
            }
            if let value = dict["Topic"] as? String {
                self.topic = value
            }
            if let value = dict["VSwitchIds"] as? String {
                self.vSwitchIds = value
            }
            if let value = dict["VpcId"] as? String {
                self.vpcId = value
            }
        }
    }
    public class SourceMNSParameters : Tea.TeaModel {
        public var isBase64Decode: Bool?

        public var queueName: String?

        public var regionId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.isBase64Decode != nil {
                map["IsBase64Decode"] = self.isBase64Decode!
            }
            if self.queueName != nil {
                map["QueueName"] = self.queueName!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["IsBase64Decode"] as? Bool {
                self.isBase64Decode = value
            }
            if let value = dict["QueueName"] as? String {
                self.queueName = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
        }
    }
    public class SourceRabbitMQParameters : Tea.TeaModel {
        public var instanceId: String?

        public var queueName: String?

        public var regionId: String?

        public var virtualHostName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.queueName != nil {
                map["QueueName"] = self.queueName!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.virtualHostName != nil {
                map["VirtualHostName"] = self.virtualHostName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["QueueName"] as? String {
                self.queueName = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["VirtualHostName"] as? String {
                self.virtualHostName = value
            }
        }
    }
    public class SourceRocketMQParameters : Tea.TeaModel {
        public var authType: String?

        public var groupID: String?

        public var instanceEndpoint: String?

        public var instanceId: String?

        public var instanceNetwork: String?

        public var instancePassword: String?

        public var instanceSecurityGroupId: String?

        public var instanceType: String?

        public var instanceUsername: String?

        public var instanceVSwitchIds: String?

        public var instanceVpcId: String?

        public var offset: String?

        public var regionId: String?

        public var tag: String?

        public var timestamp: Int64?

        public var topic: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.authType != nil {
                map["AuthType"] = self.authType!
            }
            if self.groupID != nil {
                map["GroupID"] = self.groupID!
            }
            if self.instanceEndpoint != nil {
                map["InstanceEndpoint"] = self.instanceEndpoint!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.instanceNetwork != nil {
                map["InstanceNetwork"] = self.instanceNetwork!
            }
            if self.instancePassword != nil {
                map["InstancePassword"] = self.instancePassword!
            }
            if self.instanceSecurityGroupId != nil {
                map["InstanceSecurityGroupId"] = self.instanceSecurityGroupId!
            }
            if self.instanceType != nil {
                map["InstanceType"] = self.instanceType!
            }
            if self.instanceUsername != nil {
                map["InstanceUsername"] = self.instanceUsername!
            }
            if self.instanceVSwitchIds != nil {
                map["InstanceVSwitchIds"] = self.instanceVSwitchIds!
            }
            if self.instanceVpcId != nil {
                map["InstanceVpcId"] = self.instanceVpcId!
            }
            if self.offset != nil {
                map["Offset"] = self.offset!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.tag != nil {
                map["Tag"] = self.tag!
            }
            if self.timestamp != nil {
                map["Timestamp"] = self.timestamp!
            }
            if self.topic != nil {
                map["Topic"] = self.topic!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AuthType"] as? String {
                self.authType = value
            }
            if let value = dict["GroupID"] as? String {
                self.groupID = value
            }
            if let value = dict["InstanceEndpoint"] as? String {
                self.instanceEndpoint = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["InstanceNetwork"] as? String {
                self.instanceNetwork = value
            }
            if let value = dict["InstancePassword"] as? String {
                self.instancePassword = value
            }
            if let value = dict["InstanceSecurityGroupId"] as? String {
                self.instanceSecurityGroupId = value
            }
            if let value = dict["InstanceType"] as? String {
                self.instanceType = value
            }
            if let value = dict["InstanceUsername"] as? String {
                self.instanceUsername = value
            }
            if let value = dict["InstanceVSwitchIds"] as? String {
                self.instanceVSwitchIds = value
            }
            if let value = dict["InstanceVpcId"] as? String {
                self.instanceVpcId = value
            }
            if let value = dict["Offset"] as? String {
                self.offset = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["Tag"] as? String {
                self.tag = value
            }
            if let value = dict["Timestamp"] as? Int64 {
                self.timestamp = value
            }
            if let value = dict["Topic"] as? String {
                self.topic = value
            }
        }
    }
    public class SourceSLSParameters : Tea.TeaModel {
        public var consumePosition: String?

        public var logStore: String?

        public var project: String?

        public var roleName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.consumePosition != nil {
                map["ConsumePosition"] = self.consumePosition!
            }
            if self.logStore != nil {
                map["LogStore"] = self.logStore!
            }
            if self.project != nil {
                map["Project"] = self.project!
            }
            if self.roleName != nil {
                map["RoleName"] = self.roleName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConsumePosition"] as? String {
                self.consumePosition = value
            }
            if let value = dict["LogStore"] as? String {
                self.logStore = value
            }
            if let value = dict["Project"] as? String {
                self.project = value
            }
            if let value = dict["RoleName"] as? String {
                self.roleName = value
            }
        }
    }
    public class SourceScheduledEventParameters : Tea.TeaModel {
        public var schedule: String?

        public var timeZone: String?

        public var userData: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.schedule != nil {
                map["Schedule"] = self.schedule!
            }
            if self.timeZone != nil {
                map["TimeZone"] = self.timeZone!
            }
            if self.userData != nil {
                map["UserData"] = self.userData!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Schedule"] as? String {
                self.schedule = value
            }
            if let value = dict["TimeZone"] as? String {
                self.timeZone = value
            }
            if let value = dict["UserData"] as? String {
                self.userData = value
            }
        }
    }
    public var description_: String?

    public var eventBusName: String?

    public var eventSourceName: String?

    public var externalSourceConfig: [String: Any]?

    public var externalSourceType: [UInt8]?

    public var linkedExternalSource: Bool?

    public var sourceHttpEventParameters: CreateEventSourceRequest.SourceHttpEventParameters?

    public var sourceKafkaParameters: CreateEventSourceRequest.SourceKafkaParameters?

    public var sourceMNSParameters: CreateEventSourceRequest.SourceMNSParameters?

    public var sourceRabbitMQParameters: CreateEventSourceRequest.SourceRabbitMQParameters?

    public var sourceRocketMQParameters: CreateEventSourceRequest.SourceRocketMQParameters?

    public var sourceSLSParameters: CreateEventSourceRequest.SourceSLSParameters?

    public var sourceScheduledEventParameters: CreateEventSourceRequest.SourceScheduledEventParameters?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.sourceHttpEventParameters?.validate()
        try self.sourceKafkaParameters?.validate()
        try self.sourceMNSParameters?.validate()
        try self.sourceRabbitMQParameters?.validate()
        try self.sourceRocketMQParameters?.validate()
        try self.sourceSLSParameters?.validate()
        try self.sourceScheduledEventParameters?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.eventBusName != nil {
            map["EventBusName"] = self.eventBusName!
        }
        if self.eventSourceName != nil {
            map["EventSourceName"] = self.eventSourceName!
        }
        if self.externalSourceConfig != nil {
            map["ExternalSourceConfig"] = self.externalSourceConfig!
        }
        if self.externalSourceType != nil {
            map["ExternalSourceType"] = self.externalSourceType!
        }
        if self.linkedExternalSource != nil {
            map["LinkedExternalSource"] = self.linkedExternalSource!
        }
        if self.sourceHttpEventParameters != nil {
            map["SourceHttpEventParameters"] = self.sourceHttpEventParameters?.toMap()
        }
        if self.sourceKafkaParameters != nil {
            map["SourceKafkaParameters"] = self.sourceKafkaParameters?.toMap()
        }
        if self.sourceMNSParameters != nil {
            map["SourceMNSParameters"] = self.sourceMNSParameters?.toMap()
        }
        if self.sourceRabbitMQParameters != nil {
            map["SourceRabbitMQParameters"] = self.sourceRabbitMQParameters?.toMap()
        }
        if self.sourceRocketMQParameters != nil {
            map["SourceRocketMQParameters"] = self.sourceRocketMQParameters?.toMap()
        }
        if self.sourceSLSParameters != nil {
            map["SourceSLSParameters"] = self.sourceSLSParameters?.toMap()
        }
        if self.sourceScheduledEventParameters != nil {
            map["SourceScheduledEventParameters"] = self.sourceScheduledEventParameters?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["EventBusName"] as? String {
            self.eventBusName = value
        }
        if let value = dict["EventSourceName"] as? String {
            self.eventSourceName = value
        }
        if let value = dict["ExternalSourceConfig"] as? [String: Any] {
            self.externalSourceConfig = value
        }
        if let value = dict["ExternalSourceType"] as? [UInt8] {
            self.externalSourceType = value
        }
        if let value = dict["LinkedExternalSource"] as? Bool {
            self.linkedExternalSource = value
        }
        if let value = dict["SourceHttpEventParameters"] as? [String: Any?] {
            var model = CreateEventSourceRequest.SourceHttpEventParameters()
            model.fromMap(value)
            self.sourceHttpEventParameters = model
        }
        if let value = dict["SourceKafkaParameters"] as? [String: Any?] {
            var model = CreateEventSourceRequest.SourceKafkaParameters()
            model.fromMap(value)
            self.sourceKafkaParameters = model
        }
        if let value = dict["SourceMNSParameters"] as? [String: Any?] {
            var model = CreateEventSourceRequest.SourceMNSParameters()
            model.fromMap(value)
            self.sourceMNSParameters = model
        }
        if let value = dict["SourceRabbitMQParameters"] as? [String: Any?] {
            var model = CreateEventSourceRequest.SourceRabbitMQParameters()
            model.fromMap(value)
            self.sourceRabbitMQParameters = model
        }
        if let value = dict["SourceRocketMQParameters"] as? [String: Any?] {
            var model = CreateEventSourceRequest.SourceRocketMQParameters()
            model.fromMap(value)
            self.sourceRocketMQParameters = model
        }
        if let value = dict["SourceSLSParameters"] as? [String: Any?] {
            var model = CreateEventSourceRequest.SourceSLSParameters()
            model.fromMap(value)
            self.sourceSLSParameters = model
        }
        if let value = dict["SourceScheduledEventParameters"] as? [String: Any?] {
            var model = CreateEventSourceRequest.SourceScheduledEventParameters()
            model.fromMap(value)
            self.sourceScheduledEventParameters = model
        }
    }
}

public class CreateEventSourceShrinkRequest : Tea.TeaModel {
    public var description_: String?

    public var eventBusName: String?

    public var eventSourceName: String?

    public var externalSourceConfigShrink: String?

    public var externalSourceType: [UInt8]?

    public var linkedExternalSource: Bool?

    public var sourceHttpEventParametersShrink: String?

    public var sourceKafkaParametersShrink: String?

    public var sourceMNSParametersShrink: String?

    public var sourceRabbitMQParametersShrink: String?

    public var sourceRocketMQParametersShrink: String?

    public var sourceSLSParametersShrink: String?

    public var sourceScheduledEventParametersShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.eventBusName != nil {
            map["EventBusName"] = self.eventBusName!
        }
        if self.eventSourceName != nil {
            map["EventSourceName"] = self.eventSourceName!
        }
        if self.externalSourceConfigShrink != nil {
            map["ExternalSourceConfig"] = self.externalSourceConfigShrink!
        }
        if self.externalSourceType != nil {
            map["ExternalSourceType"] = self.externalSourceType!
        }
        if self.linkedExternalSource != nil {
            map["LinkedExternalSource"] = self.linkedExternalSource!
        }
        if self.sourceHttpEventParametersShrink != nil {
            map["SourceHttpEventParameters"] = self.sourceHttpEventParametersShrink!
        }
        if self.sourceKafkaParametersShrink != nil {
            map["SourceKafkaParameters"] = self.sourceKafkaParametersShrink!
        }
        if self.sourceMNSParametersShrink != nil {
            map["SourceMNSParameters"] = self.sourceMNSParametersShrink!
        }
        if self.sourceRabbitMQParametersShrink != nil {
            map["SourceRabbitMQParameters"] = self.sourceRabbitMQParametersShrink!
        }
        if self.sourceRocketMQParametersShrink != nil {
            map["SourceRocketMQParameters"] = self.sourceRocketMQParametersShrink!
        }
        if self.sourceSLSParametersShrink != nil {
            map["SourceSLSParameters"] = self.sourceSLSParametersShrink!
        }
        if self.sourceScheduledEventParametersShrink != nil {
            map["SourceScheduledEventParameters"] = self.sourceScheduledEventParametersShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["EventBusName"] as? String {
            self.eventBusName = value
        }
        if let value = dict["EventSourceName"] as? String {
            self.eventSourceName = value
        }
        if let value = dict["ExternalSourceConfig"] as? String {
            self.externalSourceConfigShrink = value
        }
        if let value = dict["ExternalSourceType"] as? [UInt8] {
            self.externalSourceType = value
        }
        if let value = dict["LinkedExternalSource"] as? Bool {
            self.linkedExternalSource = value
        }
        if let value = dict["SourceHttpEventParameters"] as? String {
            self.sourceHttpEventParametersShrink = value
        }
        if let value = dict["SourceKafkaParameters"] as? String {
            self.sourceKafkaParametersShrink = value
        }
        if let value = dict["SourceMNSParameters"] as? String {
            self.sourceMNSParametersShrink = value
        }
        if let value = dict["SourceRabbitMQParameters"] as? String {
            self.sourceRabbitMQParametersShrink = value
        }
        if let value = dict["SourceRocketMQParameters"] as? String {
            self.sourceRocketMQParametersShrink = value
        }
        if let value = dict["SourceSLSParameters"] as? String {
            self.sourceSLSParametersShrink = value
        }
        if let value = dict["SourceScheduledEventParameters"] as? String {
            self.sourceScheduledEventParametersShrink = value
        }
    }
}

public class CreateEventSourceResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var eventSourceARN: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.eventSourceARN != nil {
                map["EventSourceARN"] = self.eventSourceARN!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EventSourceARN"] as? String {
                self.eventSourceARN = value
            }
        }
    }
    public var code: String?

    public var data: CreateEventSourceResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CreateEventSourceResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateEventSourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateEventSourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateEventSourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateEventStreamingRequest : Tea.TeaModel {
    public class RunOptions : Tea.TeaModel {
        public class BatchWindow : Tea.TeaModel {
            public var countBasedWindow: Int32?

            public var timeBasedWindow: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.countBasedWindow != nil {
                    map["CountBasedWindow"] = self.countBasedWindow!
                }
                if self.timeBasedWindow != nil {
                    map["TimeBasedWindow"] = self.timeBasedWindow!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CountBasedWindow"] as? Int32 {
                    self.countBasedWindow = value
                }
                if let value = dict["TimeBasedWindow"] as? Int32 {
                    self.timeBasedWindow = value
                }
            }
        }
        public class BusinessOption : Tea.TeaModel {
            public var businessMode: String?

            public var maxCapacityUnitCount: Int64?

            public var minCapacityUnitCount: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.businessMode != nil {
                    map["BusinessMode"] = self.businessMode!
                }
                if self.maxCapacityUnitCount != nil {
                    map["MaxCapacityUnitCount"] = self.maxCapacityUnitCount!
                }
                if self.minCapacityUnitCount != nil {
                    map["MinCapacityUnitCount"] = self.minCapacityUnitCount!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BusinessMode"] as? String {
                    self.businessMode = value
                }
                if let value = dict["MaxCapacityUnitCount"] as? Int64 {
                    self.maxCapacityUnitCount = value
                }
                if let value = dict["MinCapacityUnitCount"] as? Int64 {
                    self.minCapacityUnitCount = value
                }
            }
        }
        public class DeadLetterQueue : Tea.TeaModel {
            public var arn: String?

            public var network: String?

            public var securityGroupId: String?

            public var vSwitchIds: String?

            public var vpcId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arn != nil {
                    map["Arn"] = self.arn!
                }
                if self.network != nil {
                    map["Network"] = self.network!
                }
                if self.securityGroupId != nil {
                    map["SecurityGroupId"] = self.securityGroupId!
                }
                if self.vSwitchIds != nil {
                    map["VSwitchIds"] = self.vSwitchIds!
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Arn"] as? String {
                    self.arn = value
                }
                if let value = dict["Network"] as? String {
                    self.network = value
                }
                if let value = dict["SecurityGroupId"] as? String {
                    self.securityGroupId = value
                }
                if let value = dict["VSwitchIds"] as? String {
                    self.vSwitchIds = value
                }
                if let value = dict["VpcId"] as? String {
                    self.vpcId = value
                }
            }
        }
        public class RetryStrategy : Tea.TeaModel {
            public var maximumEventAgeInSeconds: Int64?

            public var maximumRetryAttempts: Int64?

            public var pushRetryStrategy: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.maximumEventAgeInSeconds != nil {
                    map["MaximumEventAgeInSeconds"] = self.maximumEventAgeInSeconds!
                }
                if self.maximumRetryAttempts != nil {
                    map["MaximumRetryAttempts"] = self.maximumRetryAttempts!
                }
                if self.pushRetryStrategy != nil {
                    map["PushRetryStrategy"] = self.pushRetryStrategy!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["MaximumEventAgeInSeconds"] as? Int64 {
                    self.maximumEventAgeInSeconds = value
                }
                if let value = dict["MaximumRetryAttempts"] as? Int64 {
                    self.maximumRetryAttempts = value
                }
                if let value = dict["PushRetryStrategy"] as? String {
                    self.pushRetryStrategy = value
                }
            }
        }
        public var batchWindow: CreateEventStreamingRequest.RunOptions.BatchWindow?

        public var businessOption: CreateEventStreamingRequest.RunOptions.BusinessOption?

        public var deadLetterQueue: CreateEventStreamingRequest.RunOptions.DeadLetterQueue?

        public var errorsTolerance: String?

        public var maximumTasks: Int64?

        public var retryStrategy: CreateEventStreamingRequest.RunOptions.RetryStrategy?

        public var throttling: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.batchWindow?.validate()
            try self.businessOption?.validate()
            try self.deadLetterQueue?.validate()
            try self.retryStrategy?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.batchWindow != nil {
                map["BatchWindow"] = self.batchWindow?.toMap()
            }
            if self.businessOption != nil {
                map["BusinessOption"] = self.businessOption?.toMap()
            }
            if self.deadLetterQueue != nil {
                map["DeadLetterQueue"] = self.deadLetterQueue?.toMap()
            }
            if self.errorsTolerance != nil {
                map["ErrorsTolerance"] = self.errorsTolerance!
            }
            if self.maximumTasks != nil {
                map["MaximumTasks"] = self.maximumTasks!
            }
            if self.retryStrategy != nil {
                map["RetryStrategy"] = self.retryStrategy?.toMap()
            }
            if self.throttling != nil {
                map["Throttling"] = self.throttling!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BatchWindow"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.RunOptions.BatchWindow()
                model.fromMap(value)
                self.batchWindow = model
            }
            if let value = dict["BusinessOption"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.RunOptions.BusinessOption()
                model.fromMap(value)
                self.businessOption = model
            }
            if let value = dict["DeadLetterQueue"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.RunOptions.DeadLetterQueue()
                model.fromMap(value)
                self.deadLetterQueue = model
            }
            if let value = dict["ErrorsTolerance"] as? String {
                self.errorsTolerance = value
            }
            if let value = dict["MaximumTasks"] as? Int64 {
                self.maximumTasks = value
            }
            if let value = dict["RetryStrategy"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.RunOptions.RetryStrategy()
                model.fromMap(value)
                self.retryStrategy = model
            }
            if let value = dict["Throttling"] as? Int32 {
                self.throttling = value
            }
        }
    }
    public class Sink : Tea.TeaModel {
        public class SinkApacheRocketMQCheckpointParameters : Tea.TeaModel {
            public class ConsumeTimestamp : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Group : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Topic : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var consumeTimestamp: CreateEventStreamingRequest.Sink.SinkApacheRocketMQCheckpointParameters.ConsumeTimestamp?

            public var group: CreateEventStreamingRequest.Sink.SinkApacheRocketMQCheckpointParameters.Group?

            public var instanceEndpoint: String?

            public var instancePassword: String?

            public var instanceUsername: String?

            public var networkType: String?

            public var securityGroupId: String?

            public var topic: CreateEventStreamingRequest.Sink.SinkApacheRocketMQCheckpointParameters.Topic?

            public var vSwitchId: String?

            public var vpcId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.consumeTimestamp?.validate()
                try self.group?.validate()
                try self.topic?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.consumeTimestamp != nil {
                    map["ConsumeTimestamp"] = self.consumeTimestamp?.toMap()
                }
                if self.group != nil {
                    map["Group"] = self.group?.toMap()
                }
                if self.instanceEndpoint != nil {
                    map["InstanceEndpoint"] = self.instanceEndpoint!
                }
                if self.instancePassword != nil {
                    map["InstancePassword"] = self.instancePassword!
                }
                if self.instanceUsername != nil {
                    map["InstanceUsername"] = self.instanceUsername!
                }
                if self.networkType != nil {
                    map["NetworkType"] = self.networkType!
                }
                if self.securityGroupId != nil {
                    map["SecurityGroupId"] = self.securityGroupId!
                }
                if self.topic != nil {
                    map["Topic"] = self.topic?.toMap()
                }
                if self.vSwitchId != nil {
                    map["VSwitchId"] = self.vSwitchId!
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConsumeTimestamp"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkApacheRocketMQCheckpointParameters.ConsumeTimestamp()
                    model.fromMap(value)
                    self.consumeTimestamp = model
                }
                if let value = dict["Group"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkApacheRocketMQCheckpointParameters.Group()
                    model.fromMap(value)
                    self.group = model
                }
                if let value = dict["InstanceEndpoint"] as? String {
                    self.instanceEndpoint = value
                }
                if let value = dict["InstancePassword"] as? String {
                    self.instancePassword = value
                }
                if let value = dict["InstanceUsername"] as? String {
                    self.instanceUsername = value
                }
                if let value = dict["NetworkType"] as? String {
                    self.networkType = value
                }
                if let value = dict["SecurityGroupId"] as? String {
                    self.securityGroupId = value
                }
                if let value = dict["Topic"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkApacheRocketMQCheckpointParameters.Topic()
                    model.fromMap(value)
                    self.topic = model
                }
                if let value = dict["VSwitchId"] as? String {
                    self.vSwitchId = value
                }
                if let value = dict["VpcId"] as? String {
                    self.vpcId = value
                }
            }
        }
        public class SinkCustomizedKafkaConnectorParameters : Tea.TeaModel {
            public class ConnectorParameters : Tea.TeaModel {
                public var config: [String: Any]?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.config != nil {
                        map["Config"] = self.config!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Config"] as? [String: Any] {
                        self.config = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public var connectorPackageUrl: String?

            public var connectorParameters: CreateEventStreamingRequest.Sink.SinkCustomizedKafkaConnectorParameters.ConnectorParameters?

            public var workerParameters: [String: Any]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.connectorParameters?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.connectorPackageUrl != nil {
                    map["ConnectorPackageUrl"] = self.connectorPackageUrl!
                }
                if self.connectorParameters != nil {
                    map["ConnectorParameters"] = self.connectorParameters?.toMap()
                }
                if self.workerParameters != nil {
                    map["WorkerParameters"] = self.workerParameters!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConnectorPackageUrl"] as? String {
                    self.connectorPackageUrl = value
                }
                if let value = dict["ConnectorParameters"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkCustomizedKafkaConnectorParameters.ConnectorParameters()
                    model.fromMap(value)
                    self.connectorParameters = model
                }
                if let value = dict["WorkerParameters"] as? [String: Any] {
                    self.workerParameters = value
                }
            }
        }
        public class SinkCustomizedKafkaParameters : Tea.TeaModel {
            public var instanceId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
            }
        }
        public class SinkDashVectorParameters : Tea.TeaModel {
            public class DashVectorSchemaParameters : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Partition : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class PrimaryKeyId : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Vector : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var apiKey: String?

            public var collection: String?

            public var dashVectorSchemaParameters: CreateEventStreamingRequest.Sink.SinkDashVectorParameters.DashVectorSchemaParameters?

            public var instanceId: String?

            public var network: String?

            public var operation: String?

            public var partition: CreateEventStreamingRequest.Sink.SinkDashVectorParameters.Partition?

            public var primaryKeyId: CreateEventStreamingRequest.Sink.SinkDashVectorParameters.PrimaryKeyId?

            public var vector: CreateEventStreamingRequest.Sink.SinkDashVectorParameters.Vector?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.dashVectorSchemaParameters?.validate()
                try self.partition?.validate()
                try self.primaryKeyId?.validate()
                try self.vector?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiKey != nil {
                    map["ApiKey"] = self.apiKey!
                }
                if self.collection != nil {
                    map["Collection"] = self.collection!
                }
                if self.dashVectorSchemaParameters != nil {
                    map["DashVectorSchemaParameters"] = self.dashVectorSchemaParameters?.toMap()
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.network != nil {
                    map["Network"] = self.network!
                }
                if self.operation != nil {
                    map["Operation"] = self.operation!
                }
                if self.partition != nil {
                    map["Partition"] = self.partition?.toMap()
                }
                if self.primaryKeyId != nil {
                    map["PrimaryKeyId"] = self.primaryKeyId?.toMap()
                }
                if self.vector != nil {
                    map["Vector"] = self.vector?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiKey"] as? String {
                    self.apiKey = value
                }
                if let value = dict["Collection"] as? String {
                    self.collection = value
                }
                if let value = dict["DashVectorSchemaParameters"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkDashVectorParameters.DashVectorSchemaParameters()
                    model.fromMap(value)
                    self.dashVectorSchemaParameters = model
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["Network"] as? String {
                    self.network = value
                }
                if let value = dict["Operation"] as? String {
                    self.operation = value
                }
                if let value = dict["Partition"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkDashVectorParameters.Partition()
                    model.fromMap(value)
                    self.partition = model
                }
                if let value = dict["PrimaryKeyId"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkDashVectorParameters.PrimaryKeyId()
                    model.fromMap(value)
                    self.primaryKeyId = model
                }
                if let value = dict["Vector"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkDashVectorParameters.Vector()
                    model.fromMap(value)
                    self.vector = model
                }
            }
        }
        public class SinkDataHubParameters : Tea.TeaModel {
            public class Body : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Project : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class RoleName : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Topic : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class TopicSchema : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class TopicType : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var body: CreateEventStreamingRequest.Sink.SinkDataHubParameters.Body?

            public var project: CreateEventStreamingRequest.Sink.SinkDataHubParameters.Project?

            public var roleName: CreateEventStreamingRequest.Sink.SinkDataHubParameters.RoleName?

            public var topic: CreateEventStreamingRequest.Sink.SinkDataHubParameters.Topic?

            public var topicSchema: CreateEventStreamingRequest.Sink.SinkDataHubParameters.TopicSchema?

            public var topicType: CreateEventStreamingRequest.Sink.SinkDataHubParameters.TopicType?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.body?.validate()
                try self.project?.validate()
                try self.roleName?.validate()
                try self.topic?.validate()
                try self.topicSchema?.validate()
                try self.topicType?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.body != nil {
                    map["Body"] = self.body?.toMap()
                }
                if self.project != nil {
                    map["Project"] = self.project?.toMap()
                }
                if self.roleName != nil {
                    map["RoleName"] = self.roleName?.toMap()
                }
                if self.topic != nil {
                    map["Topic"] = self.topic?.toMap()
                }
                if self.topicSchema != nil {
                    map["TopicSchema"] = self.topicSchema?.toMap()
                }
                if self.topicType != nil {
                    map["TopicType"] = self.topicType?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Body"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkDataHubParameters.Body()
                    model.fromMap(value)
                    self.body = model
                }
                if let value = dict["Project"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkDataHubParameters.Project()
                    model.fromMap(value)
                    self.project = model
                }
                if let value = dict["RoleName"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkDataHubParameters.RoleName()
                    model.fromMap(value)
                    self.roleName = model
                }
                if let value = dict["Topic"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkDataHubParameters.Topic()
                    model.fromMap(value)
                    self.topic = model
                }
                if let value = dict["TopicSchema"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkDataHubParameters.TopicSchema()
                    model.fromMap(value)
                    self.topicSchema = model
                }
                if let value = dict["TopicType"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkDataHubParameters.TopicType()
                    model.fromMap(value)
                    self.topicType = model
                }
            }
        }
        public class SinkDorisParameters : Tea.TeaModel {
            public class BeHttpEndpoint : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Body : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Database : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class FeHttpEndpoint : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class NetworkType : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Password : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class QueryEndpoint : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class SecurityGroupId : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Table : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class UserName : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class VSwitchIds : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class VpcId : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var beHttpEndpoint: CreateEventStreamingRequest.Sink.SinkDorisParameters.BeHttpEndpoint?

            public var body: CreateEventStreamingRequest.Sink.SinkDorisParameters.Body?

            public var database: CreateEventStreamingRequest.Sink.SinkDorisParameters.Database?

            public var feHttpEndpoint: CreateEventStreamingRequest.Sink.SinkDorisParameters.FeHttpEndpoint?

            public var networkType: CreateEventStreamingRequest.Sink.SinkDorisParameters.NetworkType?

            public var password: CreateEventStreamingRequest.Sink.SinkDorisParameters.Password?

            public var queryEndpoint: CreateEventStreamingRequest.Sink.SinkDorisParameters.QueryEndpoint?

            public var securityGroupId: CreateEventStreamingRequest.Sink.SinkDorisParameters.SecurityGroupId?

            public var table: CreateEventStreamingRequest.Sink.SinkDorisParameters.Table?

            public var userName: CreateEventStreamingRequest.Sink.SinkDorisParameters.UserName?

            public var vSwitchIds: CreateEventStreamingRequest.Sink.SinkDorisParameters.VSwitchIds?

            public var vpcId: CreateEventStreamingRequest.Sink.SinkDorisParameters.VpcId?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.beHttpEndpoint?.validate()
                try self.body?.validate()
                try self.database?.validate()
                try self.feHttpEndpoint?.validate()
                try self.networkType?.validate()
                try self.password?.validate()
                try self.queryEndpoint?.validate()
                try self.securityGroupId?.validate()
                try self.table?.validate()
                try self.userName?.validate()
                try self.vSwitchIds?.validate()
                try self.vpcId?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.beHttpEndpoint != nil {
                    map["BeHttpEndpoint"] = self.beHttpEndpoint?.toMap()
                }
                if self.body != nil {
                    map["Body"] = self.body?.toMap()
                }
                if self.database != nil {
                    map["Database"] = self.database?.toMap()
                }
                if self.feHttpEndpoint != nil {
                    map["FeHttpEndpoint"] = self.feHttpEndpoint?.toMap()
                }
                if self.networkType != nil {
                    map["NetworkType"] = self.networkType?.toMap()
                }
                if self.password != nil {
                    map["Password"] = self.password?.toMap()
                }
                if self.queryEndpoint != nil {
                    map["QueryEndpoint"] = self.queryEndpoint?.toMap()
                }
                if self.securityGroupId != nil {
                    map["SecurityGroupId"] = self.securityGroupId?.toMap()
                }
                if self.table != nil {
                    map["Table"] = self.table?.toMap()
                }
                if self.userName != nil {
                    map["UserName"] = self.userName?.toMap()
                }
                if self.vSwitchIds != nil {
                    map["VSwitchIds"] = self.vSwitchIds?.toMap()
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BeHttpEndpoint"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkDorisParameters.BeHttpEndpoint()
                    model.fromMap(value)
                    self.beHttpEndpoint = model
                }
                if let value = dict["Body"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkDorisParameters.Body()
                    model.fromMap(value)
                    self.body = model
                }
                if let value = dict["Database"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkDorisParameters.Database()
                    model.fromMap(value)
                    self.database = model
                }
                if let value = dict["FeHttpEndpoint"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkDorisParameters.FeHttpEndpoint()
                    model.fromMap(value)
                    self.feHttpEndpoint = model
                }
                if let value = dict["NetworkType"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkDorisParameters.NetworkType()
                    model.fromMap(value)
                    self.networkType = model
                }
                if let value = dict["Password"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkDorisParameters.Password()
                    model.fromMap(value)
                    self.password = model
                }
                if let value = dict["QueryEndpoint"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkDorisParameters.QueryEndpoint()
                    model.fromMap(value)
                    self.queryEndpoint = model
                }
                if let value = dict["SecurityGroupId"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkDorisParameters.SecurityGroupId()
                    model.fromMap(value)
                    self.securityGroupId = model
                }
                if let value = dict["Table"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkDorisParameters.Table()
                    model.fromMap(value)
                    self.table = model
                }
                if let value = dict["UserName"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkDorisParameters.UserName()
                    model.fromMap(value)
                    self.userName = model
                }
                if let value = dict["VSwitchIds"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkDorisParameters.VSwitchIds()
                    model.fromMap(value)
                    self.vSwitchIds = model
                }
                if let value = dict["VpcId"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkDorisParameters.VpcId()
                    model.fromMap(value)
                    self.vpcId = model
                }
            }
        }
        public class SinkFcParameters : Tea.TeaModel {
            public class Body : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Concurrency : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class DataFormat : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class FunctionName : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class InvocationType : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Qualifier : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class ServiceName : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var body: CreateEventStreamingRequest.Sink.SinkFcParameters.Body?

            public var concurrency: CreateEventStreamingRequest.Sink.SinkFcParameters.Concurrency?

            public var dataFormat: CreateEventStreamingRequest.Sink.SinkFcParameters.DataFormat?

            public var functionName: CreateEventStreamingRequest.Sink.SinkFcParameters.FunctionName?

            public var invocationType: CreateEventStreamingRequest.Sink.SinkFcParameters.InvocationType?

            public var qualifier: CreateEventStreamingRequest.Sink.SinkFcParameters.Qualifier?

            public var serviceName: CreateEventStreamingRequest.Sink.SinkFcParameters.ServiceName?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.body?.validate()
                try self.concurrency?.validate()
                try self.dataFormat?.validate()
                try self.functionName?.validate()
                try self.invocationType?.validate()
                try self.qualifier?.validate()
                try self.serviceName?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.body != nil {
                    map["Body"] = self.body?.toMap()
                }
                if self.concurrency != nil {
                    map["Concurrency"] = self.concurrency?.toMap()
                }
                if self.dataFormat != nil {
                    map["DataFormat"] = self.dataFormat?.toMap()
                }
                if self.functionName != nil {
                    map["FunctionName"] = self.functionName?.toMap()
                }
                if self.invocationType != nil {
                    map["InvocationType"] = self.invocationType?.toMap()
                }
                if self.qualifier != nil {
                    map["Qualifier"] = self.qualifier?.toMap()
                }
                if self.serviceName != nil {
                    map["ServiceName"] = self.serviceName?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Body"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkFcParameters.Body()
                    model.fromMap(value)
                    self.body = model
                }
                if let value = dict["Concurrency"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkFcParameters.Concurrency()
                    model.fromMap(value)
                    self.concurrency = model
                }
                if let value = dict["DataFormat"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkFcParameters.DataFormat()
                    model.fromMap(value)
                    self.dataFormat = model
                }
                if let value = dict["FunctionName"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkFcParameters.FunctionName()
                    model.fromMap(value)
                    self.functionName = model
                }
                if let value = dict["InvocationType"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkFcParameters.InvocationType()
                    model.fromMap(value)
                    self.invocationType = model
                }
                if let value = dict["Qualifier"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkFcParameters.Qualifier()
                    model.fromMap(value)
                    self.qualifier = model
                }
                if let value = dict["ServiceName"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkFcParameters.ServiceName()
                    model.fromMap(value)
                    self.serviceName = model
                }
            }
        }
        public class SinkFnfParameters : Tea.TeaModel {
            public class ExecutionName : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class FlowName : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Input : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class RoleName : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var executionName: CreateEventStreamingRequest.Sink.SinkFnfParameters.ExecutionName?

            public var flowName: CreateEventStreamingRequest.Sink.SinkFnfParameters.FlowName?

            public var input: CreateEventStreamingRequest.Sink.SinkFnfParameters.Input?

            public var roleName: CreateEventStreamingRequest.Sink.SinkFnfParameters.RoleName?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.executionName?.validate()
                try self.flowName?.validate()
                try self.input?.validate()
                try self.roleName?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.executionName != nil {
                    map["ExecutionName"] = self.executionName?.toMap()
                }
                if self.flowName != nil {
                    map["FlowName"] = self.flowName?.toMap()
                }
                if self.input != nil {
                    map["Input"] = self.input?.toMap()
                }
                if self.roleName != nil {
                    map["RoleName"] = self.roleName?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ExecutionName"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkFnfParameters.ExecutionName()
                    model.fromMap(value)
                    self.executionName = model
                }
                if let value = dict["FlowName"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkFnfParameters.FlowName()
                    model.fromMap(value)
                    self.flowName = model
                }
                if let value = dict["Input"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkFnfParameters.Input()
                    model.fromMap(value)
                    self.input = model
                }
                if let value = dict["RoleName"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkFnfParameters.RoleName()
                    model.fromMap(value)
                    self.roleName = model
                }
            }
        }
        public class SinkKafkaParameters : Tea.TeaModel {
            public class Acks : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Headers : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class InstanceId : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Key : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Topic : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Value : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var acks: CreateEventStreamingRequest.Sink.SinkKafkaParameters.Acks?

            public var headers: CreateEventStreamingRequest.Sink.SinkKafkaParameters.Headers?

            public var instanceId: CreateEventStreamingRequest.Sink.SinkKafkaParameters.InstanceId?

            public var key: CreateEventStreamingRequest.Sink.SinkKafkaParameters.Key?

            public var topic: CreateEventStreamingRequest.Sink.SinkKafkaParameters.Topic?

            public var value: CreateEventStreamingRequest.Sink.SinkKafkaParameters.Value?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.acks?.validate()
                try self.headers?.validate()
                try self.instanceId?.validate()
                try self.key?.validate()
                try self.topic?.validate()
                try self.value?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.acks != nil {
                    map["Acks"] = self.acks?.toMap()
                }
                if self.headers != nil {
                    map["Headers"] = self.headers?.toMap()
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId?.toMap()
                }
                if self.key != nil {
                    map["Key"] = self.key?.toMap()
                }
                if self.topic != nil {
                    map["Topic"] = self.topic?.toMap()
                }
                if self.value != nil {
                    map["Value"] = self.value?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Acks"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkKafkaParameters.Acks()
                    model.fromMap(value)
                    self.acks = model
                }
                if let value = dict["Headers"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkKafkaParameters.Headers()
                    model.fromMap(value)
                    self.headers = model
                }
                if let value = dict["InstanceId"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkKafkaParameters.InstanceId()
                    model.fromMap(value)
                    self.instanceId = model
                }
                if let value = dict["Key"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkKafkaParameters.Key()
                    model.fromMap(value)
                    self.key = model
                }
                if let value = dict["Topic"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkKafkaParameters.Topic()
                    model.fromMap(value)
                    self.topic = model
                }
                if let value = dict["Value"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkKafkaParameters.Value()
                    model.fromMap(value)
                    self.value = model
                }
            }
        }
        public class SinkMNSParameters : Tea.TeaModel {
            public class Body : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class IsBase64Encode : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class QueueName : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var body: CreateEventStreamingRequest.Sink.SinkMNSParameters.Body?

            public var isBase64Encode: CreateEventStreamingRequest.Sink.SinkMNSParameters.IsBase64Encode?

            public var queueName: CreateEventStreamingRequest.Sink.SinkMNSParameters.QueueName?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.body?.validate()
                try self.isBase64Encode?.validate()
                try self.queueName?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.body != nil {
                    map["Body"] = self.body?.toMap()
                }
                if self.isBase64Encode != nil {
                    map["IsBase64Encode"] = self.isBase64Encode?.toMap()
                }
                if self.queueName != nil {
                    map["QueueName"] = self.queueName?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Body"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkMNSParameters.Body()
                    model.fromMap(value)
                    self.body = model
                }
                if let value = dict["IsBase64Encode"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkMNSParameters.IsBase64Encode()
                    model.fromMap(value)
                    self.isBase64Encode = model
                }
                if let value = dict["QueueName"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkMNSParameters.QueueName()
                    model.fromMap(value)
                    self.queueName = model
                }
            }
        }
        public class SinkOpenSourceRabbitMQParameters : Tea.TeaModel {
            public class Body : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class MessageId : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Properties : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class RoutingKey : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var authType: String?

            public var body: CreateEventStreamingRequest.Sink.SinkOpenSourceRabbitMQParameters.Body?

            public var endpoint: String?

            public var exchange: String?

            public var messageId: CreateEventStreamingRequest.Sink.SinkOpenSourceRabbitMQParameters.MessageId?

            public var networkType: String?

            public var password: String?

            public var properties: CreateEventStreamingRequest.Sink.SinkOpenSourceRabbitMQParameters.Properties?

            public var queueName: String?

            public var routingKey: CreateEventStreamingRequest.Sink.SinkOpenSourceRabbitMQParameters.RoutingKey?

            public var securityGroupId: String?

            public var targetType: String?

            public var username: String?

            public var vSwitchIds: String?

            public var virtualHostName: String?

            public var vpcId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.body?.validate()
                try self.messageId?.validate()
                try self.properties?.validate()
                try self.routingKey?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.authType != nil {
                    map["AuthType"] = self.authType!
                }
                if self.body != nil {
                    map["Body"] = self.body?.toMap()
                }
                if self.endpoint != nil {
                    map["Endpoint"] = self.endpoint!
                }
                if self.exchange != nil {
                    map["Exchange"] = self.exchange!
                }
                if self.messageId != nil {
                    map["MessageId"] = self.messageId?.toMap()
                }
                if self.networkType != nil {
                    map["NetworkType"] = self.networkType!
                }
                if self.password != nil {
                    map["Password"] = self.password!
                }
                if self.properties != nil {
                    map["Properties"] = self.properties?.toMap()
                }
                if self.queueName != nil {
                    map["QueueName"] = self.queueName!
                }
                if self.routingKey != nil {
                    map["RoutingKey"] = self.routingKey?.toMap()
                }
                if self.securityGroupId != nil {
                    map["SecurityGroupId"] = self.securityGroupId!
                }
                if self.targetType != nil {
                    map["TargetType"] = self.targetType!
                }
                if self.username != nil {
                    map["Username"] = self.username!
                }
                if self.vSwitchIds != nil {
                    map["VSwitchIds"] = self.vSwitchIds!
                }
                if self.virtualHostName != nil {
                    map["VirtualHostName"] = self.virtualHostName!
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AuthType"] as? String {
                    self.authType = value
                }
                if let value = dict["Body"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkOpenSourceRabbitMQParameters.Body()
                    model.fromMap(value)
                    self.body = model
                }
                if let value = dict["Endpoint"] as? String {
                    self.endpoint = value
                }
                if let value = dict["Exchange"] as? String {
                    self.exchange = value
                }
                if let value = dict["MessageId"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkOpenSourceRabbitMQParameters.MessageId()
                    model.fromMap(value)
                    self.messageId = model
                }
                if let value = dict["NetworkType"] as? String {
                    self.networkType = value
                }
                if let value = dict["Password"] as? String {
                    self.password = value
                }
                if let value = dict["Properties"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkOpenSourceRabbitMQParameters.Properties()
                    model.fromMap(value)
                    self.properties = model
                }
                if let value = dict["QueueName"] as? String {
                    self.queueName = value
                }
                if let value = dict["RoutingKey"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkOpenSourceRabbitMQParameters.RoutingKey()
                    model.fromMap(value)
                    self.routingKey = model
                }
                if let value = dict["SecurityGroupId"] as? String {
                    self.securityGroupId = value
                }
                if let value = dict["TargetType"] as? String {
                    self.targetType = value
                }
                if let value = dict["Username"] as? String {
                    self.username = value
                }
                if let value = dict["VSwitchIds"] as? String {
                    self.vSwitchIds = value
                }
                if let value = dict["VirtualHostName"] as? String {
                    self.virtualHostName = value
                }
                if let value = dict["VpcId"] as? String {
                    self.vpcId = value
                }
            }
        }
        public class SinkPrometheusParameters : Tea.TeaModel {
            public class AuthorizationType : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Data : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class HeaderParameters : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class NetworkType : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Password : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class SecurityGroupId : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class URL : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Username : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class VSwitchId : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class VpcId : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var authorizationType: CreateEventStreamingRequest.Sink.SinkPrometheusParameters.AuthorizationType?

            public var data: CreateEventStreamingRequest.Sink.SinkPrometheusParameters.Data?

            public var headerParameters: CreateEventStreamingRequest.Sink.SinkPrometheusParameters.HeaderParameters?

            public var networkType: CreateEventStreamingRequest.Sink.SinkPrometheusParameters.NetworkType?

            public var password: CreateEventStreamingRequest.Sink.SinkPrometheusParameters.Password?

            public var securityGroupId: CreateEventStreamingRequest.Sink.SinkPrometheusParameters.SecurityGroupId?

            public var URL: CreateEventStreamingRequest.Sink.SinkPrometheusParameters.URL?

            public var username: CreateEventStreamingRequest.Sink.SinkPrometheusParameters.Username?

            public var vSwitchId: CreateEventStreamingRequest.Sink.SinkPrometheusParameters.VSwitchId?

            public var vpcId: CreateEventStreamingRequest.Sink.SinkPrometheusParameters.VpcId?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.authorizationType?.validate()
                try self.data?.validate()
                try self.headerParameters?.validate()
                try self.networkType?.validate()
                try self.password?.validate()
                try self.securityGroupId?.validate()
                try self.URL?.validate()
                try self.username?.validate()
                try self.vSwitchId?.validate()
                try self.vpcId?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.authorizationType != nil {
                    map["AuthorizationType"] = self.authorizationType?.toMap()
                }
                if self.data != nil {
                    map["Data"] = self.data?.toMap()
                }
                if self.headerParameters != nil {
                    map["HeaderParameters"] = self.headerParameters?.toMap()
                }
                if self.networkType != nil {
                    map["NetworkType"] = self.networkType?.toMap()
                }
                if self.password != nil {
                    map["Password"] = self.password?.toMap()
                }
                if self.securityGroupId != nil {
                    map["SecurityGroupId"] = self.securityGroupId?.toMap()
                }
                if self.URL != nil {
                    map["URL"] = self.URL?.toMap()
                }
                if self.username != nil {
                    map["Username"] = self.username?.toMap()
                }
                if self.vSwitchId != nil {
                    map["VSwitchId"] = self.vSwitchId?.toMap()
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AuthorizationType"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkPrometheusParameters.AuthorizationType()
                    model.fromMap(value)
                    self.authorizationType = model
                }
                if let value = dict["Data"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkPrometheusParameters.Data()
                    model.fromMap(value)
                    self.data = model
                }
                if let value = dict["HeaderParameters"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkPrometheusParameters.HeaderParameters()
                    model.fromMap(value)
                    self.headerParameters = model
                }
                if let value = dict["NetworkType"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkPrometheusParameters.NetworkType()
                    model.fromMap(value)
                    self.networkType = model
                }
                if let value = dict["Password"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkPrometheusParameters.Password()
                    model.fromMap(value)
                    self.password = model
                }
                if let value = dict["SecurityGroupId"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkPrometheusParameters.SecurityGroupId()
                    model.fromMap(value)
                    self.securityGroupId = model
                }
                if let value = dict["URL"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkPrometheusParameters.URL()
                    model.fromMap(value)
                    self.URL = model
                }
                if let value = dict["Username"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkPrometheusParameters.Username()
                    model.fromMap(value)
                    self.username = model
                }
                if let value = dict["VSwitchId"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkPrometheusParameters.VSwitchId()
                    model.fromMap(value)
                    self.vSwitchId = model
                }
                if let value = dict["VpcId"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkPrometheusParameters.VpcId()
                    model.fromMap(value)
                    self.vpcId = model
                }
            }
        }
        public class SinkRabbitMQParameters : Tea.TeaModel {
            public class Body : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Exchange : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class InstanceId : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class MessageId : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Properties : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class QueueName : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class RoutingKey : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class TargetType : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class VirtualHostName : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var body: CreateEventStreamingRequest.Sink.SinkRabbitMQParameters.Body?

            public var exchange: CreateEventStreamingRequest.Sink.SinkRabbitMQParameters.Exchange?

            public var instanceId: CreateEventStreamingRequest.Sink.SinkRabbitMQParameters.InstanceId?

            public var messageId: CreateEventStreamingRequest.Sink.SinkRabbitMQParameters.MessageId?

            public var properties: CreateEventStreamingRequest.Sink.SinkRabbitMQParameters.Properties?

            public var queueName: CreateEventStreamingRequest.Sink.SinkRabbitMQParameters.QueueName?

            public var routingKey: CreateEventStreamingRequest.Sink.SinkRabbitMQParameters.RoutingKey?

            public var targetType: CreateEventStreamingRequest.Sink.SinkRabbitMQParameters.TargetType?

            public var virtualHostName: CreateEventStreamingRequest.Sink.SinkRabbitMQParameters.VirtualHostName?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.body?.validate()
                try self.exchange?.validate()
                try self.instanceId?.validate()
                try self.messageId?.validate()
                try self.properties?.validate()
                try self.queueName?.validate()
                try self.routingKey?.validate()
                try self.targetType?.validate()
                try self.virtualHostName?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.body != nil {
                    map["Body"] = self.body?.toMap()
                }
                if self.exchange != nil {
                    map["Exchange"] = self.exchange?.toMap()
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId?.toMap()
                }
                if self.messageId != nil {
                    map["MessageId"] = self.messageId?.toMap()
                }
                if self.properties != nil {
                    map["Properties"] = self.properties?.toMap()
                }
                if self.queueName != nil {
                    map["QueueName"] = self.queueName?.toMap()
                }
                if self.routingKey != nil {
                    map["RoutingKey"] = self.routingKey?.toMap()
                }
                if self.targetType != nil {
                    map["TargetType"] = self.targetType?.toMap()
                }
                if self.virtualHostName != nil {
                    map["VirtualHostName"] = self.virtualHostName?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Body"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkRabbitMQParameters.Body()
                    model.fromMap(value)
                    self.body = model
                }
                if let value = dict["Exchange"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkRabbitMQParameters.Exchange()
                    model.fromMap(value)
                    self.exchange = model
                }
                if let value = dict["InstanceId"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkRabbitMQParameters.InstanceId()
                    model.fromMap(value)
                    self.instanceId = model
                }
                if let value = dict["MessageId"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkRabbitMQParameters.MessageId()
                    model.fromMap(value)
                    self.messageId = model
                }
                if let value = dict["Properties"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkRabbitMQParameters.Properties()
                    model.fromMap(value)
                    self.properties = model
                }
                if let value = dict["QueueName"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkRabbitMQParameters.QueueName()
                    model.fromMap(value)
                    self.queueName = model
                }
                if let value = dict["RoutingKey"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkRabbitMQParameters.RoutingKey()
                    model.fromMap(value)
                    self.routingKey = model
                }
                if let value = dict["TargetType"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkRabbitMQParameters.TargetType()
                    model.fromMap(value)
                    self.targetType = model
                }
                if let value = dict["VirtualHostName"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkRabbitMQParameters.VirtualHostName()
                    model.fromMap(value)
                    self.virtualHostName = model
                }
            }
        }
        public class SinkRocketMQCheckpointParameters : Tea.TeaModel {
            public class ConsumeTimestamp : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Group : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Topic : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var consumeTimestamp: CreateEventStreamingRequest.Sink.SinkRocketMQCheckpointParameters.ConsumeTimestamp?

            public var group: CreateEventStreamingRequest.Sink.SinkRocketMQCheckpointParameters.Group?

            public var instanceId: String?

            public var instanceType: String?

            public var topic: CreateEventStreamingRequest.Sink.SinkRocketMQCheckpointParameters.Topic?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.consumeTimestamp?.validate()
                try self.group?.validate()
                try self.topic?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.consumeTimestamp != nil {
                    map["ConsumeTimestamp"] = self.consumeTimestamp?.toMap()
                }
                if self.group != nil {
                    map["Group"] = self.group?.toMap()
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.instanceType != nil {
                    map["InstanceType"] = self.instanceType!
                }
                if self.topic != nil {
                    map["Topic"] = self.topic?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConsumeTimestamp"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkRocketMQCheckpointParameters.ConsumeTimestamp()
                    model.fromMap(value)
                    self.consumeTimestamp = model
                }
                if let value = dict["Group"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkRocketMQCheckpointParameters.Group()
                    model.fromMap(value)
                    self.group = model
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["InstanceType"] as? String {
                    self.instanceType = value
                }
                if let value = dict["Topic"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkRocketMQCheckpointParameters.Topic()
                    model.fromMap(value)
                    self.topic = model
                }
            }
        }
        public class SinkRocketMQParameters : Tea.TeaModel {
            public class Body : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class DeliveryOrderType : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class InstanceEndpoint : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class InstanceId : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class InstancePassword : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class InstanceType : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class InstanceUsername : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Keys : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Network : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Properties : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class SecurityGroupId : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class ShardingKey : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Tags : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Topic : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class VSwitchIds : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class VpcId : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var body: CreateEventStreamingRequest.Sink.SinkRocketMQParameters.Body?

            public var deliveryOrderType: CreateEventStreamingRequest.Sink.SinkRocketMQParameters.DeliveryOrderType?

            public var instanceEndpoint: CreateEventStreamingRequest.Sink.SinkRocketMQParameters.InstanceEndpoint?

            public var instanceId: CreateEventStreamingRequest.Sink.SinkRocketMQParameters.InstanceId?

            public var instancePassword: CreateEventStreamingRequest.Sink.SinkRocketMQParameters.InstancePassword?

            public var instanceType: CreateEventStreamingRequest.Sink.SinkRocketMQParameters.InstanceType?

            public var instanceUsername: CreateEventStreamingRequest.Sink.SinkRocketMQParameters.InstanceUsername?

            public var keys: CreateEventStreamingRequest.Sink.SinkRocketMQParameters.Keys?

            public var network: CreateEventStreamingRequest.Sink.SinkRocketMQParameters.Network?

            public var properties: CreateEventStreamingRequest.Sink.SinkRocketMQParameters.Properties?

            public var securityGroupId: CreateEventStreamingRequest.Sink.SinkRocketMQParameters.SecurityGroupId?

            public var shardingKey: CreateEventStreamingRequest.Sink.SinkRocketMQParameters.ShardingKey?

            public var tags: CreateEventStreamingRequest.Sink.SinkRocketMQParameters.Tags?

            public var topic: CreateEventStreamingRequest.Sink.SinkRocketMQParameters.Topic?

            public var vSwitchIds: CreateEventStreamingRequest.Sink.SinkRocketMQParameters.VSwitchIds?

            public var vpcId: CreateEventStreamingRequest.Sink.SinkRocketMQParameters.VpcId?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.body?.validate()
                try self.deliveryOrderType?.validate()
                try self.instanceEndpoint?.validate()
                try self.instanceId?.validate()
                try self.instancePassword?.validate()
                try self.instanceType?.validate()
                try self.instanceUsername?.validate()
                try self.keys?.validate()
                try self.network?.validate()
                try self.properties?.validate()
                try self.securityGroupId?.validate()
                try self.shardingKey?.validate()
                try self.tags?.validate()
                try self.topic?.validate()
                try self.vSwitchIds?.validate()
                try self.vpcId?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.body != nil {
                    map["Body"] = self.body?.toMap()
                }
                if self.deliveryOrderType != nil {
                    map["DeliveryOrderType"] = self.deliveryOrderType?.toMap()
                }
                if self.instanceEndpoint != nil {
                    map["InstanceEndpoint"] = self.instanceEndpoint?.toMap()
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId?.toMap()
                }
                if self.instancePassword != nil {
                    map["InstancePassword"] = self.instancePassword?.toMap()
                }
                if self.instanceType != nil {
                    map["InstanceType"] = self.instanceType?.toMap()
                }
                if self.instanceUsername != nil {
                    map["InstanceUsername"] = self.instanceUsername?.toMap()
                }
                if self.keys != nil {
                    map["Keys"] = self.keys?.toMap()
                }
                if self.network != nil {
                    map["Network"] = self.network?.toMap()
                }
                if self.properties != nil {
                    map["Properties"] = self.properties?.toMap()
                }
                if self.securityGroupId != nil {
                    map["SecurityGroupId"] = self.securityGroupId?.toMap()
                }
                if self.shardingKey != nil {
                    map["ShardingKey"] = self.shardingKey?.toMap()
                }
                if self.tags != nil {
                    map["Tags"] = self.tags?.toMap()
                }
                if self.topic != nil {
                    map["Topic"] = self.topic?.toMap()
                }
                if self.vSwitchIds != nil {
                    map["VSwitchIds"] = self.vSwitchIds?.toMap()
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Body"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkRocketMQParameters.Body()
                    model.fromMap(value)
                    self.body = model
                }
                if let value = dict["DeliveryOrderType"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkRocketMQParameters.DeliveryOrderType()
                    model.fromMap(value)
                    self.deliveryOrderType = model
                }
                if let value = dict["InstanceEndpoint"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkRocketMQParameters.InstanceEndpoint()
                    model.fromMap(value)
                    self.instanceEndpoint = model
                }
                if let value = dict["InstanceId"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkRocketMQParameters.InstanceId()
                    model.fromMap(value)
                    self.instanceId = model
                }
                if let value = dict["InstancePassword"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkRocketMQParameters.InstancePassword()
                    model.fromMap(value)
                    self.instancePassword = model
                }
                if let value = dict["InstanceType"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkRocketMQParameters.InstanceType()
                    model.fromMap(value)
                    self.instanceType = model
                }
                if let value = dict["InstanceUsername"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkRocketMQParameters.InstanceUsername()
                    model.fromMap(value)
                    self.instanceUsername = model
                }
                if let value = dict["Keys"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkRocketMQParameters.Keys()
                    model.fromMap(value)
                    self.keys = model
                }
                if let value = dict["Network"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkRocketMQParameters.Network()
                    model.fromMap(value)
                    self.network = model
                }
                if let value = dict["Properties"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkRocketMQParameters.Properties()
                    model.fromMap(value)
                    self.properties = model
                }
                if let value = dict["SecurityGroupId"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkRocketMQParameters.SecurityGroupId()
                    model.fromMap(value)
                    self.securityGroupId = model
                }
                if let value = dict["ShardingKey"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkRocketMQParameters.ShardingKey()
                    model.fromMap(value)
                    self.shardingKey = model
                }
                if let value = dict["Tags"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkRocketMQParameters.Tags()
                    model.fromMap(value)
                    self.tags = model
                }
                if let value = dict["Topic"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkRocketMQParameters.Topic()
                    model.fromMap(value)
                    self.topic = model
                }
                if let value = dict["VSwitchIds"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkRocketMQParameters.VSwitchIds()
                    model.fromMap(value)
                    self.vSwitchIds = model
                }
                if let value = dict["VpcId"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkRocketMQParameters.VpcId()
                    model.fromMap(value)
                    self.vpcId = model
                }
            }
        }
        public class SinkSLSParameters : Tea.TeaModel {
            public class Body : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class ContentSchema : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class ContentType : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class LogStore : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Project : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class RoleName : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Topic : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var body: CreateEventStreamingRequest.Sink.SinkSLSParameters.Body?

            public var contentSchema: CreateEventStreamingRequest.Sink.SinkSLSParameters.ContentSchema?

            public var contentType: CreateEventStreamingRequest.Sink.SinkSLSParameters.ContentType?

            public var logStore: CreateEventStreamingRequest.Sink.SinkSLSParameters.LogStore?

            public var project: CreateEventStreamingRequest.Sink.SinkSLSParameters.Project?

            public var roleName: CreateEventStreamingRequest.Sink.SinkSLSParameters.RoleName?

            public var topic: CreateEventStreamingRequest.Sink.SinkSLSParameters.Topic?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.body?.validate()
                try self.contentSchema?.validate()
                try self.contentType?.validate()
                try self.logStore?.validate()
                try self.project?.validate()
                try self.roleName?.validate()
                try self.topic?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.body != nil {
                    map["Body"] = self.body?.toMap()
                }
                if self.contentSchema != nil {
                    map["ContentSchema"] = self.contentSchema?.toMap()
                }
                if self.contentType != nil {
                    map["ContentType"] = self.contentType?.toMap()
                }
                if self.logStore != nil {
                    map["LogStore"] = self.logStore?.toMap()
                }
                if self.project != nil {
                    map["Project"] = self.project?.toMap()
                }
                if self.roleName != nil {
                    map["RoleName"] = self.roleName?.toMap()
                }
                if self.topic != nil {
                    map["Topic"] = self.topic?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Body"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkSLSParameters.Body()
                    model.fromMap(value)
                    self.body = model
                }
                if let value = dict["ContentSchema"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkSLSParameters.ContentSchema()
                    model.fromMap(value)
                    self.contentSchema = model
                }
                if let value = dict["ContentType"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkSLSParameters.ContentType()
                    model.fromMap(value)
                    self.contentType = model
                }
                if let value = dict["LogStore"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkSLSParameters.LogStore()
                    model.fromMap(value)
                    self.logStore = model
                }
                if let value = dict["Project"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkSLSParameters.Project()
                    model.fromMap(value)
                    self.project = model
                }
                if let value = dict["RoleName"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkSLSParameters.RoleName()
                    model.fromMap(value)
                    self.roleName = model
                }
                if let value = dict["Topic"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Sink.SinkSLSParameters.Topic()
                    model.fromMap(value)
                    self.topic = model
                }
            }
        }
        public var sinkApacheRocketMQCheckpointParameters: CreateEventStreamingRequest.Sink.SinkApacheRocketMQCheckpointParameters?

        public var sinkBaiLianParameters: SinkBaiLianParameters?

        public var sinkCustomizedKafkaConnectorParameters: CreateEventStreamingRequest.Sink.SinkCustomizedKafkaConnectorParameters?

        public var sinkCustomizedKafkaParameters: CreateEventStreamingRequest.Sink.SinkCustomizedKafkaParameters?

        public var sinkDashVectorParameters: CreateEventStreamingRequest.Sink.SinkDashVectorParameters?

        public var sinkDataHubParameters: CreateEventStreamingRequest.Sink.SinkDataHubParameters?

        public var sinkDorisParameters: CreateEventStreamingRequest.Sink.SinkDorisParameters?

        public var sinkFcParameters: CreateEventStreamingRequest.Sink.SinkFcParameters?

        public var sinkFnfParameters: CreateEventStreamingRequest.Sink.SinkFnfParameters?

        public var sinkKafkaParameters: CreateEventStreamingRequest.Sink.SinkKafkaParameters?

        public var sinkMNSParameters: CreateEventStreamingRequest.Sink.SinkMNSParameters?

        public var sinkOpenSourceRabbitMQParameters: CreateEventStreamingRequest.Sink.SinkOpenSourceRabbitMQParameters?

        public var sinkPrometheusParameters: CreateEventStreamingRequest.Sink.SinkPrometheusParameters?

        public var sinkRabbitMQParameters: CreateEventStreamingRequest.Sink.SinkRabbitMQParameters?

        public var sinkRocketMQCheckpointParameters: CreateEventStreamingRequest.Sink.SinkRocketMQCheckpointParameters?

        public var sinkRocketMQParameters: CreateEventStreamingRequest.Sink.SinkRocketMQParameters?

        public var sinkSLSParameters: CreateEventStreamingRequest.Sink.SinkSLSParameters?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.sinkApacheRocketMQCheckpointParameters?.validate()
            try self.sinkBaiLianParameters?.validate()
            try self.sinkCustomizedKafkaConnectorParameters?.validate()
            try self.sinkCustomizedKafkaParameters?.validate()
            try self.sinkDashVectorParameters?.validate()
            try self.sinkDataHubParameters?.validate()
            try self.sinkDorisParameters?.validate()
            try self.sinkFcParameters?.validate()
            try self.sinkFnfParameters?.validate()
            try self.sinkKafkaParameters?.validate()
            try self.sinkMNSParameters?.validate()
            try self.sinkOpenSourceRabbitMQParameters?.validate()
            try self.sinkPrometheusParameters?.validate()
            try self.sinkRabbitMQParameters?.validate()
            try self.sinkRocketMQCheckpointParameters?.validate()
            try self.sinkRocketMQParameters?.validate()
            try self.sinkSLSParameters?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.sinkApacheRocketMQCheckpointParameters != nil {
                map["SinkApacheRocketMQCheckpointParameters"] = self.sinkApacheRocketMQCheckpointParameters?.toMap()
            }
            if self.sinkBaiLianParameters != nil {
                map["SinkBaiLianParameters"] = self.sinkBaiLianParameters?.toMap()
            }
            if self.sinkCustomizedKafkaConnectorParameters != nil {
                map["SinkCustomizedKafkaConnectorParameters"] = self.sinkCustomizedKafkaConnectorParameters?.toMap()
            }
            if self.sinkCustomizedKafkaParameters != nil {
                map["SinkCustomizedKafkaParameters"] = self.sinkCustomizedKafkaParameters?.toMap()
            }
            if self.sinkDashVectorParameters != nil {
                map["SinkDashVectorParameters"] = self.sinkDashVectorParameters?.toMap()
            }
            if self.sinkDataHubParameters != nil {
                map["SinkDataHubParameters"] = self.sinkDataHubParameters?.toMap()
            }
            if self.sinkDorisParameters != nil {
                map["SinkDorisParameters"] = self.sinkDorisParameters?.toMap()
            }
            if self.sinkFcParameters != nil {
                map["SinkFcParameters"] = self.sinkFcParameters?.toMap()
            }
            if self.sinkFnfParameters != nil {
                map["SinkFnfParameters"] = self.sinkFnfParameters?.toMap()
            }
            if self.sinkKafkaParameters != nil {
                map["SinkKafkaParameters"] = self.sinkKafkaParameters?.toMap()
            }
            if self.sinkMNSParameters != nil {
                map["SinkMNSParameters"] = self.sinkMNSParameters?.toMap()
            }
            if self.sinkOpenSourceRabbitMQParameters != nil {
                map["SinkOpenSourceRabbitMQParameters"] = self.sinkOpenSourceRabbitMQParameters?.toMap()
            }
            if self.sinkPrometheusParameters != nil {
                map["SinkPrometheusParameters"] = self.sinkPrometheusParameters?.toMap()
            }
            if self.sinkRabbitMQParameters != nil {
                map["SinkRabbitMQParameters"] = self.sinkRabbitMQParameters?.toMap()
            }
            if self.sinkRocketMQCheckpointParameters != nil {
                map["SinkRocketMQCheckpointParameters"] = self.sinkRocketMQCheckpointParameters?.toMap()
            }
            if self.sinkRocketMQParameters != nil {
                map["SinkRocketMQParameters"] = self.sinkRocketMQParameters?.toMap()
            }
            if self.sinkSLSParameters != nil {
                map["SinkSLSParameters"] = self.sinkSLSParameters?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SinkApacheRocketMQCheckpointParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Sink.SinkApacheRocketMQCheckpointParameters()
                model.fromMap(value)
                self.sinkApacheRocketMQCheckpointParameters = model
            }
            if let value = dict["SinkBaiLianParameters"] as? [String: Any?] {
                var model = SinkBaiLianParameters()
                model.fromMap(value)
                self.sinkBaiLianParameters = model
            }
            if let value = dict["SinkCustomizedKafkaConnectorParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Sink.SinkCustomizedKafkaConnectorParameters()
                model.fromMap(value)
                self.sinkCustomizedKafkaConnectorParameters = model
            }
            if let value = dict["SinkCustomizedKafkaParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Sink.SinkCustomizedKafkaParameters()
                model.fromMap(value)
                self.sinkCustomizedKafkaParameters = model
            }
            if let value = dict["SinkDashVectorParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Sink.SinkDashVectorParameters()
                model.fromMap(value)
                self.sinkDashVectorParameters = model
            }
            if let value = dict["SinkDataHubParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Sink.SinkDataHubParameters()
                model.fromMap(value)
                self.sinkDataHubParameters = model
            }
            if let value = dict["SinkDorisParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Sink.SinkDorisParameters()
                model.fromMap(value)
                self.sinkDorisParameters = model
            }
            if let value = dict["SinkFcParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Sink.SinkFcParameters()
                model.fromMap(value)
                self.sinkFcParameters = model
            }
            if let value = dict["SinkFnfParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Sink.SinkFnfParameters()
                model.fromMap(value)
                self.sinkFnfParameters = model
            }
            if let value = dict["SinkKafkaParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Sink.SinkKafkaParameters()
                model.fromMap(value)
                self.sinkKafkaParameters = model
            }
            if let value = dict["SinkMNSParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Sink.SinkMNSParameters()
                model.fromMap(value)
                self.sinkMNSParameters = model
            }
            if let value = dict["SinkOpenSourceRabbitMQParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Sink.SinkOpenSourceRabbitMQParameters()
                model.fromMap(value)
                self.sinkOpenSourceRabbitMQParameters = model
            }
            if let value = dict["SinkPrometheusParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Sink.SinkPrometheusParameters()
                model.fromMap(value)
                self.sinkPrometheusParameters = model
            }
            if let value = dict["SinkRabbitMQParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Sink.SinkRabbitMQParameters()
                model.fromMap(value)
                self.sinkRabbitMQParameters = model
            }
            if let value = dict["SinkRocketMQCheckpointParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Sink.SinkRocketMQCheckpointParameters()
                model.fromMap(value)
                self.sinkRocketMQCheckpointParameters = model
            }
            if let value = dict["SinkRocketMQParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Sink.SinkRocketMQParameters()
                model.fromMap(value)
                self.sinkRocketMQParameters = model
            }
            if let value = dict["SinkSLSParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Sink.SinkSLSParameters()
                model.fromMap(value)
                self.sinkSLSParameters = model
            }
        }
    }
    public class Source : Tea.TeaModel {
        public class SourceApacheRocketMQCheckpointParameters : Tea.TeaModel {
            public var instanceEndpoint: String?

            public var instancePassword: String?

            public var instanceUsername: String?

            public var networkType: String?

            public var regionId: String?

            public var securityGroupId: String?

            public var topics: [String]?

            public var vSwitchId: String?

            public var vpcId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.instanceEndpoint != nil {
                    map["InstanceEndpoint"] = self.instanceEndpoint!
                }
                if self.instancePassword != nil {
                    map["InstancePassword"] = self.instancePassword!
                }
                if self.instanceUsername != nil {
                    map["InstanceUsername"] = self.instanceUsername!
                }
                if self.networkType != nil {
                    map["NetworkType"] = self.networkType!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.securityGroupId != nil {
                    map["SecurityGroupId"] = self.securityGroupId!
                }
                if self.topics != nil {
                    map["Topics"] = self.topics!
                }
                if self.vSwitchId != nil {
                    map["VSwitchId"] = self.vSwitchId!
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InstanceEndpoint"] as? String {
                    self.instanceEndpoint = value
                }
                if let value = dict["InstancePassword"] as? String {
                    self.instancePassword = value
                }
                if let value = dict["InstanceUsername"] as? String {
                    self.instanceUsername = value
                }
                if let value = dict["NetworkType"] as? String {
                    self.networkType = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["SecurityGroupId"] as? String {
                    self.securityGroupId = value
                }
                if let value = dict["Topics"] as? [String] {
                    self.topics = value
                }
                if let value = dict["VSwitchId"] as? String {
                    self.vSwitchId = value
                }
                if let value = dict["VpcId"] as? String {
                    self.vpcId = value
                }
            }
        }
        public class SourceCustomizedKafkaConnectorParameters : Tea.TeaModel {
            public class ConnectorParameters : Tea.TeaModel {
                public var config: [String: Any]?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.config != nil {
                        map["Config"] = self.config!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Config"] as? [String: Any] {
                        self.config = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public var connectorPackageUrl: String?

            public var connectorParameters: CreateEventStreamingRequest.Source.SourceCustomizedKafkaConnectorParameters.ConnectorParameters?

            public var workerParameters: [String: Any]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.connectorParameters?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.connectorPackageUrl != nil {
                    map["ConnectorPackageUrl"] = self.connectorPackageUrl!
                }
                if self.connectorParameters != nil {
                    map["ConnectorParameters"] = self.connectorParameters?.toMap()
                }
                if self.workerParameters != nil {
                    map["WorkerParameters"] = self.workerParameters!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConnectorPackageUrl"] as? String {
                    self.connectorPackageUrl = value
                }
                if let value = dict["ConnectorParameters"] as? [String: Any?] {
                    var model = CreateEventStreamingRequest.Source.SourceCustomizedKafkaConnectorParameters.ConnectorParameters()
                    model.fromMap(value)
                    self.connectorParameters = model
                }
                if let value = dict["WorkerParameters"] as? [String: Any] {
                    self.workerParameters = value
                }
            }
        }
        public class SourceCustomizedKafkaParameters : Tea.TeaModel {
            public var instanceId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
            }
        }
        public class SourceDTSParameters : Tea.TeaModel {
            public var brokerUrl: String?

            public var initCheckPoint: Int64?

            public var password: String?

            public var sid: String?

            public var taskId: String?

            public var topic: String?

            public var username: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.brokerUrl != nil {
                    map["BrokerUrl"] = self.brokerUrl!
                }
                if self.initCheckPoint != nil {
                    map["InitCheckPoint"] = self.initCheckPoint!
                }
                if self.password != nil {
                    map["Password"] = self.password!
                }
                if self.sid != nil {
                    map["Sid"] = self.sid!
                }
                if self.taskId != nil {
                    map["TaskId"] = self.taskId!
                }
                if self.topic != nil {
                    map["Topic"] = self.topic!
                }
                if self.username != nil {
                    map["Username"] = self.username!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BrokerUrl"] as? String {
                    self.brokerUrl = value
                }
                if let value = dict["InitCheckPoint"] as? Int64 {
                    self.initCheckPoint = value
                }
                if let value = dict["Password"] as? String {
                    self.password = value
                }
                if let value = dict["Sid"] as? String {
                    self.sid = value
                }
                if let value = dict["TaskId"] as? String {
                    self.taskId = value
                }
                if let value = dict["Topic"] as? String {
                    self.topic = value
                }
                if let value = dict["Username"] as? String {
                    self.username = value
                }
            }
        }
        public class SourceEventBusParameters : Tea.TeaModel {
            public var eventBusName: String?

            public var eventRuleName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.eventBusName != nil {
                    map["EventBusName"] = self.eventBusName!
                }
                if self.eventRuleName != nil {
                    map["EventRuleName"] = self.eventRuleName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EventBusName"] as? String {
                    self.eventBusName = value
                }
                if let value = dict["EventRuleName"] as? String {
                    self.eventRuleName = value
                }
            }
        }
        public class SourceKafkaParameters : Tea.TeaModel {
            public var consumerGroup: String?

            public var instanceId: String?

            public var network: String?

            public var offsetReset: String?

            public var regionId: String?

            public var securityGroupId: String?

            public var topic: String?

            public var vSwitchIds: String?

            public var valueDataType: String?

            public var vpcId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.consumerGroup != nil {
                    map["ConsumerGroup"] = self.consumerGroup!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.network != nil {
                    map["Network"] = self.network!
                }
                if self.offsetReset != nil {
                    map["OffsetReset"] = self.offsetReset!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.securityGroupId != nil {
                    map["SecurityGroupId"] = self.securityGroupId!
                }
                if self.topic != nil {
                    map["Topic"] = self.topic!
                }
                if self.vSwitchIds != nil {
                    map["VSwitchIds"] = self.vSwitchIds!
                }
                if self.valueDataType != nil {
                    map["ValueDataType"] = self.valueDataType!
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConsumerGroup"] as? String {
                    self.consumerGroup = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["Network"] as? String {
                    self.network = value
                }
                if let value = dict["OffsetReset"] as? String {
                    self.offsetReset = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["SecurityGroupId"] as? String {
                    self.securityGroupId = value
                }
                if let value = dict["Topic"] as? String {
                    self.topic = value
                }
                if let value = dict["VSwitchIds"] as? String {
                    self.vSwitchIds = value
                }
                if let value = dict["ValueDataType"] as? String {
                    self.valueDataType = value
                }
                if let value = dict["VpcId"] as? String {
                    self.vpcId = value
                }
            }
        }
        public class SourceMNSParameters : Tea.TeaModel {
            public var isBase64Decode: Bool?

            public var queueName: String?

            public var regionId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.isBase64Decode != nil {
                    map["IsBase64Decode"] = self.isBase64Decode!
                }
                if self.queueName != nil {
                    map["QueueName"] = self.queueName!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["IsBase64Decode"] as? Bool {
                    self.isBase64Decode = value
                }
                if let value = dict["QueueName"] as? String {
                    self.queueName = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
            }
        }
        public class SourceMQTTParameters : Tea.TeaModel {
            public var bodyDataType: String?

            public var instanceId: String?

            public var regionId: String?

            public var topic: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bodyDataType != nil {
                    map["BodyDataType"] = self.bodyDataType!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.topic != nil {
                    map["Topic"] = self.topic!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BodyDataType"] as? String {
                    self.bodyDataType = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["Topic"] as? String {
                    self.topic = value
                }
            }
        }
        public class SourceOSSParameters : Tea.TeaModel {
            public var bucketName: String?

            public var delimiter: String?

            public var loadFormat: String?

            public var loadMode: String?

            public var prefix_: String?

            public var roleName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bucketName != nil {
                    map["BucketName"] = self.bucketName!
                }
                if self.delimiter != nil {
                    map["Delimiter"] = self.delimiter!
                }
                if self.loadFormat != nil {
                    map["LoadFormat"] = self.loadFormat!
                }
                if self.loadMode != nil {
                    map["LoadMode"] = self.loadMode!
                }
                if self.prefix_ != nil {
                    map["Prefix"] = self.prefix_!
                }
                if self.roleName != nil {
                    map["RoleName"] = self.roleName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BucketName"] as? String {
                    self.bucketName = value
                }
                if let value = dict["Delimiter"] as? String {
                    self.delimiter = value
                }
                if let value = dict["LoadFormat"] as? String {
                    self.loadFormat = value
                }
                if let value = dict["LoadMode"] as? String {
                    self.loadMode = value
                }
                if let value = dict["Prefix"] as? String {
                    self.prefix_ = value
                }
                if let value = dict["RoleName"] as? String {
                    self.roleName = value
                }
            }
        }
        public class SourceOpenSourceRabbitMQParameters : Tea.TeaModel {
            public var authType: String?

            public var bodyDataType: String?

            public var endpoint: String?

            public var networkType: String?

            public var password: String?

            public var queueName: String?

            public var securityGroupId: String?

            public var username: String?

            public var vSwitchIds: String?

            public var virtualHostName: String?

            public var vpcId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.authType != nil {
                    map["AuthType"] = self.authType!
                }
                if self.bodyDataType != nil {
                    map["BodyDataType"] = self.bodyDataType!
                }
                if self.endpoint != nil {
                    map["Endpoint"] = self.endpoint!
                }
                if self.networkType != nil {
                    map["NetworkType"] = self.networkType!
                }
                if self.password != nil {
                    map["Password"] = self.password!
                }
                if self.queueName != nil {
                    map["QueueName"] = self.queueName!
                }
                if self.securityGroupId != nil {
                    map["SecurityGroupId"] = self.securityGroupId!
                }
                if self.username != nil {
                    map["Username"] = self.username!
                }
                if self.vSwitchIds != nil {
                    map["VSwitchIds"] = self.vSwitchIds!
                }
                if self.virtualHostName != nil {
                    map["VirtualHostName"] = self.virtualHostName!
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AuthType"] as? String {
                    self.authType = value
                }
                if let value = dict["BodyDataType"] as? String {
                    self.bodyDataType = value
                }
                if let value = dict["Endpoint"] as? String {
                    self.endpoint = value
                }
                if let value = dict["NetworkType"] as? String {
                    self.networkType = value
                }
                if let value = dict["Password"] as? String {
                    self.password = value
                }
                if let value = dict["QueueName"] as? String {
                    self.queueName = value
                }
                if let value = dict["SecurityGroupId"] as? String {
                    self.securityGroupId = value
                }
                if let value = dict["Username"] as? String {
                    self.username = value
                }
                if let value = dict["VSwitchIds"] as? String {
                    self.vSwitchIds = value
                }
                if let value = dict["VirtualHostName"] as? String {
                    self.virtualHostName = value
                }
                if let value = dict["VpcId"] as? String {
                    self.vpcId = value
                }
            }
        }
        public class SourcePrometheusParameters : Tea.TeaModel {
            public var clusterId: String?

            public var dataType: String?

            public var externalLabels: String?

            public var labels: String?

            public var regionId: String?

            public var roleName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.clusterId != nil {
                    map["ClusterId"] = self.clusterId!
                }
                if self.dataType != nil {
                    map["DataType"] = self.dataType!
                }
                if self.externalLabels != nil {
                    map["ExternalLabels"] = self.externalLabels!
                }
                if self.labels != nil {
                    map["Labels"] = self.labels!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.roleName != nil {
                    map["RoleName"] = self.roleName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ClusterId"] as? String {
                    self.clusterId = value
                }
                if let value = dict["DataType"] as? String {
                    self.dataType = value
                }
                if let value = dict["ExternalLabels"] as? String {
                    self.externalLabels = value
                }
                if let value = dict["Labels"] as? String {
                    self.labels = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["RoleName"] as? String {
                    self.roleName = value
                }
            }
        }
        public class SourceRabbitMQParameters : Tea.TeaModel {
            public var instanceId: String?

            public var queueName: String?

            public var regionId: String?

            public var virtualHostName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.queueName != nil {
                    map["QueueName"] = self.queueName!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.virtualHostName != nil {
                    map["VirtualHostName"] = self.virtualHostName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["QueueName"] as? String {
                    self.queueName = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["VirtualHostName"] as? String {
                    self.virtualHostName = value
                }
            }
        }
        public class SourceRocketMQCheckpointParameters : Tea.TeaModel {
            public var instanceId: String?

            public var instanceType: String?

            public var regionId: String?

            public var topics: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.instanceType != nil {
                    map["InstanceType"] = self.instanceType!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.topics != nil {
                    map["Topics"] = self.topics!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["InstanceType"] as? String {
                    self.instanceType = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["Topics"] as? [String] {
                    self.topics = value
                }
            }
        }
        public class SourceRocketMQParameters : Tea.TeaModel {
            public var authType: String?

            public var bodyDataType: String?

            public var filterSql: String?

            public var filterType: String?

            public var groupID: String?

            public var instanceEndpoint: String?

            public var instanceId: String?

            public var instanceNetwork: String?

            public var instancePassword: String?

            public var instanceSecurityGroupId: String?

            public var instanceType: String?

            public var instanceUsername: String?

            public var instanceVSwitchIds: String?

            public var instanceVpcId: String?

            public var network: String?

            public var offset: String?

            public var regionId: String?

            public var securityGroupId: String?

            public var tag: String?

            public var timestamp: Int64?

            public var topic: String?

            public var vSwitchIds: String?

            public var vpcId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.authType != nil {
                    map["AuthType"] = self.authType!
                }
                if self.bodyDataType != nil {
                    map["BodyDataType"] = self.bodyDataType!
                }
                if self.filterSql != nil {
                    map["FilterSql"] = self.filterSql!
                }
                if self.filterType != nil {
                    map["FilterType"] = self.filterType!
                }
                if self.groupID != nil {
                    map["GroupID"] = self.groupID!
                }
                if self.instanceEndpoint != nil {
                    map["InstanceEndpoint"] = self.instanceEndpoint!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.instanceNetwork != nil {
                    map["InstanceNetwork"] = self.instanceNetwork!
                }
                if self.instancePassword != nil {
                    map["InstancePassword"] = self.instancePassword!
                }
                if self.instanceSecurityGroupId != nil {
                    map["InstanceSecurityGroupId"] = self.instanceSecurityGroupId!
                }
                if self.instanceType != nil {
                    map["InstanceType"] = self.instanceType!
                }
                if self.instanceUsername != nil {
                    map["InstanceUsername"] = self.instanceUsername!
                }
                if self.instanceVSwitchIds != nil {
                    map["InstanceVSwitchIds"] = self.instanceVSwitchIds!
                }
                if self.instanceVpcId != nil {
                    map["InstanceVpcId"] = self.instanceVpcId!
                }
                if self.network != nil {
                    map["Network"] = self.network!
                }
                if self.offset != nil {
                    map["Offset"] = self.offset!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.securityGroupId != nil {
                    map["SecurityGroupId"] = self.securityGroupId!
                }
                if self.tag != nil {
                    map["Tag"] = self.tag!
                }
                if self.timestamp != nil {
                    map["Timestamp"] = self.timestamp!
                }
                if self.topic != nil {
                    map["Topic"] = self.topic!
                }
                if self.vSwitchIds != nil {
                    map["VSwitchIds"] = self.vSwitchIds!
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AuthType"] as? String {
                    self.authType = value
                }
                if let value = dict["BodyDataType"] as? String {
                    self.bodyDataType = value
                }
                if let value = dict["FilterSql"] as? String {
                    self.filterSql = value
                }
                if let value = dict["FilterType"] as? String {
                    self.filterType = value
                }
                if let value = dict["GroupID"] as? String {
                    self.groupID = value
                }
                if let value = dict["InstanceEndpoint"] as? String {
                    self.instanceEndpoint = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["InstanceNetwork"] as? String {
                    self.instanceNetwork = value
                }
                if let value = dict["InstancePassword"] as? String {
                    self.instancePassword = value
                }
                if let value = dict["InstanceSecurityGroupId"] as? String {
                    self.instanceSecurityGroupId = value
                }
                if let value = dict["InstanceType"] as? String {
                    self.instanceType = value
                }
                if let value = dict["InstanceUsername"] as? String {
                    self.instanceUsername = value
                }
                if let value = dict["InstanceVSwitchIds"] as? String {
                    self.instanceVSwitchIds = value
                }
                if let value = dict["InstanceVpcId"] as? String {
                    self.instanceVpcId = value
                }
                if let value = dict["Network"] as? String {
                    self.network = value
                }
                if let value = dict["Offset"] as? String {
                    self.offset = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["SecurityGroupId"] as? String {
                    self.securityGroupId = value
                }
                if let value = dict["Tag"] as? String {
                    self.tag = value
                }
                if let value = dict["Timestamp"] as? Int64 {
                    self.timestamp = value
                }
                if let value = dict["Topic"] as? String {
                    self.topic = value
                }
                if let value = dict["VSwitchIds"] as? String {
                    self.vSwitchIds = value
                }
                if let value = dict["VpcId"] as? String {
                    self.vpcId = value
                }
            }
        }
        public class SourceSLSParameters : Tea.TeaModel {
            public var consumePosition: String?

            public var logStore: String?

            public var project: String?

            public var roleName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.consumePosition != nil {
                    map["ConsumePosition"] = self.consumePosition!
                }
                if self.logStore != nil {
                    map["LogStore"] = self.logStore!
                }
                if self.project != nil {
                    map["Project"] = self.project!
                }
                if self.roleName != nil {
                    map["RoleName"] = self.roleName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConsumePosition"] as? String {
                    self.consumePosition = value
                }
                if let value = dict["LogStore"] as? String {
                    self.logStore = value
                }
                if let value = dict["Project"] as? String {
                    self.project = value
                }
                if let value = dict["RoleName"] as? String {
                    self.roleName = value
                }
            }
        }
        public var sourceApacheRocketMQCheckpointParameters: CreateEventStreamingRequest.Source.SourceApacheRocketMQCheckpointParameters?

        public var sourceCustomizedKafkaConnectorParameters: CreateEventStreamingRequest.Source.SourceCustomizedKafkaConnectorParameters?

        public var sourceCustomizedKafkaParameters: CreateEventStreamingRequest.Source.SourceCustomizedKafkaParameters?

        public var sourceDTSParameters: CreateEventStreamingRequest.Source.SourceDTSParameters?

        public var sourceEventBusParameters: CreateEventStreamingRequest.Source.SourceEventBusParameters?

        public var sourceKafkaParameters: CreateEventStreamingRequest.Source.SourceKafkaParameters?

        public var sourceMNSParameters: CreateEventStreamingRequest.Source.SourceMNSParameters?

        public var sourceMQTTParameters: CreateEventStreamingRequest.Source.SourceMQTTParameters?

        public var sourceMySQLParameters: SourceMySQLParameters?

        public var sourceOSSParameters: CreateEventStreamingRequest.Source.SourceOSSParameters?

        public var sourceOpenSourceRabbitMQParameters: CreateEventStreamingRequest.Source.SourceOpenSourceRabbitMQParameters?

        public var sourcePrometheusParameters: CreateEventStreamingRequest.Source.SourcePrometheusParameters?

        public var sourceRabbitMQParameters: CreateEventStreamingRequest.Source.SourceRabbitMQParameters?

        public var sourceRocketMQCheckpointParameters: CreateEventStreamingRequest.Source.SourceRocketMQCheckpointParameters?

        public var sourceRocketMQParameters: CreateEventStreamingRequest.Source.SourceRocketMQParameters?

        public var sourceSLSParameters: CreateEventStreamingRequest.Source.SourceSLSParameters?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.sourceApacheRocketMQCheckpointParameters?.validate()
            try self.sourceCustomizedKafkaConnectorParameters?.validate()
            try self.sourceCustomizedKafkaParameters?.validate()
            try self.sourceDTSParameters?.validate()
            try self.sourceEventBusParameters?.validate()
            try self.sourceKafkaParameters?.validate()
            try self.sourceMNSParameters?.validate()
            try self.sourceMQTTParameters?.validate()
            try self.sourceMySQLParameters?.validate()
            try self.sourceOSSParameters?.validate()
            try self.sourceOpenSourceRabbitMQParameters?.validate()
            try self.sourcePrometheusParameters?.validate()
            try self.sourceRabbitMQParameters?.validate()
            try self.sourceRocketMQCheckpointParameters?.validate()
            try self.sourceRocketMQParameters?.validate()
            try self.sourceSLSParameters?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.sourceApacheRocketMQCheckpointParameters != nil {
                map["SourceApacheRocketMQCheckpointParameters"] = self.sourceApacheRocketMQCheckpointParameters?.toMap()
            }
            if self.sourceCustomizedKafkaConnectorParameters != nil {
                map["SourceCustomizedKafkaConnectorParameters"] = self.sourceCustomizedKafkaConnectorParameters?.toMap()
            }
            if self.sourceCustomizedKafkaParameters != nil {
                map["SourceCustomizedKafkaParameters"] = self.sourceCustomizedKafkaParameters?.toMap()
            }
            if self.sourceDTSParameters != nil {
                map["SourceDTSParameters"] = self.sourceDTSParameters?.toMap()
            }
            if self.sourceEventBusParameters != nil {
                map["SourceEventBusParameters"] = self.sourceEventBusParameters?.toMap()
            }
            if self.sourceKafkaParameters != nil {
                map["SourceKafkaParameters"] = self.sourceKafkaParameters?.toMap()
            }
            if self.sourceMNSParameters != nil {
                map["SourceMNSParameters"] = self.sourceMNSParameters?.toMap()
            }
            if self.sourceMQTTParameters != nil {
                map["SourceMQTTParameters"] = self.sourceMQTTParameters?.toMap()
            }
            if self.sourceMySQLParameters != nil {
                map["SourceMySQLParameters"] = self.sourceMySQLParameters?.toMap()
            }
            if self.sourceOSSParameters != nil {
                map["SourceOSSParameters"] = self.sourceOSSParameters?.toMap()
            }
            if self.sourceOpenSourceRabbitMQParameters != nil {
                map["SourceOpenSourceRabbitMQParameters"] = self.sourceOpenSourceRabbitMQParameters?.toMap()
            }
            if self.sourcePrometheusParameters != nil {
                map["SourcePrometheusParameters"] = self.sourcePrometheusParameters?.toMap()
            }
            if self.sourceRabbitMQParameters != nil {
                map["SourceRabbitMQParameters"] = self.sourceRabbitMQParameters?.toMap()
            }
            if self.sourceRocketMQCheckpointParameters != nil {
                map["SourceRocketMQCheckpointParameters"] = self.sourceRocketMQCheckpointParameters?.toMap()
            }
            if self.sourceRocketMQParameters != nil {
                map["SourceRocketMQParameters"] = self.sourceRocketMQParameters?.toMap()
            }
            if self.sourceSLSParameters != nil {
                map["SourceSLSParameters"] = self.sourceSLSParameters?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SourceApacheRocketMQCheckpointParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Source.SourceApacheRocketMQCheckpointParameters()
                model.fromMap(value)
                self.sourceApacheRocketMQCheckpointParameters = model
            }
            if let value = dict["SourceCustomizedKafkaConnectorParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Source.SourceCustomizedKafkaConnectorParameters()
                model.fromMap(value)
                self.sourceCustomizedKafkaConnectorParameters = model
            }
            if let value = dict["SourceCustomizedKafkaParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Source.SourceCustomizedKafkaParameters()
                model.fromMap(value)
                self.sourceCustomizedKafkaParameters = model
            }
            if let value = dict["SourceDTSParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Source.SourceDTSParameters()
                model.fromMap(value)
                self.sourceDTSParameters = model
            }
            if let value = dict["SourceEventBusParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Source.SourceEventBusParameters()
                model.fromMap(value)
                self.sourceEventBusParameters = model
            }
            if let value = dict["SourceKafkaParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Source.SourceKafkaParameters()
                model.fromMap(value)
                self.sourceKafkaParameters = model
            }
            if let value = dict["SourceMNSParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Source.SourceMNSParameters()
                model.fromMap(value)
                self.sourceMNSParameters = model
            }
            if let value = dict["SourceMQTTParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Source.SourceMQTTParameters()
                model.fromMap(value)
                self.sourceMQTTParameters = model
            }
            if let value = dict["SourceMySQLParameters"] as? [String: Any?] {
                var model = SourceMySQLParameters()
                model.fromMap(value)
                self.sourceMySQLParameters = model
            }
            if let value = dict["SourceOSSParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Source.SourceOSSParameters()
                model.fromMap(value)
                self.sourceOSSParameters = model
            }
            if let value = dict["SourceOpenSourceRabbitMQParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Source.SourceOpenSourceRabbitMQParameters()
                model.fromMap(value)
                self.sourceOpenSourceRabbitMQParameters = model
            }
            if let value = dict["SourcePrometheusParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Source.SourcePrometheusParameters()
                model.fromMap(value)
                self.sourcePrometheusParameters = model
            }
            if let value = dict["SourceRabbitMQParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Source.SourceRabbitMQParameters()
                model.fromMap(value)
                self.sourceRabbitMQParameters = model
            }
            if let value = dict["SourceRocketMQCheckpointParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Source.SourceRocketMQCheckpointParameters()
                model.fromMap(value)
                self.sourceRocketMQCheckpointParameters = model
            }
            if let value = dict["SourceRocketMQParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Source.SourceRocketMQParameters()
                model.fromMap(value)
                self.sourceRocketMQParameters = model
            }
            if let value = dict["SourceSLSParameters"] as? [String: Any?] {
                var model = CreateEventStreamingRequest.Source.SourceSLSParameters()
                model.fromMap(value)
                self.sourceSLSParameters = model
            }
        }
    }
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public class Transforms : Tea.TeaModel {
        public var arn: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.arn != nil {
                map["Arn"] = self.arn!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Arn"] as? String {
                self.arn = value
            }
        }
    }
    public var description_: String?

    public var eventStreamingName: String?

    public var filterPattern: String?

    public var runOptions: CreateEventStreamingRequest.RunOptions?

    public var sink: CreateEventStreamingRequest.Sink?

    public var source: CreateEventStreamingRequest.Source?

    public var tags: [CreateEventStreamingRequest.Tags]?

    public var transforms: [CreateEventStreamingRequest.Transforms]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.runOptions?.validate()
        try self.sink?.validate()
        try self.source?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.eventStreamingName != nil {
            map["EventStreamingName"] = self.eventStreamingName!
        }
        if self.filterPattern != nil {
            map["FilterPattern"] = self.filterPattern!
        }
        if self.runOptions != nil {
            map["RunOptions"] = self.runOptions?.toMap()
        }
        if self.sink != nil {
            map["Sink"] = self.sink?.toMap()
        }
        if self.source != nil {
            map["Source"] = self.source?.toMap()
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        if self.transforms != nil {
            var tmp : [Any] = []
            for k in self.transforms! {
                tmp.append(k.toMap())
            }
            map["Transforms"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["EventStreamingName"] as? String {
            self.eventStreamingName = value
        }
        if let value = dict["FilterPattern"] as? String {
            self.filterPattern = value
        }
        if let value = dict["RunOptions"] as? [String: Any?] {
            var model = CreateEventStreamingRequest.RunOptions()
            model.fromMap(value)
            self.runOptions = model
        }
        if let value = dict["Sink"] as? [String: Any?] {
            var model = CreateEventStreamingRequest.Sink()
            model.fromMap(value)
            self.sink = model
        }
        if let value = dict["Source"] as? [String: Any?] {
            var model = CreateEventStreamingRequest.Source()
            model.fromMap(value)
            self.source = model
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [CreateEventStreamingRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = CreateEventStreamingRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
        if let value = dict["Transforms"] as? [Any?] {
            var tmp : [CreateEventStreamingRequest.Transforms] = []
            for v in value {
                if v != nil {
                    var model = CreateEventStreamingRequest.Transforms()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.transforms = tmp
        }
    }
}

public class CreateEventStreamingShrinkRequest : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var description_: String?

    public var eventStreamingName: String?

    public var filterPattern: String?

    public var runOptionsShrink: String?

    public var sinkShrink: String?

    public var sourceShrink: String?

    public var tags: [CreateEventStreamingShrinkRequest.Tags]?

    public var transformsShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.eventStreamingName != nil {
            map["EventStreamingName"] = self.eventStreamingName!
        }
        if self.filterPattern != nil {
            map["FilterPattern"] = self.filterPattern!
        }
        if self.runOptionsShrink != nil {
            map["RunOptions"] = self.runOptionsShrink!
        }
        if self.sinkShrink != nil {
            map["Sink"] = self.sinkShrink!
        }
        if self.sourceShrink != nil {
            map["Source"] = self.sourceShrink!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        if self.transformsShrink != nil {
            map["Transforms"] = self.transformsShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["EventStreamingName"] as? String {
            self.eventStreamingName = value
        }
        if let value = dict["FilterPattern"] as? String {
            self.filterPattern = value
        }
        if let value = dict["RunOptions"] as? String {
            self.runOptionsShrink = value
        }
        if let value = dict["Sink"] as? String {
            self.sinkShrink = value
        }
        if let value = dict["Source"] as? String {
            self.sourceShrink = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [CreateEventStreamingShrinkRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = CreateEventStreamingShrinkRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
        if let value = dict["Transforms"] as? String {
            self.transformsShrink = value
        }
    }
}

public class CreateEventStreamingResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var eventStreamingARN: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.eventStreamingARN != nil {
                map["EventStreamingARN"] = self.eventStreamingARN!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EventStreamingARN"] as? String {
                self.eventStreamingARN = value
            }
        }
    }
    public var code: String?

    public var data: CreateEventStreamingResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CreateEventStreamingResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateEventStreamingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateEventStreamingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateEventStreamingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateRuleRequest : Tea.TeaModel {
    public class EventTargets : Tea.TeaModel {
        public class ConcurrentConfig : Tea.TeaModel {
            public var concurrency: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.concurrency != nil {
                    map["Concurrency"] = self.concurrency!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Concurrency"] as? Int64 {
                    self.concurrency = value
                }
            }
        }
        public class DeadLetterQueue : Tea.TeaModel {
            public var arn: String?

            public var network: String?

            public var securityGroupId: String?

            public var vSwitchIds: String?

            public var vpcId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arn != nil {
                    map["Arn"] = self.arn!
                }
                if self.network != nil {
                    map["Network"] = self.network!
                }
                if self.securityGroupId != nil {
                    map["SecurityGroupId"] = self.securityGroupId!
                }
                if self.vSwitchIds != nil {
                    map["VSwitchIds"] = self.vSwitchIds!
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Arn"] as? String {
                    self.arn = value
                }
                if let value = dict["Network"] as? String {
                    self.network = value
                }
                if let value = dict["SecurityGroupId"] as? String {
                    self.securityGroupId = value
                }
                if let value = dict["VSwitchIds"] as? String {
                    self.vSwitchIds = value
                }
                if let value = dict["VpcId"] as? String {
                    self.vpcId = value
                }
            }
        }
        public class ParamList : Tea.TeaModel {
            public var form: String?

            public var resourceKey: String?

            public var template: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.form != nil {
                    map["Form"] = self.form!
                }
                if self.resourceKey != nil {
                    map["ResourceKey"] = self.resourceKey!
                }
                if self.template != nil {
                    map["Template"] = self.template!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Form"] as? String {
                    self.form = value
                }
                if let value = dict["ResourceKey"] as? String {
                    self.resourceKey = value
                }
                if let value = dict["Template"] as? String {
                    self.template = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var concurrentConfig: CreateRuleRequest.EventTargets.ConcurrentConfig?

        public var deadLetterQueue: CreateRuleRequest.EventTargets.DeadLetterQueue?

        public var endpoint: String?

        public var errorsTolerance: String?

        public var id: String?

        public var paramList: [CreateRuleRequest.EventTargets.ParamList]?

        public var pushRetryStrategy: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.concurrentConfig?.validate()
            try self.deadLetterQueue?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.concurrentConfig != nil {
                map["ConcurrentConfig"] = self.concurrentConfig?.toMap()
            }
            if self.deadLetterQueue != nil {
                map["DeadLetterQueue"] = self.deadLetterQueue?.toMap()
            }
            if self.endpoint != nil {
                map["Endpoint"] = self.endpoint!
            }
            if self.errorsTolerance != nil {
                map["ErrorsTolerance"] = self.errorsTolerance!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.paramList != nil {
                var tmp : [Any] = []
                for k in self.paramList! {
                    tmp.append(k.toMap())
                }
                map["ParamList"] = tmp
            }
            if self.pushRetryStrategy != nil {
                map["PushRetryStrategy"] = self.pushRetryStrategy!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConcurrentConfig"] as? [String: Any?] {
                var model = CreateRuleRequest.EventTargets.ConcurrentConfig()
                model.fromMap(value)
                self.concurrentConfig = model
            }
            if let value = dict["DeadLetterQueue"] as? [String: Any?] {
                var model = CreateRuleRequest.EventTargets.DeadLetterQueue()
                model.fromMap(value)
                self.deadLetterQueue = model
            }
            if let value = dict["Endpoint"] as? String {
                self.endpoint = value
            }
            if let value = dict["ErrorsTolerance"] as? String {
                self.errorsTolerance = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["ParamList"] as? [Any?] {
                var tmp : [CreateRuleRequest.EventTargets.ParamList] = []
                for v in value {
                    if v != nil {
                        var model = CreateRuleRequest.EventTargets.ParamList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.paramList = tmp
            }
            if let value = dict["PushRetryStrategy"] as? String {
                self.pushRetryStrategy = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var description_: String?

    public var eventBusName: String?

    public var eventTargets: [CreateRuleRequest.EventTargets]?

    public var filterPattern: String?

    public var ruleName: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.eventBusName != nil {
            map["EventBusName"] = self.eventBusName!
        }
        if self.eventTargets != nil {
            var tmp : [Any] = []
            for k in self.eventTargets! {
                tmp.append(k.toMap())
            }
            map["EventTargets"] = tmp
        }
        if self.filterPattern != nil {
            map["FilterPattern"] = self.filterPattern!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["EventBusName"] as? String {
            self.eventBusName = value
        }
        if let value = dict["EventTargets"] as? [Any?] {
            var tmp : [CreateRuleRequest.EventTargets] = []
            for v in value {
                if v != nil {
                    var model = CreateRuleRequest.EventTargets()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.eventTargets = tmp
        }
        if let value = dict["FilterPattern"] as? String {
            self.filterPattern = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class CreateRuleShrinkRequest : Tea.TeaModel {
    public var description_: String?

    public var eventBusName: String?

    public var eventTargetsShrink: String?

    public var filterPattern: String?

    public var ruleName: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.eventBusName != nil {
            map["EventBusName"] = self.eventBusName!
        }
        if self.eventTargetsShrink != nil {
            map["EventTargets"] = self.eventTargetsShrink!
        }
        if self.filterPattern != nil {
            map["FilterPattern"] = self.filterPattern!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["EventBusName"] as? String {
            self.eventBusName = value
        }
        if let value = dict["EventTargets"] as? String {
            self.eventTargetsShrink = value
        }
        if let value = dict["FilterPattern"] as? String {
            self.filterPattern = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class CreateRuleResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var ruleARN: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ruleARN != nil {
                map["RuleARN"] = self.ruleARN!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["RuleARN"] as? String {
                self.ruleARN = value
            }
        }
    }
    public var code: String?

    public var data: CreateRuleResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CreateRuleResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateServiceLinkedRoleForProductRequest : Tea.TeaModel {
    public var productName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.productName != nil {
            map["ProductName"] = self.productName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ProductName"] as? String {
            self.productName = value
        }
    }
}

public class CreateServiceLinkedRoleForProductResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpCode != nil {
            map["HttpCode"] = self.httpCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpCode"] as? Int32 {
            self.httpCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateServiceLinkedRoleForProductResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateServiceLinkedRoleForProductResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateServiceLinkedRoleForProductResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteApiDestinationRequest : Tea.TeaModel {
    public var apiDestinationName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiDestinationName != nil {
            map["ApiDestinationName"] = self.apiDestinationName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiDestinationName"] as? String {
            self.apiDestinationName = value
        }
    }
}

public class DeleteApiDestinationResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteApiDestinationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteApiDestinationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteApiDestinationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteConnectionRequest : Tea.TeaModel {
    public var connectionName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.connectionName != nil {
            map["ConnectionName"] = self.connectionName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConnectionName"] as? String {
            self.connectionName = value
        }
    }
}

public class DeleteConnectionResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteConnectionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteConnectionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteConnectionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteEventBusRequest : Tea.TeaModel {
    public var eventBusName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eventBusName != nil {
            map["EventBusName"] = self.eventBusName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EventBusName"] as? String {
            self.eventBusName = value
        }
    }
}

public class DeleteEventBusResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteEventBusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteEventBusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteEventBusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteEventSourceRequest : Tea.TeaModel {
    public var eventBusName: String?

    public var eventSourceName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eventBusName != nil {
            map["EventBusName"] = self.eventBusName!
        }
        if self.eventSourceName != nil {
            map["EventSourceName"] = self.eventSourceName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EventBusName"] as? String {
            self.eventBusName = value
        }
        if let value = dict["EventSourceName"] as? String {
            self.eventSourceName = value
        }
    }
}

public class DeleteEventSourceResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteEventSourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteEventSourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteEventSourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteEventStreamingRequest : Tea.TeaModel {
    public var eventStreamingName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eventStreamingName != nil {
            map["EventStreamingName"] = self.eventStreamingName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EventStreamingName"] as? String {
            self.eventStreamingName = value
        }
    }
}

public class DeleteEventStreamingResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteEventStreamingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteEventStreamingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteEventStreamingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteRuleRequest : Tea.TeaModel {
    public var eventBusName: String?

    public var ruleName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eventBusName != nil {
            map["EventBusName"] = self.eventBusName!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EventBusName"] as? String {
            self.eventBusName = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
    }
}

public class DeleteRuleResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteTargetsRequest : Tea.TeaModel {
    public var eventBusName: String?

    public var ruleName: String?

    public var targetIds: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eventBusName != nil {
            map["EventBusName"] = self.eventBusName!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.targetIds != nil {
            map["TargetIds"] = self.targetIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EventBusName"] as? String {
            self.eventBusName = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["TargetIds"] as? [String] {
            self.targetIds = value
        }
    }
}

public class DeleteTargetsShrinkRequest : Tea.TeaModel {
    public var eventBusName: String?

    public var ruleName: String?

    public var targetIdsShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eventBusName != nil {
            map["EventBusName"] = self.eventBusName!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.targetIdsShrink != nil {
            map["TargetIds"] = self.targetIdsShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EventBusName"] as? String {
            self.eventBusName = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["TargetIds"] as? String {
            self.targetIdsShrink = value
        }
    }
}

public class DeleteTargetsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ErrorEntries : Tea.TeaModel {
            public var entryId: String?

            public var errorCode: String?

            public var errorMessage: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.entryId != nil {
                    map["EntryId"] = self.entryId!
                }
                if self.errorCode != nil {
                    map["ErrorCode"] = self.errorCode!
                }
                if self.errorMessage != nil {
                    map["ErrorMessage"] = self.errorMessage!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EntryId"] as? String {
                    self.entryId = value
                }
                if let value = dict["ErrorCode"] as? String {
                    self.errorCode = value
                }
                if let value = dict["ErrorMessage"] as? String {
                    self.errorMessage = value
                }
            }
        }
        public var errorEntries: [DeleteTargetsResponseBody.Data.ErrorEntries]?

        public var errorEntriesCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorEntries != nil {
                var tmp : [Any] = []
                for k in self.errorEntries! {
                    tmp.append(k.toMap())
                }
                map["ErrorEntries"] = tmp
            }
            if self.errorEntriesCount != nil {
                map["ErrorEntriesCount"] = self.errorEntriesCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorEntries"] as? [Any?] {
                var tmp : [DeleteTargetsResponseBody.Data.ErrorEntries] = []
                for v in value {
                    if v != nil {
                        var model = DeleteTargetsResponseBody.Data.ErrorEntries()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.errorEntries = tmp
            }
            if let value = dict["ErrorEntriesCount"] as? Int32 {
                self.errorEntriesCount = value
            }
        }
    }
    public var code: String?

    public var data: DeleteTargetsResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DeleteTargetsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteTargetsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteTargetsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteTargetsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DisableRuleRequest : Tea.TeaModel {
    public var eventBusName: String?

    public var ruleName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eventBusName != nil {
            map["EventBusName"] = self.eventBusName!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EventBusName"] as? String {
            self.eventBusName = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
    }
}

public class DisableRuleResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DisableRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DisableRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DisableRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DiscoverEventSourceRequest : Tea.TeaModel {
    public class SourceMySQLParameters : Tea.TeaModel {
        public var databaseName: String?

        public var hostName: String?

        public var limit: String?

        public var networkType: String?

        public var offset: String?

        public var password: String?

        public var port: Int32?

        public var regionId: String?

        public var securityGroupId: String?

        public var tableName: String?

        public var user: String?

        public var vSwitchIds: String?

        public var vpcId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.databaseName != nil {
                map["DatabaseName"] = self.databaseName!
            }
            if self.hostName != nil {
                map["HostName"] = self.hostName!
            }
            if self.limit != nil {
                map["Limit"] = self.limit!
            }
            if self.networkType != nil {
                map["NetworkType"] = self.networkType!
            }
            if self.offset != nil {
                map["Offset"] = self.offset!
            }
            if self.password != nil {
                map["Password"] = self.password!
            }
            if self.port != nil {
                map["Port"] = self.port!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.securityGroupId != nil {
                map["SecurityGroupId"] = self.securityGroupId!
            }
            if self.tableName != nil {
                map["TableName"] = self.tableName!
            }
            if self.user != nil {
                map["User"] = self.user!
            }
            if self.vSwitchIds != nil {
                map["VSwitchIds"] = self.vSwitchIds!
            }
            if self.vpcId != nil {
                map["VpcId"] = self.vpcId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DatabaseName"] as? String {
                self.databaseName = value
            }
            if let value = dict["HostName"] as? String {
                self.hostName = value
            }
            if let value = dict["Limit"] as? String {
                self.limit = value
            }
            if let value = dict["NetworkType"] as? String {
                self.networkType = value
            }
            if let value = dict["Offset"] as? String {
                self.offset = value
            }
            if let value = dict["Password"] as? String {
                self.password = value
            }
            if let value = dict["Port"] as? Int32 {
                self.port = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["SecurityGroupId"] as? String {
                self.securityGroupId = value
            }
            if let value = dict["TableName"] as? String {
                self.tableName = value
            }
            if let value = dict["User"] as? String {
                self.user = value
            }
            if let value = dict["VSwitchIds"] as? String {
                self.vSwitchIds = value
            }
            if let value = dict["VpcId"] as? String {
                self.vpcId = value
            }
        }
    }
    public var sourceMySQLParameters: DiscoverEventSourceRequest.SourceMySQLParameters?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.sourceMySQLParameters?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.sourceMySQLParameters != nil {
            map["SourceMySQLParameters"] = self.sourceMySQLParameters?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SourceMySQLParameters"] as? [String: Any?] {
            var model = DiscoverEventSourceRequest.SourceMySQLParameters()
            model.fromMap(value)
            self.sourceMySQLParameters = model
        }
    }
}

public class DiscoverEventSourceShrinkRequest : Tea.TeaModel {
    public var sourceMySQLParametersShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.sourceMySQLParametersShrink != nil {
            map["SourceMySQLParameters"] = self.sourceMySQLParametersShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SourceMySQLParameters"] as? String {
            self.sourceMySQLParametersShrink = value
        }
    }
}

public class DiscoverEventSourceResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class SourceMySQLDiscovery : Tea.TeaModel {
            public class TableSchema : Tea.TeaModel {
                public class Columns : Tea.TeaModel {
                    public var extra: String?

                    public var field: String?

                    public var isNull: String?

                    public var key: String?

                    public var type: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.extra != nil {
                            map["Extra"] = self.extra!
                        }
                        if self.field != nil {
                            map["Field"] = self.field!
                        }
                        if self.isNull != nil {
                            map["IsNull"] = self.isNull!
                        }
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.type != nil {
                            map["Type"] = self.type!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Extra"] as? String {
                            self.extra = value
                        }
                        if let value = dict["Field"] as? String {
                            self.field = value
                        }
                        if let value = dict["IsNull"] as? String {
                            self.isNull = value
                        }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Type"] as? String {
                            self.type = value
                        }
                    }
                }
                public var columns: [DiscoverEventSourceResponseBody.Data.SourceMySQLDiscovery.TableSchema.Columns]?

                public var tableName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.columns != nil {
                        var tmp : [Any] = []
                        for k in self.columns! {
                            tmp.append(k.toMap())
                        }
                        map["Columns"] = tmp
                    }
                    if self.tableName != nil {
                        map["TableName"] = self.tableName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Columns"] as? [Any?] {
                        var tmp : [DiscoverEventSourceResponseBody.Data.SourceMySQLDiscovery.TableSchema.Columns] = []
                        for v in value {
                            if v != nil {
                                var model = DiscoverEventSourceResponseBody.Data.SourceMySQLDiscovery.TableSchema.Columns()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.columns = tmp
                    }
                    if let value = dict["TableName"] as? String {
                        self.tableName = value
                    }
                }
            }
            public var databaseNames: [String]?

            public var simpleData: String?

            public var tableNames: [String]?

            public var tableSchema: DiscoverEventSourceResponseBody.Data.SourceMySQLDiscovery.TableSchema?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.tableSchema?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.databaseNames != nil {
                    map["DatabaseNames"] = self.databaseNames!
                }
                if self.simpleData != nil {
                    map["SimpleData"] = self.simpleData!
                }
                if self.tableNames != nil {
                    map["TableNames"] = self.tableNames!
                }
                if self.tableSchema != nil {
                    map["TableSchema"] = self.tableSchema?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DatabaseNames"] as? [String] {
                    self.databaseNames = value
                }
                if let value = dict["SimpleData"] as? String {
                    self.simpleData = value
                }
                if let value = dict["TableNames"] as? [String] {
                    self.tableNames = value
                }
                if let value = dict["TableSchema"] as? [String: Any?] {
                    var model = DiscoverEventSourceResponseBody.Data.SourceMySQLDiscovery.TableSchema()
                    model.fromMap(value)
                    self.tableSchema = model
                }
            }
        }
        public var sourceMySQLDiscovery: DiscoverEventSourceResponseBody.Data.SourceMySQLDiscovery?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.sourceMySQLDiscovery?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.sourceMySQLDiscovery != nil {
                map["SourceMySQLDiscovery"] = self.sourceMySQLDiscovery?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SourceMySQLDiscovery"] as? [String: Any?] {
                var model = DiscoverEventSourceResponseBody.Data.SourceMySQLDiscovery()
                model.fromMap(value)
                self.sourceMySQLDiscovery = model
            }
        }
    }
    public var code: String?

    public var data: DiscoverEventSourceResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = DiscoverEventSourceResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DiscoverEventSourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DiscoverEventSourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DiscoverEventSourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class EnableRuleRequest : Tea.TeaModel {
    public var eventBusName: String?

    public var ruleName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eventBusName != nil {
            map["EventBusName"] = self.eventBusName!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EventBusName"] as? String {
            self.eventBusName = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
    }
}

public class EnableRuleResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class EnableRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: EnableRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = EnableRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class EventCenterQueryEventsRequest : Tea.TeaModel {
    public class Body : Tea.TeaModel {
        public class Parameters : Tea.TeaModel {
            public class Calculations : Tea.TeaModel {
                public var column: String?

                public var op: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.column != nil {
                        map["Column"] = self.column!
                    }
                    if self.op != nil {
                        map["Op"] = self.op!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Column"] as? String {
                        self.column = value
                    }
                    if let value = dict["Op"] as? String {
                        self.op = value
                    }
                }
            }
            public class Filters : Tea.TeaModel {
                public class NestedFilters : Tea.TeaModel {
                    public var column: String?

                    public var op: String?

                    public var values: [String]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.column != nil {
                            map["Column"] = self.column!
                        }
                        if self.op != nil {
                            map["Op"] = self.op!
                        }
                        if self.values != nil {
                            map["Values"] = self.values!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Column"] as? String {
                            self.column = value
                        }
                        if let value = dict["Op"] as? String {
                            self.op = value
                        }
                        if let value = dict["Values"] as? [String] {
                            self.values = value
                        }
                    }
                }
                public var column: String?

                public var nestedFilterCombination: String?

                public var nestedFilters: [EventCenterQueryEventsRequest.Body.Parameters.Filters.NestedFilters]?

                public var op: String?

                public var values: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.column != nil {
                        map["Column"] = self.column!
                    }
                    if self.nestedFilterCombination != nil {
                        map["NestedFilterCombination"] = self.nestedFilterCombination!
                    }
                    if self.nestedFilters != nil {
                        var tmp : [Any] = []
                        for k in self.nestedFilters! {
                            tmp.append(k.toMap())
                        }
                        map["NestedFilters"] = tmp
                    }
                    if self.op != nil {
                        map["Op"] = self.op!
                    }
                    if self.values != nil {
                        map["Values"] = self.values!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Column"] as? String {
                        self.column = value
                    }
                    if let value = dict["NestedFilterCombination"] as? String {
                        self.nestedFilterCombination = value
                    }
                    if let value = dict["NestedFilters"] as? [Any?] {
                        var tmp : [EventCenterQueryEventsRequest.Body.Parameters.Filters.NestedFilters] = []
                        for v in value {
                            if v != nil {
                                var model = EventCenterQueryEventsRequest.Body.Parameters.Filters.NestedFilters()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.nestedFilters = tmp
                    }
                    if let value = dict["Op"] as? String {
                        self.op = value
                    }
                    if let value = dict["Values"] as? [String] {
                        self.values = value
                    }
                }
            }
            public class Orders : Tea.TeaModel {
                public var column: String?

                public var desc: Bool?

                public var op: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.column != nil {
                        map["Column"] = self.column!
                    }
                    if self.desc != nil {
                        map["Desc"] = self.desc!
                    }
                    if self.op != nil {
                        map["Op"] = self.op!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Column"] as? String {
                        self.column = value
                    }
                    if let value = dict["Desc"] as? Bool {
                        self.desc = value
                    }
                    if let value = dict["Op"] as? String {
                        self.op = value
                    }
                }
            }
            public var breakdowns: [String]?

            public var calculations: [EventCenterQueryEventsRequest.Body.Parameters.Calculations]?

            public var endTime: Int64?

            public var filterCombination: String?

            public var filters: [EventCenterQueryEventsRequest.Body.Parameters.Filters]?

            public var granularity: Int?

            public var limit: Int?

            public var offset: Int?

            public var orders: [EventCenterQueryEventsRequest.Body.Parameters.Orders]?

            public var startTime: Int64?

            public var timeRange: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.breakdowns != nil {
                    map["Breakdowns"] = self.breakdowns!
                }
                if self.calculations != nil {
                    var tmp : [Any] = []
                    for k in self.calculations! {
                        tmp.append(k.toMap())
                    }
                    map["Calculations"] = tmp
                }
                if self.endTime != nil {
                    map["EndTime"] = self.endTime!
                }
                if self.filterCombination != nil {
                    map["FilterCombination"] = self.filterCombination!
                }
                if self.filters != nil {
                    var tmp : [Any] = []
                    for k in self.filters! {
                        tmp.append(k.toMap())
                    }
                    map["Filters"] = tmp
                }
                if self.granularity != nil {
                    map["Granularity"] = self.granularity!
                }
                if self.limit != nil {
                    map["Limit"] = self.limit!
                }
                if self.offset != nil {
                    map["Offset"] = self.offset!
                }
                if self.orders != nil {
                    var tmp : [Any] = []
                    for k in self.orders! {
                        tmp.append(k.toMap())
                    }
                    map["Orders"] = tmp
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                if self.timeRange != nil {
                    map["TimeRange"] = self.timeRange!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Breakdowns"] as? [String] {
                    self.breakdowns = value
                }
                if let value = dict["Calculations"] as? [Any?] {
                    var tmp : [EventCenterQueryEventsRequest.Body.Parameters.Calculations] = []
                    for v in value {
                        if v != nil {
                            var model = EventCenterQueryEventsRequest.Body.Parameters.Calculations()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.calculations = tmp
                }
                if let value = dict["EndTime"] as? Int64 {
                    self.endTime = value
                }
                if let value = dict["FilterCombination"] as? String {
                    self.filterCombination = value
                }
                if let value = dict["Filters"] as? [Any?] {
                    var tmp : [EventCenterQueryEventsRequest.Body.Parameters.Filters] = []
                    for v in value {
                        if v != nil {
                            var model = EventCenterQueryEventsRequest.Body.Parameters.Filters()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.filters = tmp
                }
                if let value = dict["Granularity"] as? Int {
                    self.granularity = value
                }
                if let value = dict["Limit"] as? Int {
                    self.limit = value
                }
                if let value = dict["Offset"] as? Int {
                    self.offset = value
                }
                if let value = dict["Orders"] as? [Any?] {
                    var tmp : [EventCenterQueryEventsRequest.Body.Parameters.Orders] = []
                    for v in value {
                        if v != nil {
                            var model = EventCenterQueryEventsRequest.Body.Parameters.Orders()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.orders = tmp
                }
                if let value = dict["StartTime"] as? Int64 {
                    self.startTime = value
                }
                if let value = dict["TimeRange"] as? Int64 {
                    self.timeRange = value
                }
            }
        }
        public var parameters: EventCenterQueryEventsRequest.Body.Parameters?

        public var queryType: String?

        public var schemaId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.parameters?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.parameters != nil {
                map["Parameters"] = self.parameters?.toMap()
            }
            if self.queryType != nil {
                map["QueryType"] = self.queryType!
            }
            if self.schemaId != nil {
                map["SchemaId"] = self.schemaId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Parameters"] as? [String: Any?] {
                var model = EventCenterQueryEventsRequest.Body.Parameters()
                model.fromMap(value)
                self.parameters = model
            }
            if let value = dict["QueryType"] as? String {
                self.queryType = value
            }
            if let value = dict["SchemaId"] as? String {
                self.schemaId = value
            }
        }
    }
    public var body: EventCenterQueryEventsRequest.Body?

    public var busName: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.body != nil {
            map["Body"] = self.body?.toMap()
        }
        if self.busName != nil {
            map["BusName"] = self.busName!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Body"] as? [String: Any?] {
            var model = EventCenterQueryEventsRequest.Body()
            model.fromMap(value)
            self.body = model
        }
        if let value = dict["BusName"] as? String {
            self.busName = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
    }
}

public class EventCenterQueryEventsShrinkRequest : Tea.TeaModel {
    public var bodyShrink: String?

    public var busName: String?

    public var maxResults: Int32?

    public var nextToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bodyShrink != nil {
            map["Body"] = self.bodyShrink!
        }
        if self.busName != nil {
            map["BusName"] = self.busName!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Body"] as? String {
            self.bodyShrink = value
        }
        if let value = dict["BusName"] as? String {
            self.busName = value
        }
        if let value = dict["MaxResults"] as? Int32 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
    }
}

public class EventCenterQueryEventsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Table : Tea.TeaModel {
            public var rowData: [String: Any]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.rowData != nil {
                    map["RowData"] = self.rowData!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["RowData"] as? [String: Any] {
                    self.rowData = value
                }
            }
        }
        public class TimeSeries : Tea.TeaModel {
            public var rowData: [String: Any]?

            public var time: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.rowData != nil {
                    map["RowData"] = self.rowData!
                }
                if self.time != nil {
                    map["Time"] = self.time!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["RowData"] as? [String: Any] {
                    self.rowData = value
                }
                if let value = dict["Time"] as? String {
                    self.time = value
                }
            }
        }
        public var maxResults: Int32?

        public var nextToken: String?

        public var table: [EventCenterQueryEventsResponseBody.Data.Table]?

        public var timeSeries: [EventCenterQueryEventsResponseBody.Data.TimeSeries]?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.maxResults != nil {
                map["MaxResults"] = self.maxResults!
            }
            if self.nextToken != nil {
                map["NextToken"] = self.nextToken!
            }
            if self.table != nil {
                var tmp : [Any] = []
                for k in self.table! {
                    tmp.append(k.toMap())
                }
                map["Table"] = tmp
            }
            if self.timeSeries != nil {
                var tmp : [Any] = []
                for k in self.timeSeries! {
                    tmp.append(k.toMap())
                }
                map["TimeSeries"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MaxResults"] as? Int32 {
                self.maxResults = value
            }
            if let value = dict["NextToken"] as? String {
                self.nextToken = value
            }
            if let value = dict["Table"] as? [Any?] {
                var tmp : [EventCenterQueryEventsResponseBody.Data.Table] = []
                for v in value {
                    if v != nil {
                        var model = EventCenterQueryEventsResponseBody.Data.Table()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.table = tmp
            }
            if let value = dict["TimeSeries"] as? [Any?] {
                var tmp : [EventCenterQueryEventsResponseBody.Data.TimeSeries] = []
                for v in value {
                    if v != nil {
                        var model = EventCenterQueryEventsResponseBody.Data.TimeSeries()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.timeSeries = tmp
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var data: EventCenterQueryEventsResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = EventCenterQueryEventsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class EventCenterQueryEventsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: EventCenterQueryEventsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = EventCenterQueryEventsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetApiDestinationRequest : Tea.TeaModel {
    public var apiDestinationName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiDestinationName != nil {
            map["ApiDestinationName"] = self.apiDestinationName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiDestinationName"] as? String {
            self.apiDestinationName = value
        }
    }
}

public class GetApiDestinationResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class HttpApiParameters : Tea.TeaModel {
            public var endpoint: String?

            public var method: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endpoint != nil {
                    map["Endpoint"] = self.endpoint!
                }
                if self.method != nil {
                    map["Method"] = self.method!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Endpoint"] as? String {
                    self.endpoint = value
                }
                if let value = dict["Method"] as? String {
                    self.method = value
                }
            }
        }
        public var apiDestinationName: String?

        public var connectionName: String?

        public var description_: String?

        public var gmtCreate: Int64?

        public var httpApiParameters: GetApiDestinationResponseBody.Data.HttpApiParameters?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.httpApiParameters?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiDestinationName != nil {
                map["ApiDestinationName"] = self.apiDestinationName!
            }
            if self.connectionName != nil {
                map["ConnectionName"] = self.connectionName!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.gmtCreate != nil {
                map["GmtCreate"] = self.gmtCreate!
            }
            if self.httpApiParameters != nil {
                map["HttpApiParameters"] = self.httpApiParameters?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiDestinationName"] as? String {
                self.apiDestinationName = value
            }
            if let value = dict["ConnectionName"] as? String {
                self.connectionName = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["GmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["HttpApiParameters"] as? [String: Any?] {
                var model = GetApiDestinationResponseBody.Data.HttpApiParameters()
                model.fromMap(value)
                self.httpApiParameters = model
            }
        }
    }
    public var code: String?

    public var data: GetApiDestinationResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetApiDestinationResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetApiDestinationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetApiDestinationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetApiDestinationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetConnectionRequest : Tea.TeaModel {
    public var connectionName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.connectionName != nil {
            map["ConnectionName"] = self.connectionName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConnectionName"] as? String {
            self.connectionName = value
        }
    }
}

public class GetConnectionResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Connections : Tea.TeaModel {
            public class AuthParameters : Tea.TeaModel {
                public class ApiKeyAuthParameters : Tea.TeaModel {
                    public var apiKeyName: String?

                    public var apiKeyValue: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.apiKeyName != nil {
                            map["ApiKeyName"] = self.apiKeyName!
                        }
                        if self.apiKeyValue != nil {
                            map["ApiKeyValue"] = self.apiKeyValue!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ApiKeyName"] as? String {
                            self.apiKeyName = value
                        }
                        if let value = dict["ApiKeyValue"] as? String {
                            self.apiKeyValue = value
                        }
                    }
                }
                public class BasicAuthParameters : Tea.TeaModel {
                    public var password: String?

                    public var username: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.password != nil {
                            map["Password"] = self.password!
                        }
                        if self.username != nil {
                            map["Username"] = self.username!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Password"] as? String {
                            self.password = value
                        }
                        if let value = dict["Username"] as? String {
                            self.username = value
                        }
                    }
                }
                public class OAuthParameters : Tea.TeaModel {
                    public class ClientParameters : Tea.TeaModel {
                        public var clientID: String?

                        public var clientSecret: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.clientID != nil {
                                map["ClientID"] = self.clientID!
                            }
                            if self.clientSecret != nil {
                                map["ClientSecret"] = self.clientSecret!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["ClientID"] as? String {
                                self.clientID = value
                            }
                            if let value = dict["ClientSecret"] as? String {
                                self.clientSecret = value
                            }
                        }
                    }
                    public class OAuthHttpParameters : Tea.TeaModel {
                        public class BodyParameters : Tea.TeaModel {
                            public var isValueSecret: String?

                            public var key: String?

                            public var value: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.isValueSecret != nil {
                                    map["IsValueSecret"] = self.isValueSecret!
                                }
                                if self.key != nil {
                                    map["Key"] = self.key!
                                }
                                if self.value != nil {
                                    map["Value"] = self.value!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["IsValueSecret"] as? String {
                                    self.isValueSecret = value
                                }
                                if let value = dict["Key"] as? String {
                                    self.key = value
                                }
                                if let value = dict["Value"] as? String {
                                    self.value = value
                                }
                            }
                        }
                        public class HeaderParameters : Tea.TeaModel {
                            public var isValueSecret: String?

                            public var key: String?

                            public var value: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.isValueSecret != nil {
                                    map["IsValueSecret"] = self.isValueSecret!
                                }
                                if self.key != nil {
                                    map["Key"] = self.key!
                                }
                                if self.value != nil {
                                    map["Value"] = self.value!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["IsValueSecret"] as? String {
                                    self.isValueSecret = value
                                }
                                if let value = dict["Key"] as? String {
                                    self.key = value
                                }
                                if let value = dict["Value"] as? String {
                                    self.value = value
                                }
                            }
                        }
                        public class QueryStringParameters : Tea.TeaModel {
                            public var isValueSecret: String?

                            public var key: String?

                            public var value: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.isValueSecret != nil {
                                    map["IsValueSecret"] = self.isValueSecret!
                                }
                                if self.key != nil {
                                    map["Key"] = self.key!
                                }
                                if self.value != nil {
                                    map["Value"] = self.value!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["IsValueSecret"] as? String {
                                    self.isValueSecret = value
                                }
                                if let value = dict["Key"] as? String {
                                    self.key = value
                                }
                                if let value = dict["Value"] as? String {
                                    self.value = value
                                }
                            }
                        }
                        public var bodyParameters: [GetConnectionResponseBody.Data.Connections.AuthParameters.OAuthParameters.OAuthHttpParameters.BodyParameters]?

                        public var headerParameters: [GetConnectionResponseBody.Data.Connections.AuthParameters.OAuthParameters.OAuthHttpParameters.HeaderParameters]?

                        public var queryStringParameters: [GetConnectionResponseBody.Data.Connections.AuthParameters.OAuthParameters.OAuthHttpParameters.QueryStringParameters]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.bodyParameters != nil {
                                var tmp : [Any] = []
                                for k in self.bodyParameters! {
                                    tmp.append(k.toMap())
                                }
                                map["BodyParameters"] = tmp
                            }
                            if self.headerParameters != nil {
                                var tmp : [Any] = []
                                for k in self.headerParameters! {
                                    tmp.append(k.toMap())
                                }
                                map["HeaderParameters"] = tmp
                            }
                            if self.queryStringParameters != nil {
                                var tmp : [Any] = []
                                for k in self.queryStringParameters! {
                                    tmp.append(k.toMap())
                                }
                                map["QueryStringParameters"] = tmp
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["BodyParameters"] as? [Any?] {
                                var tmp : [GetConnectionResponseBody.Data.Connections.AuthParameters.OAuthParameters.OAuthHttpParameters.BodyParameters] = []
                                for v in value {
                                    if v != nil {
                                        var model = GetConnectionResponseBody.Data.Connections.AuthParameters.OAuthParameters.OAuthHttpParameters.BodyParameters()
                                        if v != nil {
                                            model.fromMap(v as? [String: Any?])
                                        }
                                        tmp.append(model)
                                    }
                                }
                                self.bodyParameters = tmp
                            }
                            if let value = dict["HeaderParameters"] as? [Any?] {
                                var tmp : [GetConnectionResponseBody.Data.Connections.AuthParameters.OAuthParameters.OAuthHttpParameters.HeaderParameters] = []
                                for v in value {
                                    if v != nil {
                                        var model = GetConnectionResponseBody.Data.Connections.AuthParameters.OAuthParameters.OAuthHttpParameters.HeaderParameters()
                                        if v != nil {
                                            model.fromMap(v as? [String: Any?])
                                        }
                                        tmp.append(model)
                                    }
                                }
                                self.headerParameters = tmp
                            }
                            if let value = dict["QueryStringParameters"] as? [Any?] {
                                var tmp : [GetConnectionResponseBody.Data.Connections.AuthParameters.OAuthParameters.OAuthHttpParameters.QueryStringParameters] = []
                                for v in value {
                                    if v != nil {
                                        var model = GetConnectionResponseBody.Data.Connections.AuthParameters.OAuthParameters.OAuthHttpParameters.QueryStringParameters()
                                        if v != nil {
                                            model.fromMap(v as? [String: Any?])
                                        }
                                        tmp.append(model)
                                    }
                                }
                                self.queryStringParameters = tmp
                            }
                        }
                    }
                    public var authorizationEndpoint: String?

                    public var clientParameters: GetConnectionResponseBody.Data.Connections.AuthParameters.OAuthParameters.ClientParameters?

                    public var httpMethod: String?

                    public var OAuthHttpParameters: GetConnectionResponseBody.Data.Connections.AuthParameters.OAuthParameters.OAuthHttpParameters?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.clientParameters?.validate()
                        try self.OAuthHttpParameters?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.authorizationEndpoint != nil {
                            map["AuthorizationEndpoint"] = self.authorizationEndpoint!
                        }
                        if self.clientParameters != nil {
                            map["ClientParameters"] = self.clientParameters?.toMap()
                        }
                        if self.httpMethod != nil {
                            map["HttpMethod"] = self.httpMethod!
                        }
                        if self.OAuthHttpParameters != nil {
                            map["OAuthHttpParameters"] = self.OAuthHttpParameters?.toMap()
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["AuthorizationEndpoint"] as? String {
                            self.authorizationEndpoint = value
                        }
                        if let value = dict["ClientParameters"] as? [String: Any?] {
                            var model = GetConnectionResponseBody.Data.Connections.AuthParameters.OAuthParameters.ClientParameters()
                            model.fromMap(value)
                            self.clientParameters = model
                        }
                        if let value = dict["HttpMethod"] as? String {
                            self.httpMethod = value
                        }
                        if let value = dict["OAuthHttpParameters"] as? [String: Any?] {
                            var model = GetConnectionResponseBody.Data.Connections.AuthParameters.OAuthParameters.OAuthHttpParameters()
                            model.fromMap(value)
                            self.OAuthHttpParameters = model
                        }
                    }
                }
                public var apiKeyAuthParameters: GetConnectionResponseBody.Data.Connections.AuthParameters.ApiKeyAuthParameters?

                public var authorizationType: String?

                public var basicAuthParameters: GetConnectionResponseBody.Data.Connections.AuthParameters.BasicAuthParameters?

                public var OAuthParameters: GetConnectionResponseBody.Data.Connections.AuthParameters.OAuthParameters?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.apiKeyAuthParameters?.validate()
                    try self.basicAuthParameters?.validate()
                    try self.OAuthParameters?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.apiKeyAuthParameters != nil {
                        map["ApiKeyAuthParameters"] = self.apiKeyAuthParameters?.toMap()
                    }
                    if self.authorizationType != nil {
                        map["AuthorizationType"] = self.authorizationType!
                    }
                    if self.basicAuthParameters != nil {
                        map["BasicAuthParameters"] = self.basicAuthParameters?.toMap()
                    }
                    if self.OAuthParameters != nil {
                        map["OAuthParameters"] = self.OAuthParameters?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ApiKeyAuthParameters"] as? [String: Any?] {
                        var model = GetConnectionResponseBody.Data.Connections.AuthParameters.ApiKeyAuthParameters()
                        model.fromMap(value)
                        self.apiKeyAuthParameters = model
                    }
                    if let value = dict["AuthorizationType"] as? String {
                        self.authorizationType = value
                    }
                    if let value = dict["BasicAuthParameters"] as? [String: Any?] {
                        var model = GetConnectionResponseBody.Data.Connections.AuthParameters.BasicAuthParameters()
                        model.fromMap(value)
                        self.basicAuthParameters = model
                    }
                    if let value = dict["OAuthParameters"] as? [String: Any?] {
                        var model = GetConnectionResponseBody.Data.Connections.AuthParameters.OAuthParameters()
                        model.fromMap(value)
                        self.OAuthParameters = model
                    }
                }
            }
            public class NetworkParameters : Tea.TeaModel {
                public var networkType: String?

                public var securityGroupId: String?

                public var vpcId: String?

                public var vswitcheId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.networkType != nil {
                        map["NetworkType"] = self.networkType!
                    }
                    if self.securityGroupId != nil {
                        map["SecurityGroupId"] = self.securityGroupId!
                    }
                    if self.vpcId != nil {
                        map["VpcId"] = self.vpcId!
                    }
                    if self.vswitcheId != nil {
                        map["VswitcheId"] = self.vswitcheId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["NetworkType"] as? String {
                        self.networkType = value
                    }
                    if let value = dict["SecurityGroupId"] as? String {
                        self.securityGroupId = value
                    }
                    if let value = dict["VpcId"] as? String {
                        self.vpcId = value
                    }
                    if let value = dict["VswitcheId"] as? String {
                        self.vswitcheId = value
                    }
                }
            }
            public var authParameters: GetConnectionResponseBody.Data.Connections.AuthParameters?

            public var connectionName: String?

            public var description_: String?

            public var gmtCreate: Int64?

            public var id: Int64?

            public var networkParameters: GetConnectionResponseBody.Data.Connections.NetworkParameters?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.authParameters?.validate()
                try self.networkParameters?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.authParameters != nil {
                    map["AuthParameters"] = self.authParameters?.toMap()
                }
                if self.connectionName != nil {
                    map["ConnectionName"] = self.connectionName!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.networkParameters != nil {
                    map["NetworkParameters"] = self.networkParameters?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AuthParameters"] as? [String: Any?] {
                    var model = GetConnectionResponseBody.Data.Connections.AuthParameters()
                    model.fromMap(value)
                    self.authParameters = model
                }
                if let value = dict["ConnectionName"] as? String {
                    self.connectionName = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["GmtCreate"] as? Int64 {
                    self.gmtCreate = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["NetworkParameters"] as? [String: Any?] {
                    var model = GetConnectionResponseBody.Data.Connections.NetworkParameters()
                    model.fromMap(value)
                    self.networkParameters = model
                }
            }
        }
        public var connections: [GetConnectionResponseBody.Data.Connections]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.connections != nil {
                var tmp : [Any] = []
                for k in self.connections! {
                    tmp.append(k.toMap())
                }
                map["Connections"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Connections"] as? [Any?] {
                var tmp : [GetConnectionResponseBody.Data.Connections] = []
                for v in value {
                    if v != nil {
                        var model = GetConnectionResponseBody.Data.Connections()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.connections = tmp
            }
        }
    }
    public var code: String?

    public var data: GetConnectionResponseBody.Data?

    public var httpCode: Int32?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpCode != nil {
            map["HttpCode"] = self.httpCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetConnectionResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpCode"] as? Int32 {
            self.httpCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class GetConnectionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetConnectionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetConnectionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetEventBusRequest : Tea.TeaModel {
    public var eventBusName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eventBusName != nil {
            map["EventBusName"] = self.eventBusName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EventBusName"] as? String {
            self.eventBusName = value
        }
    }
}

public class GetEventBusResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var createTimestamp: Int64?

        public var description_: String?

        public var eventBusARN: String?

        public var eventBusName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTimestamp != nil {
                map["CreateTimestamp"] = self.createTimestamp!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.eventBusARN != nil {
                map["EventBusARN"] = self.eventBusARN!
            }
            if self.eventBusName != nil {
                map["EventBusName"] = self.eventBusName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTimestamp"] as? Int64 {
                self.createTimestamp = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["EventBusARN"] as? String {
                self.eventBusARN = value
            }
            if let value = dict["EventBusName"] as? String {
                self.eventBusName = value
            }
        }
    }
    public var code: String?

    public var data: GetEventBusResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetEventBusResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetEventBusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetEventBusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetEventBusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetEventStreamingRequest : Tea.TeaModel {
    public var eventStreamingName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eventStreamingName != nil {
            map["EventStreamingName"] = self.eventStreamingName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EventStreamingName"] as? String {
            self.eventStreamingName = value
        }
    }
}

public class GetEventStreamingResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class DetailedStatus : Tea.TeaModel {
            public var delayTime: Int64?

            public var diffOffset: Int64?

            public var extensions: [String: Any]?

            public var TPS: Double?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.delayTime != nil {
                    map["DelayTime"] = self.delayTime!
                }
                if self.diffOffset != nil {
                    map["DiffOffset"] = self.diffOffset!
                }
                if self.extensions != nil {
                    map["Extensions"] = self.extensions!
                }
                if self.TPS != nil {
                    map["TPS"] = self.TPS!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DelayTime"] as? Int64 {
                    self.delayTime = value
                }
                if let value = dict["DiffOffset"] as? Int64 {
                    self.diffOffset = value
                }
                if let value = dict["Extensions"] as? [String: Any] {
                    self.extensions = value
                }
                if let value = dict["TPS"] as? Double {
                    self.TPS = value
                }
            }
        }
        public class RunOptions : Tea.TeaModel {
            public class BatchWindow : Tea.TeaModel {
                public var countBasedWindow: Int32?

                public var timeBasedWindow: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.countBasedWindow != nil {
                        map["CountBasedWindow"] = self.countBasedWindow!
                    }
                    if self.timeBasedWindow != nil {
                        map["TimeBasedWindow"] = self.timeBasedWindow!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CountBasedWindow"] as? Int32 {
                        self.countBasedWindow = value
                    }
                    if let value = dict["TimeBasedWindow"] as? Int32 {
                        self.timeBasedWindow = value
                    }
                }
            }
            public class BusinessOption : Tea.TeaModel {
                public var businessMode: String?

                public var maxCapacityUnitCount: Int64?

                public var minCapacityUnitCount: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.businessMode != nil {
                        map["BusinessMode"] = self.businessMode!
                    }
                    if self.maxCapacityUnitCount != nil {
                        map["MaxCapacityUnitCount"] = self.maxCapacityUnitCount!
                    }
                    if self.minCapacityUnitCount != nil {
                        map["MinCapacityUnitCount"] = self.minCapacityUnitCount!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["BusinessMode"] as? String {
                        self.businessMode = value
                    }
                    if let value = dict["MaxCapacityUnitCount"] as? Int64 {
                        self.maxCapacityUnitCount = value
                    }
                    if let value = dict["MinCapacityUnitCount"] as? Int64 {
                        self.minCapacityUnitCount = value
                    }
                }
            }
            public class DeadLetterQueue : Tea.TeaModel {
                public var arn: String?

                public var network: String?

                public var securityGroupId: String?

                public var vSwitchIds: String?

                public var vpcId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.arn != nil {
                        map["Arn"] = self.arn!
                    }
                    if self.network != nil {
                        map["Network"] = self.network!
                    }
                    if self.securityGroupId != nil {
                        map["SecurityGroupId"] = self.securityGroupId!
                    }
                    if self.vSwitchIds != nil {
                        map["VSwitchIds"] = self.vSwitchIds!
                    }
                    if self.vpcId != nil {
                        map["VpcId"] = self.vpcId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Arn"] as? String {
                        self.arn = value
                    }
                    if let value = dict["Network"] as? String {
                        self.network = value
                    }
                    if let value = dict["SecurityGroupId"] as? String {
                        self.securityGroupId = value
                    }
                    if let value = dict["VSwitchIds"] as? String {
                        self.vSwitchIds = value
                    }
                    if let value = dict["VpcId"] as? String {
                        self.vpcId = value
                    }
                }
            }
            public class RetryStrategy : Tea.TeaModel {
                public var maximumEventAgeInSeconds: Double?

                public var maximumRetryAttempts: Double?

                public var pushRetryStrategy: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.maximumEventAgeInSeconds != nil {
                        map["MaximumEventAgeInSeconds"] = self.maximumEventAgeInSeconds!
                    }
                    if self.maximumRetryAttempts != nil {
                        map["MaximumRetryAttempts"] = self.maximumRetryAttempts!
                    }
                    if self.pushRetryStrategy != nil {
                        map["PushRetryStrategy"] = self.pushRetryStrategy!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["MaximumEventAgeInSeconds"] as? Double {
                        self.maximumEventAgeInSeconds = value
                    }
                    if let value = dict["MaximumRetryAttempts"] as? Double {
                        self.maximumRetryAttempts = value
                    }
                    if let value = dict["PushRetryStrategy"] as? String {
                        self.pushRetryStrategy = value
                    }
                }
            }
            public var batchWindow: GetEventStreamingResponseBody.Data.RunOptions.BatchWindow?

            public var businessOption: GetEventStreamingResponseBody.Data.RunOptions.BusinessOption?

            public var deadLetterQueue: GetEventStreamingResponseBody.Data.RunOptions.DeadLetterQueue?

            public var errorsTolerance: String?

            public var maximumTasks: Int32?

            public var retryStrategy: GetEventStreamingResponseBody.Data.RunOptions.RetryStrategy?

            public var throttling: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.batchWindow?.validate()
                try self.businessOption?.validate()
                try self.deadLetterQueue?.validate()
                try self.retryStrategy?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.batchWindow != nil {
                    map["BatchWindow"] = self.batchWindow?.toMap()
                }
                if self.businessOption != nil {
                    map["BusinessOption"] = self.businessOption?.toMap()
                }
                if self.deadLetterQueue != nil {
                    map["DeadLetterQueue"] = self.deadLetterQueue?.toMap()
                }
                if self.errorsTolerance != nil {
                    map["ErrorsTolerance"] = self.errorsTolerance!
                }
                if self.maximumTasks != nil {
                    map["MaximumTasks"] = self.maximumTasks!
                }
                if self.retryStrategy != nil {
                    map["RetryStrategy"] = self.retryStrategy?.toMap()
                }
                if self.throttling != nil {
                    map["Throttling"] = self.throttling!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BatchWindow"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.RunOptions.BatchWindow()
                    model.fromMap(value)
                    self.batchWindow = model
                }
                if let value = dict["BusinessOption"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.RunOptions.BusinessOption()
                    model.fromMap(value)
                    self.businessOption = model
                }
                if let value = dict["DeadLetterQueue"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.RunOptions.DeadLetterQueue()
                    model.fromMap(value)
                    self.deadLetterQueue = model
                }
                if let value = dict["ErrorsTolerance"] as? String {
                    self.errorsTolerance = value
                }
                if let value = dict["MaximumTasks"] as? Int32 {
                    self.maximumTasks = value
                }
                if let value = dict["RetryStrategy"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.RunOptions.RetryStrategy()
                    model.fromMap(value)
                    self.retryStrategy = model
                }
                if let value = dict["Throttling"] as? Int32 {
                    self.throttling = value
                }
            }
        }
        public class Sink : Tea.TeaModel {
            public class SinkApacheRocketMQCheckpointParameters : Tea.TeaModel {
                public class ConsumeTimestamp : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class Group : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class Topic : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var consumeTimestamp: GetEventStreamingResponseBody.Data.Sink.SinkApacheRocketMQCheckpointParameters.ConsumeTimestamp?

                public var group: GetEventStreamingResponseBody.Data.Sink.SinkApacheRocketMQCheckpointParameters.Group?

                public var instanceEndpoint: String?

                public var instancePassword: String?

                public var instanceUsername: String?

                public var networkType: String?

                public var securityGroupId: String?

                public var topic: GetEventStreamingResponseBody.Data.Sink.SinkApacheRocketMQCheckpointParameters.Topic?

                public var vSwitchId: String?

                public var vpcId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.consumeTimestamp?.validate()
                    try self.group?.validate()
                    try self.topic?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.consumeTimestamp != nil {
                        map["ConsumeTimestamp"] = self.consumeTimestamp?.toMap()
                    }
                    if self.group != nil {
                        map["Group"] = self.group?.toMap()
                    }
                    if self.instanceEndpoint != nil {
                        map["InstanceEndpoint"] = self.instanceEndpoint!
                    }
                    if self.instancePassword != nil {
                        map["InstancePassword"] = self.instancePassword!
                    }
                    if self.instanceUsername != nil {
                        map["InstanceUsername"] = self.instanceUsername!
                    }
                    if self.networkType != nil {
                        map["NetworkType"] = self.networkType!
                    }
                    if self.securityGroupId != nil {
                        map["SecurityGroupId"] = self.securityGroupId!
                    }
                    if self.topic != nil {
                        map["Topic"] = self.topic?.toMap()
                    }
                    if self.vSwitchId != nil {
                        map["VSwitchId"] = self.vSwitchId!
                    }
                    if self.vpcId != nil {
                        map["VpcId"] = self.vpcId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ConsumeTimestamp"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkApacheRocketMQCheckpointParameters.ConsumeTimestamp()
                        model.fromMap(value)
                        self.consumeTimestamp = model
                    }
                    if let value = dict["Group"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkApacheRocketMQCheckpointParameters.Group()
                        model.fromMap(value)
                        self.group = model
                    }
                    if let value = dict["InstanceEndpoint"] as? String {
                        self.instanceEndpoint = value
                    }
                    if let value = dict["InstancePassword"] as? String {
                        self.instancePassword = value
                    }
                    if let value = dict["InstanceUsername"] as? String {
                        self.instanceUsername = value
                    }
                    if let value = dict["NetworkType"] as? String {
                        self.networkType = value
                    }
                    if let value = dict["SecurityGroupId"] as? String {
                        self.securityGroupId = value
                    }
                    if let value = dict["Topic"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkApacheRocketMQCheckpointParameters.Topic()
                        model.fromMap(value)
                        self.topic = model
                    }
                    if let value = dict["VSwitchId"] as? String {
                        self.vSwitchId = value
                    }
                    if let value = dict["VpcId"] as? String {
                        self.vpcId = value
                    }
                }
            }
            public class SinkCustomizedKafkaConnectorParameters : Tea.TeaModel {
                public class ConnectorParameters : Tea.TeaModel {
                    public var config: [String: Any]?

                    public var name: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.config != nil {
                            map["Config"] = self.config!
                        }
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Config"] as? [String: Any] {
                            self.config = value
                        }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                    }
                }
                public var connectorPackageUrl: String?

                public var connectorParameters: GetEventStreamingResponseBody.Data.Sink.SinkCustomizedKafkaConnectorParameters.ConnectorParameters?

                public var workerParameters: [String: Any]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.connectorParameters?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.connectorPackageUrl != nil {
                        map["ConnectorPackageUrl"] = self.connectorPackageUrl!
                    }
                    if self.connectorParameters != nil {
                        map["ConnectorParameters"] = self.connectorParameters?.toMap()
                    }
                    if self.workerParameters != nil {
                        map["WorkerParameters"] = self.workerParameters!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ConnectorPackageUrl"] as? String {
                        self.connectorPackageUrl = value
                    }
                    if let value = dict["ConnectorParameters"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkCustomizedKafkaConnectorParameters.ConnectorParameters()
                        model.fromMap(value)
                        self.connectorParameters = model
                    }
                    if let value = dict["WorkerParameters"] as? [String: Any] {
                        self.workerParameters = value
                    }
                }
            }
            public class SinkCustomizedKafkaParameters : Tea.TeaModel {
                public var instanceId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["InstanceId"] as? String {
                        self.instanceId = value
                    }
                }
            }
            public class SinkDashVectorParameters : Tea.TeaModel {
                public class DashVectorSchemaParameters : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class Partition : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class PrimaryKeyId : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class Vector : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var apiKey: String?

                public var collection: String?

                public var dashVectorSchemaParameters: GetEventStreamingResponseBody.Data.Sink.SinkDashVectorParameters.DashVectorSchemaParameters?

                public var instanceId: String?

                public var network: String?

                public var operation: String?

                public var partition: GetEventStreamingResponseBody.Data.Sink.SinkDashVectorParameters.Partition?

                public var primaryKeyId: GetEventStreamingResponseBody.Data.Sink.SinkDashVectorParameters.PrimaryKeyId?

                public var vector: GetEventStreamingResponseBody.Data.Sink.SinkDashVectorParameters.Vector?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.dashVectorSchemaParameters?.validate()
                    try self.partition?.validate()
                    try self.primaryKeyId?.validate()
                    try self.vector?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.apiKey != nil {
                        map["ApiKey"] = self.apiKey!
                    }
                    if self.collection != nil {
                        map["Collection"] = self.collection!
                    }
                    if self.dashVectorSchemaParameters != nil {
                        map["DashVectorSchemaParameters"] = self.dashVectorSchemaParameters?.toMap()
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.network != nil {
                        map["Network"] = self.network!
                    }
                    if self.operation != nil {
                        map["Operation"] = self.operation!
                    }
                    if self.partition != nil {
                        map["Partition"] = self.partition?.toMap()
                    }
                    if self.primaryKeyId != nil {
                        map["PrimaryKeyId"] = self.primaryKeyId?.toMap()
                    }
                    if self.vector != nil {
                        map["Vector"] = self.vector?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ApiKey"] as? String {
                        self.apiKey = value
                    }
                    if let value = dict["Collection"] as? String {
                        self.collection = value
                    }
                    if let value = dict["DashVectorSchemaParameters"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkDashVectorParameters.DashVectorSchemaParameters()
                        model.fromMap(value)
                        self.dashVectorSchemaParameters = model
                    }
                    if let value = dict["InstanceId"] as? String {
                        self.instanceId = value
                    }
                    if let value = dict["Network"] as? String {
                        self.network = value
                    }
                    if let value = dict["Operation"] as? String {
                        self.operation = value
                    }
                    if let value = dict["Partition"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkDashVectorParameters.Partition()
                        model.fromMap(value)
                        self.partition = model
                    }
                    if let value = dict["PrimaryKeyId"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkDashVectorParameters.PrimaryKeyId()
                        model.fromMap(value)
                        self.primaryKeyId = model
                    }
                    if let value = dict["Vector"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkDashVectorParameters.Vector()
                        model.fromMap(value)
                        self.vector = model
                    }
                }
            }
            public class SinkDataHubParameters : Tea.TeaModel {
                public class Body : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class Project : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class RoleName : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class Topic : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class TopicSchema : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class TopicType : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var body: GetEventStreamingResponseBody.Data.Sink.SinkDataHubParameters.Body?

                public var project: GetEventStreamingResponseBody.Data.Sink.SinkDataHubParameters.Project?

                public var roleName: GetEventStreamingResponseBody.Data.Sink.SinkDataHubParameters.RoleName?

                public var topic: GetEventStreamingResponseBody.Data.Sink.SinkDataHubParameters.Topic?

                public var topicSchema: GetEventStreamingResponseBody.Data.Sink.SinkDataHubParameters.TopicSchema?

                public var topicType: GetEventStreamingResponseBody.Data.Sink.SinkDataHubParameters.TopicType?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.body?.validate()
                    try self.project?.validate()
                    try self.roleName?.validate()
                    try self.topic?.validate()
                    try self.topicSchema?.validate()
                    try self.topicType?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.body != nil {
                        map["Body"] = self.body?.toMap()
                    }
                    if self.project != nil {
                        map["Project"] = self.project?.toMap()
                    }
                    if self.roleName != nil {
                        map["RoleName"] = self.roleName?.toMap()
                    }
                    if self.topic != nil {
                        map["Topic"] = self.topic?.toMap()
                    }
                    if self.topicSchema != nil {
                        map["TopicSchema"] = self.topicSchema?.toMap()
                    }
                    if self.topicType != nil {
                        map["TopicType"] = self.topicType?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Body"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkDataHubParameters.Body()
                        model.fromMap(value)
                        self.body = model
                    }
                    if let value = dict["Project"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkDataHubParameters.Project()
                        model.fromMap(value)
                        self.project = model
                    }
                    if let value = dict["RoleName"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkDataHubParameters.RoleName()
                        model.fromMap(value)
                        self.roleName = model
                    }
                    if let value = dict["Topic"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkDataHubParameters.Topic()
                        model.fromMap(value)
                        self.topic = model
                    }
                    if let value = dict["TopicSchema"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkDataHubParameters.TopicSchema()
                        model.fromMap(value)
                        self.topicSchema = model
                    }
                    if let value = dict["TopicType"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkDataHubParameters.TopicType()
                        model.fromMap(value)
                        self.topicType = model
                    }
                }
            }
            public class SinkDorisParameters : Tea.TeaModel {
                public class BeHttpEndpoint : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class Body : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class Database : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class FeHttpEndpoint : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class NetworkType : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class Password : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class QueryEndpoint : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class SecurityGroupId : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class Table : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class UserName : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class VSwitchIds : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class VpcId : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var beHttpEndpoint: GetEventStreamingResponseBody.Data.Sink.SinkDorisParameters.BeHttpEndpoint?

                public var body: GetEventStreamingResponseBody.Data.Sink.SinkDorisParameters.Body?

                public var database: GetEventStreamingResponseBody.Data.Sink.SinkDorisParameters.Database?

                public var feHttpEndpoint: GetEventStreamingResponseBody.Data.Sink.SinkDorisParameters.FeHttpEndpoint?

                public var networkType: GetEventStreamingResponseBody.Data.Sink.SinkDorisParameters.NetworkType?

                public var password: GetEventStreamingResponseBody.Data.Sink.SinkDorisParameters.Password?

                public var queryEndpoint: GetEventStreamingResponseBody.Data.Sink.SinkDorisParameters.QueryEndpoint?

                public var securityGroupId: GetEventStreamingResponseBody.Data.Sink.SinkDorisParameters.SecurityGroupId?

                public var table: GetEventStreamingResponseBody.Data.Sink.SinkDorisParameters.Table?

                public var userName: GetEventStreamingResponseBody.Data.Sink.SinkDorisParameters.UserName?

                public var vSwitchIds: GetEventStreamingResponseBody.Data.Sink.SinkDorisParameters.VSwitchIds?

                public var vpcId: GetEventStreamingResponseBody.Data.Sink.SinkDorisParameters.VpcId?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.beHttpEndpoint?.validate()
                    try self.body?.validate()
                    try self.database?.validate()
                    try self.feHttpEndpoint?.validate()
                    try self.networkType?.validate()
                    try self.password?.validate()
                    try self.queryEndpoint?.validate()
                    try self.securityGroupId?.validate()
                    try self.table?.validate()
                    try self.userName?.validate()
                    try self.vSwitchIds?.validate()
                    try self.vpcId?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.beHttpEndpoint != nil {
                        map["BeHttpEndpoint"] = self.beHttpEndpoint?.toMap()
                    }
                    if self.body != nil {
                        map["Body"] = self.body?.toMap()
                    }
                    if self.database != nil {
                        map["Database"] = self.database?.toMap()
                    }
                    if self.feHttpEndpoint != nil {
                        map["FeHttpEndpoint"] = self.feHttpEndpoint?.toMap()
                    }
                    if self.networkType != nil {
                        map["NetworkType"] = self.networkType?.toMap()
                    }
                    if self.password != nil {
                        map["Password"] = self.password?.toMap()
                    }
                    if self.queryEndpoint != nil {
                        map["QueryEndpoint"] = self.queryEndpoint?.toMap()
                    }
                    if self.securityGroupId != nil {
                        map["SecurityGroupId"] = self.securityGroupId?.toMap()
                    }
                    if self.table != nil {
                        map["Table"] = self.table?.toMap()
                    }
                    if self.userName != nil {
                        map["UserName"] = self.userName?.toMap()
                    }
                    if self.vSwitchIds != nil {
                        map["VSwitchIds"] = self.vSwitchIds?.toMap()
                    }
                    if self.vpcId != nil {
                        map["VpcId"] = self.vpcId?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["BeHttpEndpoint"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkDorisParameters.BeHttpEndpoint()
                        model.fromMap(value)
                        self.beHttpEndpoint = model
                    }
                    if let value = dict["Body"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkDorisParameters.Body()
                        model.fromMap(value)
                        self.body = model
                    }
                    if let value = dict["Database"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkDorisParameters.Database()
                        model.fromMap(value)
                        self.database = model
                    }
                    if let value = dict["FeHttpEndpoint"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkDorisParameters.FeHttpEndpoint()
                        model.fromMap(value)
                        self.feHttpEndpoint = model
                    }
                    if let value = dict["NetworkType"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkDorisParameters.NetworkType()
                        model.fromMap(value)
                        self.networkType = model
                    }
                    if let value = dict["Password"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkDorisParameters.Password()
                        model.fromMap(value)
                        self.password = model
                    }
                    if let value = dict["QueryEndpoint"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkDorisParameters.QueryEndpoint()
                        model.fromMap(value)
                        self.queryEndpoint = model
                    }
                    if let value = dict["SecurityGroupId"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkDorisParameters.SecurityGroupId()
                        model.fromMap(value)
                        self.securityGroupId = model
                    }
                    if let value = dict["Table"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkDorisParameters.Table()
                        model.fromMap(value)
                        self.table = model
                    }
                    if let value = dict["UserName"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkDorisParameters.UserName()
                        model.fromMap(value)
                        self.userName = model
                    }
                    if let value = dict["VSwitchIds"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkDorisParameters.VSwitchIds()
                        model.fromMap(value)
                        self.vSwitchIds = model
                    }
                    if let value = dict["VpcId"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkDorisParameters.VpcId()
                        model.fromMap(value)
                        self.vpcId = model
                    }
                }
            }
            public class SinkFcParameters : Tea.TeaModel {
                public class Body : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class Concurrency : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class DataFormat : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class FunctionName : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class InvocationType : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class Qualifier : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class ServiceName : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var body: GetEventStreamingResponseBody.Data.Sink.SinkFcParameters.Body?

                public var concurrency: GetEventStreamingResponseBody.Data.Sink.SinkFcParameters.Concurrency?

                public var dataFormat: GetEventStreamingResponseBody.Data.Sink.SinkFcParameters.DataFormat?

                public var functionName: GetEventStreamingResponseBody.Data.Sink.SinkFcParameters.FunctionName?

                public var invocationType: GetEventStreamingResponseBody.Data.Sink.SinkFcParameters.InvocationType?

                public var qualifier: GetEventStreamingResponseBody.Data.Sink.SinkFcParameters.Qualifier?

                public var serviceName: GetEventStreamingResponseBody.Data.Sink.SinkFcParameters.ServiceName?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.body?.validate()
                    try self.concurrency?.validate()
                    try self.dataFormat?.validate()
                    try self.functionName?.validate()
                    try self.invocationType?.validate()
                    try self.qualifier?.validate()
                    try self.serviceName?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.body != nil {
                        map["Body"] = self.body?.toMap()
                    }
                    if self.concurrency != nil {
                        map["Concurrency"] = self.concurrency?.toMap()
                    }
                    if self.dataFormat != nil {
                        map["DataFormat"] = self.dataFormat?.toMap()
                    }
                    if self.functionName != nil {
                        map["FunctionName"] = self.functionName?.toMap()
                    }
                    if self.invocationType != nil {
                        map["InvocationType"] = self.invocationType?.toMap()
                    }
                    if self.qualifier != nil {
                        map["Qualifier"] = self.qualifier?.toMap()
                    }
                    if self.serviceName != nil {
                        map["ServiceName"] = self.serviceName?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Body"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkFcParameters.Body()
                        model.fromMap(value)
                        self.body = model
                    }
                    if let value = dict["Concurrency"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkFcParameters.Concurrency()
                        model.fromMap(value)
                        self.concurrency = model
                    }
                    if let value = dict["DataFormat"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkFcParameters.DataFormat()
                        model.fromMap(value)
                        self.dataFormat = model
                    }
                    if let value = dict["FunctionName"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkFcParameters.FunctionName()
                        model.fromMap(value)
                        self.functionName = model
                    }
                    if let value = dict["InvocationType"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkFcParameters.InvocationType()
                        model.fromMap(value)
                        self.invocationType = model
                    }
                    if let value = dict["Qualifier"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkFcParameters.Qualifier()
                        model.fromMap(value)
                        self.qualifier = model
                    }
                    if let value = dict["ServiceName"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkFcParameters.ServiceName()
                        model.fromMap(value)
                        self.serviceName = model
                    }
                }
            }
            public class SinkFnfParameters : Tea.TeaModel {
                public class ExecutionName : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class FlowName : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class Input : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class RoleName : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var executionName: GetEventStreamingResponseBody.Data.Sink.SinkFnfParameters.ExecutionName?

                public var flowName: GetEventStreamingResponseBody.Data.Sink.SinkFnfParameters.FlowName?

                public var input: GetEventStreamingResponseBody.Data.Sink.SinkFnfParameters.Input?

                public var roleName: GetEventStreamingResponseBody.Data.Sink.SinkFnfParameters.RoleName?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.executionName?.validate()
                    try self.flowName?.validate()
                    try self.input?.validate()
                    try self.roleName?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.executionName != nil {
                        map["ExecutionName"] = self.executionName?.toMap()
                    }
                    if self.flowName != nil {
                        map["FlowName"] = self.flowName?.toMap()
                    }
                    if self.input != nil {
                        map["Input"] = self.input?.toMap()
                    }
                    if self.roleName != nil {
                        map["RoleName"] = self.roleName?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ExecutionName"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkFnfParameters.ExecutionName()
                        model.fromMap(value)
                        self.executionName = model
                    }
                    if let value = dict["FlowName"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkFnfParameters.FlowName()
                        model.fromMap(value)
                        self.flowName = model
                    }
                    if let value = dict["Input"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkFnfParameters.Input()
                        model.fromMap(value)
                        self.input = model
                    }
                    if let value = dict["RoleName"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkFnfParameters.RoleName()
                        model.fromMap(value)
                        self.roleName = model
                    }
                }
            }
            public class SinkKafkaParameters : Tea.TeaModel {
                public class Acks : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class Headers : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class InstanceId : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class Key : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class Topic : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class Value : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var acks: GetEventStreamingResponseBody.Data.Sink.SinkKafkaParameters.Acks?

                public var headers: GetEventStreamingResponseBody.Data.Sink.SinkKafkaParameters.Headers?

                public var instanceId: GetEventStreamingResponseBody.Data.Sink.SinkKafkaParameters.InstanceId?

                public var key: GetEventStreamingResponseBody.Data.Sink.SinkKafkaParameters.Key?

                public var topic: GetEventStreamingResponseBody.Data.Sink.SinkKafkaParameters.Topic?

                public var value: GetEventStreamingResponseBody.Data.Sink.SinkKafkaParameters.Value?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.acks?.validate()
                    try self.headers?.validate()
                    try self.instanceId?.validate()
                    try self.key?.validate()
                    try self.topic?.validate()
                    try self.value?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.acks != nil {
                        map["Acks"] = self.acks?.toMap()
                    }
                    if self.headers != nil {
                        map["Headers"] = self.headers?.toMap()
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId?.toMap()
                    }
                    if self.key != nil {
                        map["Key"] = self.key?.toMap()
                    }
                    if self.topic != nil {
                        map["Topic"] = self.topic?.toMap()
                    }
                    if self.value != nil {
                        map["Value"] = self.value?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Acks"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkKafkaParameters.Acks()
                        model.fromMap(value)
                        self.acks = model
                    }
                    if let value = dict["Headers"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkKafkaParameters.Headers()
                        model.fromMap(value)
                        self.headers = model
                    }
                    if let value = dict["InstanceId"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkKafkaParameters.InstanceId()
                        model.fromMap(value)
                        self.instanceId = model
                    }
                    if let value = dict["Key"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkKafkaParameters.Key()
                        model.fromMap(value)
                        self.key = model
                    }
                    if let value = dict["Topic"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkKafkaParameters.Topic()
                        model.fromMap(value)
                        self.topic = model
                    }
                    if let value = dict["Value"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkKafkaParameters.Value()
                        model.fromMap(value)
                        self.value = model
                    }
                }
            }
            public class SinkMNSParameters : Tea.TeaModel {
                public class Body : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class IsBase64Encode : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class QueueName : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var body: GetEventStreamingResponseBody.Data.Sink.SinkMNSParameters.Body?

                public var isBase64Encode: GetEventStreamingResponseBody.Data.Sink.SinkMNSParameters.IsBase64Encode?

                public var queueName: GetEventStreamingResponseBody.Data.Sink.SinkMNSParameters.QueueName?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.body?.validate()
                    try self.isBase64Encode?.validate()
                    try self.queueName?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.body != nil {
                        map["Body"] = self.body?.toMap()
                    }
                    if self.isBase64Encode != nil {
                        map["IsBase64Encode"] = self.isBase64Encode?.toMap()
                    }
                    if self.queueName != nil {
                        map["QueueName"] = self.queueName?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Body"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkMNSParameters.Body()
                        model.fromMap(value)
                        self.body = model
                    }
                    if let value = dict["IsBase64Encode"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkMNSParameters.IsBase64Encode()
                        model.fromMap(value)
                        self.isBase64Encode = model
                    }
                    if let value = dict["QueueName"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkMNSParameters.QueueName()
                        model.fromMap(value)
                        self.queueName = model
                    }
                }
            }
            public class SinkOpenSourceRabbitMQParameters : Tea.TeaModel {
                public class Body : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class MessageId : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class Properties : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class RoutingKey : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var authType: String?

                public var body: GetEventStreamingResponseBody.Data.Sink.SinkOpenSourceRabbitMQParameters.Body?

                public var endpoint: String?

                public var exchange: String?

                public var messageId: GetEventStreamingResponseBody.Data.Sink.SinkOpenSourceRabbitMQParameters.MessageId?

                public var networkType: String?

                public var password: String?

                public var properties: GetEventStreamingResponseBody.Data.Sink.SinkOpenSourceRabbitMQParameters.Properties?

                public var queueName: String?

                public var routingKey: GetEventStreamingResponseBody.Data.Sink.SinkOpenSourceRabbitMQParameters.RoutingKey?

                public var securityGroupId: String?

                public var targetType: String?

                public var username: String?

                public var vSwitchIds: String?

                public var virtualHostName: String?

                public var vpcId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.body?.validate()
                    try self.messageId?.validate()
                    try self.properties?.validate()
                    try self.routingKey?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.authType != nil {
                        map["AuthType"] = self.authType!
                    }
                    if self.body != nil {
                        map["Body"] = self.body?.toMap()
                    }
                    if self.endpoint != nil {
                        map["Endpoint"] = self.endpoint!
                    }
                    if self.exchange != nil {
                        map["Exchange"] = self.exchange!
                    }
                    if self.messageId != nil {
                        map["MessageId"] = self.messageId?.toMap()
                    }
                    if self.networkType != nil {
                        map["NetworkType"] = self.networkType!
                    }
                    if self.password != nil {
                        map["Password"] = self.password!
                    }
                    if self.properties != nil {
                        map["Properties"] = self.properties?.toMap()
                    }
                    if self.queueName != nil {
                        map["QueueName"] = self.queueName!
                    }
                    if self.routingKey != nil {
                        map["RoutingKey"] = self.routingKey?.toMap()
                    }
                    if self.securityGroupId != nil {
                        map["SecurityGroupId"] = self.securityGroupId!
                    }
                    if self.targetType != nil {
                        map["TargetType"] = self.targetType!
                    }
                    if self.username != nil {
                        map["Username"] = self.username!
                    }
                    if self.vSwitchIds != nil {
                        map["VSwitchIds"] = self.vSwitchIds!
                    }
                    if self.virtualHostName != nil {
                        map["VirtualHostName"] = self.virtualHostName!
                    }
                    if self.vpcId != nil {
                        map["VpcId"] = self.vpcId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AuthType"] as? String {
                        self.authType = value
                    }
                    if let value = dict["Body"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkOpenSourceRabbitMQParameters.Body()
                        model.fromMap(value)
                        self.body = model
                    }
                    if let value = dict["Endpoint"] as? String {
                        self.endpoint = value
                    }
                    if let value = dict["Exchange"] as? String {
                        self.exchange = value
                    }
                    if let value = dict["MessageId"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkOpenSourceRabbitMQParameters.MessageId()
                        model.fromMap(value)
                        self.messageId = model
                    }
                    if let value = dict["NetworkType"] as? String {
                        self.networkType = value
                    }
                    if let value = dict["Password"] as? String {
                        self.password = value
                    }
                    if let value = dict["Properties"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkOpenSourceRabbitMQParameters.Properties()
                        model.fromMap(value)
                        self.properties = model
                    }
                    if let value = dict["QueueName"] as? String {
                        self.queueName = value
                    }
                    if let value = dict["RoutingKey"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkOpenSourceRabbitMQParameters.RoutingKey()
                        model.fromMap(value)
                        self.routingKey = model
                    }
                    if let value = dict["SecurityGroupId"] as? String {
                        self.securityGroupId = value
                    }
                    if let value = dict["TargetType"] as? String {
                        self.targetType = value
                    }
                    if let value = dict["Username"] as? String {
                        self.username = value
                    }
                    if let value = dict["VSwitchIds"] as? String {
                        self.vSwitchIds = value
                    }
                    if let value = dict["VirtualHostName"] as? String {
                        self.virtualHostName = value
                    }
                    if let value = dict["VpcId"] as? String {
                        self.vpcId = value
                    }
                }
            }
            public class SinkRabbitMQParameters : Tea.TeaModel {
                public class Body : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class Exchange : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class InstanceId : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class MessageId : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class Properties : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class QueueName : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class RoutingKey : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class TargetType : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class VirtualHostName : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var body: GetEventStreamingResponseBody.Data.Sink.SinkRabbitMQParameters.Body?

                public var exchange: GetEventStreamingResponseBody.Data.Sink.SinkRabbitMQParameters.Exchange?

                public var instanceId: GetEventStreamingResponseBody.Data.Sink.SinkRabbitMQParameters.InstanceId?

                public var messageId: GetEventStreamingResponseBody.Data.Sink.SinkRabbitMQParameters.MessageId?

                public var properties: GetEventStreamingResponseBody.Data.Sink.SinkRabbitMQParameters.Properties?

                public var queueName: GetEventStreamingResponseBody.Data.Sink.SinkRabbitMQParameters.QueueName?

                public var routingKey: GetEventStreamingResponseBody.Data.Sink.SinkRabbitMQParameters.RoutingKey?

                public var targetType: GetEventStreamingResponseBody.Data.Sink.SinkRabbitMQParameters.TargetType?

                public var virtualHostName: GetEventStreamingResponseBody.Data.Sink.SinkRabbitMQParameters.VirtualHostName?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.body?.validate()
                    try self.exchange?.validate()
                    try self.instanceId?.validate()
                    try self.messageId?.validate()
                    try self.properties?.validate()
                    try self.queueName?.validate()
                    try self.routingKey?.validate()
                    try self.targetType?.validate()
                    try self.virtualHostName?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.body != nil {
                        map["Body"] = self.body?.toMap()
                    }
                    if self.exchange != nil {
                        map["Exchange"] = self.exchange?.toMap()
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId?.toMap()
                    }
                    if self.messageId != nil {
                        map["MessageId"] = self.messageId?.toMap()
                    }
                    if self.properties != nil {
                        map["Properties"] = self.properties?.toMap()
                    }
                    if self.queueName != nil {
                        map["QueueName"] = self.queueName?.toMap()
                    }
                    if self.routingKey != nil {
                        map["RoutingKey"] = self.routingKey?.toMap()
                    }
                    if self.targetType != nil {
                        map["TargetType"] = self.targetType?.toMap()
                    }
                    if self.virtualHostName != nil {
                        map["VirtualHostName"] = self.virtualHostName?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Body"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkRabbitMQParameters.Body()
                        model.fromMap(value)
                        self.body = model
                    }
                    if let value = dict["Exchange"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkRabbitMQParameters.Exchange()
                        model.fromMap(value)
                        self.exchange = model
                    }
                    if let value = dict["InstanceId"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkRabbitMQParameters.InstanceId()
                        model.fromMap(value)
                        self.instanceId = model
                    }
                    if let value = dict["MessageId"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkRabbitMQParameters.MessageId()
                        model.fromMap(value)
                        self.messageId = model
                    }
                    if let value = dict["Properties"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkRabbitMQParameters.Properties()
                        model.fromMap(value)
                        self.properties = model
                    }
                    if let value = dict["QueueName"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkRabbitMQParameters.QueueName()
                        model.fromMap(value)
                        self.queueName = model
                    }
                    if let value = dict["RoutingKey"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkRabbitMQParameters.RoutingKey()
                        model.fromMap(value)
                        self.routingKey = model
                    }
                    if let value = dict["TargetType"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkRabbitMQParameters.TargetType()
                        model.fromMap(value)
                        self.targetType = model
                    }
                    if let value = dict["VirtualHostName"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkRabbitMQParameters.VirtualHostName()
                        model.fromMap(value)
                        self.virtualHostName = model
                    }
                }
            }
            public class SinkRocketMQCheckpointParameters : Tea.TeaModel {
                public class ConsumeTimestamp : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class Group : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class Topic : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var consumeTimestamp: GetEventStreamingResponseBody.Data.Sink.SinkRocketMQCheckpointParameters.ConsumeTimestamp?

                public var group: GetEventStreamingResponseBody.Data.Sink.SinkRocketMQCheckpointParameters.Group?

                public var instanceId: String?

                public var instanceType: String?

                public var topic: GetEventStreamingResponseBody.Data.Sink.SinkRocketMQCheckpointParameters.Topic?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.consumeTimestamp?.validate()
                    try self.group?.validate()
                    try self.topic?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.consumeTimestamp != nil {
                        map["ConsumeTimestamp"] = self.consumeTimestamp?.toMap()
                    }
                    if self.group != nil {
                        map["Group"] = self.group?.toMap()
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.instanceType != nil {
                        map["InstanceType"] = self.instanceType!
                    }
                    if self.topic != nil {
                        map["Topic"] = self.topic?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ConsumeTimestamp"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkRocketMQCheckpointParameters.ConsumeTimestamp()
                        model.fromMap(value)
                        self.consumeTimestamp = model
                    }
                    if let value = dict["Group"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkRocketMQCheckpointParameters.Group()
                        model.fromMap(value)
                        self.group = model
                    }
                    if let value = dict["InstanceId"] as? String {
                        self.instanceId = value
                    }
                    if let value = dict["InstanceType"] as? String {
                        self.instanceType = value
                    }
                    if let value = dict["Topic"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkRocketMQCheckpointParameters.Topic()
                        model.fromMap(value)
                        self.topic = model
                    }
                }
            }
            public class SinkRocketMQParameters : Tea.TeaModel {
                public class Body : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class DeliveryOrderType : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class InstanceEndpoint : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class InstanceId : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class InstancePassword : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class InstanceType : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class InstanceUsername : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class Keys : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class Network : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class Properties : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class SecurityGroupId : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class ShardingKey : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class Tags : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class Topic : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class VSwitchIds : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class VpcId : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var body: GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.Body?

                public var deliveryOrderType: GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.DeliveryOrderType?

                public var instanceEndpoint: GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.InstanceEndpoint?

                public var instanceId: GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.InstanceId?

                public var instancePassword: GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.InstancePassword?

                public var instanceType: GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.InstanceType?

                public var instanceUsername: GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.InstanceUsername?

                public var keys: GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.Keys?

                public var network: GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.Network?

                public var properties: GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.Properties?

                public var securityGroupId: GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.SecurityGroupId?

                public var shardingKey: GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.ShardingKey?

                public var tags: GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.Tags?

                public var topic: GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.Topic?

                public var vSwitchIds: GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.VSwitchIds?

                public var vpcId: GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.VpcId?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.body?.validate()
                    try self.deliveryOrderType?.validate()
                    try self.instanceEndpoint?.validate()
                    try self.instanceId?.validate()
                    try self.instancePassword?.validate()
                    try self.instanceType?.validate()
                    try self.instanceUsername?.validate()
                    try self.keys?.validate()
                    try self.network?.validate()
                    try self.properties?.validate()
                    try self.securityGroupId?.validate()
                    try self.shardingKey?.validate()
                    try self.tags?.validate()
                    try self.topic?.validate()
                    try self.vSwitchIds?.validate()
                    try self.vpcId?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.body != nil {
                        map["Body"] = self.body?.toMap()
                    }
                    if self.deliveryOrderType != nil {
                        map["DeliveryOrderType"] = self.deliveryOrderType?.toMap()
                    }
                    if self.instanceEndpoint != nil {
                        map["InstanceEndpoint"] = self.instanceEndpoint?.toMap()
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId?.toMap()
                    }
                    if self.instancePassword != nil {
                        map["InstancePassword"] = self.instancePassword?.toMap()
                    }
                    if self.instanceType != nil {
                        map["InstanceType"] = self.instanceType?.toMap()
                    }
                    if self.instanceUsername != nil {
                        map["InstanceUsername"] = self.instanceUsername?.toMap()
                    }
                    if self.keys != nil {
                        map["Keys"] = self.keys?.toMap()
                    }
                    if self.network != nil {
                        map["Network"] = self.network?.toMap()
                    }
                    if self.properties != nil {
                        map["Properties"] = self.properties?.toMap()
                    }
                    if self.securityGroupId != nil {
                        map["SecurityGroupId"] = self.securityGroupId?.toMap()
                    }
                    if self.shardingKey != nil {
                        map["ShardingKey"] = self.shardingKey?.toMap()
                    }
                    if self.tags != nil {
                        map["Tags"] = self.tags?.toMap()
                    }
                    if self.topic != nil {
                        map["Topic"] = self.topic?.toMap()
                    }
                    if self.vSwitchIds != nil {
                        map["VSwitchIds"] = self.vSwitchIds?.toMap()
                    }
                    if self.vpcId != nil {
                        map["VpcId"] = self.vpcId?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Body"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.Body()
                        model.fromMap(value)
                        self.body = model
                    }
                    if let value = dict["DeliveryOrderType"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.DeliveryOrderType()
                        model.fromMap(value)
                        self.deliveryOrderType = model
                    }
                    if let value = dict["InstanceEndpoint"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.InstanceEndpoint()
                        model.fromMap(value)
                        self.instanceEndpoint = model
                    }
                    if let value = dict["InstanceId"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.InstanceId()
                        model.fromMap(value)
                        self.instanceId = model
                    }
                    if let value = dict["InstancePassword"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.InstancePassword()
                        model.fromMap(value)
                        self.instancePassword = model
                    }
                    if let value = dict["InstanceType"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.InstanceType()
                        model.fromMap(value)
                        self.instanceType = model
                    }
                    if let value = dict["InstanceUsername"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.InstanceUsername()
                        model.fromMap(value)
                        self.instanceUsername = model
                    }
                    if let value = dict["Keys"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.Keys()
                        model.fromMap(value)
                        self.keys = model
                    }
                    if let value = dict["Network"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.Network()
                        model.fromMap(value)
                        self.network = model
                    }
                    if let value = dict["Properties"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.Properties()
                        model.fromMap(value)
                        self.properties = model
                    }
                    if let value = dict["SecurityGroupId"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.SecurityGroupId()
                        model.fromMap(value)
                        self.securityGroupId = model
                    }
                    if let value = dict["ShardingKey"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.ShardingKey()
                        model.fromMap(value)
                        self.shardingKey = model
                    }
                    if let value = dict["Tags"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.Tags()
                        model.fromMap(value)
                        self.tags = model
                    }
                    if let value = dict["Topic"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.Topic()
                        model.fromMap(value)
                        self.topic = model
                    }
                    if let value = dict["VSwitchIds"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.VSwitchIds()
                        model.fromMap(value)
                        self.vSwitchIds = model
                    }
                    if let value = dict["VpcId"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters.VpcId()
                        model.fromMap(value)
                        self.vpcId = model
                    }
                }
            }
            public class SinkSLSParameters : Tea.TeaModel {
                public class Body : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class ContentSchema : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class ContentType : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class LogStore : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class Project : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class RoleName : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class Topic : Tea.TeaModel {
                    public var form: String?

                    public var template: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.form != nil {
                            map["Form"] = self.form!
                        }
                        if self.template != nil {
                            map["Template"] = self.template!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Form"] as? String {
                            self.form = value
                        }
                        if let value = dict["Template"] as? String {
                            self.template = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var body: GetEventStreamingResponseBody.Data.Sink.SinkSLSParameters.Body?

                public var contentSchema: GetEventStreamingResponseBody.Data.Sink.SinkSLSParameters.ContentSchema?

                public var contentType: GetEventStreamingResponseBody.Data.Sink.SinkSLSParameters.ContentType?

                public var logStore: GetEventStreamingResponseBody.Data.Sink.SinkSLSParameters.LogStore?

                public var project: GetEventStreamingResponseBody.Data.Sink.SinkSLSParameters.Project?

                public var roleName: GetEventStreamingResponseBody.Data.Sink.SinkSLSParameters.RoleName?

                public var topic: GetEventStreamingResponseBody.Data.Sink.SinkSLSParameters.Topic?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.body?.validate()
                    try self.contentSchema?.validate()
                    try self.contentType?.validate()
                    try self.logStore?.validate()
                    try self.project?.validate()
                    try self.roleName?.validate()
                    try self.topic?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.body != nil {
                        map["Body"] = self.body?.toMap()
                    }
                    if self.contentSchema != nil {
                        map["ContentSchema"] = self.contentSchema?.toMap()
                    }
                    if self.contentType != nil {
                        map["ContentType"] = self.contentType?.toMap()
                    }
                    if self.logStore != nil {
                        map["LogStore"] = self.logStore?.toMap()
                    }
                    if self.project != nil {
                        map["Project"] = self.project?.toMap()
                    }
                    if self.roleName != nil {
                        map["RoleName"] = self.roleName?.toMap()
                    }
                    if self.topic != nil {
                        map["Topic"] = self.topic?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Body"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkSLSParameters.Body()
                        model.fromMap(value)
                        self.body = model
                    }
                    if let value = dict["ContentSchema"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkSLSParameters.ContentSchema()
                        model.fromMap(value)
                        self.contentSchema = model
                    }
                    if let value = dict["ContentType"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkSLSParameters.ContentType()
                        model.fromMap(value)
                        self.contentType = model
                    }
                    if let value = dict["LogStore"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkSLSParameters.LogStore()
                        model.fromMap(value)
                        self.logStore = model
                    }
                    if let value = dict["Project"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkSLSParameters.Project()
                        model.fromMap(value)
                        self.project = model
                    }
                    if let value = dict["RoleName"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkSLSParameters.RoleName()
                        model.fromMap(value)
                        self.roleName = model
                    }
                    if let value = dict["Topic"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Sink.SinkSLSParameters.Topic()
                        model.fromMap(value)
                        self.topic = model
                    }
                }
            }
            public var sinkApacheRocketMQCheckpointParameters: GetEventStreamingResponseBody.Data.Sink.SinkApacheRocketMQCheckpointParameters?

            public var sinkBaiLianParameters: SinkBaiLianParameters?

            public var sinkCustomizedKafkaConnectorParameters: GetEventStreamingResponseBody.Data.Sink.SinkCustomizedKafkaConnectorParameters?

            public var sinkCustomizedKafkaParameters: GetEventStreamingResponseBody.Data.Sink.SinkCustomizedKafkaParameters?

            public var sinkDashVectorParameters: GetEventStreamingResponseBody.Data.Sink.SinkDashVectorParameters?

            public var sinkDataHubParameters: GetEventStreamingResponseBody.Data.Sink.SinkDataHubParameters?

            public var sinkDorisParameters: GetEventStreamingResponseBody.Data.Sink.SinkDorisParameters?

            public var sinkFcParameters: GetEventStreamingResponseBody.Data.Sink.SinkFcParameters?

            public var sinkFnfParameters: GetEventStreamingResponseBody.Data.Sink.SinkFnfParameters?

            public var sinkKafkaParameters: GetEventStreamingResponseBody.Data.Sink.SinkKafkaParameters?

            public var sinkMNSParameters: GetEventStreamingResponseBody.Data.Sink.SinkMNSParameters?

            public var sinkOpenSourceRabbitMQParameters: GetEventStreamingResponseBody.Data.Sink.SinkOpenSourceRabbitMQParameters?

            public var sinkRabbitMQParameters: GetEventStreamingResponseBody.Data.Sink.SinkRabbitMQParameters?

            public var sinkRocketMQCheckpointParameters: GetEventStreamingResponseBody.Data.Sink.SinkRocketMQCheckpointParameters?

            public var sinkRocketMQParameters: GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters?

            public var sinkSLSParameters: GetEventStreamingResponseBody.Data.Sink.SinkSLSParameters?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.sinkApacheRocketMQCheckpointParameters?.validate()
                try self.sinkBaiLianParameters?.validate()
                try self.sinkCustomizedKafkaConnectorParameters?.validate()
                try self.sinkCustomizedKafkaParameters?.validate()
                try self.sinkDashVectorParameters?.validate()
                try self.sinkDataHubParameters?.validate()
                try self.sinkDorisParameters?.validate()
                try self.sinkFcParameters?.validate()
                try self.sinkFnfParameters?.validate()
                try self.sinkKafkaParameters?.validate()
                try self.sinkMNSParameters?.validate()
                try self.sinkOpenSourceRabbitMQParameters?.validate()
                try self.sinkRabbitMQParameters?.validate()
                try self.sinkRocketMQCheckpointParameters?.validate()
                try self.sinkRocketMQParameters?.validate()
                try self.sinkSLSParameters?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.sinkApacheRocketMQCheckpointParameters != nil {
                    map["SinkApacheRocketMQCheckpointParameters"] = self.sinkApacheRocketMQCheckpointParameters?.toMap()
                }
                if self.sinkBaiLianParameters != nil {
                    map["SinkBaiLianParameters"] = self.sinkBaiLianParameters?.toMap()
                }
                if self.sinkCustomizedKafkaConnectorParameters != nil {
                    map["SinkCustomizedKafkaConnectorParameters"] = self.sinkCustomizedKafkaConnectorParameters?.toMap()
                }
                if self.sinkCustomizedKafkaParameters != nil {
                    map["SinkCustomizedKafkaParameters"] = self.sinkCustomizedKafkaParameters?.toMap()
                }
                if self.sinkDashVectorParameters != nil {
                    map["SinkDashVectorParameters"] = self.sinkDashVectorParameters?.toMap()
                }
                if self.sinkDataHubParameters != nil {
                    map["SinkDataHubParameters"] = self.sinkDataHubParameters?.toMap()
                }
                if self.sinkDorisParameters != nil {
                    map["SinkDorisParameters"] = self.sinkDorisParameters?.toMap()
                }
                if self.sinkFcParameters != nil {
                    map["SinkFcParameters"] = self.sinkFcParameters?.toMap()
                }
                if self.sinkFnfParameters != nil {
                    map["SinkFnfParameters"] = self.sinkFnfParameters?.toMap()
                }
                if self.sinkKafkaParameters != nil {
                    map["SinkKafkaParameters"] = self.sinkKafkaParameters?.toMap()
                }
                if self.sinkMNSParameters != nil {
                    map["SinkMNSParameters"] = self.sinkMNSParameters?.toMap()
                }
                if self.sinkOpenSourceRabbitMQParameters != nil {
                    map["SinkOpenSourceRabbitMQParameters"] = self.sinkOpenSourceRabbitMQParameters?.toMap()
                }
                if self.sinkRabbitMQParameters != nil {
                    map["SinkRabbitMQParameters"] = self.sinkRabbitMQParameters?.toMap()
                }
                if self.sinkRocketMQCheckpointParameters != nil {
                    map["SinkRocketMQCheckpointParameters"] = self.sinkRocketMQCheckpointParameters?.toMap()
                }
                if self.sinkRocketMQParameters != nil {
                    map["SinkRocketMQParameters"] = self.sinkRocketMQParameters?.toMap()
                }
                if self.sinkSLSParameters != nil {
                    map["SinkSLSParameters"] = self.sinkSLSParameters?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["SinkApacheRocketMQCheckpointParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Sink.SinkApacheRocketMQCheckpointParameters()
                    model.fromMap(value)
                    self.sinkApacheRocketMQCheckpointParameters = model
                }
                if let value = dict["SinkBaiLianParameters"] as? [String: Any?] {
                    var model = SinkBaiLianParameters()
                    model.fromMap(value)
                    self.sinkBaiLianParameters = model
                }
                if let value = dict["SinkCustomizedKafkaConnectorParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Sink.SinkCustomizedKafkaConnectorParameters()
                    model.fromMap(value)
                    self.sinkCustomizedKafkaConnectorParameters = model
                }
                if let value = dict["SinkCustomizedKafkaParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Sink.SinkCustomizedKafkaParameters()
                    model.fromMap(value)
                    self.sinkCustomizedKafkaParameters = model
                }
                if let value = dict["SinkDashVectorParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Sink.SinkDashVectorParameters()
                    model.fromMap(value)
                    self.sinkDashVectorParameters = model
                }
                if let value = dict["SinkDataHubParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Sink.SinkDataHubParameters()
                    model.fromMap(value)
                    self.sinkDataHubParameters = model
                }
                if let value = dict["SinkDorisParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Sink.SinkDorisParameters()
                    model.fromMap(value)
                    self.sinkDorisParameters = model
                }
                if let value = dict["SinkFcParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Sink.SinkFcParameters()
                    model.fromMap(value)
                    self.sinkFcParameters = model
                }
                if let value = dict["SinkFnfParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Sink.SinkFnfParameters()
                    model.fromMap(value)
                    self.sinkFnfParameters = model
                }
                if let value = dict["SinkKafkaParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Sink.SinkKafkaParameters()
                    model.fromMap(value)
                    self.sinkKafkaParameters = model
                }
                if let value = dict["SinkMNSParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Sink.SinkMNSParameters()
                    model.fromMap(value)
                    self.sinkMNSParameters = model
                }
                if let value = dict["SinkOpenSourceRabbitMQParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Sink.SinkOpenSourceRabbitMQParameters()
                    model.fromMap(value)
                    self.sinkOpenSourceRabbitMQParameters = model
                }
                if let value = dict["SinkRabbitMQParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Sink.SinkRabbitMQParameters()
                    model.fromMap(value)
                    self.sinkRabbitMQParameters = model
                }
                if let value = dict["SinkRocketMQCheckpointParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Sink.SinkRocketMQCheckpointParameters()
                    model.fromMap(value)
                    self.sinkRocketMQCheckpointParameters = model
                }
                if let value = dict["SinkRocketMQParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Sink.SinkRocketMQParameters()
                    model.fromMap(value)
                    self.sinkRocketMQParameters = model
                }
                if let value = dict["SinkSLSParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Sink.SinkSLSParameters()
                    model.fromMap(value)
                    self.sinkSLSParameters = model
                }
            }
        }
        public class Source : Tea.TeaModel {
            public class SourceApacheRocketMQCheckpointParameters : Tea.TeaModel {
                public var instanceEndpoint: String?

                public var instanceId: String?

                public var instancePassword: String?

                public var instanceUsername: String?

                public var networkType: String?

                public var regionId: String?

                public var securityGroupId: String?

                public var topics: [String]?

                public var vSwitchId: String?

                public var vpcId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.instanceEndpoint != nil {
                        map["InstanceEndpoint"] = self.instanceEndpoint!
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.instancePassword != nil {
                        map["InstancePassword"] = self.instancePassword!
                    }
                    if self.instanceUsername != nil {
                        map["InstanceUsername"] = self.instanceUsername!
                    }
                    if self.networkType != nil {
                        map["NetworkType"] = self.networkType!
                    }
                    if self.regionId != nil {
                        map["RegionId"] = self.regionId!
                    }
                    if self.securityGroupId != nil {
                        map["SecurityGroupId"] = self.securityGroupId!
                    }
                    if self.topics != nil {
                        map["Topics"] = self.topics!
                    }
                    if self.vSwitchId != nil {
                        map["VSwitchId"] = self.vSwitchId!
                    }
                    if self.vpcId != nil {
                        map["VpcId"] = self.vpcId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["InstanceEndpoint"] as? String {
                        self.instanceEndpoint = value
                    }
                    if let value = dict["InstanceId"] as? String {
                        self.instanceId = value
                    }
                    if let value = dict["InstancePassword"] as? String {
                        self.instancePassword = value
                    }
                    if let value = dict["InstanceUsername"] as? String {
                        self.instanceUsername = value
                    }
                    if let value = dict["NetworkType"] as? String {
                        self.networkType = value
                    }
                    if let value = dict["RegionId"] as? String {
                        self.regionId = value
                    }
                    if let value = dict["SecurityGroupId"] as? String {
                        self.securityGroupId = value
                    }
                    if let value = dict["Topics"] as? [String] {
                        self.topics = value
                    }
                    if let value = dict["VSwitchId"] as? String {
                        self.vSwitchId = value
                    }
                    if let value = dict["VpcId"] as? String {
                        self.vpcId = value
                    }
                }
            }
            public class SourceCustomizedKafkaConnectorParameters : Tea.TeaModel {
                public class ConnectorParameters : Tea.TeaModel {
                    public var config: [String: Any]?

                    public var name: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.config != nil {
                            map["Config"] = self.config!
                        }
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Config"] as? [String: Any] {
                            self.config = value
                        }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                    }
                }
                public var connectorPackageUrl: String?

                public var connectorParameters: GetEventStreamingResponseBody.Data.Source.SourceCustomizedKafkaConnectorParameters.ConnectorParameters?

                public var workerParameters: [String: Any]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.connectorParameters?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.connectorPackageUrl != nil {
                        map["ConnectorPackageUrl"] = self.connectorPackageUrl!
                    }
                    if self.connectorParameters != nil {
                        map["ConnectorParameters"] = self.connectorParameters?.toMap()
                    }
                    if self.workerParameters != nil {
                        map["WorkerParameters"] = self.workerParameters!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ConnectorPackageUrl"] as? String {
                        self.connectorPackageUrl = value
                    }
                    if let value = dict["ConnectorParameters"] as? [String: Any?] {
                        var model = GetEventStreamingResponseBody.Data.Source.SourceCustomizedKafkaConnectorParameters.ConnectorParameters()
                        model.fromMap(value)
                        self.connectorParameters = model
                    }
                    if let value = dict["WorkerParameters"] as? [String: Any] {
                        self.workerParameters = value
                    }
                }
            }
            public class SourceCustomizedKafkaParameters : Tea.TeaModel {
                public var instanceId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["InstanceId"] as? String {
                        self.instanceId = value
                    }
                }
            }
            public class SourceDTSParameters : Tea.TeaModel {
                public var brokerUrl: String?

                public var initCheckPoint: String?

                public var password: String?

                public var sid: String?

                public var taskId: String?

                public var topic: String?

                public var username: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.brokerUrl != nil {
                        map["BrokerUrl"] = self.brokerUrl!
                    }
                    if self.initCheckPoint != nil {
                        map["InitCheckPoint"] = self.initCheckPoint!
                    }
                    if self.password != nil {
                        map["Password"] = self.password!
                    }
                    if self.sid != nil {
                        map["Sid"] = self.sid!
                    }
                    if self.taskId != nil {
                        map["TaskId"] = self.taskId!
                    }
                    if self.topic != nil {
                        map["Topic"] = self.topic!
                    }
                    if self.username != nil {
                        map["Username"] = self.username!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["BrokerUrl"] as? String {
                        self.brokerUrl = value
                    }
                    if let value = dict["InitCheckPoint"] as? String {
                        self.initCheckPoint = value
                    }
                    if let value = dict["Password"] as? String {
                        self.password = value
                    }
                    if let value = dict["Sid"] as? String {
                        self.sid = value
                    }
                    if let value = dict["TaskId"] as? String {
                        self.taskId = value
                    }
                    if let value = dict["Topic"] as? String {
                        self.topic = value
                    }
                    if let value = dict["Username"] as? String {
                        self.username = value
                    }
                }
            }
            public class SourceEventBusParameters : Tea.TeaModel {
                public var eventBusName: String?

                public var eventRuleName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.eventBusName != nil {
                        map["EventBusName"] = self.eventBusName!
                    }
                    if self.eventRuleName != nil {
                        map["EventRuleName"] = self.eventRuleName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["EventBusName"] as? String {
                        self.eventBusName = value
                    }
                    if let value = dict["EventRuleName"] as? String {
                        self.eventRuleName = value
                    }
                }
            }
            public class SourceKafkaParameters : Tea.TeaModel {
                public var consumerGroup: String?

                public var instanceId: String?

                public var network: String?

                public var offsetReset: String?

                public var regionId: String?

                public var securityGroupId: String?

                public var topic: String?

                public var vSwitchIds: String?

                public var valueDataType: String?

                public var vpcId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.consumerGroup != nil {
                        map["ConsumerGroup"] = self.consumerGroup!
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.network != nil {
                        map["Network"] = self.network!
                    }
                    if self.offsetReset != nil {
                        map["OffsetReset"] = self.offsetReset!
                    }
                    if self.regionId != nil {
                        map["RegionId"] = self.regionId!
                    }
                    if self.securityGroupId != nil {
                        map["SecurityGroupId"] = self.securityGroupId!
                    }
                    if self.topic != nil {
                        map["Topic"] = self.topic!
                    }
                    if self.vSwitchIds != nil {
                        map["VSwitchIds"] = self.vSwitchIds!
                    }
                    if self.valueDataType != nil {
                        map["ValueDataType"] = self.valueDataType!
                    }
                    if self.vpcId != nil {
                        map["VpcId"] = self.vpcId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ConsumerGroup"] as? String {
                        self.consumerGroup = value
                    }
                    if let value = dict["InstanceId"] as? String {
                        self.instanceId = value
                    }
                    if let value = dict["Network"] as? String {
                        self.network = value
                    }
                    if let value = dict["OffsetReset"] as? String {
                        self.offsetReset = value
                    }
                    if let value = dict["RegionId"] as? String {
                        self.regionId = value
                    }
                    if let value = dict["SecurityGroupId"] as? String {
                        self.securityGroupId = value
                    }
                    if let value = dict["Topic"] as? String {
                        self.topic = value
                    }
                    if let value = dict["VSwitchIds"] as? String {
                        self.vSwitchIds = value
                    }
                    if let value = dict["ValueDataType"] as? String {
                        self.valueDataType = value
                    }
                    if let value = dict["VpcId"] as? String {
                        self.vpcId = value
                    }
                }
            }
            public class SourceMNSParameters : Tea.TeaModel {
                public var isBase64Decode: Bool?

                public var queueName: String?

                public var regionId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.isBase64Decode != nil {
                        map["IsBase64Decode"] = self.isBase64Decode!
                    }
                    if self.queueName != nil {
                        map["QueueName"] = self.queueName!
                    }
                    if self.regionId != nil {
                        map["RegionId"] = self.regionId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["IsBase64Decode"] as? Bool {
                        self.isBase64Decode = value
                    }
                    if let value = dict["QueueName"] as? String {
                        self.queueName = value
                    }
                    if let value = dict["RegionId"] as? String {
                        self.regionId = value
                    }
                }
            }
            public class SourceMQTTParameters : Tea.TeaModel {
                public var bodyDataType: String?

                public var instanceId: String?

                public var regionId: String?

                public var topic: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.bodyDataType != nil {
                        map["BodyDataType"] = self.bodyDataType!
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.regionId != nil {
                        map["RegionId"] = self.regionId!
                    }
                    if self.topic != nil {
                        map["Topic"] = self.topic!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["BodyDataType"] as? String {
                        self.bodyDataType = value
                    }
                    if let value = dict["InstanceId"] as? String {
                        self.instanceId = value
                    }
                    if let value = dict["RegionId"] as? String {
                        self.regionId = value
                    }
                    if let value = dict["Topic"] as? String {
                        self.topic = value
                    }
                }
            }
            public class SourceOSSParameters : Tea.TeaModel {
                public var bucketName: String?

                public var delimiter: String?

                public var loadFormat: String?

                public var loadMode: String?

                public var prefix_: String?

                public var roleName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.bucketName != nil {
                        map["BucketName"] = self.bucketName!
                    }
                    if self.delimiter != nil {
                        map["Delimiter"] = self.delimiter!
                    }
                    if self.loadFormat != nil {
                        map["LoadFormat"] = self.loadFormat!
                    }
                    if self.loadMode != nil {
                        map["LoadMode"] = self.loadMode!
                    }
                    if self.prefix_ != nil {
                        map["Prefix"] = self.prefix_!
                    }
                    if self.roleName != nil {
                        map["RoleName"] = self.roleName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["BucketName"] as? String {
                        self.bucketName = value
                    }
                    if let value = dict["Delimiter"] as? String {
                        self.delimiter = value
                    }
                    if let value = dict["LoadFormat"] as? String {
                        self.loadFormat = value
                    }
                    if let value = dict["LoadMode"] as? String {
                        self.loadMode = value
                    }
                    if let value = dict["Prefix"] as? String {
                        self.prefix_ = value
                    }
                    if let value = dict["RoleName"] as? String {
                        self.roleName = value
                    }
                }
            }
            public class SourceOpenSourceRabbitMQParameters : Tea.TeaModel {
                public var authType: String?

                public var bodyDataType: String?

                public var endpoint: String?

                public var networkType: String?

                public var password: String?

                public var queueName: String?

                public var securityGroupId: String?

                public var username: String?

                public var vSwitchIds: String?

                public var virtualHostName: String?

                public var vpcId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.authType != nil {
                        map["AuthType"] = self.authType!
                    }
                    if self.bodyDataType != nil {
                        map["BodyDataType"] = self.bodyDataType!
                    }
                    if self.endpoint != nil {
                        map["Endpoint"] = self.endpoint!
                    }
                    if self.networkType != nil {
                        map["NetworkType"] = self.networkType!
                    }
                    if self.password != nil {
                        map["Password"] = self.password!
                    }
                    if self.queueName != nil {
                        map["QueueName"] = self.queueName!
                    }
                    if self.securityGroupId != nil {
                        map["SecurityGroupId"] = self.securityGroupId!
                    }
                    if self.username != nil {
                        map["Username"] = self.username!
                    }
                    if self.vSwitchIds != nil {
                        map["VSwitchIds"] = self.vSwitchIds!
                    }
                    if self.virtualHostName != nil {
                        map["VirtualHostName"] = self.virtualHostName!
                    }
                    if self.vpcId != nil {
                        map["VpcId"] = self.vpcId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AuthType"] as? String {
                        self.authType = value
                    }
                    if let value = dict["BodyDataType"] as? String {
                        self.bodyDataType = value
                    }
                    if let value = dict["Endpoint"] as? String {
                        self.endpoint = value
                    }
                    if let value = dict["NetworkType"] as? String {
                        self.networkType = value
                    }
                    if let value = dict["Password"] as? String {
                        self.password = value
                    }
                    if let value = dict["QueueName"] as? String {
                        self.queueName = value
                    }
                    if let value = dict["SecurityGroupId"] as? String {
                        self.securityGroupId = value
                    }
                    if let value = dict["Username"] as? String {
                        self.username = value
                    }
                    if let value = dict["VSwitchIds"] as? String {
                        self.vSwitchIds = value
                    }
                    if let value = dict["VirtualHostName"] as? String {
                        self.virtualHostName = value
                    }
                    if let value = dict["VpcId"] as? String {
                        self.vpcId = value
                    }
                }
            }
            public class SourcePrometheusParameters : Tea.TeaModel {
                public var clusterId: String?

                public var dataType: String?

                public var externalLabels: String?

                public var labels: String?

                public var regionId: String?

                public var roleName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.clusterId != nil {
                        map["ClusterId"] = self.clusterId!
                    }
                    if self.dataType != nil {
                        map["DataType"] = self.dataType!
                    }
                    if self.externalLabels != nil {
                        map["ExternalLabels"] = self.externalLabels!
                    }
                    if self.labels != nil {
                        map["Labels"] = self.labels!
                    }
                    if self.regionId != nil {
                        map["RegionId"] = self.regionId!
                    }
                    if self.roleName != nil {
                        map["RoleName"] = self.roleName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ClusterId"] as? String {
                        self.clusterId = value
                    }
                    if let value = dict["DataType"] as? String {
                        self.dataType = value
                    }
                    if let value = dict["ExternalLabels"] as? String {
                        self.externalLabels = value
                    }
                    if let value = dict["Labels"] as? String {
                        self.labels = value
                    }
                    if let value = dict["RegionId"] as? String {
                        self.regionId = value
                    }
                    if let value = dict["RoleName"] as? String {
                        self.roleName = value
                    }
                }
            }
            public class SourceRabbitMQParameters : Tea.TeaModel {
                public var instanceId: String?

                public var queueName: String?

                public var regionId: String?

                public var virtualHostName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.queueName != nil {
                        map["QueueName"] = self.queueName!
                    }
                    if self.regionId != nil {
                        map["RegionId"] = self.regionId!
                    }
                    if self.virtualHostName != nil {
                        map["VirtualHostName"] = self.virtualHostName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["InstanceId"] as? String {
                        self.instanceId = value
                    }
                    if let value = dict["QueueName"] as? String {
                        self.queueName = value
                    }
                    if let value = dict["RegionId"] as? String {
                        self.regionId = value
                    }
                    if let value = dict["VirtualHostName"] as? String {
                        self.virtualHostName = value
                    }
                }
            }
            public class SourceRocketMQCheckpointParameters : Tea.TeaModel {
                public var instanceId: String?

                public var instanceType: String?

                public var regionId: String?

                public var topics: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.instanceType != nil {
                        map["InstanceType"] = self.instanceType!
                    }
                    if self.regionId != nil {
                        map["RegionId"] = self.regionId!
                    }
                    if self.topics != nil {
                        map["Topics"] = self.topics!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["InstanceId"] as? String {
                        self.instanceId = value
                    }
                    if let value = dict["InstanceType"] as? String {
                        self.instanceType = value
                    }
                    if let value = dict["RegionId"] as? String {
                        self.regionId = value
                    }
                    if let value = dict["Topics"] as? [String] {
                        self.topics = value
                    }
                }
            }
            public class SourceRocketMQParameters : Tea.TeaModel {
                public var authType: String?

                public var bodyDataType: String?

                public var filterSql: String?

                public var filterType: String?

                public var groupID: String?

                public var instanceEndpoint: String?

                public var instanceId: String?

                public var instanceNetwork: String?

                public var instancePassword: String?

                public var instanceSecurityGroupId: String?

                public var instanceType: String?

                public var instanceUsername: String?

                public var instanceVSwitchIds: String?

                public var instanceVpcId: String?

                public var network: String?

                public var offset: String?

                public var regionId: String?

                public var securityGroupId: String?

                public var tag: String?

                public var timestamp: Int64?

                public var topic: String?

                public var vSwitchIds: String?

                public var vpcId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.authType != nil {
                        map["AuthType"] = self.authType!
                    }
                    if self.bodyDataType != nil {
                        map["BodyDataType"] = self.bodyDataType!
                    }
                    if self.filterSql != nil {
                        map["FilterSql"] = self.filterSql!
                    }
                    if self.filterType != nil {
                        map["FilterType"] = self.filterType!
                    }
                    if self.groupID != nil {
                        map["GroupID"] = self.groupID!
                    }
                    if self.instanceEndpoint != nil {
                        map["InstanceEndpoint"] = self.instanceEndpoint!
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.instanceNetwork != nil {
                        map["InstanceNetwork"] = self.instanceNetwork!
                    }
                    if self.instancePassword != nil {
                        map["InstancePassword"] = self.instancePassword!
                    }
                    if self.instanceSecurityGroupId != nil {
                        map["InstanceSecurityGroupId"] = self.instanceSecurityGroupId!
                    }
                    if self.instanceType != nil {
                        map["InstanceType"] = self.instanceType!
                    }
                    if self.instanceUsername != nil {
                        map["InstanceUsername"] = self.instanceUsername!
                    }
                    if self.instanceVSwitchIds != nil {
                        map["InstanceVSwitchIds"] = self.instanceVSwitchIds!
                    }
                    if self.instanceVpcId != nil {
                        map["InstanceVpcId"] = self.instanceVpcId!
                    }
                    if self.network != nil {
                        map["Network"] = self.network!
                    }
                    if self.offset != nil {
                        map["Offset"] = self.offset!
                    }
                    if self.regionId != nil {
                        map["RegionId"] = self.regionId!
                    }
                    if self.securityGroupId != nil {
                        map["SecurityGroupId"] = self.securityGroupId!
                    }
                    if self.tag != nil {
                        map["Tag"] = self.tag!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    if self.topic != nil {
                        map["Topic"] = self.topic!
                    }
                    if self.vSwitchIds != nil {
                        map["VSwitchIds"] = self.vSwitchIds!
                    }
                    if self.vpcId != nil {
                        map["VpcId"] = self.vpcId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AuthType"] as? String {
                        self.authType = value
                    }
                    if let value = dict["BodyDataType"] as? String {
                        self.bodyDataType = value
                    }
                    if let value = dict["FilterSql"] as? String {
                        self.filterSql = value
                    }
                    if let value = dict["FilterType"] as? String {
                        self.filterType = value
                    }
                    if let value = dict["GroupID"] as? String {
                        self.groupID = value
                    }
                    if let value = dict["InstanceEndpoint"] as? String {
                        self.instanceEndpoint = value
                    }
                    if let value = dict["InstanceId"] as? String {
                        self.instanceId = value
                    }
                    if let value = dict["InstanceNetwork"] as? String {
                        self.instanceNetwork = value
                    }
                    if let value = dict["InstancePassword"] as? String {
                        self.instancePassword = value
                    }
                    if let value = dict["InstanceSecurityGroupId"] as? String {
                        self.instanceSecurityGroupId = value
                    }
                    if let value = dict["InstanceType"] as? String {
                        self.instanceType = value
                    }
                    if let value = dict["InstanceUsername"] as? String {
                        self.instanceUsername = value
                    }
                    if let value = dict["InstanceVSwitchIds"] as? String {
                        self.instanceVSwitchIds = value
                    }
                    if let value = dict["InstanceVpcId"] as? String {
                        self.instanceVpcId = value
                    }
                    if let value = dict["Network"] as? String {
                        self.network = value
                    }
                    if let value = dict["Offset"] as? String {
                        self.offset = value
                    }
                    if let value = dict["RegionId"] as? String {
                        self.regionId = value
                    }
                    if let value = dict["SecurityGroupId"] as? String {
                        self.securityGroupId = value
                    }
                    if let value = dict["Tag"] as? String {
                        self.tag = value
                    }
                    if let value = dict["Timestamp"] as? Int64 {
                        self.timestamp = value
                    }
                    if let value = dict["Topic"] as? String {
                        self.topic = value
                    }
                    if let value = dict["VSwitchIds"] as? String {
                        self.vSwitchIds = value
                    }
                    if let value = dict["VpcId"] as? String {
                        self.vpcId = value
                    }
                }
            }
            public class SourceSLSParameters : Tea.TeaModel {
                public var consumePosition: String?

                public var consumerGroup: String?

                public var logStore: String?

                public var project: String?

                public var roleName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.consumePosition != nil {
                        map["ConsumePosition"] = self.consumePosition!
                    }
                    if self.consumerGroup != nil {
                        map["ConsumerGroup"] = self.consumerGroup!
                    }
                    if self.logStore != nil {
                        map["LogStore"] = self.logStore!
                    }
                    if self.project != nil {
                        map["Project"] = self.project!
                    }
                    if self.roleName != nil {
                        map["RoleName"] = self.roleName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ConsumePosition"] as? String {
                        self.consumePosition = value
                    }
                    if let value = dict["ConsumerGroup"] as? String {
                        self.consumerGroup = value
                    }
                    if let value = dict["LogStore"] as? String {
                        self.logStore = value
                    }
                    if let value = dict["Project"] as? String {
                        self.project = value
                    }
                    if let value = dict["RoleName"] as? String {
                        self.roleName = value
                    }
                }
            }
            public var sourceApacheRocketMQCheckpointParameters: GetEventStreamingResponseBody.Data.Source.SourceApacheRocketMQCheckpointParameters?

            public var sourceCustomizedKafkaConnectorParameters: GetEventStreamingResponseBody.Data.Source.SourceCustomizedKafkaConnectorParameters?

            public var sourceCustomizedKafkaParameters: GetEventStreamingResponseBody.Data.Source.SourceCustomizedKafkaParameters?

            public var sourceDTSParameters: GetEventStreamingResponseBody.Data.Source.SourceDTSParameters?

            public var sourceEventBusParameters: GetEventStreamingResponseBody.Data.Source.SourceEventBusParameters?

            public var sourceKafkaParameters: GetEventStreamingResponseBody.Data.Source.SourceKafkaParameters?

            public var sourceMNSParameters: GetEventStreamingResponseBody.Data.Source.SourceMNSParameters?

            public var sourceMQTTParameters: GetEventStreamingResponseBody.Data.Source.SourceMQTTParameters?

            public var sourceMySQLParameters: SourceMySQLParameters?

            public var sourceOSSParameters: GetEventStreamingResponseBody.Data.Source.SourceOSSParameters?

            public var sourceOpenSourceRabbitMQParameters: GetEventStreamingResponseBody.Data.Source.SourceOpenSourceRabbitMQParameters?

            public var sourcePrometheusParameters: GetEventStreamingResponseBody.Data.Source.SourcePrometheusParameters?

            public var sourceRabbitMQParameters: GetEventStreamingResponseBody.Data.Source.SourceRabbitMQParameters?

            public var sourceRocketMQCheckpointParameters: GetEventStreamingResponseBody.Data.Source.SourceRocketMQCheckpointParameters?

            public var sourceRocketMQParameters: GetEventStreamingResponseBody.Data.Source.SourceRocketMQParameters?

            public var sourceSLSParameters: GetEventStreamingResponseBody.Data.Source.SourceSLSParameters?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.sourceApacheRocketMQCheckpointParameters?.validate()
                try self.sourceCustomizedKafkaConnectorParameters?.validate()
                try self.sourceCustomizedKafkaParameters?.validate()
                try self.sourceDTSParameters?.validate()
                try self.sourceEventBusParameters?.validate()
                try self.sourceKafkaParameters?.validate()
                try self.sourceMNSParameters?.validate()
                try self.sourceMQTTParameters?.validate()
                try self.sourceMySQLParameters?.validate()
                try self.sourceOSSParameters?.validate()
                try self.sourceOpenSourceRabbitMQParameters?.validate()
                try self.sourcePrometheusParameters?.validate()
                try self.sourceRabbitMQParameters?.validate()
                try self.sourceRocketMQCheckpointParameters?.validate()
                try self.sourceRocketMQParameters?.validate()
                try self.sourceSLSParameters?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.sourceApacheRocketMQCheckpointParameters != nil {
                    map["SourceApacheRocketMQCheckpointParameters"] = self.sourceApacheRocketMQCheckpointParameters?.toMap()
                }
                if self.sourceCustomizedKafkaConnectorParameters != nil {
                    map["SourceCustomizedKafkaConnectorParameters"] = self.sourceCustomizedKafkaConnectorParameters?.toMap()
                }
                if self.sourceCustomizedKafkaParameters != nil {
                    map["SourceCustomizedKafkaParameters"] = self.sourceCustomizedKafkaParameters?.toMap()
                }
                if self.sourceDTSParameters != nil {
                    map["SourceDTSParameters"] = self.sourceDTSParameters?.toMap()
                }
                if self.sourceEventBusParameters != nil {
                    map["SourceEventBusParameters"] = self.sourceEventBusParameters?.toMap()
                }
                if self.sourceKafkaParameters != nil {
                    map["SourceKafkaParameters"] = self.sourceKafkaParameters?.toMap()
                }
                if self.sourceMNSParameters != nil {
                    map["SourceMNSParameters"] = self.sourceMNSParameters?.toMap()
                }
                if self.sourceMQTTParameters != nil {
                    map["SourceMQTTParameters"] = self.sourceMQTTParameters?.toMap()
                }
                if self.sourceMySQLParameters != nil {
                    map["SourceMySQLParameters"] = self.sourceMySQLParameters?.toMap()
                }
                if self.sourceOSSParameters != nil {
                    map["SourceOSSParameters"] = self.sourceOSSParameters?.toMap()
                }
                if self.sourceOpenSourceRabbitMQParameters != nil {
                    map["SourceOpenSourceRabbitMQParameters"] = self.sourceOpenSourceRabbitMQParameters?.toMap()
                }
                if self.sourcePrometheusParameters != nil {
                    map["SourcePrometheusParameters"] = self.sourcePrometheusParameters?.toMap()
                }
                if self.sourceRabbitMQParameters != nil {
                    map["SourceRabbitMQParameters"] = self.sourceRabbitMQParameters?.toMap()
                }
                if self.sourceRocketMQCheckpointParameters != nil {
                    map["SourceRocketMQCheckpointParameters"] = self.sourceRocketMQCheckpointParameters?.toMap()
                }
                if self.sourceRocketMQParameters != nil {
                    map["SourceRocketMQParameters"] = self.sourceRocketMQParameters?.toMap()
                }
                if self.sourceSLSParameters != nil {
                    map["SourceSLSParameters"] = self.sourceSLSParameters?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["SourceApacheRocketMQCheckpointParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Source.SourceApacheRocketMQCheckpointParameters()
                    model.fromMap(value)
                    self.sourceApacheRocketMQCheckpointParameters = model
                }
                if let value = dict["SourceCustomizedKafkaConnectorParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Source.SourceCustomizedKafkaConnectorParameters()
                    model.fromMap(value)
                    self.sourceCustomizedKafkaConnectorParameters = model
                }
                if let value = dict["SourceCustomizedKafkaParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Source.SourceCustomizedKafkaParameters()
                    model.fromMap(value)
                    self.sourceCustomizedKafkaParameters = model
                }
                if let value = dict["SourceDTSParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Source.SourceDTSParameters()
                    model.fromMap(value)
                    self.sourceDTSParameters = model
                }
                if let value = dict["SourceEventBusParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Source.SourceEventBusParameters()
                    model.fromMap(value)
                    self.sourceEventBusParameters = model
                }
                if let value = dict["SourceKafkaParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Source.SourceKafkaParameters()
                    model.fromMap(value)
                    self.sourceKafkaParameters = model
                }
                if let value = dict["SourceMNSParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Source.SourceMNSParameters()
                    model.fromMap(value)
                    self.sourceMNSParameters = model
                }
                if let value = dict["SourceMQTTParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Source.SourceMQTTParameters()
                    model.fromMap(value)
                    self.sourceMQTTParameters = model
                }
                if let value = dict["SourceMySQLParameters"] as? [String: Any?] {
                    var model = SourceMySQLParameters()
                    model.fromMap(value)
                    self.sourceMySQLParameters = model
                }
                if let value = dict["SourceOSSParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Source.SourceOSSParameters()
                    model.fromMap(value)
                    self.sourceOSSParameters = model
                }
                if let value = dict["SourceOpenSourceRabbitMQParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Source.SourceOpenSourceRabbitMQParameters()
                    model.fromMap(value)
                    self.sourceOpenSourceRabbitMQParameters = model
                }
                if let value = dict["SourcePrometheusParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Source.SourcePrometheusParameters()
                    model.fromMap(value)
                    self.sourcePrometheusParameters = model
                }
                if let value = dict["SourceRabbitMQParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Source.SourceRabbitMQParameters()
                    model.fromMap(value)
                    self.sourceRabbitMQParameters = model
                }
                if let value = dict["SourceRocketMQCheckpointParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Source.SourceRocketMQCheckpointParameters()
                    model.fromMap(value)
                    self.sourceRocketMQCheckpointParameters = model
                }
                if let value = dict["SourceRocketMQParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Source.SourceRocketMQParameters()
                    model.fromMap(value)
                    self.sourceRocketMQParameters = model
                }
                if let value = dict["SourceSLSParameters"] as? [String: Any?] {
                    var model = GetEventStreamingResponseBody.Data.Source.SourceSLSParameters()
                    model.fromMap(value)
                    self.sourceSLSParameters = model
                }
            }
        }
        public class Transforms : Tea.TeaModel {
            public var arn: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arn != nil {
                    map["Arn"] = self.arn!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Arn"] as? String {
                    self.arn = value
                }
            }
        }
        public var description_: String?

        public var detailedStatus: GetEventStreamingResponseBody.Data.DetailedStatus?

        public var eventStreamingName: String?

        public var filterPattern: String?

        public var runOptions: GetEventStreamingResponseBody.Data.RunOptions?

        public var sink: GetEventStreamingResponseBody.Data.Sink?

        public var source: GetEventStreamingResponseBody.Data.Source?

        public var status: String?

        public var transforms: [GetEventStreamingResponseBody.Data.Transforms]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.detailedStatus?.validate()
            try self.runOptions?.validate()
            try self.sink?.validate()
            try self.source?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.detailedStatus != nil {
                map["DetailedStatus"] = self.detailedStatus?.toMap()
            }
            if self.eventStreamingName != nil {
                map["EventStreamingName"] = self.eventStreamingName!
            }
            if self.filterPattern != nil {
                map["FilterPattern"] = self.filterPattern!
            }
            if self.runOptions != nil {
                map["RunOptions"] = self.runOptions?.toMap()
            }
            if self.sink != nil {
                map["Sink"] = self.sink?.toMap()
            }
            if self.source != nil {
                map["Source"] = self.source?.toMap()
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.transforms != nil {
                var tmp : [Any] = []
                for k in self.transforms! {
                    tmp.append(k.toMap())
                }
                map["Transforms"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DetailedStatus"] as? [String: Any?] {
                var model = GetEventStreamingResponseBody.Data.DetailedStatus()
                model.fromMap(value)
                self.detailedStatus = model
            }
            if let value = dict["EventStreamingName"] as? String {
                self.eventStreamingName = value
            }
            if let value = dict["FilterPattern"] as? String {
                self.filterPattern = value
            }
            if let value = dict["RunOptions"] as? [String: Any?] {
                var model = GetEventStreamingResponseBody.Data.RunOptions()
                model.fromMap(value)
                self.runOptions = model
            }
            if let value = dict["Sink"] as? [String: Any?] {
                var model = GetEventStreamingResponseBody.Data.Sink()
                model.fromMap(value)
                self.sink = model
            }
            if let value = dict["Source"] as? [String: Any?] {
                var model = GetEventStreamingResponseBody.Data.Source()
                model.fromMap(value)
                self.source = model
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Transforms"] as? [Any?] {
                var tmp : [GetEventStreamingResponseBody.Data.Transforms] = []
                for v in value {
                    if v != nil {
                        var model = GetEventStreamingResponseBody.Data.Transforms()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.transforms = tmp
            }
        }
    }
    public var code: String?

    public var data: GetEventStreamingResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetEventStreamingResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetEventStreamingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetEventStreamingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetEventStreamingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetRuleRequest : Tea.TeaModel {
    public var eventBusName: String?

    public var ruleName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eventBusName != nil {
            map["EventBusName"] = self.eventBusName!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EventBusName"] as? String {
            self.eventBusName = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
    }
}

public class GetRuleResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Targets : Tea.TeaModel {
            public class ConcurrentConfig : Tea.TeaModel {
                public var concurrency: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.concurrency != nil {
                        map["Concurrency"] = self.concurrency!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Concurrency"] as? Int64 {
                        self.concurrency = value
                    }
                }
            }
            public class DeadLetterQueue : Tea.TeaModel {
                public var arn: String?

                public var network: String?

                public var securityGroupId: String?

                public var vSwitchIds: String?

                public var vpcId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.arn != nil {
                        map["Arn"] = self.arn!
                    }
                    if self.network != nil {
                        map["Network"] = self.network!
                    }
                    if self.securityGroupId != nil {
                        map["SecurityGroupId"] = self.securityGroupId!
                    }
                    if self.vSwitchIds != nil {
                        map["VSwitchIds"] = self.vSwitchIds!
                    }
                    if self.vpcId != nil {
                        map["VpcId"] = self.vpcId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Arn"] as? String {
                        self.arn = value
                    }
                    if let value = dict["Network"] as? String {
                        self.network = value
                    }
                    if let value = dict["SecurityGroupId"] as? String {
                        self.securityGroupId = value
                    }
                    if let value = dict["VSwitchIds"] as? String {
                        self.vSwitchIds = value
                    }
                    if let value = dict["VpcId"] as? String {
                        self.vpcId = value
                    }
                }
            }
            public class ParamList : Tea.TeaModel {
                public var form: String?

                public var resourceKey: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.resourceKey != nil {
                        map["ResourceKey"] = self.resourceKey!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["ResourceKey"] as? String {
                        self.resourceKey = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var concurrentConfig: GetRuleResponseBody.Data.Targets.ConcurrentConfig?

            public var deadLetterQueue: GetRuleResponseBody.Data.Targets.DeadLetterQueue?

            public var detailMap: [String: Any]?

            public var endpoint: String?

            public var errorsTolerance: String?

            public var id: String?

            public var paramList: [GetRuleResponseBody.Data.Targets.ParamList]?

            public var pushRetryStrategy: String?

            public var pushSelector: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.concurrentConfig?.validate()
                try self.deadLetterQueue?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.concurrentConfig != nil {
                    map["ConcurrentConfig"] = self.concurrentConfig?.toMap()
                }
                if self.deadLetterQueue != nil {
                    map["DeadLetterQueue"] = self.deadLetterQueue?.toMap()
                }
                if self.detailMap != nil {
                    map["DetailMap"] = self.detailMap!
                }
                if self.endpoint != nil {
                    map["Endpoint"] = self.endpoint!
                }
                if self.errorsTolerance != nil {
                    map["ErrorsTolerance"] = self.errorsTolerance!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.paramList != nil {
                    var tmp : [Any] = []
                    for k in self.paramList! {
                        tmp.append(k.toMap())
                    }
                    map["ParamList"] = tmp
                }
                if self.pushRetryStrategy != nil {
                    map["PushRetryStrategy"] = self.pushRetryStrategy!
                }
                if self.pushSelector != nil {
                    map["PushSelector"] = self.pushSelector!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConcurrentConfig"] as? [String: Any?] {
                    var model = GetRuleResponseBody.Data.Targets.ConcurrentConfig()
                    model.fromMap(value)
                    self.concurrentConfig = model
                }
                if let value = dict["DeadLetterQueue"] as? [String: Any?] {
                    var model = GetRuleResponseBody.Data.Targets.DeadLetterQueue()
                    model.fromMap(value)
                    self.deadLetterQueue = model
                }
                if let value = dict["DetailMap"] as? [String: Any] {
                    self.detailMap = value
                }
                if let value = dict["Endpoint"] as? String {
                    self.endpoint = value
                }
                if let value = dict["ErrorsTolerance"] as? String {
                    self.errorsTolerance = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["ParamList"] as? [Any?] {
                    var tmp : [GetRuleResponseBody.Data.Targets.ParamList] = []
                    for v in value {
                        if v != nil {
                            var model = GetRuleResponseBody.Data.Targets.ParamList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.paramList = tmp
                }
                if let value = dict["PushRetryStrategy"] as? String {
                    self.pushRetryStrategy = value
                }
                if let value = dict["PushSelector"] as? String {
                    self.pushSelector = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var createdTimestamp: Int64?

        public var description_: String?

        public var eventBusName: String?

        public var filterPattern: String?

        public var ruleARN: String?

        public var ruleName: String?

        public var status: String?

        public var targets: [GetRuleResponseBody.Data.Targets]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createdTimestamp != nil {
                map["CreatedTimestamp"] = self.createdTimestamp!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.eventBusName != nil {
                map["EventBusName"] = self.eventBusName!
            }
            if self.filterPattern != nil {
                map["FilterPattern"] = self.filterPattern!
            }
            if self.ruleARN != nil {
                map["RuleARN"] = self.ruleARN!
            }
            if self.ruleName != nil {
                map["RuleName"] = self.ruleName!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.targets != nil {
                var tmp : [Any] = []
                for k in self.targets! {
                    tmp.append(k.toMap())
                }
                map["Targets"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreatedTimestamp"] as? Int64 {
                self.createdTimestamp = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["EventBusName"] as? String {
                self.eventBusName = value
            }
            if let value = dict["FilterPattern"] as? String {
                self.filterPattern = value
            }
            if let value = dict["RuleARN"] as? String {
                self.ruleARN = value
            }
            if let value = dict["RuleName"] as? String {
                self.ruleName = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Targets"] as? [Any?] {
                var tmp : [GetRuleResponseBody.Data.Targets] = []
                for v in value {
                    if v != nil {
                        var model = GetRuleResponseBody.Data.Targets()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.targets = tmp
            }
        }
    }
    public var code: String?

    public var data: GetRuleResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetRuleResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListAliyunOfficialEventSourcesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class EventSourceList : Tea.TeaModel {
            public class EventTypes : Tea.TeaModel {
                public var eventSourceName: String?

                public var groupName: String?

                public var name: String?

                public var shortName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.eventSourceName != nil {
                        map["EventSourceName"] = self.eventSourceName!
                    }
                    if self.groupName != nil {
                        map["GroupName"] = self.groupName!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.shortName != nil {
                        map["ShortName"] = self.shortName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["EventSourceName"] as? String {
                        self.eventSourceName = value
                    }
                    if let value = dict["GroupName"] as? String {
                        self.groupName = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["ShortName"] as? String {
                        self.shortName = value
                    }
                }
            }
            public var arn: String?

            public var ctime: Double?

            public var description_: String?

            public var eventBusName: String?

            public var eventTypes: [ListAliyunOfficialEventSourcesResponseBody.Data.EventSourceList.EventTypes]?

            public var fullName: String?

            public var name: String?

            public var status: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arn != nil {
                    map["Arn"] = self.arn!
                }
                if self.ctime != nil {
                    map["Ctime"] = self.ctime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.eventBusName != nil {
                    map["EventBusName"] = self.eventBusName!
                }
                if self.eventTypes != nil {
                    var tmp : [Any] = []
                    for k in self.eventTypes! {
                        tmp.append(k.toMap())
                    }
                    map["EventTypes"] = tmp
                }
                if self.fullName != nil {
                    map["FullName"] = self.fullName!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Arn"] as? String {
                    self.arn = value
                }
                if let value = dict["Ctime"] as? Double {
                    self.ctime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["EventBusName"] as? String {
                    self.eventBusName = value
                }
                if let value = dict["EventTypes"] as? [Any?] {
                    var tmp : [ListAliyunOfficialEventSourcesResponseBody.Data.EventSourceList.EventTypes] = []
                    for v in value {
                        if v != nil {
                            var model = ListAliyunOfficialEventSourcesResponseBody.Data.EventSourceList.EventTypes()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.eventTypes = tmp
                }
                if let value = dict["FullName"] as? String {
                    self.fullName = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var eventSourceList: [ListAliyunOfficialEventSourcesResponseBody.Data.EventSourceList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.eventSourceList != nil {
                var tmp : [Any] = []
                for k in self.eventSourceList! {
                    tmp.append(k.toMap())
                }
                map["EventSourceList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EventSourceList"] as? [Any?] {
                var tmp : [ListAliyunOfficialEventSourcesResponseBody.Data.EventSourceList] = []
                for v in value {
                    if v != nil {
                        var model = ListAliyunOfficialEventSourcesResponseBody.Data.EventSourceList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.eventSourceList = tmp
            }
        }
    }
    public var code: String?

    public var data: ListAliyunOfficialEventSourcesResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListAliyunOfficialEventSourcesResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListAliyunOfficialEventSourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAliyunOfficialEventSourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListAliyunOfficialEventSourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListApiDestinationsRequest : Tea.TeaModel {
    public var apiDestinationNamePrefix: String?

    public var connectionName: String?

    public var maxResults: Int64?

    public var nextToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiDestinationNamePrefix != nil {
            map["ApiDestinationNamePrefix"] = self.apiDestinationNamePrefix!
        }
        if self.connectionName != nil {
            map["ConnectionName"] = self.connectionName!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiDestinationNamePrefix"] as? String {
            self.apiDestinationNamePrefix = value
        }
        if let value = dict["ConnectionName"] as? String {
            self.connectionName = value
        }
        if let value = dict["MaxResults"] as? Int64 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
    }
}

public class ListApiDestinationsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ApiDestinations : Tea.TeaModel {
            public class HttpApiParameters : Tea.TeaModel {
                public var endpoint: String?

                public var method: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.endpoint != nil {
                        map["Endpoint"] = self.endpoint!
                    }
                    if self.method != nil {
                        map["Method"] = self.method!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Endpoint"] as? String {
                        self.endpoint = value
                    }
                    if let value = dict["Method"] as? String {
                        self.method = value
                    }
                }
            }
            public var apiDestinationName: String?

            public var connectionName: String?

            public var description_: String?

            public var gmtCreate: Int64?

            public var httpApiParameters: ListApiDestinationsResponseBody.Data.ApiDestinations.HttpApiParameters?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.httpApiParameters?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiDestinationName != nil {
                    map["ApiDestinationName"] = self.apiDestinationName!
                }
                if self.connectionName != nil {
                    map["ConnectionName"] = self.connectionName!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.httpApiParameters != nil {
                    map["HttpApiParameters"] = self.httpApiParameters?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiDestinationName"] as? String {
                    self.apiDestinationName = value
                }
                if let value = dict["ConnectionName"] as? String {
                    self.connectionName = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["GmtCreate"] as? Int64 {
                    self.gmtCreate = value
                }
                if let value = dict["HttpApiParameters"] as? [String: Any?] {
                    var model = ListApiDestinationsResponseBody.Data.ApiDestinations.HttpApiParameters()
                    model.fromMap(value)
                    self.httpApiParameters = model
                }
            }
        }
        public var apiDestinations: [ListApiDestinationsResponseBody.Data.ApiDestinations]?

        public var maxResults: Double?

        public var nextToken: String?

        public var total: Double?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiDestinations != nil {
                var tmp : [Any] = []
                for k in self.apiDestinations! {
                    tmp.append(k.toMap())
                }
                map["ApiDestinations"] = tmp
            }
            if self.maxResults != nil {
                map["MaxResults"] = self.maxResults!
            }
            if self.nextToken != nil {
                map["NextToken"] = self.nextToken!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiDestinations"] as? [Any?] {
                var tmp : [ListApiDestinationsResponseBody.Data.ApiDestinations] = []
                for v in value {
                    if v != nil {
                        var model = ListApiDestinationsResponseBody.Data.ApiDestinations()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.apiDestinations = tmp
            }
            if let value = dict["MaxResults"] as? Double {
                self.maxResults = value
            }
            if let value = dict["NextToken"] as? String {
                self.nextToken = value
            }
            if let value = dict["Total"] as? Double {
                self.total = value
            }
        }
    }
    public var code: String?

    public var data: ListApiDestinationsResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListApiDestinationsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListApiDestinationsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListApiDestinationsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListApiDestinationsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListConnectionsRequest : Tea.TeaModel {
    public var connectionNamePrefix: String?

    public var maxResults: Int64?

    public var nextToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.connectionNamePrefix != nil {
            map["ConnectionNamePrefix"] = self.connectionNamePrefix!
        }
        if self.maxResults != nil {
            map["MaxResults"] = self.maxResults!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ConnectionNamePrefix"] as? String {
            self.connectionNamePrefix = value
        }
        if let value = dict["MaxResults"] as? Int64 {
            self.maxResults = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
    }
}

public class ListConnectionsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Connections : Tea.TeaModel {
            public class AuthParameters : Tea.TeaModel {
                public class ApiKeyAuthParameters : Tea.TeaModel {
                    public var apiKeyName: String?

                    public var apiKeyValue: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.apiKeyName != nil {
                            map["ApiKeyName"] = self.apiKeyName!
                        }
                        if self.apiKeyValue != nil {
                            map["ApiKeyValue"] = self.apiKeyValue!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ApiKeyName"] as? String {
                            self.apiKeyName = value
                        }
                        if let value = dict["ApiKeyValue"] as? String {
                            self.apiKeyValue = value
                        }
                    }
                }
                public class BasicAuthParameters : Tea.TeaModel {
                    public var password: String?

                    public var username: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.password != nil {
                            map["Password"] = self.password!
                        }
                        if self.username != nil {
                            map["Username"] = self.username!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Password"] as? String {
                            self.password = value
                        }
                        if let value = dict["Username"] as? String {
                            self.username = value
                        }
                    }
                }
                public class OAuthParameters : Tea.TeaModel {
                    public class ClientParameters : Tea.TeaModel {
                        public var clientID: String?

                        public var clientSecret: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.clientID != nil {
                                map["ClientID"] = self.clientID!
                            }
                            if self.clientSecret != nil {
                                map["ClientSecret"] = self.clientSecret!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["ClientID"] as? String {
                                self.clientID = value
                            }
                            if let value = dict["ClientSecret"] as? String {
                                self.clientSecret = value
                            }
                        }
                    }
                    public class OAuthHttpParameters : Tea.TeaModel {
                        public class BodyParameters : Tea.TeaModel {
                            public var isValueSecret: String?

                            public var key: String?

                            public var value: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.isValueSecret != nil {
                                    map["IsValueSecret"] = self.isValueSecret!
                                }
                                if self.key != nil {
                                    map["Key"] = self.key!
                                }
                                if self.value != nil {
                                    map["Value"] = self.value!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["IsValueSecret"] as? String {
                                    self.isValueSecret = value
                                }
                                if let value = dict["Key"] as? String {
                                    self.key = value
                                }
                                if let value = dict["Value"] as? String {
                                    self.value = value
                                }
                            }
                        }
                        public class HeaderParameters : Tea.TeaModel {
                            public var isValueSecret: String?

                            public var key: String?

                            public var value: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.isValueSecret != nil {
                                    map["IsValueSecret"] = self.isValueSecret!
                                }
                                if self.key != nil {
                                    map["Key"] = self.key!
                                }
                                if self.value != nil {
                                    map["Value"] = self.value!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["IsValueSecret"] as? String {
                                    self.isValueSecret = value
                                }
                                if let value = dict["Key"] as? String {
                                    self.key = value
                                }
                                if let value = dict["Value"] as? String {
                                    self.value = value
                                }
                            }
                        }
                        public class QueryStringParameters : Tea.TeaModel {
                            public var isValueSecret: String?

                            public var key: String?

                            public var value: String?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.isValueSecret != nil {
                                    map["IsValueSecret"] = self.isValueSecret!
                                }
                                if self.key != nil {
                                    map["Key"] = self.key!
                                }
                                if self.value != nil {
                                    map["Value"] = self.value!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["IsValueSecret"] as? String {
                                    self.isValueSecret = value
                                }
                                if let value = dict["Key"] as? String {
                                    self.key = value
                                }
                                if let value = dict["Value"] as? String {
                                    self.value = value
                                }
                            }
                        }
                        public var bodyParameters: [ListConnectionsResponseBody.Data.Connections.AuthParameters.OAuthParameters.OAuthHttpParameters.BodyParameters]?

                        public var headerParameters: [ListConnectionsResponseBody.Data.Connections.AuthParameters.OAuthParameters.OAuthHttpParameters.HeaderParameters]?

                        public var queryStringParameters: [ListConnectionsResponseBody.Data.Connections.AuthParameters.OAuthParameters.OAuthHttpParameters.QueryStringParameters]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.bodyParameters != nil {
                                var tmp : [Any] = []
                                for k in self.bodyParameters! {
                                    tmp.append(k.toMap())
                                }
                                map["BodyParameters"] = tmp
                            }
                            if self.headerParameters != nil {
                                var tmp : [Any] = []
                                for k in self.headerParameters! {
                                    tmp.append(k.toMap())
                                }
                                map["HeaderParameters"] = tmp
                            }
                            if self.queryStringParameters != nil {
                                var tmp : [Any] = []
                                for k in self.queryStringParameters! {
                                    tmp.append(k.toMap())
                                }
                                map["QueryStringParameters"] = tmp
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["BodyParameters"] as? [Any?] {
                                var tmp : [ListConnectionsResponseBody.Data.Connections.AuthParameters.OAuthParameters.OAuthHttpParameters.BodyParameters] = []
                                for v in value {
                                    if v != nil {
                                        var model = ListConnectionsResponseBody.Data.Connections.AuthParameters.OAuthParameters.OAuthHttpParameters.BodyParameters()
                                        if v != nil {
                                            model.fromMap(v as? [String: Any?])
                                        }
                                        tmp.append(model)
                                    }
                                }
                                self.bodyParameters = tmp
                            }
                            if let value = dict["HeaderParameters"] as? [Any?] {
                                var tmp : [ListConnectionsResponseBody.Data.Connections.AuthParameters.OAuthParameters.OAuthHttpParameters.HeaderParameters] = []
                                for v in value {
                                    if v != nil {
                                        var model = ListConnectionsResponseBody.Data.Connections.AuthParameters.OAuthParameters.OAuthHttpParameters.HeaderParameters()
                                        if v != nil {
                                            model.fromMap(v as? [String: Any?])
                                        }
                                        tmp.append(model)
                                    }
                                }
                                self.headerParameters = tmp
                            }
                            if let value = dict["QueryStringParameters"] as? [Any?] {
                                var tmp : [ListConnectionsResponseBody.Data.Connections.AuthParameters.OAuthParameters.OAuthHttpParameters.QueryStringParameters] = []
                                for v in value {
                                    if v != nil {
                                        var model = ListConnectionsResponseBody.Data.Connections.AuthParameters.OAuthParameters.OAuthHttpParameters.QueryStringParameters()
                                        if v != nil {
                                            model.fromMap(v as? [String: Any?])
                                        }
                                        tmp.append(model)
                                    }
                                }
                                self.queryStringParameters = tmp
                            }
                        }
                    }
                    public var authorizationEndpoint: String?

                    public var clientParameters: ListConnectionsResponseBody.Data.Connections.AuthParameters.OAuthParameters.ClientParameters?

                    public var httpMethod: String?

                    public var OAuthHttpParameters: ListConnectionsResponseBody.Data.Connections.AuthParameters.OAuthParameters.OAuthHttpParameters?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.clientParameters?.validate()
                        try self.OAuthHttpParameters?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.authorizationEndpoint != nil {
                            map["AuthorizationEndpoint"] = self.authorizationEndpoint!
                        }
                        if self.clientParameters != nil {
                            map["ClientParameters"] = self.clientParameters?.toMap()
                        }
                        if self.httpMethod != nil {
                            map["HttpMethod"] = self.httpMethod!
                        }
                        if self.OAuthHttpParameters != nil {
                            map["OAuthHttpParameters"] = self.OAuthHttpParameters?.toMap()
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["AuthorizationEndpoint"] as? String {
                            self.authorizationEndpoint = value
                        }
                        if let value = dict["ClientParameters"] as? [String: Any?] {
                            var model = ListConnectionsResponseBody.Data.Connections.AuthParameters.OAuthParameters.ClientParameters()
                            model.fromMap(value)
                            self.clientParameters = model
                        }
                        if let value = dict["HttpMethod"] as? String {
                            self.httpMethod = value
                        }
                        if let value = dict["OAuthHttpParameters"] as? [String: Any?] {
                            var model = ListConnectionsResponseBody.Data.Connections.AuthParameters.OAuthParameters.OAuthHttpParameters()
                            model.fromMap(value)
                            self.OAuthHttpParameters = model
                        }
                    }
                }
                public var apiKeyAuthParameters: ListConnectionsResponseBody.Data.Connections.AuthParameters.ApiKeyAuthParameters?

                public var authorizationType: String?

                public var basicAuthParameters: ListConnectionsResponseBody.Data.Connections.AuthParameters.BasicAuthParameters?

                public var OAuthParameters: ListConnectionsResponseBody.Data.Connections.AuthParameters.OAuthParameters?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.apiKeyAuthParameters?.validate()
                    try self.basicAuthParameters?.validate()
                    try self.OAuthParameters?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.apiKeyAuthParameters != nil {
                        map["ApiKeyAuthParameters"] = self.apiKeyAuthParameters?.toMap()
                    }
                    if self.authorizationType != nil {
                        map["AuthorizationType"] = self.authorizationType!
                    }
                    if self.basicAuthParameters != nil {
                        map["BasicAuthParameters"] = self.basicAuthParameters?.toMap()
                    }
                    if self.OAuthParameters != nil {
                        map["OAuthParameters"] = self.OAuthParameters?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ApiKeyAuthParameters"] as? [String: Any?] {
                        var model = ListConnectionsResponseBody.Data.Connections.AuthParameters.ApiKeyAuthParameters()
                        model.fromMap(value)
                        self.apiKeyAuthParameters = model
                    }
                    if let value = dict["AuthorizationType"] as? String {
                        self.authorizationType = value
                    }
                    if let value = dict["BasicAuthParameters"] as? [String: Any?] {
                        var model = ListConnectionsResponseBody.Data.Connections.AuthParameters.BasicAuthParameters()
                        model.fromMap(value)
                        self.basicAuthParameters = model
                    }
                    if let value = dict["OAuthParameters"] as? [String: Any?] {
                        var model = ListConnectionsResponseBody.Data.Connections.AuthParameters.OAuthParameters()
                        model.fromMap(value)
                        self.OAuthParameters = model
                    }
                }
            }
            public class NetworkParameters : Tea.TeaModel {
                public var networkType: String?

                public var securityGroupId: String?

                public var vpcId: String?

                public var vswitcheId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.networkType != nil {
                        map["NetworkType"] = self.networkType!
                    }
                    if self.securityGroupId != nil {
                        map["SecurityGroupId"] = self.securityGroupId!
                    }
                    if self.vpcId != nil {
                        map["VpcId"] = self.vpcId!
                    }
                    if self.vswitcheId != nil {
                        map["VswitcheId"] = self.vswitcheId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["NetworkType"] as? String {
                        self.networkType = value
                    }
                    if let value = dict["SecurityGroupId"] as? String {
                        self.securityGroupId = value
                    }
                    if let value = dict["VpcId"] as? String {
                        self.vpcId = value
                    }
                    if let value = dict["VswitcheId"] as? String {
                        self.vswitcheId = value
                    }
                }
            }
            public var authParameters: ListConnectionsResponseBody.Data.Connections.AuthParameters?

            public var connectionName: String?

            public var description_: String?

            public var gmtCreate: Int64?

            public var id: Int64?

            public var networkParameters: ListConnectionsResponseBody.Data.Connections.NetworkParameters?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.authParameters?.validate()
                try self.networkParameters?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.authParameters != nil {
                    map["AuthParameters"] = self.authParameters?.toMap()
                }
                if self.connectionName != nil {
                    map["ConnectionName"] = self.connectionName!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.networkParameters != nil {
                    map["NetworkParameters"] = self.networkParameters?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AuthParameters"] as? [String: Any?] {
                    var model = ListConnectionsResponseBody.Data.Connections.AuthParameters()
                    model.fromMap(value)
                    self.authParameters = model
                }
                if let value = dict["ConnectionName"] as? String {
                    self.connectionName = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["GmtCreate"] as? Int64 {
                    self.gmtCreate = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["NetworkParameters"] as? [String: Any?] {
                    var model = ListConnectionsResponseBody.Data.Connections.NetworkParameters()
                    model.fromMap(value)
                    self.networkParameters = model
                }
            }
        }
        public var connections: [ListConnectionsResponseBody.Data.Connections]?

        public var maxResults: Double?

        public var nextToken: String?

        public var total: Double?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.connections != nil {
                var tmp : [Any] = []
                for k in self.connections! {
                    tmp.append(k.toMap())
                }
                map["Connections"] = tmp
            }
            if self.maxResults != nil {
                map["MaxResults"] = self.maxResults!
            }
            if self.nextToken != nil {
                map["NextToken"] = self.nextToken!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Connections"] as? [Any?] {
                var tmp : [ListConnectionsResponseBody.Data.Connections] = []
                for v in value {
                    if v != nil {
                        var model = ListConnectionsResponseBody.Data.Connections()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.connections = tmp
            }
            if let value = dict["MaxResults"] as? Double {
                self.maxResults = value
            }
            if let value = dict["NextToken"] as? String {
                self.nextToken = value
            }
            if let value = dict["Total"] as? Double {
                self.total = value
            }
        }
    }
    public var code: String?

    public var data: ListConnectionsResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListConnectionsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ListConnectionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListConnectionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListConnectionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListEventBusesRequest : Tea.TeaModel {
    public var limit: Int32?

    public var namePrefix: String?

    public var nextToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.limit != nil {
            map["Limit"] = self.limit!
        }
        if self.namePrefix != nil {
            map["NamePrefix"] = self.namePrefix!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Limit"] as? Int32 {
            self.limit = value
        }
        if let value = dict["NamePrefix"] as? String {
            self.namePrefix = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
    }
}

public class ListEventBusesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class EventBuses : Tea.TeaModel {
            public var createTimestamp: Int64?

            public var description_: String?

            public var eventBusARN: String?

            public var eventBusName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.createTimestamp != nil {
                    map["CreateTimestamp"] = self.createTimestamp!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.eventBusARN != nil {
                    map["EventBusARN"] = self.eventBusARN!
                }
                if self.eventBusName != nil {
                    map["EventBusName"] = self.eventBusName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CreateTimestamp"] as? Int64 {
                    self.createTimestamp = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["EventBusARN"] as? String {
                    self.eventBusARN = value
                }
                if let value = dict["EventBusName"] as? String {
                    self.eventBusName = value
                }
            }
        }
        public var eventBuses: [ListEventBusesResponseBody.Data.EventBuses]?

        public var nextToken: String?

        public var total: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.eventBuses != nil {
                var tmp : [Any] = []
                for k in self.eventBuses! {
                    tmp.append(k.toMap())
                }
                map["EventBuses"] = tmp
            }
            if self.nextToken != nil {
                map["NextToken"] = self.nextToken!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EventBuses"] as? [Any?] {
                var tmp : [ListEventBusesResponseBody.Data.EventBuses] = []
                for v in value {
                    if v != nil {
                        var model = ListEventBusesResponseBody.Data.EventBuses()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.eventBuses = tmp
            }
            if let value = dict["NextToken"] as? String {
                self.nextToken = value
            }
            if let value = dict["Total"] as? Int32 {
                self.total = value
            }
        }
    }
    public var code: String?

    public var data: ListEventBusesResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListEventBusesResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListEventBusesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListEventBusesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListEventBusesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListEventStreamingsRequest : Tea.TeaModel {
    public class Tags : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var limit: Int32?

    public var namePrefix: String?

    public var nextToken: String?

    public var sinkArn: String?

    public var sourceArn: String?

    public var tags: [ListEventStreamingsRequest.Tags]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.limit != nil {
            map["Limit"] = self.limit!
        }
        if self.namePrefix != nil {
            map["NamePrefix"] = self.namePrefix!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.sinkArn != nil {
            map["SinkArn"] = self.sinkArn!
        }
        if self.sourceArn != nil {
            map["SourceArn"] = self.sourceArn!
        }
        if self.tags != nil {
            var tmp : [Any] = []
            for k in self.tags! {
                tmp.append(k.toMap())
            }
            map["Tags"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Limit"] as? Int32 {
            self.limit = value
        }
        if let value = dict["NamePrefix"] as? String {
            self.namePrefix = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["SinkArn"] as? String {
            self.sinkArn = value
        }
        if let value = dict["SourceArn"] as? String {
            self.sourceArn = value
        }
        if let value = dict["Tags"] as? [Any?] {
            var tmp : [ListEventStreamingsRequest.Tags] = []
            for v in value {
                if v != nil {
                    var model = ListEventStreamingsRequest.Tags()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tags = tmp
        }
    }
}

public class ListEventStreamingsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class EventStreamings : Tea.TeaModel {
            public class RunOptions : Tea.TeaModel {
                public class BatchWindow : Tea.TeaModel {
                    public var countBasedWindow: Int32?

                    public var timeBasedWindow: Int32?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.countBasedWindow != nil {
                            map["CountBasedWindow"] = self.countBasedWindow!
                        }
                        if self.timeBasedWindow != nil {
                            map["TimeBasedWindow"] = self.timeBasedWindow!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["CountBasedWindow"] as? Int32 {
                            self.countBasedWindow = value
                        }
                        if let value = dict["TimeBasedWindow"] as? Int32 {
                            self.timeBasedWindow = value
                        }
                    }
                }
                public class BusinessOption : Tea.TeaModel {
                    public var businessMode: String?

                    public var maxCapacityUnitCount: Int64?

                    public var minCapacityUnitCount: Int64?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.businessMode != nil {
                            map["BusinessMode"] = self.businessMode!
                        }
                        if self.maxCapacityUnitCount != nil {
                            map["MaxCapacityUnitCount"] = self.maxCapacityUnitCount!
                        }
                        if self.minCapacityUnitCount != nil {
                            map["MinCapacityUnitCount"] = self.minCapacityUnitCount!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["BusinessMode"] as? String {
                            self.businessMode = value
                        }
                        if let value = dict["MaxCapacityUnitCount"] as? Int64 {
                            self.maxCapacityUnitCount = value
                        }
                        if let value = dict["MinCapacityUnitCount"] as? Int64 {
                            self.minCapacityUnitCount = value
                        }
                    }
                }
                public class DeadLetterQueue : Tea.TeaModel {
                    public var arn: String?

                    public var network: String?

                    public var securityGroupId: String?

                    public var vSwitchIds: String?

                    public var vpcId: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.arn != nil {
                            map["Arn"] = self.arn!
                        }
                        if self.network != nil {
                            map["Network"] = self.network!
                        }
                        if self.securityGroupId != nil {
                            map["SecurityGroupId"] = self.securityGroupId!
                        }
                        if self.vSwitchIds != nil {
                            map["VSwitchIds"] = self.vSwitchIds!
                        }
                        if self.vpcId != nil {
                            map["VpcId"] = self.vpcId!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Arn"] as? String {
                            self.arn = value
                        }
                        if let value = dict["Network"] as? String {
                            self.network = value
                        }
                        if let value = dict["SecurityGroupId"] as? String {
                            self.securityGroupId = value
                        }
                        if let value = dict["VSwitchIds"] as? String {
                            self.vSwitchIds = value
                        }
                        if let value = dict["VpcId"] as? String {
                            self.vpcId = value
                        }
                    }
                }
                public class RetryStrategy : Tea.TeaModel {
                    public var maximumEventAgeInSeconds: Double?

                    public var maximumRetryAttempts: Double?

                    public var pushRetryStrategy: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.maximumEventAgeInSeconds != nil {
                            map["MaximumEventAgeInSeconds"] = self.maximumEventAgeInSeconds!
                        }
                        if self.maximumRetryAttempts != nil {
                            map["MaximumRetryAttempts"] = self.maximumRetryAttempts!
                        }
                        if self.pushRetryStrategy != nil {
                            map["PushRetryStrategy"] = self.pushRetryStrategy!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["MaximumEventAgeInSeconds"] as? Double {
                            self.maximumEventAgeInSeconds = value
                        }
                        if let value = dict["MaximumRetryAttempts"] as? Double {
                            self.maximumRetryAttempts = value
                        }
                        if let value = dict["PushRetryStrategy"] as? String {
                            self.pushRetryStrategy = value
                        }
                    }
                }
                public var batchWindow: ListEventStreamingsResponseBody.Data.EventStreamings.RunOptions.BatchWindow?

                public var businessOption: ListEventStreamingsResponseBody.Data.EventStreamings.RunOptions.BusinessOption?

                public var deadLetterQueue: ListEventStreamingsResponseBody.Data.EventStreamings.RunOptions.DeadLetterQueue?

                public var errorsTolerance: String?

                public var maximumTasks: Int32?

                public var retryStrategy: ListEventStreamingsResponseBody.Data.EventStreamings.RunOptions.RetryStrategy?

                public var throttling: Int32?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.batchWindow?.validate()
                    try self.businessOption?.validate()
                    try self.deadLetterQueue?.validate()
                    try self.retryStrategy?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.batchWindow != nil {
                        map["BatchWindow"] = self.batchWindow?.toMap()
                    }
                    if self.businessOption != nil {
                        map["BusinessOption"] = self.businessOption?.toMap()
                    }
                    if self.deadLetterQueue != nil {
                        map["DeadLetterQueue"] = self.deadLetterQueue?.toMap()
                    }
                    if self.errorsTolerance != nil {
                        map["ErrorsTolerance"] = self.errorsTolerance!
                    }
                    if self.maximumTasks != nil {
                        map["MaximumTasks"] = self.maximumTasks!
                    }
                    if self.retryStrategy != nil {
                        map["RetryStrategy"] = self.retryStrategy?.toMap()
                    }
                    if self.throttling != nil {
                        map["Throttling"] = self.throttling!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["BatchWindow"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.RunOptions.BatchWindow()
                        model.fromMap(value)
                        self.batchWindow = model
                    }
                    if let value = dict["BusinessOption"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.RunOptions.BusinessOption()
                        model.fromMap(value)
                        self.businessOption = model
                    }
                    if let value = dict["DeadLetterQueue"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.RunOptions.DeadLetterQueue()
                        model.fromMap(value)
                        self.deadLetterQueue = model
                    }
                    if let value = dict["ErrorsTolerance"] as? String {
                        self.errorsTolerance = value
                    }
                    if let value = dict["MaximumTasks"] as? Int32 {
                        self.maximumTasks = value
                    }
                    if let value = dict["RetryStrategy"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.RunOptions.RetryStrategy()
                        model.fromMap(value)
                        self.retryStrategy = model
                    }
                    if let value = dict["Throttling"] as? Int32 {
                        self.throttling = value
                    }
                }
            }
            public class Sink : Tea.TeaModel {
                public class SinkApacheRocketMQCheckpointParameters : Tea.TeaModel {
                    public class ConsumeTimestamp : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class Group : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class Topic : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public var consumeTimestamp: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkApacheRocketMQCheckpointParameters.ConsumeTimestamp?

                    public var group: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkApacheRocketMQCheckpointParameters.Group?

                    public var instanceEndpoint: String?

                    public var instancePassword: String?

                    public var instanceUsername: String?

                    public var networkType: String?

                    public var securityGroupId: String?

                    public var topic: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkApacheRocketMQCheckpointParameters.Topic?

                    public var vSwitchId: String?

                    public var vpcId: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.consumeTimestamp?.validate()
                        try self.group?.validate()
                        try self.topic?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.consumeTimestamp != nil {
                            map["ConsumeTimestamp"] = self.consumeTimestamp?.toMap()
                        }
                        if self.group != nil {
                            map["Group"] = self.group?.toMap()
                        }
                        if self.instanceEndpoint != nil {
                            map["InstanceEndpoint"] = self.instanceEndpoint!
                        }
                        if self.instancePassword != nil {
                            map["InstancePassword"] = self.instancePassword!
                        }
                        if self.instanceUsername != nil {
                            map["InstanceUsername"] = self.instanceUsername!
                        }
                        if self.networkType != nil {
                            map["NetworkType"] = self.networkType!
                        }
                        if self.securityGroupId != nil {
                            map["SecurityGroupId"] = self.securityGroupId!
                        }
                        if self.topic != nil {
                            map["Topic"] = self.topic?.toMap()
                        }
                        if self.vSwitchId != nil {
                            map["VSwitchId"] = self.vSwitchId!
                        }
                        if self.vpcId != nil {
                            map["VpcId"] = self.vpcId!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ConsumeTimestamp"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkApacheRocketMQCheckpointParameters.ConsumeTimestamp()
                            model.fromMap(value)
                            self.consumeTimestamp = model
                        }
                        if let value = dict["Group"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkApacheRocketMQCheckpointParameters.Group()
                            model.fromMap(value)
                            self.group = model
                        }
                        if let value = dict["InstanceEndpoint"] as? String {
                            self.instanceEndpoint = value
                        }
                        if let value = dict["InstancePassword"] as? String {
                            self.instancePassword = value
                        }
                        if let value = dict["InstanceUsername"] as? String {
                            self.instanceUsername = value
                        }
                        if let value = dict["NetworkType"] as? String {
                            self.networkType = value
                        }
                        if let value = dict["SecurityGroupId"] as? String {
                            self.securityGroupId = value
                        }
                        if let value = dict["Topic"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkApacheRocketMQCheckpointParameters.Topic()
                            model.fromMap(value)
                            self.topic = model
                        }
                        if let value = dict["VSwitchId"] as? String {
                            self.vSwitchId = value
                        }
                        if let value = dict["VpcId"] as? String {
                            self.vpcId = value
                        }
                    }
                }
                public class SinkCustomizedKafkaConnectorParameters : Tea.TeaModel {
                    public class ConnectorParameters : Tea.TeaModel {
                        public var config: [String: Any]?

                        public var name: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.config != nil {
                                map["Config"] = self.config!
                            }
                            if self.name != nil {
                                map["Name"] = self.name!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Config"] as? [String: Any] {
                                self.config = value
                            }
                            if let value = dict["Name"] as? String {
                                self.name = value
                            }
                        }
                    }
                    public var connectorPackageUrl: String?

                    public var connectorParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkCustomizedKafkaConnectorParameters.ConnectorParameters?

                    public var workerParameters: [String: Any]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.connectorParameters?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.connectorPackageUrl != nil {
                            map["ConnectorPackageUrl"] = self.connectorPackageUrl!
                        }
                        if self.connectorParameters != nil {
                            map["ConnectorParameters"] = self.connectorParameters?.toMap()
                        }
                        if self.workerParameters != nil {
                            map["WorkerParameters"] = self.workerParameters!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ConnectorPackageUrl"] as? String {
                            self.connectorPackageUrl = value
                        }
                        if let value = dict["ConnectorParameters"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkCustomizedKafkaConnectorParameters.ConnectorParameters()
                            model.fromMap(value)
                            self.connectorParameters = model
                        }
                        if let value = dict["WorkerParameters"] as? [String: Any] {
                            self.workerParameters = value
                        }
                    }
                }
                public class SinkCustomizedKafkaParameters : Tea.TeaModel {
                    public var instanceId: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.instanceId != nil {
                            map["InstanceId"] = self.instanceId!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["InstanceId"] as? String {
                            self.instanceId = value
                        }
                    }
                }
                public class SinkDashVectorParameters : Tea.TeaModel {
                    public class DashVectorSchemaParameters : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class Partition : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class PrimaryKeyId : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class Vector : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public var apiKey: String?

                    public var collection: String?

                    public var dashVectorSchemaParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDashVectorParameters.DashVectorSchemaParameters?

                    public var instanceId: String?

                    public var network: String?

                    public var operation: String?

                    public var partition: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDashVectorParameters.Partition?

                    public var primaryKeyId: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDashVectorParameters.PrimaryKeyId?

                    public var vector: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDashVectorParameters.Vector?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.dashVectorSchemaParameters?.validate()
                        try self.partition?.validate()
                        try self.primaryKeyId?.validate()
                        try self.vector?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.apiKey != nil {
                            map["ApiKey"] = self.apiKey!
                        }
                        if self.collection != nil {
                            map["Collection"] = self.collection!
                        }
                        if self.dashVectorSchemaParameters != nil {
                            map["DashVectorSchemaParameters"] = self.dashVectorSchemaParameters?.toMap()
                        }
                        if self.instanceId != nil {
                            map["InstanceId"] = self.instanceId!
                        }
                        if self.network != nil {
                            map["Network"] = self.network!
                        }
                        if self.operation != nil {
                            map["Operation"] = self.operation!
                        }
                        if self.partition != nil {
                            map["Partition"] = self.partition?.toMap()
                        }
                        if self.primaryKeyId != nil {
                            map["PrimaryKeyId"] = self.primaryKeyId?.toMap()
                        }
                        if self.vector != nil {
                            map["Vector"] = self.vector?.toMap()
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ApiKey"] as? String {
                            self.apiKey = value
                        }
                        if let value = dict["Collection"] as? String {
                            self.collection = value
                        }
                        if let value = dict["DashVectorSchemaParameters"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDashVectorParameters.DashVectorSchemaParameters()
                            model.fromMap(value)
                            self.dashVectorSchemaParameters = model
                        }
                        if let value = dict["InstanceId"] as? String {
                            self.instanceId = value
                        }
                        if let value = dict["Network"] as? String {
                            self.network = value
                        }
                        if let value = dict["Operation"] as? String {
                            self.operation = value
                        }
                        if let value = dict["Partition"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDashVectorParameters.Partition()
                            model.fromMap(value)
                            self.partition = model
                        }
                        if let value = dict["PrimaryKeyId"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDashVectorParameters.PrimaryKeyId()
                            model.fromMap(value)
                            self.primaryKeyId = model
                        }
                        if let value = dict["Vector"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDashVectorParameters.Vector()
                            model.fromMap(value)
                            self.vector = model
                        }
                    }
                }
                public class SinkDataHubParameters : Tea.TeaModel {
                    public class Body : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class Project : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class RoleName : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class Topic : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class TopicSchema : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class TopicType : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public var body: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDataHubParameters.Body?

                    public var project: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDataHubParameters.Project?

                    public var roleName: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDataHubParameters.RoleName?

                    public var topic: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDataHubParameters.Topic?

                    public var topicSchema: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDataHubParameters.TopicSchema?

                    public var topicType: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDataHubParameters.TopicType?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.body?.validate()
                        try self.project?.validate()
                        try self.roleName?.validate()
                        try self.topic?.validate()
                        try self.topicSchema?.validate()
                        try self.topicType?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.body != nil {
                            map["Body"] = self.body?.toMap()
                        }
                        if self.project != nil {
                            map["Project"] = self.project?.toMap()
                        }
                        if self.roleName != nil {
                            map["RoleName"] = self.roleName?.toMap()
                        }
                        if self.topic != nil {
                            map["Topic"] = self.topic?.toMap()
                        }
                        if self.topicSchema != nil {
                            map["TopicSchema"] = self.topicSchema?.toMap()
                        }
                        if self.topicType != nil {
                            map["TopicType"] = self.topicType?.toMap()
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Body"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDataHubParameters.Body()
                            model.fromMap(value)
                            self.body = model
                        }
                        if let value = dict["Project"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDataHubParameters.Project()
                            model.fromMap(value)
                            self.project = model
                        }
                        if let value = dict["RoleName"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDataHubParameters.RoleName()
                            model.fromMap(value)
                            self.roleName = model
                        }
                        if let value = dict["Topic"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDataHubParameters.Topic()
                            model.fromMap(value)
                            self.topic = model
                        }
                        if let value = dict["TopicSchema"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDataHubParameters.TopicSchema()
                            model.fromMap(value)
                            self.topicSchema = model
                        }
                        if let value = dict["TopicType"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDataHubParameters.TopicType()
                            model.fromMap(value)
                            self.topicType = model
                        }
                    }
                }
                public class SinkDorisParameters : Tea.TeaModel {
                    public class BeHttpEndpoint : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class Body : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class Database : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class FeHttpEndpoint : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class NetworkType : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class Password : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class QueryEndpoint : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class SecurityGroupId : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class Table : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class UserName : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class VSwitchIds : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class VpcId : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public var beHttpEndpoint: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDorisParameters.BeHttpEndpoint?

                    public var body: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDorisParameters.Body?

                    public var database: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDorisParameters.Database?

                    public var feHttpEndpoint: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDorisParameters.FeHttpEndpoint?

                    public var networkType: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDorisParameters.NetworkType?

                    public var password: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDorisParameters.Password?

                    public var queryEndpoint: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDorisParameters.QueryEndpoint?

                    public var securityGroupId: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDorisParameters.SecurityGroupId?

                    public var table: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDorisParameters.Table?

                    public var userName: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDorisParameters.UserName?

                    public var vSwitchIds: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDorisParameters.VSwitchIds?

                    public var vpcId: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDorisParameters.VpcId?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.beHttpEndpoint?.validate()
                        try self.body?.validate()
                        try self.database?.validate()
                        try self.feHttpEndpoint?.validate()
                        try self.networkType?.validate()
                        try self.password?.validate()
                        try self.queryEndpoint?.validate()
                        try self.securityGroupId?.validate()
                        try self.table?.validate()
                        try self.userName?.validate()
                        try self.vSwitchIds?.validate()
                        try self.vpcId?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.beHttpEndpoint != nil {
                            map["BeHttpEndpoint"] = self.beHttpEndpoint?.toMap()
                        }
                        if self.body != nil {
                            map["Body"] = self.body?.toMap()
                        }
                        if self.database != nil {
                            map["Database"] = self.database?.toMap()
                        }
                        if self.feHttpEndpoint != nil {
                            map["FeHttpEndpoint"] = self.feHttpEndpoint?.toMap()
                        }
                        if self.networkType != nil {
                            map["NetworkType"] = self.networkType?.toMap()
                        }
                        if self.password != nil {
                            map["Password"] = self.password?.toMap()
                        }
                        if self.queryEndpoint != nil {
                            map["QueryEndpoint"] = self.queryEndpoint?.toMap()
                        }
                        if self.securityGroupId != nil {
                            map["SecurityGroupId"] = self.securityGroupId?.toMap()
                        }
                        if self.table != nil {
                            map["Table"] = self.table?.toMap()
                        }
                        if self.userName != nil {
                            map["UserName"] = self.userName?.toMap()
                        }
                        if self.vSwitchIds != nil {
                            map["VSwitchIds"] = self.vSwitchIds?.toMap()
                        }
                        if self.vpcId != nil {
                            map["VpcId"] = self.vpcId?.toMap()
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["BeHttpEndpoint"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDorisParameters.BeHttpEndpoint()
                            model.fromMap(value)
                            self.beHttpEndpoint = model
                        }
                        if let value = dict["Body"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDorisParameters.Body()
                            model.fromMap(value)
                            self.body = model
                        }
                        if let value = dict["Database"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDorisParameters.Database()
                            model.fromMap(value)
                            self.database = model
                        }
                        if let value = dict["FeHttpEndpoint"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDorisParameters.FeHttpEndpoint()
                            model.fromMap(value)
                            self.feHttpEndpoint = model
                        }
                        if let value = dict["NetworkType"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDorisParameters.NetworkType()
                            model.fromMap(value)
                            self.networkType = model
                        }
                        if let value = dict["Password"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDorisParameters.Password()
                            model.fromMap(value)
                            self.password = model
                        }
                        if let value = dict["QueryEndpoint"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDorisParameters.QueryEndpoint()
                            model.fromMap(value)
                            self.queryEndpoint = model
                        }
                        if let value = dict["SecurityGroupId"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDorisParameters.SecurityGroupId()
                            model.fromMap(value)
                            self.securityGroupId = model
                        }
                        if let value = dict["Table"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDorisParameters.Table()
                            model.fromMap(value)
                            self.table = model
                        }
                        if let value = dict["UserName"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDorisParameters.UserName()
                            model.fromMap(value)
                            self.userName = model
                        }
                        if let value = dict["VSwitchIds"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDorisParameters.VSwitchIds()
                            model.fromMap(value)
                            self.vSwitchIds = model
                        }
                        if let value = dict["VpcId"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDorisParameters.VpcId()
                            model.fromMap(value)
                            self.vpcId = model
                        }
                    }
                }
                public class SinkFcParameters : Tea.TeaModel {
                    public class Body : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class Concurrency : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class DataFormat : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class FunctionName : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class InvocationType : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class Qualifier : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class ServiceName : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public var body: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkFcParameters.Body?

                    public var concurrency: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkFcParameters.Concurrency?

                    public var dataFormat: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkFcParameters.DataFormat?

                    public var functionName: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkFcParameters.FunctionName?

                    public var invocationType: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkFcParameters.InvocationType?

                    public var qualifier: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkFcParameters.Qualifier?

                    public var serviceName: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkFcParameters.ServiceName?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.body?.validate()
                        try self.concurrency?.validate()
                        try self.dataFormat?.validate()
                        try self.functionName?.validate()
                        try self.invocationType?.validate()
                        try self.qualifier?.validate()
                        try self.serviceName?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.body != nil {
                            map["Body"] = self.body?.toMap()
                        }
                        if self.concurrency != nil {
                            map["Concurrency"] = self.concurrency?.toMap()
                        }
                        if self.dataFormat != nil {
                            map["DataFormat"] = self.dataFormat?.toMap()
                        }
                        if self.functionName != nil {
                            map["FunctionName"] = self.functionName?.toMap()
                        }
                        if self.invocationType != nil {
                            map["InvocationType"] = self.invocationType?.toMap()
                        }
                        if self.qualifier != nil {
                            map["Qualifier"] = self.qualifier?.toMap()
                        }
                        if self.serviceName != nil {
                            map["ServiceName"] = self.serviceName?.toMap()
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Body"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkFcParameters.Body()
                            model.fromMap(value)
                            self.body = model
                        }
                        if let value = dict["Concurrency"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkFcParameters.Concurrency()
                            model.fromMap(value)
                            self.concurrency = model
                        }
                        if let value = dict["DataFormat"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkFcParameters.DataFormat()
                            model.fromMap(value)
                            self.dataFormat = model
                        }
                        if let value = dict["FunctionName"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkFcParameters.FunctionName()
                            model.fromMap(value)
                            self.functionName = model
                        }
                        if let value = dict["InvocationType"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkFcParameters.InvocationType()
                            model.fromMap(value)
                            self.invocationType = model
                        }
                        if let value = dict["Qualifier"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkFcParameters.Qualifier()
                            model.fromMap(value)
                            self.qualifier = model
                        }
                        if let value = dict["ServiceName"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkFcParameters.ServiceName()
                            model.fromMap(value)
                            self.serviceName = model
                        }
                    }
                }
                public class SinkFnfParameters : Tea.TeaModel {
                    public class ExecutionName : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class FlowName : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class Input : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class RoleName : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public var executionName: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkFnfParameters.ExecutionName?

                    public var flowName: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkFnfParameters.FlowName?

                    public var input: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkFnfParameters.Input?

                    public var roleName: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkFnfParameters.RoleName?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.executionName?.validate()
                        try self.flowName?.validate()
                        try self.input?.validate()
                        try self.roleName?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.executionName != nil {
                            map["ExecutionName"] = self.executionName?.toMap()
                        }
                        if self.flowName != nil {
                            map["FlowName"] = self.flowName?.toMap()
                        }
                        if self.input != nil {
                            map["Input"] = self.input?.toMap()
                        }
                        if self.roleName != nil {
                            map["RoleName"] = self.roleName?.toMap()
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ExecutionName"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkFnfParameters.ExecutionName()
                            model.fromMap(value)
                            self.executionName = model
                        }
                        if let value = dict["FlowName"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkFnfParameters.FlowName()
                            model.fromMap(value)
                            self.flowName = model
                        }
                        if let value = dict["Input"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkFnfParameters.Input()
                            model.fromMap(value)
                            self.input = model
                        }
                        if let value = dict["RoleName"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkFnfParameters.RoleName()
                            model.fromMap(value)
                            self.roleName = model
                        }
                    }
                }
                public class SinkKafkaParameters : Tea.TeaModel {
                    public class Acks : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class InstanceId : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class Key : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class Topic : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class Value : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public var acks: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkKafkaParameters.Acks?

                    public var instanceId: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkKafkaParameters.InstanceId?

                    public var key: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkKafkaParameters.Key?

                    public var topic: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkKafkaParameters.Topic?

                    public var value: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkKafkaParameters.Value?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.acks?.validate()
                        try self.instanceId?.validate()
                        try self.key?.validate()
                        try self.topic?.validate()
                        try self.value?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.acks != nil {
                            map["Acks"] = self.acks?.toMap()
                        }
                        if self.instanceId != nil {
                            map["InstanceId"] = self.instanceId?.toMap()
                        }
                        if self.key != nil {
                            map["Key"] = self.key?.toMap()
                        }
                        if self.topic != nil {
                            map["Topic"] = self.topic?.toMap()
                        }
                        if self.value != nil {
                            map["Value"] = self.value?.toMap()
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Acks"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkKafkaParameters.Acks()
                            model.fromMap(value)
                            self.acks = model
                        }
                        if let value = dict["InstanceId"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkKafkaParameters.InstanceId()
                            model.fromMap(value)
                            self.instanceId = model
                        }
                        if let value = dict["Key"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkKafkaParameters.Key()
                            model.fromMap(value)
                            self.key = model
                        }
                        if let value = dict["Topic"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkKafkaParameters.Topic()
                            model.fromMap(value)
                            self.topic = model
                        }
                        if let value = dict["Value"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkKafkaParameters.Value()
                            model.fromMap(value)
                            self.value = model
                        }
                    }
                }
                public class SinkMNSParameters : Tea.TeaModel {
                    public class Body : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class IsBase64Encode : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class QueueName : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public var body: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkMNSParameters.Body?

                    public var isBase64Encode: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkMNSParameters.IsBase64Encode?

                    public var queueName: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkMNSParameters.QueueName?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.body?.validate()
                        try self.isBase64Encode?.validate()
                        try self.queueName?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.body != nil {
                            map["Body"] = self.body?.toMap()
                        }
                        if self.isBase64Encode != nil {
                            map["IsBase64Encode"] = self.isBase64Encode?.toMap()
                        }
                        if self.queueName != nil {
                            map["QueueName"] = self.queueName?.toMap()
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Body"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkMNSParameters.Body()
                            model.fromMap(value)
                            self.body = model
                        }
                        if let value = dict["IsBase64Encode"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkMNSParameters.IsBase64Encode()
                            model.fromMap(value)
                            self.isBase64Encode = model
                        }
                        if let value = dict["QueueName"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkMNSParameters.QueueName()
                            model.fromMap(value)
                            self.queueName = model
                        }
                    }
                }
                public class SinkOpenSourceRabbitMQParameters : Tea.TeaModel {
                    public class Body : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class MessageId : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class Properties : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class RoutingKey : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public var authType: String?

                    public var body: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkOpenSourceRabbitMQParameters.Body?

                    public var endpoint: String?

                    public var exchange: String?

                    public var messageId: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkOpenSourceRabbitMQParameters.MessageId?

                    public var networkType: String?

                    public var password: String?

                    public var properties: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkOpenSourceRabbitMQParameters.Properties?

                    public var queueName: String?

                    public var routingKey: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkOpenSourceRabbitMQParameters.RoutingKey?

                    public var securityGroupId: String?

                    public var targetType: String?

                    public var username: String?

                    public var vSwitchIds: String?

                    public var virtualHostName: String?

                    public var vpcId: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.body?.validate()
                        try self.messageId?.validate()
                        try self.properties?.validate()
                        try self.routingKey?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.authType != nil {
                            map["AuthType"] = self.authType!
                        }
                        if self.body != nil {
                            map["Body"] = self.body?.toMap()
                        }
                        if self.endpoint != nil {
                            map["Endpoint"] = self.endpoint!
                        }
                        if self.exchange != nil {
                            map["Exchange"] = self.exchange!
                        }
                        if self.messageId != nil {
                            map["MessageId"] = self.messageId?.toMap()
                        }
                        if self.networkType != nil {
                            map["NetworkType"] = self.networkType!
                        }
                        if self.password != nil {
                            map["Password"] = self.password!
                        }
                        if self.properties != nil {
                            map["Properties"] = self.properties?.toMap()
                        }
                        if self.queueName != nil {
                            map["QueueName"] = self.queueName!
                        }
                        if self.routingKey != nil {
                            map["RoutingKey"] = self.routingKey?.toMap()
                        }
                        if self.securityGroupId != nil {
                            map["SecurityGroupId"] = self.securityGroupId!
                        }
                        if self.targetType != nil {
                            map["TargetType"] = self.targetType!
                        }
                        if self.username != nil {
                            map["Username"] = self.username!
                        }
                        if self.vSwitchIds != nil {
                            map["VSwitchIds"] = self.vSwitchIds!
                        }
                        if self.virtualHostName != nil {
                            map["VirtualHostName"] = self.virtualHostName!
                        }
                        if self.vpcId != nil {
                            map["VpcId"] = self.vpcId!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["AuthType"] as? String {
                            self.authType = value
                        }
                        if let value = dict["Body"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkOpenSourceRabbitMQParameters.Body()
                            model.fromMap(value)
                            self.body = model
                        }
                        if let value = dict["Endpoint"] as? String {
                            self.endpoint = value
                        }
                        if let value = dict["Exchange"] as? String {
                            self.exchange = value
                        }
                        if let value = dict["MessageId"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkOpenSourceRabbitMQParameters.MessageId()
                            model.fromMap(value)
                            self.messageId = model
                        }
                        if let value = dict["NetworkType"] as? String {
                            self.networkType = value
                        }
                        if let value = dict["Password"] as? String {
                            self.password = value
                        }
                        if let value = dict["Properties"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkOpenSourceRabbitMQParameters.Properties()
                            model.fromMap(value)
                            self.properties = model
                        }
                        if let value = dict["QueueName"] as? String {
                            self.queueName = value
                        }
                        if let value = dict["RoutingKey"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkOpenSourceRabbitMQParameters.RoutingKey()
                            model.fromMap(value)
                            self.routingKey = model
                        }
                        if let value = dict["SecurityGroupId"] as? String {
                            self.securityGroupId = value
                        }
                        if let value = dict["TargetType"] as? String {
                            self.targetType = value
                        }
                        if let value = dict["Username"] as? String {
                            self.username = value
                        }
                        if let value = dict["VSwitchIds"] as? String {
                            self.vSwitchIds = value
                        }
                        if let value = dict["VirtualHostName"] as? String {
                            self.virtualHostName = value
                        }
                        if let value = dict["VpcId"] as? String {
                            self.vpcId = value
                        }
                    }
                }
                public class SinkRabbitMQParameters : Tea.TeaModel {
                    public class Body : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class Exchange : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class InstanceId : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class MessageId : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class Properties : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class QueueName : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class RoutingKey : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class TargetType : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class VirtualHostName : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public var body: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRabbitMQParameters.Body?

                    public var exchange: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRabbitMQParameters.Exchange?

                    public var instanceId: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRabbitMQParameters.InstanceId?

                    public var messageId: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRabbitMQParameters.MessageId?

                    public var properties: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRabbitMQParameters.Properties?

                    public var queueName: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRabbitMQParameters.QueueName?

                    public var routingKey: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRabbitMQParameters.RoutingKey?

                    public var targetType: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRabbitMQParameters.TargetType?

                    public var virtualHostName: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRabbitMQParameters.VirtualHostName?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.body?.validate()
                        try self.exchange?.validate()
                        try self.instanceId?.validate()
                        try self.messageId?.validate()
                        try self.properties?.validate()
                        try self.queueName?.validate()
                        try self.routingKey?.validate()
                        try self.targetType?.validate()
                        try self.virtualHostName?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.body != nil {
                            map["Body"] = self.body?.toMap()
                        }
                        if self.exchange != nil {
                            map["Exchange"] = self.exchange?.toMap()
                        }
                        if self.instanceId != nil {
                            map["InstanceId"] = self.instanceId?.toMap()
                        }
                        if self.messageId != nil {
                            map["MessageId"] = self.messageId?.toMap()
                        }
                        if self.properties != nil {
                            map["Properties"] = self.properties?.toMap()
                        }
                        if self.queueName != nil {
                            map["QueueName"] = self.queueName?.toMap()
                        }
                        if self.routingKey != nil {
                            map["RoutingKey"] = self.routingKey?.toMap()
                        }
                        if self.targetType != nil {
                            map["TargetType"] = self.targetType?.toMap()
                        }
                        if self.virtualHostName != nil {
                            map["VirtualHostName"] = self.virtualHostName?.toMap()
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Body"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRabbitMQParameters.Body()
                            model.fromMap(value)
                            self.body = model
                        }
                        if let value = dict["Exchange"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRabbitMQParameters.Exchange()
                            model.fromMap(value)
                            self.exchange = model
                        }
                        if let value = dict["InstanceId"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRabbitMQParameters.InstanceId()
                            model.fromMap(value)
                            self.instanceId = model
                        }
                        if let value = dict["MessageId"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRabbitMQParameters.MessageId()
                            model.fromMap(value)
                            self.messageId = model
                        }
                        if let value = dict["Properties"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRabbitMQParameters.Properties()
                            model.fromMap(value)
                            self.properties = model
                        }
                        if let value = dict["QueueName"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRabbitMQParameters.QueueName()
                            model.fromMap(value)
                            self.queueName = model
                        }
                        if let value = dict["RoutingKey"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRabbitMQParameters.RoutingKey()
                            model.fromMap(value)
                            self.routingKey = model
                        }
                        if let value = dict["TargetType"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRabbitMQParameters.TargetType()
                            model.fromMap(value)
                            self.targetType = model
                        }
                        if let value = dict["VirtualHostName"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRabbitMQParameters.VirtualHostName()
                            model.fromMap(value)
                            self.virtualHostName = model
                        }
                    }
                }
                public class SinkRocketMQCheckpointParameters : Tea.TeaModel {
                    public class ConsumeTimestamp : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class Group : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class Topic : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public var consumeTimestamp: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQCheckpointParameters.ConsumeTimestamp?

                    public var group: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQCheckpointParameters.Group?

                    public var instanceId: String?

                    public var instanceType: String?

                    public var topic: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQCheckpointParameters.Topic?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.consumeTimestamp?.validate()
                        try self.group?.validate()
                        try self.topic?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.consumeTimestamp != nil {
                            map["ConsumeTimestamp"] = self.consumeTimestamp?.toMap()
                        }
                        if self.group != nil {
                            map["Group"] = self.group?.toMap()
                        }
                        if self.instanceId != nil {
                            map["InstanceId"] = self.instanceId!
                        }
                        if self.instanceType != nil {
                            map["InstanceType"] = self.instanceType!
                        }
                        if self.topic != nil {
                            map["Topic"] = self.topic?.toMap()
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ConsumeTimestamp"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQCheckpointParameters.ConsumeTimestamp()
                            model.fromMap(value)
                            self.consumeTimestamp = model
                        }
                        if let value = dict["Group"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQCheckpointParameters.Group()
                            model.fromMap(value)
                            self.group = model
                        }
                        if let value = dict["InstanceId"] as? String {
                            self.instanceId = value
                        }
                        if let value = dict["InstanceType"] as? String {
                            self.instanceType = value
                        }
                        if let value = dict["Topic"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQCheckpointParameters.Topic()
                            model.fromMap(value)
                            self.topic = model
                        }
                    }
                }
                public class SinkRocketMQParameters : Tea.TeaModel {
                    public class Body : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class DeliveryOrderType : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class InstanceEndpoint : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class InstanceId : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class InstancePassword : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class InstanceType : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class InstanceUsername : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class Keys : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class Network : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class Properties : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class SecurityGroupId : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class ShardingKey : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class Tags : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class Topic : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class VSwitchIds : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class VpcId : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public var body: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.Body?

                    public var deliveryOrderType: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.DeliveryOrderType?

                    public var instanceEndpoint: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.InstanceEndpoint?

                    public var instanceId: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.InstanceId?

                    public var instancePassword: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.InstancePassword?

                    public var instanceType: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.InstanceType?

                    public var instanceUsername: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.InstanceUsername?

                    public var keys: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.Keys?

                    public var network: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.Network?

                    public var properties: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.Properties?

                    public var securityGroupId: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.SecurityGroupId?

                    public var shardingKey: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.ShardingKey?

                    public var tags: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.Tags?

                    public var topic: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.Topic?

                    public var vSwitchIds: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.VSwitchIds?

                    public var vpcId: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.VpcId?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.body?.validate()
                        try self.deliveryOrderType?.validate()
                        try self.instanceEndpoint?.validate()
                        try self.instanceId?.validate()
                        try self.instancePassword?.validate()
                        try self.instanceType?.validate()
                        try self.instanceUsername?.validate()
                        try self.keys?.validate()
                        try self.network?.validate()
                        try self.properties?.validate()
                        try self.securityGroupId?.validate()
                        try self.shardingKey?.validate()
                        try self.tags?.validate()
                        try self.topic?.validate()
                        try self.vSwitchIds?.validate()
                        try self.vpcId?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.body != nil {
                            map["Body"] = self.body?.toMap()
                        }
                        if self.deliveryOrderType != nil {
                            map["DeliveryOrderType"] = self.deliveryOrderType?.toMap()
                        }
                        if self.instanceEndpoint != nil {
                            map["InstanceEndpoint"] = self.instanceEndpoint?.toMap()
                        }
                        if self.instanceId != nil {
                            map["InstanceId"] = self.instanceId?.toMap()
                        }
                        if self.instancePassword != nil {
                            map["InstancePassword"] = self.instancePassword?.toMap()
                        }
                        if self.instanceType != nil {
                            map["InstanceType"] = self.instanceType?.toMap()
                        }
                        if self.instanceUsername != nil {
                            map["InstanceUsername"] = self.instanceUsername?.toMap()
                        }
                        if self.keys != nil {
                            map["Keys"] = self.keys?.toMap()
                        }
                        if self.network != nil {
                            map["Network"] = self.network?.toMap()
                        }
                        if self.properties != nil {
                            map["Properties"] = self.properties?.toMap()
                        }
                        if self.securityGroupId != nil {
                            map["SecurityGroupId"] = self.securityGroupId?.toMap()
                        }
                        if self.shardingKey != nil {
                            map["ShardingKey"] = self.shardingKey?.toMap()
                        }
                        if self.tags != nil {
                            map["Tags"] = self.tags?.toMap()
                        }
                        if self.topic != nil {
                            map["Topic"] = self.topic?.toMap()
                        }
                        if self.vSwitchIds != nil {
                            map["VSwitchIds"] = self.vSwitchIds?.toMap()
                        }
                        if self.vpcId != nil {
                            map["VpcId"] = self.vpcId?.toMap()
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Body"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.Body()
                            model.fromMap(value)
                            self.body = model
                        }
                        if let value = dict["DeliveryOrderType"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.DeliveryOrderType()
                            model.fromMap(value)
                            self.deliveryOrderType = model
                        }
                        if let value = dict["InstanceEndpoint"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.InstanceEndpoint()
                            model.fromMap(value)
                            self.instanceEndpoint = model
                        }
                        if let value = dict["InstanceId"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.InstanceId()
                            model.fromMap(value)
                            self.instanceId = model
                        }
                        if let value = dict["InstancePassword"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.InstancePassword()
                            model.fromMap(value)
                            self.instancePassword = model
                        }
                        if let value = dict["InstanceType"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.InstanceType()
                            model.fromMap(value)
                            self.instanceType = model
                        }
                        if let value = dict["InstanceUsername"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.InstanceUsername()
                            model.fromMap(value)
                            self.instanceUsername = model
                        }
                        if let value = dict["Keys"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.Keys()
                            model.fromMap(value)
                            self.keys = model
                        }
                        if let value = dict["Network"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.Network()
                            model.fromMap(value)
                            self.network = model
                        }
                        if let value = dict["Properties"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.Properties()
                            model.fromMap(value)
                            self.properties = model
                        }
                        if let value = dict["SecurityGroupId"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.SecurityGroupId()
                            model.fromMap(value)
                            self.securityGroupId = model
                        }
                        if let value = dict["ShardingKey"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.ShardingKey()
                            model.fromMap(value)
                            self.shardingKey = model
                        }
                        if let value = dict["Tags"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.Tags()
                            model.fromMap(value)
                            self.tags = model
                        }
                        if let value = dict["Topic"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.Topic()
                            model.fromMap(value)
                            self.topic = model
                        }
                        if let value = dict["VSwitchIds"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.VSwitchIds()
                            model.fromMap(value)
                            self.vSwitchIds = model
                        }
                        if let value = dict["VpcId"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters.VpcId()
                            model.fromMap(value)
                            self.vpcId = model
                        }
                    }
                }
                public class SinkSLSParameters : Tea.TeaModel {
                    public class Body : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class ContentSchema : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class ContentType : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class LogStore : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class Project : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class RoleName : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public class Topic : Tea.TeaModel {
                        public var form: String?

                        public var template: String?

                        public var value: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.form != nil {
                                map["Form"] = self.form!
                            }
                            if self.template != nil {
                                map["Template"] = self.template!
                            }
                            if self.value != nil {
                                map["Value"] = self.value!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Form"] as? String {
                                self.form = value
                            }
                            if let value = dict["Template"] as? String {
                                self.template = value
                            }
                            if let value = dict["Value"] as? String {
                                self.value = value
                            }
                        }
                    }
                    public var body: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkSLSParameters.Body?

                    public var contentSchema: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkSLSParameters.ContentSchema?

                    public var contentType: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkSLSParameters.ContentType?

                    public var logStore: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkSLSParameters.LogStore?

                    public var project: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkSLSParameters.Project?

                    public var roleName: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkSLSParameters.RoleName?

                    public var topic: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkSLSParameters.Topic?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.body?.validate()
                        try self.contentSchema?.validate()
                        try self.contentType?.validate()
                        try self.logStore?.validate()
                        try self.project?.validate()
                        try self.roleName?.validate()
                        try self.topic?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.body != nil {
                            map["Body"] = self.body?.toMap()
                        }
                        if self.contentSchema != nil {
                            map["ContentSchema"] = self.contentSchema?.toMap()
                        }
                        if self.contentType != nil {
                            map["ContentType"] = self.contentType?.toMap()
                        }
                        if self.logStore != nil {
                            map["LogStore"] = self.logStore?.toMap()
                        }
                        if self.project != nil {
                            map["Project"] = self.project?.toMap()
                        }
                        if self.roleName != nil {
                            map["RoleName"] = self.roleName?.toMap()
                        }
                        if self.topic != nil {
                            map["Topic"] = self.topic?.toMap()
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Body"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkSLSParameters.Body()
                            model.fromMap(value)
                            self.body = model
                        }
                        if let value = dict["ContentSchema"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkSLSParameters.ContentSchema()
                            model.fromMap(value)
                            self.contentSchema = model
                        }
                        if let value = dict["ContentType"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkSLSParameters.ContentType()
                            model.fromMap(value)
                            self.contentType = model
                        }
                        if let value = dict["LogStore"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkSLSParameters.LogStore()
                            model.fromMap(value)
                            self.logStore = model
                        }
                        if let value = dict["Project"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkSLSParameters.Project()
                            model.fromMap(value)
                            self.project = model
                        }
                        if let value = dict["RoleName"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkSLSParameters.RoleName()
                            model.fromMap(value)
                            self.roleName = model
                        }
                        if let value = dict["Topic"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkSLSParameters.Topic()
                            model.fromMap(value)
                            self.topic = model
                        }
                    }
                }
                public var sinkApacheRocketMQCheckpointParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkApacheRocketMQCheckpointParameters?

                public var sinkBaiLianParameters: SinkBaiLianParameters?

                public var sinkCustomizedKafkaConnectorParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkCustomizedKafkaConnectorParameters?

                public var sinkCustomizedKafkaParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkCustomizedKafkaParameters?

                public var sinkDashVectorParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDashVectorParameters?

                public var sinkDataHubParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDataHubParameters?

                public var sinkDorisParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDorisParameters?

                public var sinkFcParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkFcParameters?

                public var sinkFnfParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkFnfParameters?

                public var sinkKafkaParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkKafkaParameters?

                public var sinkMNSParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkMNSParameters?

                public var sinkOpenSourceRabbitMQParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkOpenSourceRabbitMQParameters?

                public var sinkRabbitMQParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRabbitMQParameters?

                public var sinkRocketMQCheckpointParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQCheckpointParameters?

                public var sinkRocketMQParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters?

                public var sinkSLSParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkSLSParameters?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.sinkApacheRocketMQCheckpointParameters?.validate()
                    try self.sinkBaiLianParameters?.validate()
                    try self.sinkCustomizedKafkaConnectorParameters?.validate()
                    try self.sinkCustomizedKafkaParameters?.validate()
                    try self.sinkDashVectorParameters?.validate()
                    try self.sinkDataHubParameters?.validate()
                    try self.sinkDorisParameters?.validate()
                    try self.sinkFcParameters?.validate()
                    try self.sinkFnfParameters?.validate()
                    try self.sinkKafkaParameters?.validate()
                    try self.sinkMNSParameters?.validate()
                    try self.sinkOpenSourceRabbitMQParameters?.validate()
                    try self.sinkRabbitMQParameters?.validate()
                    try self.sinkRocketMQCheckpointParameters?.validate()
                    try self.sinkRocketMQParameters?.validate()
                    try self.sinkSLSParameters?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.sinkApacheRocketMQCheckpointParameters != nil {
                        map["SinkApacheRocketMQCheckpointParameters"] = self.sinkApacheRocketMQCheckpointParameters?.toMap()
                    }
                    if self.sinkBaiLianParameters != nil {
                        map["SinkBaiLianParameters"] = self.sinkBaiLianParameters?.toMap()
                    }
                    if self.sinkCustomizedKafkaConnectorParameters != nil {
                        map["SinkCustomizedKafkaConnectorParameters"] = self.sinkCustomizedKafkaConnectorParameters?.toMap()
                    }
                    if self.sinkCustomizedKafkaParameters != nil {
                        map["SinkCustomizedKafkaParameters"] = self.sinkCustomizedKafkaParameters?.toMap()
                    }
                    if self.sinkDashVectorParameters != nil {
                        map["SinkDashVectorParameters"] = self.sinkDashVectorParameters?.toMap()
                    }
                    if self.sinkDataHubParameters != nil {
                        map["SinkDataHubParameters"] = self.sinkDataHubParameters?.toMap()
                    }
                    if self.sinkDorisParameters != nil {
                        map["SinkDorisParameters"] = self.sinkDorisParameters?.toMap()
                    }
                    if self.sinkFcParameters != nil {
                        map["SinkFcParameters"] = self.sinkFcParameters?.toMap()
                    }
                    if self.sinkFnfParameters != nil {
                        map["SinkFnfParameters"] = self.sinkFnfParameters?.toMap()
                    }
                    if self.sinkKafkaParameters != nil {
                        map["SinkKafkaParameters"] = self.sinkKafkaParameters?.toMap()
                    }
                    if self.sinkMNSParameters != nil {
                        map["SinkMNSParameters"] = self.sinkMNSParameters?.toMap()
                    }
                    if self.sinkOpenSourceRabbitMQParameters != nil {
                        map["SinkOpenSourceRabbitMQParameters"] = self.sinkOpenSourceRabbitMQParameters?.toMap()
                    }
                    if self.sinkRabbitMQParameters != nil {
                        map["SinkRabbitMQParameters"] = self.sinkRabbitMQParameters?.toMap()
                    }
                    if self.sinkRocketMQCheckpointParameters != nil {
                        map["SinkRocketMQCheckpointParameters"] = self.sinkRocketMQCheckpointParameters?.toMap()
                    }
                    if self.sinkRocketMQParameters != nil {
                        map["SinkRocketMQParameters"] = self.sinkRocketMQParameters?.toMap()
                    }
                    if self.sinkSLSParameters != nil {
                        map["SinkSLSParameters"] = self.sinkSLSParameters?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["SinkApacheRocketMQCheckpointParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkApacheRocketMQCheckpointParameters()
                        model.fromMap(value)
                        self.sinkApacheRocketMQCheckpointParameters = model
                    }
                    if let value = dict["SinkBaiLianParameters"] as? [String: Any?] {
                        var model = SinkBaiLianParameters()
                        model.fromMap(value)
                        self.sinkBaiLianParameters = model
                    }
                    if let value = dict["SinkCustomizedKafkaConnectorParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkCustomizedKafkaConnectorParameters()
                        model.fromMap(value)
                        self.sinkCustomizedKafkaConnectorParameters = model
                    }
                    if let value = dict["SinkCustomizedKafkaParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkCustomizedKafkaParameters()
                        model.fromMap(value)
                        self.sinkCustomizedKafkaParameters = model
                    }
                    if let value = dict["SinkDashVectorParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDashVectorParameters()
                        model.fromMap(value)
                        self.sinkDashVectorParameters = model
                    }
                    if let value = dict["SinkDataHubParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDataHubParameters()
                        model.fromMap(value)
                        self.sinkDataHubParameters = model
                    }
                    if let value = dict["SinkDorisParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkDorisParameters()
                        model.fromMap(value)
                        self.sinkDorisParameters = model
                    }
                    if let value = dict["SinkFcParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkFcParameters()
                        model.fromMap(value)
                        self.sinkFcParameters = model
                    }
                    if let value = dict["SinkFnfParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkFnfParameters()
                        model.fromMap(value)
                        self.sinkFnfParameters = model
                    }
                    if let value = dict["SinkKafkaParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkKafkaParameters()
                        model.fromMap(value)
                        self.sinkKafkaParameters = model
                    }
                    if let value = dict["SinkMNSParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkMNSParameters()
                        model.fromMap(value)
                        self.sinkMNSParameters = model
                    }
                    if let value = dict["SinkOpenSourceRabbitMQParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkOpenSourceRabbitMQParameters()
                        model.fromMap(value)
                        self.sinkOpenSourceRabbitMQParameters = model
                    }
                    if let value = dict["SinkRabbitMQParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRabbitMQParameters()
                        model.fromMap(value)
                        self.sinkRabbitMQParameters = model
                    }
                    if let value = dict["SinkRocketMQCheckpointParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQCheckpointParameters()
                        model.fromMap(value)
                        self.sinkRocketMQCheckpointParameters = model
                    }
                    if let value = dict["SinkRocketMQParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkRocketMQParameters()
                        model.fromMap(value)
                        self.sinkRocketMQParameters = model
                    }
                    if let value = dict["SinkSLSParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink.SinkSLSParameters()
                        model.fromMap(value)
                        self.sinkSLSParameters = model
                    }
                }
            }
            public class Source : Tea.TeaModel {
                public class SourceApacheRocketMQCheckpointParameters : Tea.TeaModel {
                    public var instanceEndpoint: String?

                    public var instancePassword: String?

                    public var instanceUsername: String?

                    public var networkType: String?

                    public var regionId: String?

                    public var securityGroupId: String?

                    public var topics: [String]?

                    public var vSwitchId: String?

                    public var vpcId: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.instanceEndpoint != nil {
                            map["InstanceEndpoint"] = self.instanceEndpoint!
                        }
                        if self.instancePassword != nil {
                            map["InstancePassword"] = self.instancePassword!
                        }
                        if self.instanceUsername != nil {
                            map["InstanceUsername"] = self.instanceUsername!
                        }
                        if self.networkType != nil {
                            map["NetworkType"] = self.networkType!
                        }
                        if self.regionId != nil {
                            map["RegionId"] = self.regionId!
                        }
                        if self.securityGroupId != nil {
                            map["SecurityGroupId"] = self.securityGroupId!
                        }
                        if self.topics != nil {
                            map["Topics"] = self.topics!
                        }
                        if self.vSwitchId != nil {
                            map["VSwitchId"] = self.vSwitchId!
                        }
                        if self.vpcId != nil {
                            map["VpcId"] = self.vpcId!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["InstanceEndpoint"] as? String {
                            self.instanceEndpoint = value
                        }
                        if let value = dict["InstancePassword"] as? String {
                            self.instancePassword = value
                        }
                        if let value = dict["InstanceUsername"] as? String {
                            self.instanceUsername = value
                        }
                        if let value = dict["NetworkType"] as? String {
                            self.networkType = value
                        }
                        if let value = dict["RegionId"] as? String {
                            self.regionId = value
                        }
                        if let value = dict["SecurityGroupId"] as? String {
                            self.securityGroupId = value
                        }
                        if let value = dict["Topics"] as? [String] {
                            self.topics = value
                        }
                        if let value = dict["VSwitchId"] as? String {
                            self.vSwitchId = value
                        }
                        if let value = dict["VpcId"] as? String {
                            self.vpcId = value
                        }
                    }
                }
                public class SourceCustomizedKafkaConnectorParameters : Tea.TeaModel {
                    public class ConnectorParameters : Tea.TeaModel {
                        public var config: [String: Any]?

                        public var name: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.config != nil {
                                map["Config"] = self.config!
                            }
                            if self.name != nil {
                                map["Name"] = self.name!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Config"] as? [String: Any] {
                                self.config = value
                            }
                            if let value = dict["Name"] as? String {
                                self.name = value
                            }
                        }
                    }
                    public var connectorPackageUrl: String?

                    public var connectorParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceCustomizedKafkaConnectorParameters.ConnectorParameters?

                    public var workerParameters: [String: Any]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.connectorParameters?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.connectorPackageUrl != nil {
                            map["ConnectorPackageUrl"] = self.connectorPackageUrl!
                        }
                        if self.connectorParameters != nil {
                            map["ConnectorParameters"] = self.connectorParameters?.toMap()
                        }
                        if self.workerParameters != nil {
                            map["WorkerParameters"] = self.workerParameters!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ConnectorPackageUrl"] as? String {
                            self.connectorPackageUrl = value
                        }
                        if let value = dict["ConnectorParameters"] as? [String: Any?] {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceCustomizedKafkaConnectorParameters.ConnectorParameters()
                            model.fromMap(value)
                            self.connectorParameters = model
                        }
                        if let value = dict["WorkerParameters"] as? [String: Any] {
                            self.workerParameters = value
                        }
                    }
                }
                public class SourceCustomizedKafkaParameters : Tea.TeaModel {
                    public var instanceId: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.instanceId != nil {
                            map["InstanceId"] = self.instanceId!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["InstanceId"] as? String {
                            self.instanceId = value
                        }
                    }
                }
                public class SourceDTSParameters : Tea.TeaModel {
                    public var brokerUrl: String?

                    public var initCheckPoint: String?

                    public var password: String?

                    public var sid: String?

                    public var taskId: String?

                    public var topic: String?

                    public var username: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.brokerUrl != nil {
                            map["BrokerUrl"] = self.brokerUrl!
                        }
                        if self.initCheckPoint != nil {
                            map["InitCheckPoint"] = self.initCheckPoint!
                        }
                        if self.password != nil {
                            map["Password"] = self.password!
                        }
                        if self.sid != nil {
                            map["Sid"] = self.sid!
                        }
                        if self.taskId != nil {
                            map["TaskId"] = self.taskId!
                        }
                        if self.topic != nil {
                            map["Topic"] = self.topic!
                        }
                        if self.username != nil {
                            map["Username"] = self.username!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["BrokerUrl"] as? String {
                            self.brokerUrl = value
                        }
                        if let value = dict["InitCheckPoint"] as? String {
                            self.initCheckPoint = value
                        }
                        if let value = dict["Password"] as? String {
                            self.password = value
                        }
                        if let value = dict["Sid"] as? String {
                            self.sid = value
                        }
                        if let value = dict["TaskId"] as? String {
                            self.taskId = value
                        }
                        if let value = dict["Topic"] as? String {
                            self.topic = value
                        }
                        if let value = dict["Username"] as? String {
                            self.username = value
                        }
                    }
                }
                public class SourceEventBusParameters : Tea.TeaModel {
                    public var eventBusName: String?

                    public var eventRuleName: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.eventBusName != nil {
                            map["EventBusName"] = self.eventBusName!
                        }
                        if self.eventRuleName != nil {
                            map["EventRuleName"] = self.eventRuleName!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["EventBusName"] as? String {
                            self.eventBusName = value
                        }
                        if let value = dict["EventRuleName"] as? String {
                            self.eventRuleName = value
                        }
                    }
                }
                public class SourceKafkaParameters : Tea.TeaModel {
                    public var consumerGroup: String?

                    public var instanceId: String?

                    public var network: String?

                    public var offsetReset: String?

                    public var regionId: String?

                    public var securityGroupId: String?

                    public var topic: String?

                    public var vSwitchIds: String?

                    public var valueDataType: String?

                    public var vpcId: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.consumerGroup != nil {
                            map["ConsumerGroup"] = self.consumerGroup!
                        }
                        if self.instanceId != nil {
                            map["InstanceId"] = self.instanceId!
                        }
                        if self.network != nil {
                            map["Network"] = self.network!
                        }
                        if self.offsetReset != nil {
                            map["OffsetReset"] = self.offsetReset!
                        }
                        if self.regionId != nil {
                            map["RegionId"] = self.regionId!
                        }
                        if self.securityGroupId != nil {
                            map["SecurityGroupId"] = self.securityGroupId!
                        }
                        if self.topic != nil {
                            map["Topic"] = self.topic!
                        }
                        if self.vSwitchIds != nil {
                            map["VSwitchIds"] = self.vSwitchIds!
                        }
                        if self.valueDataType != nil {
                            map["ValueDataType"] = self.valueDataType!
                        }
                        if self.vpcId != nil {
                            map["VpcId"] = self.vpcId!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ConsumerGroup"] as? String {
                            self.consumerGroup = value
                        }
                        if let value = dict["InstanceId"] as? String {
                            self.instanceId = value
                        }
                        if let value = dict["Network"] as? String {
                            self.network = value
                        }
                        if let value = dict["OffsetReset"] as? String {
                            self.offsetReset = value
                        }
                        if let value = dict["RegionId"] as? String {
                            self.regionId = value
                        }
                        if let value = dict["SecurityGroupId"] as? String {
                            self.securityGroupId = value
                        }
                        if let value = dict["Topic"] as? String {
                            self.topic = value
                        }
                        if let value = dict["VSwitchIds"] as? String {
                            self.vSwitchIds = value
                        }
                        if let value = dict["ValueDataType"] as? String {
                            self.valueDataType = value
                        }
                        if let value = dict["VpcId"] as? String {
                            self.vpcId = value
                        }
                    }
                }
                public class SourceMNSParameters : Tea.TeaModel {
                    public var isBase64Decode: Bool?

                    public var queueName: String?

                    public var regionId: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.isBase64Decode != nil {
                            map["IsBase64Decode"] = self.isBase64Decode!
                        }
                        if self.queueName != nil {
                            map["QueueName"] = self.queueName!
                        }
                        if self.regionId != nil {
                            map["RegionId"] = self.regionId!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["IsBase64Decode"] as? Bool {
                            self.isBase64Decode = value
                        }
                        if let value = dict["QueueName"] as? String {
                            self.queueName = value
                        }
                        if let value = dict["RegionId"] as? String {
                            self.regionId = value
                        }
                    }
                }
                public class SourceMQTTParameters : Tea.TeaModel {
                    public var bodyDataType: String?

                    public var instanceId: String?

                    public var regionId: String?

                    public var topic: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.bodyDataType != nil {
                            map["BodyDataType"] = self.bodyDataType!
                        }
                        if self.instanceId != nil {
                            map["InstanceId"] = self.instanceId!
                        }
                        if self.regionId != nil {
                            map["RegionId"] = self.regionId!
                        }
                        if self.topic != nil {
                            map["Topic"] = self.topic!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["BodyDataType"] as? String {
                            self.bodyDataType = value
                        }
                        if let value = dict["InstanceId"] as? String {
                            self.instanceId = value
                        }
                        if let value = dict["RegionId"] as? String {
                            self.regionId = value
                        }
                        if let value = dict["Topic"] as? String {
                            self.topic = value
                        }
                    }
                }
                public class SourceOSSParameters : Tea.TeaModel {
                    public var bucketName: String?

                    public var delimiter: String?

                    public var loadFormat: String?

                    public var loadMode: String?

                    public var prefix_: String?

                    public var roleName: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.bucketName != nil {
                            map["BucketName"] = self.bucketName!
                        }
                        if self.delimiter != nil {
                            map["Delimiter"] = self.delimiter!
                        }
                        if self.loadFormat != nil {
                            map["LoadFormat"] = self.loadFormat!
                        }
                        if self.loadMode != nil {
                            map["LoadMode"] = self.loadMode!
                        }
                        if self.prefix_ != nil {
                            map["Prefix"] = self.prefix_!
                        }
                        if self.roleName != nil {
                            map["RoleName"] = self.roleName!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["BucketName"] as? String {
                            self.bucketName = value
                        }
                        if let value = dict["Delimiter"] as? String {
                            self.delimiter = value
                        }
                        if let value = dict["LoadFormat"] as? String {
                            self.loadFormat = value
                        }
                        if let value = dict["LoadMode"] as? String {
                            self.loadMode = value
                        }
                        if let value = dict["Prefix"] as? String {
                            self.prefix_ = value
                        }
                        if let value = dict["RoleName"] as? String {
                            self.roleName = value
                        }
                    }
                }
                public class SourceOpenSourceRabbitMQParameters : Tea.TeaModel {
                    public var authType: String?

                    public var bodyDataType: String?

                    public var endpoint: String?

                    public var networkType: String?

                    public var password: String?

                    public var queueName: String?

                    public var securityGroupId: String?

                    public var username: String?

                    public var vSwitchIds: String?

                    public var virtualHostName: String?

                    public var vpcId: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.authType != nil {
                            map["AuthType"] = self.authType!
                        }
                        if self.bodyDataType != nil {
                            map["BodyDataType"] = self.bodyDataType!
                        }
                        if self.endpoint != nil {
                            map["Endpoint"] = self.endpoint!
                        }
                        if self.networkType != nil {
                            map["NetworkType"] = self.networkType!
                        }
                        if self.password != nil {
                            map["Password"] = self.password!
                        }
                        if self.queueName != nil {
                            map["QueueName"] = self.queueName!
                        }
                        if self.securityGroupId != nil {
                            map["SecurityGroupId"] = self.securityGroupId!
                        }
                        if self.username != nil {
                            map["Username"] = self.username!
                        }
                        if self.vSwitchIds != nil {
                            map["VSwitchIds"] = self.vSwitchIds!
                        }
                        if self.virtualHostName != nil {
                            map["VirtualHostName"] = self.virtualHostName!
                        }
                        if self.vpcId != nil {
                            map["VpcId"] = self.vpcId!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["AuthType"] as? String {
                            self.authType = value
                        }
                        if let value = dict["BodyDataType"] as? String {
                            self.bodyDataType = value
                        }
                        if let value = dict["Endpoint"] as? String {
                            self.endpoint = value
                        }
                        if let value = dict["NetworkType"] as? String {
                            self.networkType = value
                        }
                        if let value = dict["Password"] as? String {
                            self.password = value
                        }
                        if let value = dict["QueueName"] as? String {
                            self.queueName = value
                        }
                        if let value = dict["SecurityGroupId"] as? String {
                            self.securityGroupId = value
                        }
                        if let value = dict["Username"] as? String {
                            self.username = value
                        }
                        if let value = dict["VSwitchIds"] as? String {
                            self.vSwitchIds = value
                        }
                        if let value = dict["VirtualHostName"] as? String {
                            self.virtualHostName = value
                        }
                        if let value = dict["VpcId"] as? String {
                            self.vpcId = value
                        }
                    }
                }
                public class SourcePrometheusParameters : Tea.TeaModel {
                    public var clusterId: String?

                    public var dataType: String?

                    public var externalLabels: String?

                    public var labels: String?

                    public var regionId: String?

                    public var roleName: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.clusterId != nil {
                            map["ClusterId"] = self.clusterId!
                        }
                        if self.dataType != nil {
                            map["DataType"] = self.dataType!
                        }
                        if self.externalLabels != nil {
                            map["ExternalLabels"] = self.externalLabels!
                        }
                        if self.labels != nil {
                            map["Labels"] = self.labels!
                        }
                        if self.regionId != nil {
                            map["RegionId"] = self.regionId!
                        }
                        if self.roleName != nil {
                            map["RoleName"] = self.roleName!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ClusterId"] as? String {
                            self.clusterId = value
                        }
                        if let value = dict["DataType"] as? String {
                            self.dataType = value
                        }
                        if let value = dict["ExternalLabels"] as? String {
                            self.externalLabels = value
                        }
                        if let value = dict["Labels"] as? String {
                            self.labels = value
                        }
                        if let value = dict["RegionId"] as? String {
                            self.regionId = value
                        }
                        if let value = dict["RoleName"] as? String {
                            self.roleName = value
                        }
                    }
                }
                public class SourceRabbitMQParameters : Tea.TeaModel {
                    public var instanceId: String?

                    public var queueName: String?

                    public var regionId: String?

                    public var virtualHostName: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.instanceId != nil {
                            map["InstanceId"] = self.instanceId!
                        }
                        if self.queueName != nil {
                            map["QueueName"] = self.queueName!
                        }
                        if self.regionId != nil {
                            map["RegionId"] = self.regionId!
                        }
                        if self.virtualHostName != nil {
                            map["VirtualHostName"] = self.virtualHostName!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["InstanceId"] as? String {
                            self.instanceId = value
                        }
                        if let value = dict["QueueName"] as? String {
                            self.queueName = value
                        }
                        if let value = dict["RegionId"] as? String {
                            self.regionId = value
                        }
                        if let value = dict["VirtualHostName"] as? String {
                            self.virtualHostName = value
                        }
                    }
                }
                public class SourceRocketMQCheckpointParameters : Tea.TeaModel {
                    public var instanceId: String?

                    public var instanceType: String?

                    public var regionId: String?

                    public var topics: [String]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.instanceId != nil {
                            map["InstanceId"] = self.instanceId!
                        }
                        if self.instanceType != nil {
                            map["InstanceType"] = self.instanceType!
                        }
                        if self.regionId != nil {
                            map["RegionId"] = self.regionId!
                        }
                        if self.topics != nil {
                            map["Topics"] = self.topics!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["InstanceId"] as? String {
                            self.instanceId = value
                        }
                        if let value = dict["InstanceType"] as? String {
                            self.instanceType = value
                        }
                        if let value = dict["RegionId"] as? String {
                            self.regionId = value
                        }
                        if let value = dict["Topics"] as? [String] {
                            self.topics = value
                        }
                    }
                }
                public class SourceRocketMQParameters : Tea.TeaModel {
                    public var authType: String?

                    public var bodyDataType: String?

                    public var filterSql: String?

                    public var filterType: String?

                    public var groupID: String?

                    public var instanceEndpoint: String?

                    public var instanceId: String?

                    public var instanceNetwork: String?

                    public var instancePassword: String?

                    public var instanceSecurityGroupId: String?

                    public var instanceType: String?

                    public var instanceUsername: String?

                    public var instanceVSwitchIds: String?

                    public var instanceVpcId: String?

                    public var network: String?

                    public var offset: String?

                    public var regionId: String?

                    public var securityGroupId: String?

                    public var tag: String?

                    public var timestamp: Int64?

                    public var topic: String?

                    public var vSwitchIds: String?

                    public var vpcId: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.authType != nil {
                            map["AuthType"] = self.authType!
                        }
                        if self.bodyDataType != nil {
                            map["BodyDataType"] = self.bodyDataType!
                        }
                        if self.filterSql != nil {
                            map["FilterSql"] = self.filterSql!
                        }
                        if self.filterType != nil {
                            map["FilterType"] = self.filterType!
                        }
                        if self.groupID != nil {
                            map["GroupID"] = self.groupID!
                        }
                        if self.instanceEndpoint != nil {
                            map["InstanceEndpoint"] = self.instanceEndpoint!
                        }
                        if self.instanceId != nil {
                            map["InstanceId"] = self.instanceId!
                        }
                        if self.instanceNetwork != nil {
                            map["InstanceNetwork"] = self.instanceNetwork!
                        }
                        if self.instancePassword != nil {
                            map["InstancePassword"] = self.instancePassword!
                        }
                        if self.instanceSecurityGroupId != nil {
                            map["InstanceSecurityGroupId"] = self.instanceSecurityGroupId!
                        }
                        if self.instanceType != nil {
                            map["InstanceType"] = self.instanceType!
                        }
                        if self.instanceUsername != nil {
                            map["InstanceUsername"] = self.instanceUsername!
                        }
                        if self.instanceVSwitchIds != nil {
                            map["InstanceVSwitchIds"] = self.instanceVSwitchIds!
                        }
                        if self.instanceVpcId != nil {
                            map["InstanceVpcId"] = self.instanceVpcId!
                        }
                        if self.network != nil {
                            map["Network"] = self.network!
                        }
                        if self.offset != nil {
                            map["Offset"] = self.offset!
                        }
                        if self.regionId != nil {
                            map["RegionId"] = self.regionId!
                        }
                        if self.securityGroupId != nil {
                            map["SecurityGroupId"] = self.securityGroupId!
                        }
                        if self.tag != nil {
                            map["Tag"] = self.tag!
                        }
                        if self.timestamp != nil {
                            map["Timestamp"] = self.timestamp!
                        }
                        if self.topic != nil {
                            map["Topic"] = self.topic!
                        }
                        if self.vSwitchIds != nil {
                            map["VSwitchIds"] = self.vSwitchIds!
                        }
                        if self.vpcId != nil {
                            map["VpcId"] = self.vpcId!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["AuthType"] as? String {
                            self.authType = value
                        }
                        if let value = dict["BodyDataType"] as? String {
                            self.bodyDataType = value
                        }
                        if let value = dict["FilterSql"] as? String {
                            self.filterSql = value
                        }
                        if let value = dict["FilterType"] as? String {
                            self.filterType = value
                        }
                        if let value = dict["GroupID"] as? String {
                            self.groupID = value
                        }
                        if let value = dict["InstanceEndpoint"] as? String {
                            self.instanceEndpoint = value
                        }
                        if let value = dict["InstanceId"] as? String {
                            self.instanceId = value
                        }
                        if let value = dict["InstanceNetwork"] as? String {
                            self.instanceNetwork = value
                        }
                        if let value = dict["InstancePassword"] as? String {
                            self.instancePassword = value
                        }
                        if let value = dict["InstanceSecurityGroupId"] as? String {
                            self.instanceSecurityGroupId = value
                        }
                        if let value = dict["InstanceType"] as? String {
                            self.instanceType = value
                        }
                        if let value = dict["InstanceUsername"] as? String {
                            self.instanceUsername = value
                        }
                        if let value = dict["InstanceVSwitchIds"] as? String {
                            self.instanceVSwitchIds = value
                        }
                        if let value = dict["InstanceVpcId"] as? String {
                            self.instanceVpcId = value
                        }
                        if let value = dict["Network"] as? String {
                            self.network = value
                        }
                        if let value = dict["Offset"] as? String {
                            self.offset = value
                        }
                        if let value = dict["RegionId"] as? String {
                            self.regionId = value
                        }
                        if let value = dict["SecurityGroupId"] as? String {
                            self.securityGroupId = value
                        }
                        if let value = dict["Tag"] as? String {
                            self.tag = value
                        }
                        if let value = dict["Timestamp"] as? Int64 {
                            self.timestamp = value
                        }
                        if let value = dict["Topic"] as? String {
                            self.topic = value
                        }
                        if let value = dict["VSwitchIds"] as? String {
                            self.vSwitchIds = value
                        }
                        if let value = dict["VpcId"] as? String {
                            self.vpcId = value
                        }
                    }
                }
                public class SourceSLSParameters : Tea.TeaModel {
                    public var consumePosition: String?

                    public var consumerGroup: String?

                    public var logStore: String?

                    public var project: String?

                    public var roleName: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.consumePosition != nil {
                            map["ConsumePosition"] = self.consumePosition!
                        }
                        if self.consumerGroup != nil {
                            map["ConsumerGroup"] = self.consumerGroup!
                        }
                        if self.logStore != nil {
                            map["LogStore"] = self.logStore!
                        }
                        if self.project != nil {
                            map["Project"] = self.project!
                        }
                        if self.roleName != nil {
                            map["RoleName"] = self.roleName!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["ConsumePosition"] as? String {
                            self.consumePosition = value
                        }
                        if let value = dict["ConsumerGroup"] as? String {
                            self.consumerGroup = value
                        }
                        if let value = dict["LogStore"] as? String {
                            self.logStore = value
                        }
                        if let value = dict["Project"] as? String {
                            self.project = value
                        }
                        if let value = dict["RoleName"] as? String {
                            self.roleName = value
                        }
                    }
                }
                public var sourceApacheRocketMQCheckpointParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceApacheRocketMQCheckpointParameters?

                public var sourceCustomizedKafkaConnectorParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceCustomizedKafkaConnectorParameters?

                public var sourceCustomizedKafkaParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceCustomizedKafkaParameters?

                public var sourceDTSParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceDTSParameters?

                public var sourceEventBusParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceEventBusParameters?

                public var sourceKafkaParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceKafkaParameters?

                public var sourceMNSParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceMNSParameters?

                public var sourceMQTTParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceMQTTParameters?

                public var sourceMySQLParameters: SourceMySQLParameters?

                public var sourceOSSParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceOSSParameters?

                public var sourceOpenSourceRabbitMQParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceOpenSourceRabbitMQParameters?

                public var sourcePrometheusParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourcePrometheusParameters?

                public var sourceRabbitMQParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceRabbitMQParameters?

                public var sourceRocketMQCheckpointParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceRocketMQCheckpointParameters?

                public var sourceRocketMQParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceRocketMQParameters?

                public var sourceSLSParameters: ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceSLSParameters?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.sourceApacheRocketMQCheckpointParameters?.validate()
                    try self.sourceCustomizedKafkaConnectorParameters?.validate()
                    try self.sourceCustomizedKafkaParameters?.validate()
                    try self.sourceDTSParameters?.validate()
                    try self.sourceEventBusParameters?.validate()
                    try self.sourceKafkaParameters?.validate()
                    try self.sourceMNSParameters?.validate()
                    try self.sourceMQTTParameters?.validate()
                    try self.sourceMySQLParameters?.validate()
                    try self.sourceOSSParameters?.validate()
                    try self.sourceOpenSourceRabbitMQParameters?.validate()
                    try self.sourcePrometheusParameters?.validate()
                    try self.sourceRabbitMQParameters?.validate()
                    try self.sourceRocketMQCheckpointParameters?.validate()
                    try self.sourceRocketMQParameters?.validate()
                    try self.sourceSLSParameters?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.sourceApacheRocketMQCheckpointParameters != nil {
                        map["SourceApacheRocketMQCheckpointParameters"] = self.sourceApacheRocketMQCheckpointParameters?.toMap()
                    }
                    if self.sourceCustomizedKafkaConnectorParameters != nil {
                        map["SourceCustomizedKafkaConnectorParameters"] = self.sourceCustomizedKafkaConnectorParameters?.toMap()
                    }
                    if self.sourceCustomizedKafkaParameters != nil {
                        map["SourceCustomizedKafkaParameters"] = self.sourceCustomizedKafkaParameters?.toMap()
                    }
                    if self.sourceDTSParameters != nil {
                        map["SourceDTSParameters"] = self.sourceDTSParameters?.toMap()
                    }
                    if self.sourceEventBusParameters != nil {
                        map["SourceEventBusParameters"] = self.sourceEventBusParameters?.toMap()
                    }
                    if self.sourceKafkaParameters != nil {
                        map["SourceKafkaParameters"] = self.sourceKafkaParameters?.toMap()
                    }
                    if self.sourceMNSParameters != nil {
                        map["SourceMNSParameters"] = self.sourceMNSParameters?.toMap()
                    }
                    if self.sourceMQTTParameters != nil {
                        map["SourceMQTTParameters"] = self.sourceMQTTParameters?.toMap()
                    }
                    if self.sourceMySQLParameters != nil {
                        map["SourceMySQLParameters"] = self.sourceMySQLParameters?.toMap()
                    }
                    if self.sourceOSSParameters != nil {
                        map["SourceOSSParameters"] = self.sourceOSSParameters?.toMap()
                    }
                    if self.sourceOpenSourceRabbitMQParameters != nil {
                        map["SourceOpenSourceRabbitMQParameters"] = self.sourceOpenSourceRabbitMQParameters?.toMap()
                    }
                    if self.sourcePrometheusParameters != nil {
                        map["SourcePrometheusParameters"] = self.sourcePrometheusParameters?.toMap()
                    }
                    if self.sourceRabbitMQParameters != nil {
                        map["SourceRabbitMQParameters"] = self.sourceRabbitMQParameters?.toMap()
                    }
                    if self.sourceRocketMQCheckpointParameters != nil {
                        map["SourceRocketMQCheckpointParameters"] = self.sourceRocketMQCheckpointParameters?.toMap()
                    }
                    if self.sourceRocketMQParameters != nil {
                        map["SourceRocketMQParameters"] = self.sourceRocketMQParameters?.toMap()
                    }
                    if self.sourceSLSParameters != nil {
                        map["SourceSLSParameters"] = self.sourceSLSParameters?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["SourceApacheRocketMQCheckpointParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceApacheRocketMQCheckpointParameters()
                        model.fromMap(value)
                        self.sourceApacheRocketMQCheckpointParameters = model
                    }
                    if let value = dict["SourceCustomizedKafkaConnectorParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceCustomizedKafkaConnectorParameters()
                        model.fromMap(value)
                        self.sourceCustomizedKafkaConnectorParameters = model
                    }
                    if let value = dict["SourceCustomizedKafkaParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceCustomizedKafkaParameters()
                        model.fromMap(value)
                        self.sourceCustomizedKafkaParameters = model
                    }
                    if let value = dict["SourceDTSParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceDTSParameters()
                        model.fromMap(value)
                        self.sourceDTSParameters = model
                    }
                    if let value = dict["SourceEventBusParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceEventBusParameters()
                        model.fromMap(value)
                        self.sourceEventBusParameters = model
                    }
                    if let value = dict["SourceKafkaParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceKafkaParameters()
                        model.fromMap(value)
                        self.sourceKafkaParameters = model
                    }
                    if let value = dict["SourceMNSParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceMNSParameters()
                        model.fromMap(value)
                        self.sourceMNSParameters = model
                    }
                    if let value = dict["SourceMQTTParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceMQTTParameters()
                        model.fromMap(value)
                        self.sourceMQTTParameters = model
                    }
                    if let value = dict["SourceMySQLParameters"] as? [String: Any?] {
                        var model = SourceMySQLParameters()
                        model.fromMap(value)
                        self.sourceMySQLParameters = model
                    }
                    if let value = dict["SourceOSSParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceOSSParameters()
                        model.fromMap(value)
                        self.sourceOSSParameters = model
                    }
                    if let value = dict["SourceOpenSourceRabbitMQParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceOpenSourceRabbitMQParameters()
                        model.fromMap(value)
                        self.sourceOpenSourceRabbitMQParameters = model
                    }
                    if let value = dict["SourcePrometheusParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourcePrometheusParameters()
                        model.fromMap(value)
                        self.sourcePrometheusParameters = model
                    }
                    if let value = dict["SourceRabbitMQParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceRabbitMQParameters()
                        model.fromMap(value)
                        self.sourceRabbitMQParameters = model
                    }
                    if let value = dict["SourceRocketMQCheckpointParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceRocketMQCheckpointParameters()
                        model.fromMap(value)
                        self.sourceRocketMQCheckpointParameters = model
                    }
                    if let value = dict["SourceRocketMQParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceRocketMQParameters()
                        model.fromMap(value)
                        self.sourceRocketMQParameters = model
                    }
                    if let value = dict["SourceSLSParameters"] as? [String: Any?] {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings.Source.SourceSLSParameters()
                        model.fromMap(value)
                        self.sourceSLSParameters = model
                    }
                }
            }
            public class Transforms : Tea.TeaModel {
                public var arn: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.arn != nil {
                        map["Arn"] = self.arn!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Arn"] as? String {
                        self.arn = value
                    }
                }
            }
            public var description_: String?

            public var eventStreamingName: String?

            public var filterPattern: String?

            public var runOptions: ListEventStreamingsResponseBody.Data.EventStreamings.RunOptions?

            public var sink: ListEventStreamingsResponseBody.Data.EventStreamings.Sink?

            public var source: ListEventStreamingsResponseBody.Data.EventStreamings.Source?

            public var status: String?

            public var transforms: [ListEventStreamingsResponseBody.Data.EventStreamings.Transforms]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.runOptions?.validate()
                try self.sink?.validate()
                try self.source?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.eventStreamingName != nil {
                    map["EventStreamingName"] = self.eventStreamingName!
                }
                if self.filterPattern != nil {
                    map["FilterPattern"] = self.filterPattern!
                }
                if self.runOptions != nil {
                    map["RunOptions"] = self.runOptions?.toMap()
                }
                if self.sink != nil {
                    map["Sink"] = self.sink?.toMap()
                }
                if self.source != nil {
                    map["Source"] = self.source?.toMap()
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.transforms != nil {
                    var tmp : [Any] = []
                    for k in self.transforms! {
                        tmp.append(k.toMap())
                    }
                    map["Transforms"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["EventStreamingName"] as? String {
                    self.eventStreamingName = value
                }
                if let value = dict["FilterPattern"] as? String {
                    self.filterPattern = value
                }
                if let value = dict["RunOptions"] as? [String: Any?] {
                    var model = ListEventStreamingsResponseBody.Data.EventStreamings.RunOptions()
                    model.fromMap(value)
                    self.runOptions = model
                }
                if let value = dict["Sink"] as? [String: Any?] {
                    var model = ListEventStreamingsResponseBody.Data.EventStreamings.Sink()
                    model.fromMap(value)
                    self.sink = model
                }
                if let value = dict["Source"] as? [String: Any?] {
                    var model = ListEventStreamingsResponseBody.Data.EventStreamings.Source()
                    model.fromMap(value)
                    self.source = model
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["Transforms"] as? [Any?] {
                    var tmp : [ListEventStreamingsResponseBody.Data.EventStreamings.Transforms] = []
                    for v in value {
                        if v != nil {
                            var model = ListEventStreamingsResponseBody.Data.EventStreamings.Transforms()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.transforms = tmp
                }
            }
        }
        public var eventStreamings: [ListEventStreamingsResponseBody.Data.EventStreamings]?

        public var nextToken: String?

        public var total: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.eventStreamings != nil {
                var tmp : [Any] = []
                for k in self.eventStreamings! {
                    tmp.append(k.toMap())
                }
                map["EventStreamings"] = tmp
            }
            if self.nextToken != nil {
                map["NextToken"] = self.nextToken!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EventStreamings"] as? [Any?] {
                var tmp : [ListEventStreamingsResponseBody.Data.EventStreamings] = []
                for v in value {
                    if v != nil {
                        var model = ListEventStreamingsResponseBody.Data.EventStreamings()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.eventStreamings = tmp
            }
            if let value = dict["NextToken"] as? String {
                self.nextToken = value
            }
            if let value = dict["Total"] as? Int32 {
                self.total = value
            }
        }
    }
    public var code: String?

    public var data: ListEventStreamingsResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListEventStreamingsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListEventStreamingsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListEventStreamingsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListEventStreamingsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListRulesRequest : Tea.TeaModel {
    public var eventBusName: String?

    public var limit: Int32?

    public var nextToken: String?

    public var ruleNamePrefix: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eventBusName != nil {
            map["EventBusName"] = self.eventBusName!
        }
        if self.limit != nil {
            map["Limit"] = self.limit!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.ruleNamePrefix != nil {
            map["RuleNamePrefix"] = self.ruleNamePrefix!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EventBusName"] as? String {
            self.eventBusName = value
        }
        if let value = dict["Limit"] as? Int32 {
            self.limit = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RuleNamePrefix"] as? String {
            self.ruleNamePrefix = value
        }
    }
}

public class ListRulesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Rules : Tea.TeaModel {
            public class Targets : Tea.TeaModel {
                public var endpoint: String?

                public var errorsTolerance: String?

                public var id: String?

                public var pushSelector: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.endpoint != nil {
                        map["Endpoint"] = self.endpoint!
                    }
                    if self.errorsTolerance != nil {
                        map["ErrorsTolerance"] = self.errorsTolerance!
                    }
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.pushSelector != nil {
                        map["PushSelector"] = self.pushSelector!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Endpoint"] as? String {
                        self.endpoint = value
                    }
                    if let value = dict["ErrorsTolerance"] as? String {
                        self.errorsTolerance = value
                    }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                    if let value = dict["PushSelector"] as? String {
                        self.pushSelector = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public var createdTimestamp: Int64?

            public var description_: String?

            public var detailMap: [String: Any]?

            public var eventBusName: String?

            public var filterPattern: String?

            public var ruleARN: String?

            public var ruleName: String?

            public var status: String?

            public var targets: [ListRulesResponseBody.Data.Rules.Targets]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.createdTimestamp != nil {
                    map["CreatedTimestamp"] = self.createdTimestamp!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.detailMap != nil {
                    map["DetailMap"] = self.detailMap!
                }
                if self.eventBusName != nil {
                    map["EventBusName"] = self.eventBusName!
                }
                if self.filterPattern != nil {
                    map["FilterPattern"] = self.filterPattern!
                }
                if self.ruleARN != nil {
                    map["RuleARN"] = self.ruleARN!
                }
                if self.ruleName != nil {
                    map["RuleName"] = self.ruleName!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.targets != nil {
                    var tmp : [Any] = []
                    for k in self.targets! {
                        tmp.append(k.toMap())
                    }
                    map["Targets"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CreatedTimestamp"] as? Int64 {
                    self.createdTimestamp = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DetailMap"] as? [String: Any] {
                    self.detailMap = value
                }
                if let value = dict["EventBusName"] as? String {
                    self.eventBusName = value
                }
                if let value = dict["FilterPattern"] as? String {
                    self.filterPattern = value
                }
                if let value = dict["RuleARN"] as? String {
                    self.ruleARN = value
                }
                if let value = dict["RuleName"] as? String {
                    self.ruleName = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["Targets"] as? [Any?] {
                    var tmp : [ListRulesResponseBody.Data.Rules.Targets] = []
                    for v in value {
                        if v != nil {
                            var model = ListRulesResponseBody.Data.Rules.Targets()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.targets = tmp
                }
            }
        }
        public var nextToken: String?

        public var rules: [ListRulesResponseBody.Data.Rules]?

        public var total: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.nextToken != nil {
                map["NextToken"] = self.nextToken!
            }
            if self.rules != nil {
                var tmp : [Any] = []
                for k in self.rules! {
                    tmp.append(k.toMap())
                }
                map["Rules"] = tmp
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["NextToken"] as? String {
                self.nextToken = value
            }
            if let value = dict["Rules"] as? [Any?] {
                var tmp : [ListRulesResponseBody.Data.Rules] = []
                for v in value {
                    if v != nil {
                        var model = ListRulesResponseBody.Data.Rules()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.rules = tmp
            }
            if let value = dict["Total"] as? Int32 {
                self.total = value
            }
        }
    }
    public var code: String?

    public var data: ListRulesResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListRulesResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListRulesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListRulesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListRulesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListTargetsRequest : Tea.TeaModel {
    public var arn: String?

    public var eventBusName: String?

    public var limit: Int32?

    public var nextToken: String?

    public var ruleName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.arn != nil {
            map["Arn"] = self.arn!
        }
        if self.eventBusName != nil {
            map["EventBusName"] = self.eventBusName!
        }
        if self.limit != nil {
            map["Limit"] = self.limit!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Arn"] as? String {
            self.arn = value
        }
        if let value = dict["EventBusName"] as? String {
            self.eventBusName = value
        }
        if let value = dict["Limit"] as? Int32 {
            self.limit = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
    }
}

public class ListTargetsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Targets : Tea.TeaModel {
            public class ConcurrentConfig : Tea.TeaModel {
                public var concurrency: Int64?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.concurrency != nil {
                        map["Concurrency"] = self.concurrency!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Concurrency"] as? Int64 {
                        self.concurrency = value
                    }
                }
            }
            public class ParamList : Tea.TeaModel {
                public var form: String?

                public var resourceKey: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.resourceKey != nil {
                        map["ResourceKey"] = self.resourceKey!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["ResourceKey"] as? String {
                        self.resourceKey = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var concurrentConfig: ListTargetsResponseBody.Data.Targets.ConcurrentConfig?

            public var endpoint: String?

            public var errorsTolerance: String?

            public var eventBusName: String?

            public var id: String?

            public var paramList: [ListTargetsResponseBody.Data.Targets.ParamList]?

            public var ruleName: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.concurrentConfig?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.concurrentConfig != nil {
                    map["ConcurrentConfig"] = self.concurrentConfig?.toMap()
                }
                if self.endpoint != nil {
                    map["Endpoint"] = self.endpoint!
                }
                if self.errorsTolerance != nil {
                    map["ErrorsTolerance"] = self.errorsTolerance!
                }
                if self.eventBusName != nil {
                    map["EventBusName"] = self.eventBusName!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.paramList != nil {
                    var tmp : [Any] = []
                    for k in self.paramList! {
                        tmp.append(k.toMap())
                    }
                    map["ParamList"] = tmp
                }
                if self.ruleName != nil {
                    map["RuleName"] = self.ruleName!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConcurrentConfig"] as? [String: Any?] {
                    var model = ListTargetsResponseBody.Data.Targets.ConcurrentConfig()
                    model.fromMap(value)
                    self.concurrentConfig = model
                }
                if let value = dict["Endpoint"] as? String {
                    self.endpoint = value
                }
                if let value = dict["ErrorsTolerance"] as? String {
                    self.errorsTolerance = value
                }
                if let value = dict["EventBusName"] as? String {
                    self.eventBusName = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["ParamList"] as? [Any?] {
                    var tmp : [ListTargetsResponseBody.Data.Targets.ParamList] = []
                    for v in value {
                        if v != nil {
                            var model = ListTargetsResponseBody.Data.Targets.ParamList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.paramList = tmp
                }
                if let value = dict["RuleName"] as? String {
                    self.ruleName = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var nextToken: String?

        public var targets: [ListTargetsResponseBody.Data.Targets]?

        public var total: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.nextToken != nil {
                map["NextToken"] = self.nextToken!
            }
            if self.targets != nil {
                var tmp : [Any] = []
                for k in self.targets! {
                    tmp.append(k.toMap())
                }
                map["Targets"] = tmp
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["NextToken"] as? String {
                self.nextToken = value
            }
            if let value = dict["Targets"] as? [Any?] {
                var tmp : [ListTargetsResponseBody.Data.Targets] = []
                for v in value {
                    if v != nil {
                        var model = ListTargetsResponseBody.Data.Targets()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.targets = tmp
            }
            if let value = dict["Total"] as? Int32 {
                self.total = value
            }
        }
    }
    public var code: String?

    public var data: ListTargetsResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListTargetsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListTargetsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTargetsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListTargetsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListUserDefinedEventSourcesRequest : Tea.TeaModel {
    public var eventBusName: String?

    public var limit: Int32?

    public var namePrefix: String?

    public var nextToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eventBusName != nil {
            map["EventBusName"] = self.eventBusName!
        }
        if self.limit != nil {
            map["Limit"] = self.limit!
        }
        if self.namePrefix != nil {
            map["NamePrefix"] = self.namePrefix!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EventBusName"] as? String {
            self.eventBusName = value
        }
        if let value = dict["Limit"] as? Int32 {
            self.limit = value
        }
        if let value = dict["NamePrefix"] as? String {
            self.namePrefix = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
    }
}

public class ListUserDefinedEventSourcesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class EventSourceList : Tea.TeaModel {
            public class SourceHttpEventParameters : Tea.TeaModel {
                public var ip: [String]?

                public var method: [String]?

                public var publicWebHookUrl: [String]?

                public var referer: [String]?

                public var securityConfig: String?

                public var type: String?

                public var vpcWebHookUrl: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.ip != nil {
                        map["Ip"] = self.ip!
                    }
                    if self.method != nil {
                        map["Method"] = self.method!
                    }
                    if self.publicWebHookUrl != nil {
                        map["PublicWebHookUrl"] = self.publicWebHookUrl!
                    }
                    if self.referer != nil {
                        map["Referer"] = self.referer!
                    }
                    if self.securityConfig != nil {
                        map["SecurityConfig"] = self.securityConfig!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    if self.vpcWebHookUrl != nil {
                        map["VpcWebHookUrl"] = self.vpcWebHookUrl!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Ip"] as? [String] {
                        self.ip = value
                    }
                    if let value = dict["Method"] as? [String] {
                        self.method = value
                    }
                    if let value = dict["PublicWebHookUrl"] as? [String] {
                        self.publicWebHookUrl = value
                    }
                    if let value = dict["Referer"] as? [String] {
                        self.referer = value
                    }
                    if let value = dict["SecurityConfig"] as? String {
                        self.securityConfig = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                    if let value = dict["VpcWebHookUrl"] as? [String] {
                        self.vpcWebHookUrl = value
                    }
                }
            }
            public class SourceKafkaParameters : Tea.TeaModel {
                public var consumerGroup: String?

                public var instanceId: String?

                public var maximumTasks: Int32?

                public var network: String?

                public var offsetReset: String?

                public var regionId: String?

                public var securityGroupId: String?

                public var topic: String?

                public var vSwitchIds: String?

                public var vpcId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.consumerGroup != nil {
                        map["ConsumerGroup"] = self.consumerGroup!
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.maximumTasks != nil {
                        map["MaximumTasks"] = self.maximumTasks!
                    }
                    if self.network != nil {
                        map["Network"] = self.network!
                    }
                    if self.offsetReset != nil {
                        map["OffsetReset"] = self.offsetReset!
                    }
                    if self.regionId != nil {
                        map["RegionId"] = self.regionId!
                    }
                    if self.securityGroupId != nil {
                        map["SecurityGroupId"] = self.securityGroupId!
                    }
                    if self.topic != nil {
                        map["Topic"] = self.topic!
                    }
                    if self.vSwitchIds != nil {
                        map["VSwitchIds"] = self.vSwitchIds!
                    }
                    if self.vpcId != nil {
                        map["VpcId"] = self.vpcId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ConsumerGroup"] as? String {
                        self.consumerGroup = value
                    }
                    if let value = dict["InstanceId"] as? String {
                        self.instanceId = value
                    }
                    if let value = dict["MaximumTasks"] as? Int32 {
                        self.maximumTasks = value
                    }
                    if let value = dict["Network"] as? String {
                        self.network = value
                    }
                    if let value = dict["OffsetReset"] as? String {
                        self.offsetReset = value
                    }
                    if let value = dict["RegionId"] as? String {
                        self.regionId = value
                    }
                    if let value = dict["SecurityGroupId"] as? String {
                        self.securityGroupId = value
                    }
                    if let value = dict["Topic"] as? String {
                        self.topic = value
                    }
                    if let value = dict["VSwitchIds"] as? String {
                        self.vSwitchIds = value
                    }
                    if let value = dict["VpcId"] as? String {
                        self.vpcId = value
                    }
                }
            }
            public class SourceMNSParameters : Tea.TeaModel {
                public var isBase64Decode: Bool?

                public var queueName: String?

                public var regionId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.isBase64Decode != nil {
                        map["IsBase64Decode"] = self.isBase64Decode!
                    }
                    if self.queueName != nil {
                        map["QueueName"] = self.queueName!
                    }
                    if self.regionId != nil {
                        map["RegionId"] = self.regionId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["IsBase64Decode"] as? Bool {
                        self.isBase64Decode = value
                    }
                    if let value = dict["QueueName"] as? String {
                        self.queueName = value
                    }
                    if let value = dict["RegionId"] as? String {
                        self.regionId = value
                    }
                }
            }
            public class SourceRabbitMQParameters : Tea.TeaModel {
                public var instanceId: String?

                public var queueName: String?

                public var regionId: String?

                public var virtualHostName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.queueName != nil {
                        map["QueueName"] = self.queueName!
                    }
                    if self.regionId != nil {
                        map["RegionId"] = self.regionId!
                    }
                    if self.virtualHostName != nil {
                        map["VirtualHostName"] = self.virtualHostName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["InstanceId"] as? String {
                        self.instanceId = value
                    }
                    if let value = dict["QueueName"] as? String {
                        self.queueName = value
                    }
                    if let value = dict["RegionId"] as? String {
                        self.regionId = value
                    }
                    if let value = dict["VirtualHostName"] as? String {
                        self.virtualHostName = value
                    }
                }
            }
            public class SourceRocketMQParameters : Tea.TeaModel {
                public var authType: String?

                public var groupId: String?

                public var instanceEndpoint: String?

                public var instanceId: String?

                public var instanceNetwork: String?

                public var instancePassword: String?

                public var instanceSecurityGroupId: String?

                public var instanceType: String?

                public var instanceUsername: String?

                public var instanceVSwitchIds: String?

                public var instanceVpcId: String?

                public var offset: String?

                public var regionId: String?

                public var tag: String?

                public var timestamp: Double?

                public var topic: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.authType != nil {
                        map["AuthType"] = self.authType!
                    }
                    if self.groupId != nil {
                        map["GroupId"] = self.groupId!
                    }
                    if self.instanceEndpoint != nil {
                        map["InstanceEndpoint"] = self.instanceEndpoint!
                    }
                    if self.instanceId != nil {
                        map["InstanceId"] = self.instanceId!
                    }
                    if self.instanceNetwork != nil {
                        map["InstanceNetwork"] = self.instanceNetwork!
                    }
                    if self.instancePassword != nil {
                        map["InstancePassword"] = self.instancePassword!
                    }
                    if self.instanceSecurityGroupId != nil {
                        map["InstanceSecurityGroupId"] = self.instanceSecurityGroupId!
                    }
                    if self.instanceType != nil {
                        map["InstanceType"] = self.instanceType!
                    }
                    if self.instanceUsername != nil {
                        map["InstanceUsername"] = self.instanceUsername!
                    }
                    if self.instanceVSwitchIds != nil {
                        map["InstanceVSwitchIds"] = self.instanceVSwitchIds!
                    }
                    if self.instanceVpcId != nil {
                        map["InstanceVpcId"] = self.instanceVpcId!
                    }
                    if self.offset != nil {
                        map["Offset"] = self.offset!
                    }
                    if self.regionId != nil {
                        map["RegionId"] = self.regionId!
                    }
                    if self.tag != nil {
                        map["Tag"] = self.tag!
                    }
                    if self.timestamp != nil {
                        map["Timestamp"] = self.timestamp!
                    }
                    if self.topic != nil {
                        map["Topic"] = self.topic!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AuthType"] as? String {
                        self.authType = value
                    }
                    if let value = dict["GroupId"] as? String {
                        self.groupId = value
                    }
                    if let value = dict["InstanceEndpoint"] as? String {
                        self.instanceEndpoint = value
                    }
                    if let value = dict["InstanceId"] as? String {
                        self.instanceId = value
                    }
                    if let value = dict["InstanceNetwork"] as? String {
                        self.instanceNetwork = value
                    }
                    if let value = dict["InstancePassword"] as? String {
                        self.instancePassword = value
                    }
                    if let value = dict["InstanceSecurityGroupId"] as? String {
                        self.instanceSecurityGroupId = value
                    }
                    if let value = dict["InstanceType"] as? String {
                        self.instanceType = value
                    }
                    if let value = dict["InstanceUsername"] as? String {
                        self.instanceUsername = value
                    }
                    if let value = dict["InstanceVSwitchIds"] as? String {
                        self.instanceVSwitchIds = value
                    }
                    if let value = dict["InstanceVpcId"] as? String {
                        self.instanceVpcId = value
                    }
                    if let value = dict["Offset"] as? String {
                        self.offset = value
                    }
                    if let value = dict["RegionId"] as? String {
                        self.regionId = value
                    }
                    if let value = dict["Tag"] as? String {
                        self.tag = value
                    }
                    if let value = dict["Timestamp"] as? Double {
                        self.timestamp = value
                    }
                    if let value = dict["Topic"] as? String {
                        self.topic = value
                    }
                }
            }
            public class SourceSLSParameters : Tea.TeaModel {
                public var consumePosition: String?

                public var logStore: String?

                public var project: String?

                public var roleName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.consumePosition != nil {
                        map["ConsumePosition"] = self.consumePosition!
                    }
                    if self.logStore != nil {
                        map["LogStore"] = self.logStore!
                    }
                    if self.project != nil {
                        map["Project"] = self.project!
                    }
                    if self.roleName != nil {
                        map["RoleName"] = self.roleName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ConsumePosition"] as? String {
                        self.consumePosition = value
                    }
                    if let value = dict["LogStore"] as? String {
                        self.logStore = value
                    }
                    if let value = dict["Project"] as? String {
                        self.project = value
                    }
                    if let value = dict["RoleName"] as? String {
                        self.roleName = value
                    }
                }
            }
            public class SourceScheduledEventParameters : Tea.TeaModel {
                public var schedule: String?

                public var timeZone: String?

                public var userData: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.schedule != nil {
                        map["Schedule"] = self.schedule!
                    }
                    if self.timeZone != nil {
                        map["TimeZone"] = self.timeZone!
                    }
                    if self.userData != nil {
                        map["UserData"] = self.userData!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Schedule"] as? String {
                        self.schedule = value
                    }
                    if let value = dict["TimeZone"] as? String {
                        self.timeZone = value
                    }
                    if let value = dict["UserData"] as? String {
                        self.userData = value
                    }
                }
            }
            public var arn: String?

            public var ctime: Double?

            public var eventBusName: String?

            public var externalSourceType: String?

            public var name: String?

            public var sourceHttpEventParameters: ListUserDefinedEventSourcesResponseBody.Data.EventSourceList.SourceHttpEventParameters?

            public var sourceKafkaParameters: ListUserDefinedEventSourcesResponseBody.Data.EventSourceList.SourceKafkaParameters?

            public var sourceMNSParameters: ListUserDefinedEventSourcesResponseBody.Data.EventSourceList.SourceMNSParameters?

            public var sourceRabbitMQParameters: ListUserDefinedEventSourcesResponseBody.Data.EventSourceList.SourceRabbitMQParameters?

            public var sourceRocketMQParameters: ListUserDefinedEventSourcesResponseBody.Data.EventSourceList.SourceRocketMQParameters?

            public var sourceSLSParameters: ListUserDefinedEventSourcesResponseBody.Data.EventSourceList.SourceSLSParameters?

            public var sourceScheduledEventParameters: ListUserDefinedEventSourcesResponseBody.Data.EventSourceList.SourceScheduledEventParameters?

            public var status: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.sourceHttpEventParameters?.validate()
                try self.sourceKafkaParameters?.validate()
                try self.sourceMNSParameters?.validate()
                try self.sourceRabbitMQParameters?.validate()
                try self.sourceRocketMQParameters?.validate()
                try self.sourceSLSParameters?.validate()
                try self.sourceScheduledEventParameters?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arn != nil {
                    map["Arn"] = self.arn!
                }
                if self.ctime != nil {
                    map["Ctime"] = self.ctime!
                }
                if self.eventBusName != nil {
                    map["EventBusName"] = self.eventBusName!
                }
                if self.externalSourceType != nil {
                    map["ExternalSourceType"] = self.externalSourceType!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.sourceHttpEventParameters != nil {
                    map["SourceHttpEventParameters"] = self.sourceHttpEventParameters?.toMap()
                }
                if self.sourceKafkaParameters != nil {
                    map["SourceKafkaParameters"] = self.sourceKafkaParameters?.toMap()
                }
                if self.sourceMNSParameters != nil {
                    map["SourceMNSParameters"] = self.sourceMNSParameters?.toMap()
                }
                if self.sourceRabbitMQParameters != nil {
                    map["SourceRabbitMQParameters"] = self.sourceRabbitMQParameters?.toMap()
                }
                if self.sourceRocketMQParameters != nil {
                    map["SourceRocketMQParameters"] = self.sourceRocketMQParameters?.toMap()
                }
                if self.sourceSLSParameters != nil {
                    map["SourceSLSParameters"] = self.sourceSLSParameters?.toMap()
                }
                if self.sourceScheduledEventParameters != nil {
                    map["SourceScheduledEventParameters"] = self.sourceScheduledEventParameters?.toMap()
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Arn"] as? String {
                    self.arn = value
                }
                if let value = dict["Ctime"] as? Double {
                    self.ctime = value
                }
                if let value = dict["EventBusName"] as? String {
                    self.eventBusName = value
                }
                if let value = dict["ExternalSourceType"] as? String {
                    self.externalSourceType = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["SourceHttpEventParameters"] as? [String: Any?] {
                    var model = ListUserDefinedEventSourcesResponseBody.Data.EventSourceList.SourceHttpEventParameters()
                    model.fromMap(value)
                    self.sourceHttpEventParameters = model
                }
                if let value = dict["SourceKafkaParameters"] as? [String: Any?] {
                    var model = ListUserDefinedEventSourcesResponseBody.Data.EventSourceList.SourceKafkaParameters()
                    model.fromMap(value)
                    self.sourceKafkaParameters = model
                }
                if let value = dict["SourceMNSParameters"] as? [String: Any?] {
                    var model = ListUserDefinedEventSourcesResponseBody.Data.EventSourceList.SourceMNSParameters()
                    model.fromMap(value)
                    self.sourceMNSParameters = model
                }
                if let value = dict["SourceRabbitMQParameters"] as? [String: Any?] {
                    var model = ListUserDefinedEventSourcesResponseBody.Data.EventSourceList.SourceRabbitMQParameters()
                    model.fromMap(value)
                    self.sourceRabbitMQParameters = model
                }
                if let value = dict["SourceRocketMQParameters"] as? [String: Any?] {
                    var model = ListUserDefinedEventSourcesResponseBody.Data.EventSourceList.SourceRocketMQParameters()
                    model.fromMap(value)
                    self.sourceRocketMQParameters = model
                }
                if let value = dict["SourceSLSParameters"] as? [String: Any?] {
                    var model = ListUserDefinedEventSourcesResponseBody.Data.EventSourceList.SourceSLSParameters()
                    model.fromMap(value)
                    self.sourceSLSParameters = model
                }
                if let value = dict["SourceScheduledEventParameters"] as? [String: Any?] {
                    var model = ListUserDefinedEventSourcesResponseBody.Data.EventSourceList.SourceScheduledEventParameters()
                    model.fromMap(value)
                    self.sourceScheduledEventParameters = model
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var eventSourceList: [ListUserDefinedEventSourcesResponseBody.Data.EventSourceList]?

        public var nextToken: String?

        public var total: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.eventSourceList != nil {
                var tmp : [Any] = []
                for k in self.eventSourceList! {
                    tmp.append(k.toMap())
                }
                map["EventSourceList"] = tmp
            }
            if self.nextToken != nil {
                map["NextToken"] = self.nextToken!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EventSourceList"] as? [Any?] {
                var tmp : [ListUserDefinedEventSourcesResponseBody.Data.EventSourceList] = []
                for v in value {
                    if v != nil {
                        var model = ListUserDefinedEventSourcesResponseBody.Data.EventSourceList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.eventSourceList = tmp
            }
            if let value = dict["NextToken"] as? String {
                self.nextToken = value
            }
            if let value = dict["Total"] as? Int32 {
                self.total = value
            }
        }
    }
    public var code: String?

    public var data: ListUserDefinedEventSourcesResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListUserDefinedEventSourcesResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListUserDefinedEventSourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListUserDefinedEventSourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListUserDefinedEventSourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PauseEventStreamingRequest : Tea.TeaModel {
    public var eventStreamingName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eventStreamingName != nil {
            map["EventStreamingName"] = self.eventStreamingName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EventStreamingName"] as? String {
            self.eventStreamingName = value
        }
    }
}

public class PauseEventStreamingResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class PauseEventStreamingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PauseEventStreamingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PauseEventStreamingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PutTargetsRequest : Tea.TeaModel {
    public class Targets : Tea.TeaModel {
        public class ConcurrentConfig : Tea.TeaModel {
            public var concurrency: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.concurrency != nil {
                    map["Concurrency"] = self.concurrency!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Concurrency"] as? Int64 {
                    self.concurrency = value
                }
            }
        }
        public class DeadLetterQueue : Tea.TeaModel {
            public var arn: String?

            public var network: String?

            public var securityGroupId: String?

            public var vSwitchIds: String?

            public var vpcId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arn != nil {
                    map["Arn"] = self.arn!
                }
                if self.network != nil {
                    map["Network"] = self.network!
                }
                if self.securityGroupId != nil {
                    map["SecurityGroupId"] = self.securityGroupId!
                }
                if self.vSwitchIds != nil {
                    map["VSwitchIds"] = self.vSwitchIds!
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Arn"] as? String {
                    self.arn = value
                }
                if let value = dict["Network"] as? String {
                    self.network = value
                }
                if let value = dict["SecurityGroupId"] as? String {
                    self.securityGroupId = value
                }
                if let value = dict["VSwitchIds"] as? String {
                    self.vSwitchIds = value
                }
                if let value = dict["VpcId"] as? String {
                    self.vpcId = value
                }
            }
        }
        public class ParamList : Tea.TeaModel {
            public var form: String?

            public var resourceKey: String?

            public var template: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.form != nil {
                    map["Form"] = self.form!
                }
                if self.resourceKey != nil {
                    map["ResourceKey"] = self.resourceKey!
                }
                if self.template != nil {
                    map["Template"] = self.template!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Form"] as? String {
                    self.form = value
                }
                if let value = dict["ResourceKey"] as? String {
                    self.resourceKey = value
                }
                if let value = dict["Template"] as? String {
                    self.template = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var concurrentConfig: PutTargetsRequest.Targets.ConcurrentConfig?

        public var deadLetterQueue: PutTargetsRequest.Targets.DeadLetterQueue?

        public var endpoint: String?

        public var errorsTolerance: String?

        public var id: String?

        public var paramList: [PutTargetsRequest.Targets.ParamList]?

        public var pushRetryStrategy: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.concurrentConfig?.validate()
            try self.deadLetterQueue?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.concurrentConfig != nil {
                map["ConcurrentConfig"] = self.concurrentConfig?.toMap()
            }
            if self.deadLetterQueue != nil {
                map["DeadLetterQueue"] = self.deadLetterQueue?.toMap()
            }
            if self.endpoint != nil {
                map["Endpoint"] = self.endpoint!
            }
            if self.errorsTolerance != nil {
                map["ErrorsTolerance"] = self.errorsTolerance!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.paramList != nil {
                var tmp : [Any] = []
                for k in self.paramList! {
                    tmp.append(k.toMap())
                }
                map["ParamList"] = tmp
            }
            if self.pushRetryStrategy != nil {
                map["PushRetryStrategy"] = self.pushRetryStrategy!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConcurrentConfig"] as? [String: Any?] {
                var model = PutTargetsRequest.Targets.ConcurrentConfig()
                model.fromMap(value)
                self.concurrentConfig = model
            }
            if let value = dict["DeadLetterQueue"] as? [String: Any?] {
                var model = PutTargetsRequest.Targets.DeadLetterQueue()
                model.fromMap(value)
                self.deadLetterQueue = model
            }
            if let value = dict["Endpoint"] as? String {
                self.endpoint = value
            }
            if let value = dict["ErrorsTolerance"] as? String {
                self.errorsTolerance = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["ParamList"] as? [Any?] {
                var tmp : [PutTargetsRequest.Targets.ParamList] = []
                for v in value {
                    if v != nil {
                        var model = PutTargetsRequest.Targets.ParamList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.paramList = tmp
            }
            if let value = dict["PushRetryStrategy"] as? String {
                self.pushRetryStrategy = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var eventBusName: String?

    public var ruleName: String?

    public var targets: [PutTargetsRequest.Targets]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eventBusName != nil {
            map["EventBusName"] = self.eventBusName!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.targets != nil {
            var tmp : [Any] = []
            for k in self.targets! {
                tmp.append(k.toMap())
            }
            map["Targets"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EventBusName"] as? String {
            self.eventBusName = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Targets"] as? [Any?] {
            var tmp : [PutTargetsRequest.Targets] = []
            for v in value {
                if v != nil {
                    var model = PutTargetsRequest.Targets()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.targets = tmp
        }
    }
}

public class PutTargetsShrinkRequest : Tea.TeaModel {
    public var eventBusName: String?

    public var ruleName: String?

    public var targetsShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eventBusName != nil {
            map["EventBusName"] = self.eventBusName!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.targetsShrink != nil {
            map["Targets"] = self.targetsShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EventBusName"] as? String {
            self.eventBusName = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Targets"] as? String {
            self.targetsShrink = value
        }
    }
}

public class PutTargetsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ErrorEntries : Tea.TeaModel {
            public var entryId: String?

            public var errorCode: String?

            public var errorMessage: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.entryId != nil {
                    map["EntryId"] = self.entryId!
                }
                if self.errorCode != nil {
                    map["ErrorCode"] = self.errorCode!
                }
                if self.errorMessage != nil {
                    map["ErrorMessage"] = self.errorMessage!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EntryId"] as? String {
                    self.entryId = value
                }
                if let value = dict["ErrorCode"] as? String {
                    self.errorCode = value
                }
                if let value = dict["ErrorMessage"] as? String {
                    self.errorMessage = value
                }
            }
        }
        public var errorEntries: [PutTargetsResponseBody.Data.ErrorEntries]?

        public var errorEntriesCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorEntries != nil {
                var tmp : [Any] = []
                for k in self.errorEntries! {
                    tmp.append(k.toMap())
                }
                map["ErrorEntries"] = tmp
            }
            if self.errorEntriesCount != nil {
                map["ErrorEntriesCount"] = self.errorEntriesCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorEntries"] as? [Any?] {
                var tmp : [PutTargetsResponseBody.Data.ErrorEntries] = []
                for v in value {
                    if v != nil {
                        var model = PutTargetsResponseBody.Data.ErrorEntries()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.errorEntries = tmp
            }
            if let value = dict["ErrorEntriesCount"] as? Int32 {
                self.errorEntriesCount = value
            }
        }
    }
    public var code: String?

    public var data: PutTargetsResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = PutTargetsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class PutTargetsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PutTargetsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PutTargetsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryEventRequest : Tea.TeaModel {
    public var eventBusName: String?

    public var eventId: String?

    public var eventSource: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eventBusName != nil {
            map["EventBusName"] = self.eventBusName!
        }
        if self.eventId != nil {
            map["EventId"] = self.eventId!
        }
        if self.eventSource != nil {
            map["EventSource"] = self.eventSource!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EventBusName"] as? String {
            self.eventBusName = value
        }
        if let value = dict["EventId"] as? String {
            self.eventId = value
        }
        if let value = dict["EventSource"] as? String {
            self.eventSource = value
        }
    }
}

public class QueryEventResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: [String: Any]?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any] {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryEventResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryEventResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryEventResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryEventTracesRequest : Tea.TeaModel {
    public var eventBusName: String?

    public var eventId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eventBusName != nil {
            map["EventBusName"] = self.eventBusName!
        }
        if self.eventId != nil {
            map["EventId"] = self.eventId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EventBusName"] as? String {
            self.eventBusName = value
        }
        if let value = dict["EventId"] as? String {
            self.eventId = value
        }
    }
}

public class QueryEventTracesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var action: String?

        public var actionTime: Int64?

        public var endpoint: String?

        public var eventBusName: String?

        public var eventId: String?

        public var eventSource: String?

        public var notifyLatency: String?

        public var notifyStatus: String?

        public var notifyTime: Int64?

        public var receivedTime: Int64?

        public var ruleMatchingTime: String?

        public var ruleName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.action != nil {
                map["Action"] = self.action!
            }
            if self.actionTime != nil {
                map["ActionTime"] = self.actionTime!
            }
            if self.endpoint != nil {
                map["Endpoint"] = self.endpoint!
            }
            if self.eventBusName != nil {
                map["EventBusName"] = self.eventBusName!
            }
            if self.eventId != nil {
                map["EventId"] = self.eventId!
            }
            if self.eventSource != nil {
                map["EventSource"] = self.eventSource!
            }
            if self.notifyLatency != nil {
                map["NotifyLatency"] = self.notifyLatency!
            }
            if self.notifyStatus != nil {
                map["NotifyStatus"] = self.notifyStatus!
            }
            if self.notifyTime != nil {
                map["NotifyTime"] = self.notifyTime!
            }
            if self.receivedTime != nil {
                map["ReceivedTime"] = self.receivedTime!
            }
            if self.ruleMatchingTime != nil {
                map["RuleMatchingTime"] = self.ruleMatchingTime!
            }
            if self.ruleName != nil {
                map["RuleName"] = self.ruleName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Action"] as? String {
                self.action = value
            }
            if let value = dict["ActionTime"] as? Int64 {
                self.actionTime = value
            }
            if let value = dict["Endpoint"] as? String {
                self.endpoint = value
            }
            if let value = dict["EventBusName"] as? String {
                self.eventBusName = value
            }
            if let value = dict["EventId"] as? String {
                self.eventId = value
            }
            if let value = dict["EventSource"] as? String {
                self.eventSource = value
            }
            if let value = dict["NotifyLatency"] as? String {
                self.notifyLatency = value
            }
            if let value = dict["NotifyStatus"] as? String {
                self.notifyStatus = value
            }
            if let value = dict["NotifyTime"] as? Int64 {
                self.notifyTime = value
            }
            if let value = dict["ReceivedTime"] as? Int64 {
                self.receivedTime = value
            }
            if let value = dict["RuleMatchingTime"] as? String {
                self.ruleMatchingTime = value
            }
            if let value = dict["RuleName"] as? String {
                self.ruleName = value
            }
        }
    }
    public var code: String?

    public var data: [QueryEventTracesResponseBody.Data]?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [QueryEventTracesResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = QueryEventTracesResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryEventTracesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryEventTracesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryEventTracesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryTracedEventByEventIdRequest : Tea.TeaModel {
    public var eventBusName: String?

    public var eventId: String?

    public var eventSource: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eventBusName != nil {
            map["EventBusName"] = self.eventBusName!
        }
        if self.eventId != nil {
            map["EventId"] = self.eventId!
        }
        if self.eventSource != nil {
            map["EventSource"] = self.eventSource!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EventBusName"] as? String {
            self.eventBusName = value
        }
        if let value = dict["EventId"] as? String {
            self.eventId = value
        }
        if let value = dict["EventSource"] as? String {
            self.eventSource = value
        }
    }
}

public class QueryTracedEventByEventIdResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Events : Tea.TeaModel {
            public var eventBusName: String?

            public var eventId: String?

            public var eventReceivedTime: Int64?

            public var eventSource: String?

            public var eventType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.eventBusName != nil {
                    map["EventBusName"] = self.eventBusName!
                }
                if self.eventId != nil {
                    map["EventId"] = self.eventId!
                }
                if self.eventReceivedTime != nil {
                    map["EventReceivedTime"] = self.eventReceivedTime!
                }
                if self.eventSource != nil {
                    map["EventSource"] = self.eventSource!
                }
                if self.eventType != nil {
                    map["EventType"] = self.eventType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EventBusName"] as? String {
                    self.eventBusName = value
                }
                if let value = dict["EventId"] as? String {
                    self.eventId = value
                }
                if let value = dict["EventReceivedTime"] as? Int64 {
                    self.eventReceivedTime = value
                }
                if let value = dict["EventSource"] as? String {
                    self.eventSource = value
                }
                if let value = dict["EventType"] as? String {
                    self.eventType = value
                }
            }
        }
        public var events: [QueryTracedEventByEventIdResponseBody.Data.Events]?

        public var nextToken: String?

        public var total: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.events != nil {
                var tmp : [Any] = []
                for k in self.events! {
                    tmp.append(k.toMap())
                }
                map["Events"] = tmp
            }
            if self.nextToken != nil {
                map["NextToken"] = self.nextToken!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Events"] as? [Any?] {
                var tmp : [QueryTracedEventByEventIdResponseBody.Data.Events] = []
                for v in value {
                    if v != nil {
                        var model = QueryTracedEventByEventIdResponseBody.Data.Events()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.events = tmp
            }
            if let value = dict["NextToken"] as? String {
                self.nextToken = value
            }
            if let value = dict["Total"] as? Int32 {
                self.total = value
            }
        }
    }
    public var code: String?

    public var data: [QueryTracedEventByEventIdResponseBody.Data]?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [QueryTracedEventByEventIdResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = QueryTracedEventByEventIdResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryTracedEventByEventIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryTracedEventByEventIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryTracedEventByEventIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryTracedEventsRequest : Tea.TeaModel {
    public var endTime: Int64?

    public var eventBusName: String?

    public var eventSource: String?

    public var eventType: String?

    public var limit: Int32?

    public var matchedRule: String?

    public var nextToken: String?

    public var startTime: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.eventBusName != nil {
            map["EventBusName"] = self.eventBusName!
        }
        if self.eventSource != nil {
            map["EventSource"] = self.eventSource!
        }
        if self.eventType != nil {
            map["EventType"] = self.eventType!
        }
        if self.limit != nil {
            map["Limit"] = self.limit!
        }
        if self.matchedRule != nil {
            map["MatchedRule"] = self.matchedRule!
        }
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? Int64 {
            self.endTime = value
        }
        if let value = dict["EventBusName"] as? String {
            self.eventBusName = value
        }
        if let value = dict["EventSource"] as? String {
            self.eventSource = value
        }
        if let value = dict["EventType"] as? String {
            self.eventType = value
        }
        if let value = dict["Limit"] as? Int32 {
            self.limit = value
        }
        if let value = dict["MatchedRule"] as? String {
            self.matchedRule = value
        }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["StartTime"] as? Int64 {
            self.startTime = value
        }
    }
}

public class QueryTracedEventsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Events : Tea.TeaModel {
            public var eventBusName: String?

            public var eventId: String?

            public var eventReceivedTime: Int64?

            public var eventSource: String?

            public var eventType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.eventBusName != nil {
                    map["EventBusName"] = self.eventBusName!
                }
                if self.eventId != nil {
                    map["EventId"] = self.eventId!
                }
                if self.eventReceivedTime != nil {
                    map["EventReceivedTime"] = self.eventReceivedTime!
                }
                if self.eventSource != nil {
                    map["EventSource"] = self.eventSource!
                }
                if self.eventType != nil {
                    map["EventType"] = self.eventType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EventBusName"] as? String {
                    self.eventBusName = value
                }
                if let value = dict["EventId"] as? String {
                    self.eventId = value
                }
                if let value = dict["EventReceivedTime"] as? Int64 {
                    self.eventReceivedTime = value
                }
                if let value = dict["EventSource"] as? String {
                    self.eventSource = value
                }
                if let value = dict["EventType"] as? String {
                    self.eventType = value
                }
            }
        }
        public var events: [QueryTracedEventsResponseBody.Data.Events]?

        public var nextToken: String?

        public var total: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.events != nil {
                var tmp : [Any] = []
                for k in self.events! {
                    tmp.append(k.toMap())
                }
                map["Events"] = tmp
            }
            if self.nextToken != nil {
                map["NextToken"] = self.nextToken!
            }
            if self.total != nil {
                map["Total"] = self.total!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Events"] as? [Any?] {
                var tmp : [QueryTracedEventsResponseBody.Data.Events] = []
                for v in value {
                    if v != nil {
                        var model = QueryTracedEventsResponseBody.Data.Events()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.events = tmp
            }
            if let value = dict["NextToken"] as? String {
                self.nextToken = value
            }
            if let value = dict["Total"] as? Int32 {
                self.total = value
            }
        }
    }
    public var code: String?

    public var data: QueryTracedEventsResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = QueryTracedEventsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class QueryTracedEventsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryTracedEventsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryTracedEventsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class StartEventStreamingRequest : Tea.TeaModel {
    public var eventStreamingName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.eventStreamingName != nil {
            map["EventStreamingName"] = self.eventStreamingName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EventStreamingName"] as? String {
            self.eventStreamingName = value
        }
    }
}

public class StartEventStreamingResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class StartEventStreamingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: StartEventStreamingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = StartEventStreamingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class TestEventPatternRequest : Tea.TeaModel {
    public var event: String?

    public var eventPattern: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.event != nil {
            map["Event"] = self.event!
        }
        if self.eventPattern != nil {
            map["EventPattern"] = self.eventPattern!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Event"] as? String {
            self.event = value
        }
        if let value = dict["EventPattern"] as? String {
            self.eventPattern = value
        }
    }
}

public class TestEventPatternResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var result: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.result != nil {
                map["Result"] = self.result!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Result"] as? Bool {
                self.result = value
            }
        }
    }
    public var code: String?

    public var data: TestEventPatternResponseBody.Data?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = TestEventPatternResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class TestEventPatternResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TestEventPatternResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = TestEventPatternResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class TestEventSourceConfigRequest : Tea.TeaModel {
    public class SourceMySQLParameters : Tea.TeaModel {
        public var databaseName: String?

        public var hostName: String?

        public var networkType: String?

        public var password: String?

        public var port: Int32?

        public var regionId: String?

        public var securityGroupId: String?

        public var tableNames: String?

        public var user: String?

        public var vSwitchIds: String?

        public var vpcId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.databaseName != nil {
                map["DatabaseName"] = self.databaseName!
            }
            if self.hostName != nil {
                map["HostName"] = self.hostName!
            }
            if self.networkType != nil {
                map["NetworkType"] = self.networkType!
            }
            if self.password != nil {
                map["Password"] = self.password!
            }
            if self.port != nil {
                map["Port"] = self.port!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.securityGroupId != nil {
                map["SecurityGroupId"] = self.securityGroupId!
            }
            if self.tableNames != nil {
                map["TableNames"] = self.tableNames!
            }
            if self.user != nil {
                map["User"] = self.user!
            }
            if self.vSwitchIds != nil {
                map["VSwitchIds"] = self.vSwitchIds!
            }
            if self.vpcId != nil {
                map["VpcId"] = self.vpcId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DatabaseName"] as? String {
                self.databaseName = value
            }
            if let value = dict["HostName"] as? String {
                self.hostName = value
            }
            if let value = dict["NetworkType"] as? String {
                self.networkType = value
            }
            if let value = dict["Password"] as? String {
                self.password = value
            }
            if let value = dict["Port"] as? Int32 {
                self.port = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["SecurityGroupId"] as? String {
                self.securityGroupId = value
            }
            if let value = dict["TableNames"] as? String {
                self.tableNames = value
            }
            if let value = dict["User"] as? String {
                self.user = value
            }
            if let value = dict["VSwitchIds"] as? String {
                self.vSwitchIds = value
            }
            if let value = dict["VpcId"] as? String {
                self.vpcId = value
            }
        }
    }
    public var sourceMySQLParameters: TestEventSourceConfigRequest.SourceMySQLParameters?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.sourceMySQLParameters?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.sourceMySQLParameters != nil {
            map["SourceMySQLParameters"] = self.sourceMySQLParameters?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SourceMySQLParameters"] as? [String: Any?] {
            var model = TestEventSourceConfigRequest.SourceMySQLParameters()
            model.fromMap(value)
            self.sourceMySQLParameters = model
        }
    }
}

public class TestEventSourceConfigShrinkRequest : Tea.TeaModel {
    public var sourceMySQLParametersShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.sourceMySQLParametersShrink != nil {
            map["SourceMySQLParameters"] = self.sourceMySQLParametersShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SourceMySQLParameters"] as? String {
            self.sourceMySQLParametersShrink = value
        }
    }
}

public class TestEventSourceConfigResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var checkItem: String?

        public var errorMsg: String?

        public var isSucceed: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.checkItem != nil {
                map["CheckItem"] = self.checkItem!
            }
            if self.errorMsg != nil {
                map["ErrorMsg"] = self.errorMsg!
            }
            if self.isSucceed != nil {
                map["IsSucceed"] = self.isSucceed!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CheckItem"] as? String {
                self.checkItem = value
            }
            if let value = dict["ErrorMsg"] as? String {
                self.errorMsg = value
            }
            if let value = dict["IsSucceed"] as? String {
                self.isSucceed = value
            }
        }
    }
    public var code: String?

    public var data: [TestEventSourceConfigResponseBody.Data]?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [TestEventSourceConfigResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = TestEventSourceConfigResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class TestEventSourceConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TestEventSourceConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = TestEventSourceConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateApiDestinationRequest : Tea.TeaModel {
    public class HttpApiParameters : Tea.TeaModel {
        public var endpoint: String?

        public var method: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.endpoint != nil {
                map["Endpoint"] = self.endpoint!
            }
            if self.method != nil {
                map["Method"] = self.method!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Endpoint"] as? String {
                self.endpoint = value
            }
            if let value = dict["Method"] as? String {
                self.method = value
            }
        }
    }
    public var apiDestinationName: String?

    public var connectionName: String?

    public var description_: String?

    public var httpApiParameters: UpdateApiDestinationRequest.HttpApiParameters?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.httpApiParameters?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiDestinationName != nil {
            map["ApiDestinationName"] = self.apiDestinationName!
        }
        if self.connectionName != nil {
            map["ConnectionName"] = self.connectionName!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.httpApiParameters != nil {
            map["HttpApiParameters"] = self.httpApiParameters?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiDestinationName"] as? String {
            self.apiDestinationName = value
        }
        if let value = dict["ConnectionName"] as? String {
            self.connectionName = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["HttpApiParameters"] as? [String: Any?] {
            var model = UpdateApiDestinationRequest.HttpApiParameters()
            model.fromMap(value)
            self.httpApiParameters = model
        }
    }
}

public class UpdateApiDestinationShrinkRequest : Tea.TeaModel {
    public var apiDestinationName: String?

    public var connectionName: String?

    public var description_: String?

    public var httpApiParametersShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiDestinationName != nil {
            map["ApiDestinationName"] = self.apiDestinationName!
        }
        if self.connectionName != nil {
            map["ConnectionName"] = self.connectionName!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.httpApiParametersShrink != nil {
            map["HttpApiParameters"] = self.httpApiParametersShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiDestinationName"] as? String {
            self.apiDestinationName = value
        }
        if let value = dict["ConnectionName"] as? String {
            self.connectionName = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["HttpApiParameters"] as? String {
            self.httpApiParametersShrink = value
        }
    }
}

public class UpdateApiDestinationResponseBody : Tea.TeaModel {
    public var apiDestinationName: String?

    public var code: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiDestinationName != nil {
            map["ApiDestinationName"] = self.apiDestinationName!
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiDestinationName"] as? String {
            self.apiDestinationName = value
        }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateApiDestinationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateApiDestinationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateApiDestinationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateConnectionRequest : Tea.TeaModel {
    public class AuthParameters : Tea.TeaModel {
        public class ApiKeyAuthParameters : Tea.TeaModel {
            public var apiKeyName: String?

            public var apiKeyValue: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiKeyName != nil {
                    map["ApiKeyName"] = self.apiKeyName!
                }
                if self.apiKeyValue != nil {
                    map["ApiKeyValue"] = self.apiKeyValue!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiKeyName"] as? String {
                    self.apiKeyName = value
                }
                if let value = dict["ApiKeyValue"] as? String {
                    self.apiKeyValue = value
                }
            }
        }
        public class BasicAuthParameters : Tea.TeaModel {
            public var password: String?

            public var username: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.password != nil {
                    map["Password"] = self.password!
                }
                if self.username != nil {
                    map["Username"] = self.username!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Password"] as? String {
                    self.password = value
                }
                if let value = dict["Username"] as? String {
                    self.username = value
                }
            }
        }
        public class OAuthParameters : Tea.TeaModel {
            public class ClientParameters : Tea.TeaModel {
                public var clientID: String?

                public var clientSecret: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.clientID != nil {
                        map["ClientID"] = self.clientID!
                    }
                    if self.clientSecret != nil {
                        map["ClientSecret"] = self.clientSecret!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ClientID"] as? String {
                        self.clientID = value
                    }
                    if let value = dict["ClientSecret"] as? String {
                        self.clientSecret = value
                    }
                }
            }
            public class OAuthHttpParameters : Tea.TeaModel {
                public class BodyParameters : Tea.TeaModel {
                    public var isValueSecret: String?

                    public var key: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.isValueSecret != nil {
                            map["IsValueSecret"] = self.isValueSecret!
                        }
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["IsValueSecret"] as? String {
                            self.isValueSecret = value
                        }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class HeaderParameters : Tea.TeaModel {
                    public var isValueSecret: String?

                    public var key: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.isValueSecret != nil {
                            map["IsValueSecret"] = self.isValueSecret!
                        }
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["IsValueSecret"] as? String {
                            self.isValueSecret = value
                        }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public class QueryStringParameters : Tea.TeaModel {
                    public var isValueSecret: String?

                    public var key: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.isValueSecret != nil {
                            map["IsValueSecret"] = self.isValueSecret!
                        }
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["IsValueSecret"] as? String {
                            self.isValueSecret = value
                        }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var bodyParameters: [UpdateConnectionRequest.AuthParameters.OAuthParameters.OAuthHttpParameters.BodyParameters]?

                public var headerParameters: [UpdateConnectionRequest.AuthParameters.OAuthParameters.OAuthHttpParameters.HeaderParameters]?

                public var queryStringParameters: [UpdateConnectionRequest.AuthParameters.OAuthParameters.OAuthHttpParameters.QueryStringParameters]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.bodyParameters != nil {
                        var tmp : [Any] = []
                        for k in self.bodyParameters! {
                            tmp.append(k.toMap())
                        }
                        map["BodyParameters"] = tmp
                    }
                    if self.headerParameters != nil {
                        var tmp : [Any] = []
                        for k in self.headerParameters! {
                            tmp.append(k.toMap())
                        }
                        map["HeaderParameters"] = tmp
                    }
                    if self.queryStringParameters != nil {
                        var tmp : [Any] = []
                        for k in self.queryStringParameters! {
                            tmp.append(k.toMap())
                        }
                        map["QueryStringParameters"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["BodyParameters"] as? [Any?] {
                        var tmp : [UpdateConnectionRequest.AuthParameters.OAuthParameters.OAuthHttpParameters.BodyParameters] = []
                        for v in value {
                            if v != nil {
                                var model = UpdateConnectionRequest.AuthParameters.OAuthParameters.OAuthHttpParameters.BodyParameters()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.bodyParameters = tmp
                    }
                    if let value = dict["HeaderParameters"] as? [Any?] {
                        var tmp : [UpdateConnectionRequest.AuthParameters.OAuthParameters.OAuthHttpParameters.HeaderParameters] = []
                        for v in value {
                            if v != nil {
                                var model = UpdateConnectionRequest.AuthParameters.OAuthParameters.OAuthHttpParameters.HeaderParameters()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.headerParameters = tmp
                    }
                    if let value = dict["QueryStringParameters"] as? [Any?] {
                        var tmp : [UpdateConnectionRequest.AuthParameters.OAuthParameters.OAuthHttpParameters.QueryStringParameters] = []
                        for v in value {
                            if v != nil {
                                var model = UpdateConnectionRequest.AuthParameters.OAuthParameters.OAuthHttpParameters.QueryStringParameters()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.queryStringParameters = tmp
                    }
                }
            }
            public var authorizationEndpoint: String?

            public var clientParameters: UpdateConnectionRequest.AuthParameters.OAuthParameters.ClientParameters?

            public var httpMethod: String?

            public var OAuthHttpParameters: UpdateConnectionRequest.AuthParameters.OAuthParameters.OAuthHttpParameters?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.clientParameters?.validate()
                try self.OAuthHttpParameters?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.authorizationEndpoint != nil {
                    map["AuthorizationEndpoint"] = self.authorizationEndpoint!
                }
                if self.clientParameters != nil {
                    map["ClientParameters"] = self.clientParameters?.toMap()
                }
                if self.httpMethod != nil {
                    map["HttpMethod"] = self.httpMethod!
                }
                if self.OAuthHttpParameters != nil {
                    map["OAuthHttpParameters"] = self.OAuthHttpParameters?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AuthorizationEndpoint"] as? String {
                    self.authorizationEndpoint = value
                }
                if let value = dict["ClientParameters"] as? [String: Any?] {
                    var model = UpdateConnectionRequest.AuthParameters.OAuthParameters.ClientParameters()
                    model.fromMap(value)
                    self.clientParameters = model
                }
                if let value = dict["HttpMethod"] as? String {
                    self.httpMethod = value
                }
                if let value = dict["OAuthHttpParameters"] as? [String: Any?] {
                    var model = UpdateConnectionRequest.AuthParameters.OAuthParameters.OAuthHttpParameters()
                    model.fromMap(value)
                    self.OAuthHttpParameters = model
                }
            }
        }
        public var apiKeyAuthParameters: UpdateConnectionRequest.AuthParameters.ApiKeyAuthParameters?

        public var authorizationType: String?

        public var basicAuthParameters: UpdateConnectionRequest.AuthParameters.BasicAuthParameters?

        public var OAuthParameters: UpdateConnectionRequest.AuthParameters.OAuthParameters?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.apiKeyAuthParameters?.validate()
            try self.basicAuthParameters?.validate()
            try self.OAuthParameters?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiKeyAuthParameters != nil {
                map["ApiKeyAuthParameters"] = self.apiKeyAuthParameters?.toMap()
            }
            if self.authorizationType != nil {
                map["AuthorizationType"] = self.authorizationType!
            }
            if self.basicAuthParameters != nil {
                map["BasicAuthParameters"] = self.basicAuthParameters?.toMap()
            }
            if self.OAuthParameters != nil {
                map["OAuthParameters"] = self.OAuthParameters?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiKeyAuthParameters"] as? [String: Any?] {
                var model = UpdateConnectionRequest.AuthParameters.ApiKeyAuthParameters()
                model.fromMap(value)
                self.apiKeyAuthParameters = model
            }
            if let value = dict["AuthorizationType"] as? String {
                self.authorizationType = value
            }
            if let value = dict["BasicAuthParameters"] as? [String: Any?] {
                var model = UpdateConnectionRequest.AuthParameters.BasicAuthParameters()
                model.fromMap(value)
                self.basicAuthParameters = model
            }
            if let value = dict["OAuthParameters"] as? [String: Any?] {
                var model = UpdateConnectionRequest.AuthParameters.OAuthParameters()
                model.fromMap(value)
                self.OAuthParameters = model
            }
        }
    }
    public class NetworkParameters : Tea.TeaModel {
        public var networkType: String?

        public var securityGroupId: String?

        public var vpcId: String?

        public var vswitcheId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.networkType != nil {
                map["NetworkType"] = self.networkType!
            }
            if self.securityGroupId != nil {
                map["SecurityGroupId"] = self.securityGroupId!
            }
            if self.vpcId != nil {
                map["VpcId"] = self.vpcId!
            }
            if self.vswitcheId != nil {
                map["VswitcheId"] = self.vswitcheId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["NetworkType"] as? String {
                self.networkType = value
            }
            if let value = dict["SecurityGroupId"] as? String {
                self.securityGroupId = value
            }
            if let value = dict["VpcId"] as? String {
                self.vpcId = value
            }
            if let value = dict["VswitcheId"] as? String {
                self.vswitcheId = value
            }
        }
    }
    public var authParameters: UpdateConnectionRequest.AuthParameters?

    public var connectionName: String?

    public var description_: String?

    public var networkParameters: UpdateConnectionRequest.NetworkParameters?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.authParameters?.validate()
        try self.networkParameters?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.authParameters != nil {
            map["AuthParameters"] = self.authParameters?.toMap()
        }
        if self.connectionName != nil {
            map["ConnectionName"] = self.connectionName!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.networkParameters != nil {
            map["NetworkParameters"] = self.networkParameters?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuthParameters"] as? [String: Any?] {
            var model = UpdateConnectionRequest.AuthParameters()
            model.fromMap(value)
            self.authParameters = model
        }
        if let value = dict["ConnectionName"] as? String {
            self.connectionName = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["NetworkParameters"] as? [String: Any?] {
            var model = UpdateConnectionRequest.NetworkParameters()
            model.fromMap(value)
            self.networkParameters = model
        }
    }
}

public class UpdateConnectionShrinkRequest : Tea.TeaModel {
    public var authParametersShrink: String?

    public var connectionName: String?

    public var description_: String?

    public var networkParametersShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.authParametersShrink != nil {
            map["AuthParameters"] = self.authParametersShrink!
        }
        if self.connectionName != nil {
            map["ConnectionName"] = self.connectionName!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.networkParametersShrink != nil {
            map["NetworkParameters"] = self.networkParametersShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuthParameters"] as? String {
            self.authParametersShrink = value
        }
        if let value = dict["ConnectionName"] as? String {
            self.connectionName = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["NetworkParameters"] as? String {
            self.networkParametersShrink = value
        }
    }
}

public class UpdateConnectionResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdateConnectionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateConnectionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateConnectionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateEventBusRequest : Tea.TeaModel {
    public var description_: String?

    public var eventBusName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.eventBusName != nil {
            map["EventBusName"] = self.eventBusName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["EventBusName"] as? String {
            self.eventBusName = value
        }
    }
}

public class UpdateEventBusResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateEventBusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateEventBusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateEventBusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateEventSourceRequest : Tea.TeaModel {
    public class SourceHttpEventParameters : Tea.TeaModel {
        public var ip: [String]?

        public var method: [String]?

        public var referer: [String]?

        public var securityConfig: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ip != nil {
                map["Ip"] = self.ip!
            }
            if self.method != nil {
                map["Method"] = self.method!
            }
            if self.referer != nil {
                map["Referer"] = self.referer!
            }
            if self.securityConfig != nil {
                map["SecurityConfig"] = self.securityConfig!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Ip"] as? [String] {
                self.ip = value
            }
            if let value = dict["Method"] as? [String] {
                self.method = value
            }
            if let value = dict["Referer"] as? [String] {
                self.referer = value
            }
            if let value = dict["SecurityConfig"] as? String {
                self.securityConfig = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public class SourceKafkaParameters : Tea.TeaModel {
        public var consumerGroup: String?

        public var instanceId: String?

        public var maximumTasks: Int32?

        public var network: String?

        public var offsetReset: String?

        public var regionId: String?

        public var securityGroupId: String?

        public var topic: String?

        public var vSwitchIds: String?

        public var vpcId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.consumerGroup != nil {
                map["ConsumerGroup"] = self.consumerGroup!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.maximumTasks != nil {
                map["MaximumTasks"] = self.maximumTasks!
            }
            if self.network != nil {
                map["Network"] = self.network!
            }
            if self.offsetReset != nil {
                map["OffsetReset"] = self.offsetReset!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.securityGroupId != nil {
                map["SecurityGroupId"] = self.securityGroupId!
            }
            if self.topic != nil {
                map["Topic"] = self.topic!
            }
            if self.vSwitchIds != nil {
                map["VSwitchIds"] = self.vSwitchIds!
            }
            if self.vpcId != nil {
                map["VpcId"] = self.vpcId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConsumerGroup"] as? String {
                self.consumerGroup = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["MaximumTasks"] as? Int32 {
                self.maximumTasks = value
            }
            if let value = dict["Network"] as? String {
                self.network = value
            }
            if let value = dict["OffsetReset"] as? String {
                self.offsetReset = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["SecurityGroupId"] as? String {
                self.securityGroupId = value
            }
            if let value = dict["Topic"] as? String {
                self.topic = value
            }
            if let value = dict["VSwitchIds"] as? String {
                self.vSwitchIds = value
            }
            if let value = dict["VpcId"] as? String {
                self.vpcId = value
            }
        }
    }
    public class SourceMNSParameters : Tea.TeaModel {
        public var isBase64Decode: Bool?

        public var queueName: String?

        public var regionId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.isBase64Decode != nil {
                map["IsBase64Decode"] = self.isBase64Decode!
            }
            if self.queueName != nil {
                map["QueueName"] = self.queueName!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["IsBase64Decode"] as? Bool {
                self.isBase64Decode = value
            }
            if let value = dict["QueueName"] as? String {
                self.queueName = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
        }
    }
    public class SourceRabbitMQParameters : Tea.TeaModel {
        public var instanceId: String?

        public var queueName: String?

        public var regionId: String?

        public var virtualHostName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.queueName != nil {
                map["QueueName"] = self.queueName!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.virtualHostName != nil {
                map["VirtualHostName"] = self.virtualHostName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["QueueName"] as? String {
                self.queueName = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["VirtualHostName"] as? String {
                self.virtualHostName = value
            }
        }
    }
    public class SourceRocketMQParameters : Tea.TeaModel {
        public var authType: String?

        public var groupID: String?

        public var instanceEndpoint: String?

        public var instanceId: String?

        public var instanceNetwork: String?

        public var instancePassword: String?

        public var instanceSecurityGroupId: String?

        public var instanceType: String?

        public var instanceUsername: String?

        public var instanceVSwitchIds: String?

        public var instanceVpcId: String?

        public var offset: String?

        public var regionId: String?

        public var tag: String?

        public var timestamp: Int64?

        public var topic: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.authType != nil {
                map["AuthType"] = self.authType!
            }
            if self.groupID != nil {
                map["GroupID"] = self.groupID!
            }
            if self.instanceEndpoint != nil {
                map["InstanceEndpoint"] = self.instanceEndpoint!
            }
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.instanceNetwork != nil {
                map["InstanceNetwork"] = self.instanceNetwork!
            }
            if self.instancePassword != nil {
                map["InstancePassword"] = self.instancePassword!
            }
            if self.instanceSecurityGroupId != nil {
                map["InstanceSecurityGroupId"] = self.instanceSecurityGroupId!
            }
            if self.instanceType != nil {
                map["InstanceType"] = self.instanceType!
            }
            if self.instanceUsername != nil {
                map["InstanceUsername"] = self.instanceUsername!
            }
            if self.instanceVSwitchIds != nil {
                map["InstanceVSwitchIds"] = self.instanceVSwitchIds!
            }
            if self.instanceVpcId != nil {
                map["InstanceVpcId"] = self.instanceVpcId!
            }
            if self.offset != nil {
                map["Offset"] = self.offset!
            }
            if self.regionId != nil {
                map["RegionId"] = self.regionId!
            }
            if self.tag != nil {
                map["Tag"] = self.tag!
            }
            if self.timestamp != nil {
                map["Timestamp"] = self.timestamp!
            }
            if self.topic != nil {
                map["Topic"] = self.topic!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AuthType"] as? String {
                self.authType = value
            }
            if let value = dict["GroupID"] as? String {
                self.groupID = value
            }
            if let value = dict["InstanceEndpoint"] as? String {
                self.instanceEndpoint = value
            }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["InstanceNetwork"] as? String {
                self.instanceNetwork = value
            }
            if let value = dict["InstancePassword"] as? String {
                self.instancePassword = value
            }
            if let value = dict["InstanceSecurityGroupId"] as? String {
                self.instanceSecurityGroupId = value
            }
            if let value = dict["InstanceType"] as? String {
                self.instanceType = value
            }
            if let value = dict["InstanceUsername"] as? String {
                self.instanceUsername = value
            }
            if let value = dict["InstanceVSwitchIds"] as? String {
                self.instanceVSwitchIds = value
            }
            if let value = dict["InstanceVpcId"] as? String {
                self.instanceVpcId = value
            }
            if let value = dict["Offset"] as? String {
                self.offset = value
            }
            if let value = dict["RegionId"] as? String {
                self.regionId = value
            }
            if let value = dict["Tag"] as? String {
                self.tag = value
            }
            if let value = dict["Timestamp"] as? Int64 {
                self.timestamp = value
            }
            if let value = dict["Topic"] as? String {
                self.topic = value
            }
        }
    }
    public class SourceSLSParameters : Tea.TeaModel {
        public var consumePosition: String?

        public var logStore: String?

        public var project: String?

        public var roleName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.consumePosition != nil {
                map["ConsumePosition"] = self.consumePosition!
            }
            if self.logStore != nil {
                map["LogStore"] = self.logStore!
            }
            if self.project != nil {
                map["Project"] = self.project!
            }
            if self.roleName != nil {
                map["RoleName"] = self.roleName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConsumePosition"] as? String {
                self.consumePosition = value
            }
            if let value = dict["LogStore"] as? String {
                self.logStore = value
            }
            if let value = dict["Project"] as? String {
                self.project = value
            }
            if let value = dict["RoleName"] as? String {
                self.roleName = value
            }
        }
    }
    public class SourceScheduledEventParameters : Tea.TeaModel {
        public var schedule: String?

        public var timeZone: String?

        public var userData: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.schedule != nil {
                map["Schedule"] = self.schedule!
            }
            if self.timeZone != nil {
                map["TimeZone"] = self.timeZone!
            }
            if self.userData != nil {
                map["UserData"] = self.userData!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Schedule"] as? String {
                self.schedule = value
            }
            if let value = dict["TimeZone"] as? String {
                self.timeZone = value
            }
            if let value = dict["UserData"] as? String {
                self.userData = value
            }
        }
    }
    public var description_: String?

    public var eventBusName: String?

    public var eventSourceName: String?

    public var externalSourceConfig: [String: Any]?

    public var externalSourceType: String?

    public var linkedExternalSource: Bool?

    public var sourceHttpEventParameters: UpdateEventSourceRequest.SourceHttpEventParameters?

    public var sourceKafkaParameters: UpdateEventSourceRequest.SourceKafkaParameters?

    public var sourceMNSParameters: UpdateEventSourceRequest.SourceMNSParameters?

    public var sourceRabbitMQParameters: UpdateEventSourceRequest.SourceRabbitMQParameters?

    public var sourceRocketMQParameters: UpdateEventSourceRequest.SourceRocketMQParameters?

    public var sourceSLSParameters: UpdateEventSourceRequest.SourceSLSParameters?

    public var sourceScheduledEventParameters: UpdateEventSourceRequest.SourceScheduledEventParameters?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.sourceHttpEventParameters?.validate()
        try self.sourceKafkaParameters?.validate()
        try self.sourceMNSParameters?.validate()
        try self.sourceRabbitMQParameters?.validate()
        try self.sourceRocketMQParameters?.validate()
        try self.sourceSLSParameters?.validate()
        try self.sourceScheduledEventParameters?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.eventBusName != nil {
            map["EventBusName"] = self.eventBusName!
        }
        if self.eventSourceName != nil {
            map["EventSourceName"] = self.eventSourceName!
        }
        if self.externalSourceConfig != nil {
            map["ExternalSourceConfig"] = self.externalSourceConfig!
        }
        if self.externalSourceType != nil {
            map["ExternalSourceType"] = self.externalSourceType!
        }
        if self.linkedExternalSource != nil {
            map["LinkedExternalSource"] = self.linkedExternalSource!
        }
        if self.sourceHttpEventParameters != nil {
            map["SourceHttpEventParameters"] = self.sourceHttpEventParameters?.toMap()
        }
        if self.sourceKafkaParameters != nil {
            map["SourceKafkaParameters"] = self.sourceKafkaParameters?.toMap()
        }
        if self.sourceMNSParameters != nil {
            map["SourceMNSParameters"] = self.sourceMNSParameters?.toMap()
        }
        if self.sourceRabbitMQParameters != nil {
            map["SourceRabbitMQParameters"] = self.sourceRabbitMQParameters?.toMap()
        }
        if self.sourceRocketMQParameters != nil {
            map["SourceRocketMQParameters"] = self.sourceRocketMQParameters?.toMap()
        }
        if self.sourceSLSParameters != nil {
            map["SourceSLSParameters"] = self.sourceSLSParameters?.toMap()
        }
        if self.sourceScheduledEventParameters != nil {
            map["SourceScheduledEventParameters"] = self.sourceScheduledEventParameters?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["EventBusName"] as? String {
            self.eventBusName = value
        }
        if let value = dict["EventSourceName"] as? String {
            self.eventSourceName = value
        }
        if let value = dict["ExternalSourceConfig"] as? [String: Any] {
            self.externalSourceConfig = value
        }
        if let value = dict["ExternalSourceType"] as? String {
            self.externalSourceType = value
        }
        if let value = dict["LinkedExternalSource"] as? Bool {
            self.linkedExternalSource = value
        }
        if let value = dict["SourceHttpEventParameters"] as? [String: Any?] {
            var model = UpdateEventSourceRequest.SourceHttpEventParameters()
            model.fromMap(value)
            self.sourceHttpEventParameters = model
        }
        if let value = dict["SourceKafkaParameters"] as? [String: Any?] {
            var model = UpdateEventSourceRequest.SourceKafkaParameters()
            model.fromMap(value)
            self.sourceKafkaParameters = model
        }
        if let value = dict["SourceMNSParameters"] as? [String: Any?] {
            var model = UpdateEventSourceRequest.SourceMNSParameters()
            model.fromMap(value)
            self.sourceMNSParameters = model
        }
        if let value = dict["SourceRabbitMQParameters"] as? [String: Any?] {
            var model = UpdateEventSourceRequest.SourceRabbitMQParameters()
            model.fromMap(value)
            self.sourceRabbitMQParameters = model
        }
        if let value = dict["SourceRocketMQParameters"] as? [String: Any?] {
            var model = UpdateEventSourceRequest.SourceRocketMQParameters()
            model.fromMap(value)
            self.sourceRocketMQParameters = model
        }
        if let value = dict["SourceSLSParameters"] as? [String: Any?] {
            var model = UpdateEventSourceRequest.SourceSLSParameters()
            model.fromMap(value)
            self.sourceSLSParameters = model
        }
        if let value = dict["SourceScheduledEventParameters"] as? [String: Any?] {
            var model = UpdateEventSourceRequest.SourceScheduledEventParameters()
            model.fromMap(value)
            self.sourceScheduledEventParameters = model
        }
    }
}

public class UpdateEventSourceShrinkRequest : Tea.TeaModel {
    public var description_: String?

    public var eventBusName: String?

    public var eventSourceName: String?

    public var externalSourceConfigShrink: String?

    public var externalSourceType: String?

    public var linkedExternalSource: Bool?

    public var sourceHttpEventParametersShrink: String?

    public var sourceKafkaParametersShrink: String?

    public var sourceMNSParametersShrink: String?

    public var sourceRabbitMQParametersShrink: String?

    public var sourceRocketMQParametersShrink: String?

    public var sourceSLSParametersShrink: String?

    public var sourceScheduledEventParametersShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.eventBusName != nil {
            map["EventBusName"] = self.eventBusName!
        }
        if self.eventSourceName != nil {
            map["EventSourceName"] = self.eventSourceName!
        }
        if self.externalSourceConfigShrink != nil {
            map["ExternalSourceConfig"] = self.externalSourceConfigShrink!
        }
        if self.externalSourceType != nil {
            map["ExternalSourceType"] = self.externalSourceType!
        }
        if self.linkedExternalSource != nil {
            map["LinkedExternalSource"] = self.linkedExternalSource!
        }
        if self.sourceHttpEventParametersShrink != nil {
            map["SourceHttpEventParameters"] = self.sourceHttpEventParametersShrink!
        }
        if self.sourceKafkaParametersShrink != nil {
            map["SourceKafkaParameters"] = self.sourceKafkaParametersShrink!
        }
        if self.sourceMNSParametersShrink != nil {
            map["SourceMNSParameters"] = self.sourceMNSParametersShrink!
        }
        if self.sourceRabbitMQParametersShrink != nil {
            map["SourceRabbitMQParameters"] = self.sourceRabbitMQParametersShrink!
        }
        if self.sourceRocketMQParametersShrink != nil {
            map["SourceRocketMQParameters"] = self.sourceRocketMQParametersShrink!
        }
        if self.sourceSLSParametersShrink != nil {
            map["SourceSLSParameters"] = self.sourceSLSParametersShrink!
        }
        if self.sourceScheduledEventParametersShrink != nil {
            map["SourceScheduledEventParameters"] = self.sourceScheduledEventParametersShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["EventBusName"] as? String {
            self.eventBusName = value
        }
        if let value = dict["EventSourceName"] as? String {
            self.eventSourceName = value
        }
        if let value = dict["ExternalSourceConfig"] as? String {
            self.externalSourceConfigShrink = value
        }
        if let value = dict["ExternalSourceType"] as? String {
            self.externalSourceType = value
        }
        if let value = dict["LinkedExternalSource"] as? Bool {
            self.linkedExternalSource = value
        }
        if let value = dict["SourceHttpEventParameters"] as? String {
            self.sourceHttpEventParametersShrink = value
        }
        if let value = dict["SourceKafkaParameters"] as? String {
            self.sourceKafkaParametersShrink = value
        }
        if let value = dict["SourceMNSParameters"] as? String {
            self.sourceMNSParametersShrink = value
        }
        if let value = dict["SourceRabbitMQParameters"] as? String {
            self.sourceRabbitMQParametersShrink = value
        }
        if let value = dict["SourceRocketMQParameters"] as? String {
            self.sourceRocketMQParametersShrink = value
        }
        if let value = dict["SourceSLSParameters"] as? String {
            self.sourceSLSParametersShrink = value
        }
        if let value = dict["SourceScheduledEventParameters"] as? String {
            self.sourceScheduledEventParametersShrink = value
        }
    }
}

public class UpdateEventSourceResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateEventSourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateEventSourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateEventSourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateEventStreamingRequest : Tea.TeaModel {
    public class RunOptions : Tea.TeaModel {
        public class BatchWindow : Tea.TeaModel {
            public var countBasedWindow: Int32?

            public var timeBasedWindow: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.countBasedWindow != nil {
                    map["CountBasedWindow"] = self.countBasedWindow!
                }
                if self.timeBasedWindow != nil {
                    map["TimeBasedWindow"] = self.timeBasedWindow!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CountBasedWindow"] as? Int32 {
                    self.countBasedWindow = value
                }
                if let value = dict["TimeBasedWindow"] as? Int32 {
                    self.timeBasedWindow = value
                }
            }
        }
        public class BusinessOption : Tea.TeaModel {
            public var businessMode: String?

            public var maxCapacityUnitCount: Int64?

            public var minCapacityUnitCount: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.businessMode != nil {
                    map["BusinessMode"] = self.businessMode!
                }
                if self.maxCapacityUnitCount != nil {
                    map["MaxCapacityUnitCount"] = self.maxCapacityUnitCount!
                }
                if self.minCapacityUnitCount != nil {
                    map["MinCapacityUnitCount"] = self.minCapacityUnitCount!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BusinessMode"] as? String {
                    self.businessMode = value
                }
                if let value = dict["MaxCapacityUnitCount"] as? Int64 {
                    self.maxCapacityUnitCount = value
                }
                if let value = dict["MinCapacityUnitCount"] as? Int64 {
                    self.minCapacityUnitCount = value
                }
            }
        }
        public class DeadLetterQueue : Tea.TeaModel {
            public var arn: String?

            public var network: String?

            public var securityGroupId: String?

            public var vSwitchIds: String?

            public var vpcId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.arn != nil {
                    map["Arn"] = self.arn!
                }
                if self.network != nil {
                    map["Network"] = self.network!
                }
                if self.securityGroupId != nil {
                    map["SecurityGroupId"] = self.securityGroupId!
                }
                if self.vSwitchIds != nil {
                    map["VSwitchIds"] = self.vSwitchIds!
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Arn"] as? String {
                    self.arn = value
                }
                if let value = dict["Network"] as? String {
                    self.network = value
                }
                if let value = dict["SecurityGroupId"] as? String {
                    self.securityGroupId = value
                }
                if let value = dict["VSwitchIds"] as? String {
                    self.vSwitchIds = value
                }
                if let value = dict["VpcId"] as? String {
                    self.vpcId = value
                }
            }
        }
        public class RetryStrategy : Tea.TeaModel {
            public var maximumEventAgeInSeconds: Int64?

            public var maximumRetryAttempts: Int64?

            public var pushRetryStrategy: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.maximumEventAgeInSeconds != nil {
                    map["MaximumEventAgeInSeconds"] = self.maximumEventAgeInSeconds!
                }
                if self.maximumRetryAttempts != nil {
                    map["MaximumRetryAttempts"] = self.maximumRetryAttempts!
                }
                if self.pushRetryStrategy != nil {
                    map["PushRetryStrategy"] = self.pushRetryStrategy!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["MaximumEventAgeInSeconds"] as? Int64 {
                    self.maximumEventAgeInSeconds = value
                }
                if let value = dict["MaximumRetryAttempts"] as? Int64 {
                    self.maximumRetryAttempts = value
                }
                if let value = dict["PushRetryStrategy"] as? String {
                    self.pushRetryStrategy = value
                }
            }
        }
        public var batchWindow: UpdateEventStreamingRequest.RunOptions.BatchWindow?

        public var businessOption: UpdateEventStreamingRequest.RunOptions.BusinessOption?

        public var deadLetterQueue: UpdateEventStreamingRequest.RunOptions.DeadLetterQueue?

        public var errorsTolerance: String?

        public var maximumTasks: Int64?

        public var retryStrategy: UpdateEventStreamingRequest.RunOptions.RetryStrategy?

        public var throttling: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.batchWindow?.validate()
            try self.businessOption?.validate()
            try self.deadLetterQueue?.validate()
            try self.retryStrategy?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.batchWindow != nil {
                map["BatchWindow"] = self.batchWindow?.toMap()
            }
            if self.businessOption != nil {
                map["BusinessOption"] = self.businessOption?.toMap()
            }
            if self.deadLetterQueue != nil {
                map["DeadLetterQueue"] = self.deadLetterQueue?.toMap()
            }
            if self.errorsTolerance != nil {
                map["ErrorsTolerance"] = self.errorsTolerance!
            }
            if self.maximumTasks != nil {
                map["MaximumTasks"] = self.maximumTasks!
            }
            if self.retryStrategy != nil {
                map["RetryStrategy"] = self.retryStrategy?.toMap()
            }
            if self.throttling != nil {
                map["Throttling"] = self.throttling!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BatchWindow"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.RunOptions.BatchWindow()
                model.fromMap(value)
                self.batchWindow = model
            }
            if let value = dict["BusinessOption"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.RunOptions.BusinessOption()
                model.fromMap(value)
                self.businessOption = model
            }
            if let value = dict["DeadLetterQueue"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.RunOptions.DeadLetterQueue()
                model.fromMap(value)
                self.deadLetterQueue = model
            }
            if let value = dict["ErrorsTolerance"] as? String {
                self.errorsTolerance = value
            }
            if let value = dict["MaximumTasks"] as? Int64 {
                self.maximumTasks = value
            }
            if let value = dict["RetryStrategy"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.RunOptions.RetryStrategy()
                model.fromMap(value)
                self.retryStrategy = model
            }
            if let value = dict["Throttling"] as? Int32 {
                self.throttling = value
            }
        }
    }
    public class Sink : Tea.TeaModel {
        public class SinkApacheRocketMQCheckpointParameters : Tea.TeaModel {
            public class ConsumeTimestamp : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Group : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Topic : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var consumeTimestamp: UpdateEventStreamingRequest.Sink.SinkApacheRocketMQCheckpointParameters.ConsumeTimestamp?

            public var group: UpdateEventStreamingRequest.Sink.SinkApacheRocketMQCheckpointParameters.Group?

            public var instanceEndpoint: String?

            public var instancePassword: String?

            public var instanceUsername: String?

            public var networkType: String?

            public var securityGroupId: String?

            public var topic: UpdateEventStreamingRequest.Sink.SinkApacheRocketMQCheckpointParameters.Topic?

            public var vSwitchId: String?

            public var vpcId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.consumeTimestamp?.validate()
                try self.group?.validate()
                try self.topic?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.consumeTimestamp != nil {
                    map["ConsumeTimestamp"] = self.consumeTimestamp?.toMap()
                }
                if self.group != nil {
                    map["Group"] = self.group?.toMap()
                }
                if self.instanceEndpoint != nil {
                    map["InstanceEndpoint"] = self.instanceEndpoint!
                }
                if self.instancePassword != nil {
                    map["InstancePassword"] = self.instancePassword!
                }
                if self.instanceUsername != nil {
                    map["InstanceUsername"] = self.instanceUsername!
                }
                if self.networkType != nil {
                    map["NetworkType"] = self.networkType!
                }
                if self.securityGroupId != nil {
                    map["SecurityGroupId"] = self.securityGroupId!
                }
                if self.topic != nil {
                    map["Topic"] = self.topic?.toMap()
                }
                if self.vSwitchId != nil {
                    map["VSwitchId"] = self.vSwitchId!
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConsumeTimestamp"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkApacheRocketMQCheckpointParameters.ConsumeTimestamp()
                    model.fromMap(value)
                    self.consumeTimestamp = model
                }
                if let value = dict["Group"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkApacheRocketMQCheckpointParameters.Group()
                    model.fromMap(value)
                    self.group = model
                }
                if let value = dict["InstanceEndpoint"] as? String {
                    self.instanceEndpoint = value
                }
                if let value = dict["InstancePassword"] as? String {
                    self.instancePassword = value
                }
                if let value = dict["InstanceUsername"] as? String {
                    self.instanceUsername = value
                }
                if let value = dict["NetworkType"] as? String {
                    self.networkType = value
                }
                if let value = dict["SecurityGroupId"] as? String {
                    self.securityGroupId = value
                }
                if let value = dict["Topic"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkApacheRocketMQCheckpointParameters.Topic()
                    model.fromMap(value)
                    self.topic = model
                }
                if let value = dict["VSwitchId"] as? String {
                    self.vSwitchId = value
                }
                if let value = dict["VpcId"] as? String {
                    self.vpcId = value
                }
            }
        }
        public class SinkCustomizedKafkaConnectorParameters : Tea.TeaModel {
            public class ConnectorParameters : Tea.TeaModel {
                public var config: [String: Any]?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.config != nil {
                        map["Config"] = self.config!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Config"] as? [String: Any] {
                        self.config = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public var connectorPackageUrl: String?

            public var connectorParameters: UpdateEventStreamingRequest.Sink.SinkCustomizedKafkaConnectorParameters.ConnectorParameters?

            public var workerParameters: [String: Any]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.connectorParameters?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.connectorPackageUrl != nil {
                    map["ConnectorPackageUrl"] = self.connectorPackageUrl!
                }
                if self.connectorParameters != nil {
                    map["ConnectorParameters"] = self.connectorParameters?.toMap()
                }
                if self.workerParameters != nil {
                    map["WorkerParameters"] = self.workerParameters!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConnectorPackageUrl"] as? String {
                    self.connectorPackageUrl = value
                }
                if let value = dict["ConnectorParameters"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkCustomizedKafkaConnectorParameters.ConnectorParameters()
                    model.fromMap(value)
                    self.connectorParameters = model
                }
                if let value = dict["WorkerParameters"] as? [String: Any] {
                    self.workerParameters = value
                }
            }
        }
        public class SinkCustomizedKafkaParameters : Tea.TeaModel {
            public var instanceId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
            }
        }
        public class SinkDashVectorParameters : Tea.TeaModel {
            public class DashVectorSchemaParameters : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Partition : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class PrimaryKeyId : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Vector : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var apiKey: String?

            public var collection: String?

            public var dashVectorSchemaParameters: UpdateEventStreamingRequest.Sink.SinkDashVectorParameters.DashVectorSchemaParameters?

            public var instanceId: String?

            public var network: String?

            public var operation: String?

            public var partition: UpdateEventStreamingRequest.Sink.SinkDashVectorParameters.Partition?

            public var primaryKeyId: UpdateEventStreamingRequest.Sink.SinkDashVectorParameters.PrimaryKeyId?

            public var vector: UpdateEventStreamingRequest.Sink.SinkDashVectorParameters.Vector?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.dashVectorSchemaParameters?.validate()
                try self.partition?.validate()
                try self.primaryKeyId?.validate()
                try self.vector?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiKey != nil {
                    map["ApiKey"] = self.apiKey!
                }
                if self.collection != nil {
                    map["Collection"] = self.collection!
                }
                if self.dashVectorSchemaParameters != nil {
                    map["DashVectorSchemaParameters"] = self.dashVectorSchemaParameters?.toMap()
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.network != nil {
                    map["Network"] = self.network!
                }
                if self.operation != nil {
                    map["Operation"] = self.operation!
                }
                if self.partition != nil {
                    map["Partition"] = self.partition?.toMap()
                }
                if self.primaryKeyId != nil {
                    map["PrimaryKeyId"] = self.primaryKeyId?.toMap()
                }
                if self.vector != nil {
                    map["Vector"] = self.vector?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiKey"] as? String {
                    self.apiKey = value
                }
                if let value = dict["Collection"] as? String {
                    self.collection = value
                }
                if let value = dict["DashVectorSchemaParameters"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkDashVectorParameters.DashVectorSchemaParameters()
                    model.fromMap(value)
                    self.dashVectorSchemaParameters = model
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["Network"] as? String {
                    self.network = value
                }
                if let value = dict["Operation"] as? String {
                    self.operation = value
                }
                if let value = dict["Partition"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkDashVectorParameters.Partition()
                    model.fromMap(value)
                    self.partition = model
                }
                if let value = dict["PrimaryKeyId"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkDashVectorParameters.PrimaryKeyId()
                    model.fromMap(value)
                    self.primaryKeyId = model
                }
                if let value = dict["Vector"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkDashVectorParameters.Vector()
                    model.fromMap(value)
                    self.vector = model
                }
            }
        }
        public class SinkDataHubParameters : Tea.TeaModel {
            public class Body : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class ContentSchema : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class ContentType : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Project : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class RoleName : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Topic : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class TopicSchema : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class TopicType : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var body: UpdateEventStreamingRequest.Sink.SinkDataHubParameters.Body?

            public var contentSchema: UpdateEventStreamingRequest.Sink.SinkDataHubParameters.ContentSchema?

            public var contentType: UpdateEventStreamingRequest.Sink.SinkDataHubParameters.ContentType?

            public var project: UpdateEventStreamingRequest.Sink.SinkDataHubParameters.Project?

            public var roleName: UpdateEventStreamingRequest.Sink.SinkDataHubParameters.RoleName?

            public var topic: UpdateEventStreamingRequest.Sink.SinkDataHubParameters.Topic?

            public var topicSchema: UpdateEventStreamingRequest.Sink.SinkDataHubParameters.TopicSchema?

            public var topicType: UpdateEventStreamingRequest.Sink.SinkDataHubParameters.TopicType?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.body?.validate()
                try self.contentSchema?.validate()
                try self.contentType?.validate()
                try self.project?.validate()
                try self.roleName?.validate()
                try self.topic?.validate()
                try self.topicSchema?.validate()
                try self.topicType?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.body != nil {
                    map["Body"] = self.body?.toMap()
                }
                if self.contentSchema != nil {
                    map["ContentSchema"] = self.contentSchema?.toMap()
                }
                if self.contentType != nil {
                    map["ContentType"] = self.contentType?.toMap()
                }
                if self.project != nil {
                    map["Project"] = self.project?.toMap()
                }
                if self.roleName != nil {
                    map["RoleName"] = self.roleName?.toMap()
                }
                if self.topic != nil {
                    map["Topic"] = self.topic?.toMap()
                }
                if self.topicSchema != nil {
                    map["TopicSchema"] = self.topicSchema?.toMap()
                }
                if self.topicType != nil {
                    map["TopicType"] = self.topicType?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Body"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkDataHubParameters.Body()
                    model.fromMap(value)
                    self.body = model
                }
                if let value = dict["ContentSchema"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkDataHubParameters.ContentSchema()
                    model.fromMap(value)
                    self.contentSchema = model
                }
                if let value = dict["ContentType"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkDataHubParameters.ContentType()
                    model.fromMap(value)
                    self.contentType = model
                }
                if let value = dict["Project"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkDataHubParameters.Project()
                    model.fromMap(value)
                    self.project = model
                }
                if let value = dict["RoleName"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkDataHubParameters.RoleName()
                    model.fromMap(value)
                    self.roleName = model
                }
                if let value = dict["Topic"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkDataHubParameters.Topic()
                    model.fromMap(value)
                    self.topic = model
                }
                if let value = dict["TopicSchema"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkDataHubParameters.TopicSchema()
                    model.fromMap(value)
                    self.topicSchema = model
                }
                if let value = dict["TopicType"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkDataHubParameters.TopicType()
                    model.fromMap(value)
                    self.topicType = model
                }
            }
        }
        public class SinkDorisParameters : Tea.TeaModel {
            public class BeHttpEndpoint : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Body : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Database : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class FeHttpEndpoint : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class NetworkType : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Password : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class QueryEndpoint : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class SecurityGroupId : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Table : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class UserName : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class VSwitchIds : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class VpcId : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var beHttpEndpoint: UpdateEventStreamingRequest.Sink.SinkDorisParameters.BeHttpEndpoint?

            public var body: UpdateEventStreamingRequest.Sink.SinkDorisParameters.Body?

            public var database: UpdateEventStreamingRequest.Sink.SinkDorisParameters.Database?

            public var feHttpEndpoint: UpdateEventStreamingRequest.Sink.SinkDorisParameters.FeHttpEndpoint?

            public var networkType: UpdateEventStreamingRequest.Sink.SinkDorisParameters.NetworkType?

            public var password: UpdateEventStreamingRequest.Sink.SinkDorisParameters.Password?

            public var queryEndpoint: UpdateEventStreamingRequest.Sink.SinkDorisParameters.QueryEndpoint?

            public var securityGroupId: UpdateEventStreamingRequest.Sink.SinkDorisParameters.SecurityGroupId?

            public var table: UpdateEventStreamingRequest.Sink.SinkDorisParameters.Table?

            public var userName: UpdateEventStreamingRequest.Sink.SinkDorisParameters.UserName?

            public var vSwitchIds: UpdateEventStreamingRequest.Sink.SinkDorisParameters.VSwitchIds?

            public var vpcId: UpdateEventStreamingRequest.Sink.SinkDorisParameters.VpcId?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.beHttpEndpoint?.validate()
                try self.body?.validate()
                try self.database?.validate()
                try self.feHttpEndpoint?.validate()
                try self.networkType?.validate()
                try self.password?.validate()
                try self.queryEndpoint?.validate()
                try self.securityGroupId?.validate()
                try self.table?.validate()
                try self.userName?.validate()
                try self.vSwitchIds?.validate()
                try self.vpcId?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.beHttpEndpoint != nil {
                    map["BeHttpEndpoint"] = self.beHttpEndpoint?.toMap()
                }
                if self.body != nil {
                    map["Body"] = self.body?.toMap()
                }
                if self.database != nil {
                    map["Database"] = self.database?.toMap()
                }
                if self.feHttpEndpoint != nil {
                    map["FeHttpEndpoint"] = self.feHttpEndpoint?.toMap()
                }
                if self.networkType != nil {
                    map["NetworkType"] = self.networkType?.toMap()
                }
                if self.password != nil {
                    map["Password"] = self.password?.toMap()
                }
                if self.queryEndpoint != nil {
                    map["QueryEndpoint"] = self.queryEndpoint?.toMap()
                }
                if self.securityGroupId != nil {
                    map["SecurityGroupId"] = self.securityGroupId?.toMap()
                }
                if self.table != nil {
                    map["Table"] = self.table?.toMap()
                }
                if self.userName != nil {
                    map["UserName"] = self.userName?.toMap()
                }
                if self.vSwitchIds != nil {
                    map["VSwitchIds"] = self.vSwitchIds?.toMap()
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BeHttpEndpoint"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkDorisParameters.BeHttpEndpoint()
                    model.fromMap(value)
                    self.beHttpEndpoint = model
                }
                if let value = dict["Body"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkDorisParameters.Body()
                    model.fromMap(value)
                    self.body = model
                }
                if let value = dict["Database"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkDorisParameters.Database()
                    model.fromMap(value)
                    self.database = model
                }
                if let value = dict["FeHttpEndpoint"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkDorisParameters.FeHttpEndpoint()
                    model.fromMap(value)
                    self.feHttpEndpoint = model
                }
                if let value = dict["NetworkType"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkDorisParameters.NetworkType()
                    model.fromMap(value)
                    self.networkType = model
                }
                if let value = dict["Password"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkDorisParameters.Password()
                    model.fromMap(value)
                    self.password = model
                }
                if let value = dict["QueryEndpoint"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkDorisParameters.QueryEndpoint()
                    model.fromMap(value)
                    self.queryEndpoint = model
                }
                if let value = dict["SecurityGroupId"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkDorisParameters.SecurityGroupId()
                    model.fromMap(value)
                    self.securityGroupId = model
                }
                if let value = dict["Table"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkDorisParameters.Table()
                    model.fromMap(value)
                    self.table = model
                }
                if let value = dict["UserName"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkDorisParameters.UserName()
                    model.fromMap(value)
                    self.userName = model
                }
                if let value = dict["VSwitchIds"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkDorisParameters.VSwitchIds()
                    model.fromMap(value)
                    self.vSwitchIds = model
                }
                if let value = dict["VpcId"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkDorisParameters.VpcId()
                    model.fromMap(value)
                    self.vpcId = model
                }
            }
        }
        public class SinkFcParameters : Tea.TeaModel {
            public class Body : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Concurrency : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class DataFormat : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class FunctionName : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class InvocationType : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Qualifier : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class ServiceName : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var body: UpdateEventStreamingRequest.Sink.SinkFcParameters.Body?

            public var concurrency: UpdateEventStreamingRequest.Sink.SinkFcParameters.Concurrency?

            public var dataFormat: UpdateEventStreamingRequest.Sink.SinkFcParameters.DataFormat?

            public var functionName: UpdateEventStreamingRequest.Sink.SinkFcParameters.FunctionName?

            public var invocationType: UpdateEventStreamingRequest.Sink.SinkFcParameters.InvocationType?

            public var qualifier: UpdateEventStreamingRequest.Sink.SinkFcParameters.Qualifier?

            public var serviceName: UpdateEventStreamingRequest.Sink.SinkFcParameters.ServiceName?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.body?.validate()
                try self.concurrency?.validate()
                try self.dataFormat?.validate()
                try self.functionName?.validate()
                try self.invocationType?.validate()
                try self.qualifier?.validate()
                try self.serviceName?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.body != nil {
                    map["Body"] = self.body?.toMap()
                }
                if self.concurrency != nil {
                    map["Concurrency"] = self.concurrency?.toMap()
                }
                if self.dataFormat != nil {
                    map["DataFormat"] = self.dataFormat?.toMap()
                }
                if self.functionName != nil {
                    map["FunctionName"] = self.functionName?.toMap()
                }
                if self.invocationType != nil {
                    map["InvocationType"] = self.invocationType?.toMap()
                }
                if self.qualifier != nil {
                    map["Qualifier"] = self.qualifier?.toMap()
                }
                if self.serviceName != nil {
                    map["ServiceName"] = self.serviceName?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Body"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkFcParameters.Body()
                    model.fromMap(value)
                    self.body = model
                }
                if let value = dict["Concurrency"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkFcParameters.Concurrency()
                    model.fromMap(value)
                    self.concurrency = model
                }
                if let value = dict["DataFormat"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkFcParameters.DataFormat()
                    model.fromMap(value)
                    self.dataFormat = model
                }
                if let value = dict["FunctionName"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkFcParameters.FunctionName()
                    model.fromMap(value)
                    self.functionName = model
                }
                if let value = dict["InvocationType"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkFcParameters.InvocationType()
                    model.fromMap(value)
                    self.invocationType = model
                }
                if let value = dict["Qualifier"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkFcParameters.Qualifier()
                    model.fromMap(value)
                    self.qualifier = model
                }
                if let value = dict["ServiceName"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkFcParameters.ServiceName()
                    model.fromMap(value)
                    self.serviceName = model
                }
            }
        }
        public class SinkFnfParameters : Tea.TeaModel {
            public class ExecutionName : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class FlowName : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Input : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class RoleName : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var executionName: UpdateEventStreamingRequest.Sink.SinkFnfParameters.ExecutionName?

            public var flowName: UpdateEventStreamingRequest.Sink.SinkFnfParameters.FlowName?

            public var input: UpdateEventStreamingRequest.Sink.SinkFnfParameters.Input?

            public var roleName: UpdateEventStreamingRequest.Sink.SinkFnfParameters.RoleName?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.executionName?.validate()
                try self.flowName?.validate()
                try self.input?.validate()
                try self.roleName?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.executionName != nil {
                    map["ExecutionName"] = self.executionName?.toMap()
                }
                if self.flowName != nil {
                    map["FlowName"] = self.flowName?.toMap()
                }
                if self.input != nil {
                    map["Input"] = self.input?.toMap()
                }
                if self.roleName != nil {
                    map["RoleName"] = self.roleName?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ExecutionName"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkFnfParameters.ExecutionName()
                    model.fromMap(value)
                    self.executionName = model
                }
                if let value = dict["FlowName"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkFnfParameters.FlowName()
                    model.fromMap(value)
                    self.flowName = model
                }
                if let value = dict["Input"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkFnfParameters.Input()
                    model.fromMap(value)
                    self.input = model
                }
                if let value = dict["RoleName"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkFnfParameters.RoleName()
                    model.fromMap(value)
                    self.roleName = model
                }
            }
        }
        public class SinkKafkaParameters : Tea.TeaModel {
            public class Acks : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Headers : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class InstanceId : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Key : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Topic : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Value : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var acks: UpdateEventStreamingRequest.Sink.SinkKafkaParameters.Acks?

            public var headers: UpdateEventStreamingRequest.Sink.SinkKafkaParameters.Headers?

            public var instanceId: UpdateEventStreamingRequest.Sink.SinkKafkaParameters.InstanceId?

            public var key: UpdateEventStreamingRequest.Sink.SinkKafkaParameters.Key?

            public var topic: UpdateEventStreamingRequest.Sink.SinkKafkaParameters.Topic?

            public var value: UpdateEventStreamingRequest.Sink.SinkKafkaParameters.Value?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.acks?.validate()
                try self.headers?.validate()
                try self.instanceId?.validate()
                try self.key?.validate()
                try self.topic?.validate()
                try self.value?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.acks != nil {
                    map["Acks"] = self.acks?.toMap()
                }
                if self.headers != nil {
                    map["Headers"] = self.headers?.toMap()
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId?.toMap()
                }
                if self.key != nil {
                    map["Key"] = self.key?.toMap()
                }
                if self.topic != nil {
                    map["Topic"] = self.topic?.toMap()
                }
                if self.value != nil {
                    map["Value"] = self.value?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Acks"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkKafkaParameters.Acks()
                    model.fromMap(value)
                    self.acks = model
                }
                if let value = dict["Headers"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkKafkaParameters.Headers()
                    model.fromMap(value)
                    self.headers = model
                }
                if let value = dict["InstanceId"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkKafkaParameters.InstanceId()
                    model.fromMap(value)
                    self.instanceId = model
                }
                if let value = dict["Key"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkKafkaParameters.Key()
                    model.fromMap(value)
                    self.key = model
                }
                if let value = dict["Topic"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkKafkaParameters.Topic()
                    model.fromMap(value)
                    self.topic = model
                }
                if let value = dict["Value"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkKafkaParameters.Value()
                    model.fromMap(value)
                    self.value = model
                }
            }
        }
        public class SinkMNSParameters : Tea.TeaModel {
            public class Body : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class IsBase64Encode : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class QueueName : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var body: UpdateEventStreamingRequest.Sink.SinkMNSParameters.Body?

            public var isBase64Encode: UpdateEventStreamingRequest.Sink.SinkMNSParameters.IsBase64Encode?

            public var queueName: UpdateEventStreamingRequest.Sink.SinkMNSParameters.QueueName?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.body?.validate()
                try self.isBase64Encode?.validate()
                try self.queueName?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.body != nil {
                    map["Body"] = self.body?.toMap()
                }
                if self.isBase64Encode != nil {
                    map["IsBase64Encode"] = self.isBase64Encode?.toMap()
                }
                if self.queueName != nil {
                    map["QueueName"] = self.queueName?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Body"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkMNSParameters.Body()
                    model.fromMap(value)
                    self.body = model
                }
                if let value = dict["IsBase64Encode"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkMNSParameters.IsBase64Encode()
                    model.fromMap(value)
                    self.isBase64Encode = model
                }
                if let value = dict["QueueName"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkMNSParameters.QueueName()
                    model.fromMap(value)
                    self.queueName = model
                }
            }
        }
        public class SinkOpenSourceRabbitMQParameters : Tea.TeaModel {
            public class Body : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class MessageId : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Properties : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class RoutingKey : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var authType: String?

            public var body: UpdateEventStreamingRequest.Sink.SinkOpenSourceRabbitMQParameters.Body?

            public var endpoint: String?

            public var exchange: String?

            public var messageId: UpdateEventStreamingRequest.Sink.SinkOpenSourceRabbitMQParameters.MessageId?

            public var networkType: String?

            public var password: String?

            public var properties: UpdateEventStreamingRequest.Sink.SinkOpenSourceRabbitMQParameters.Properties?

            public var queueName: String?

            public var routingKey: UpdateEventStreamingRequest.Sink.SinkOpenSourceRabbitMQParameters.RoutingKey?

            public var securityGroupId: String?

            public var targetType: String?

            public var username: String?

            public var vSwitchIds: String?

            public var virtualHostName: String?

            public var vpcId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.body?.validate()
                try self.messageId?.validate()
                try self.properties?.validate()
                try self.routingKey?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.authType != nil {
                    map["AuthType"] = self.authType!
                }
                if self.body != nil {
                    map["Body"] = self.body?.toMap()
                }
                if self.endpoint != nil {
                    map["Endpoint"] = self.endpoint!
                }
                if self.exchange != nil {
                    map["Exchange"] = self.exchange!
                }
                if self.messageId != nil {
                    map["MessageId"] = self.messageId?.toMap()
                }
                if self.networkType != nil {
                    map["NetworkType"] = self.networkType!
                }
                if self.password != nil {
                    map["Password"] = self.password!
                }
                if self.properties != nil {
                    map["Properties"] = self.properties?.toMap()
                }
                if self.queueName != nil {
                    map["QueueName"] = self.queueName!
                }
                if self.routingKey != nil {
                    map["RoutingKey"] = self.routingKey?.toMap()
                }
                if self.securityGroupId != nil {
                    map["SecurityGroupId"] = self.securityGroupId!
                }
                if self.targetType != nil {
                    map["TargetType"] = self.targetType!
                }
                if self.username != nil {
                    map["Username"] = self.username!
                }
                if self.vSwitchIds != nil {
                    map["VSwitchIds"] = self.vSwitchIds!
                }
                if self.virtualHostName != nil {
                    map["VirtualHostName"] = self.virtualHostName!
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AuthType"] as? String {
                    self.authType = value
                }
                if let value = dict["Body"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkOpenSourceRabbitMQParameters.Body()
                    model.fromMap(value)
                    self.body = model
                }
                if let value = dict["Endpoint"] as? String {
                    self.endpoint = value
                }
                if let value = dict["Exchange"] as? String {
                    self.exchange = value
                }
                if let value = dict["MessageId"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkOpenSourceRabbitMQParameters.MessageId()
                    model.fromMap(value)
                    self.messageId = model
                }
                if let value = dict["NetworkType"] as? String {
                    self.networkType = value
                }
                if let value = dict["Password"] as? String {
                    self.password = value
                }
                if let value = dict["Properties"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkOpenSourceRabbitMQParameters.Properties()
                    model.fromMap(value)
                    self.properties = model
                }
                if let value = dict["QueueName"] as? String {
                    self.queueName = value
                }
                if let value = dict["RoutingKey"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkOpenSourceRabbitMQParameters.RoutingKey()
                    model.fromMap(value)
                    self.routingKey = model
                }
                if let value = dict["SecurityGroupId"] as? String {
                    self.securityGroupId = value
                }
                if let value = dict["TargetType"] as? String {
                    self.targetType = value
                }
                if let value = dict["Username"] as? String {
                    self.username = value
                }
                if let value = dict["VSwitchIds"] as? String {
                    self.vSwitchIds = value
                }
                if let value = dict["VirtualHostName"] as? String {
                    self.virtualHostName = value
                }
                if let value = dict["VpcId"] as? String {
                    self.vpcId = value
                }
            }
        }
        public class SinkPrometheusParameters : Tea.TeaModel {
            public class AuthorizationType : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Data : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class HeaderParameters : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class NetworkType : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Password : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class SecurityGroupId : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class URL : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Username : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class VSwitchId : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class VpcId : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var authorizationType: UpdateEventStreamingRequest.Sink.SinkPrometheusParameters.AuthorizationType?

            public var data: UpdateEventStreamingRequest.Sink.SinkPrometheusParameters.Data?

            public var headerParameters: UpdateEventStreamingRequest.Sink.SinkPrometheusParameters.HeaderParameters?

            public var networkType: UpdateEventStreamingRequest.Sink.SinkPrometheusParameters.NetworkType?

            public var password: UpdateEventStreamingRequest.Sink.SinkPrometheusParameters.Password?

            public var securityGroupId: UpdateEventStreamingRequest.Sink.SinkPrometheusParameters.SecurityGroupId?

            public var URL: UpdateEventStreamingRequest.Sink.SinkPrometheusParameters.URL?

            public var username: UpdateEventStreamingRequest.Sink.SinkPrometheusParameters.Username?

            public var vSwitchId: UpdateEventStreamingRequest.Sink.SinkPrometheusParameters.VSwitchId?

            public var vpcId: UpdateEventStreamingRequest.Sink.SinkPrometheusParameters.VpcId?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.authorizationType?.validate()
                try self.data?.validate()
                try self.headerParameters?.validate()
                try self.networkType?.validate()
                try self.password?.validate()
                try self.securityGroupId?.validate()
                try self.URL?.validate()
                try self.username?.validate()
                try self.vSwitchId?.validate()
                try self.vpcId?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.authorizationType != nil {
                    map["AuthorizationType"] = self.authorizationType?.toMap()
                }
                if self.data != nil {
                    map["Data"] = self.data?.toMap()
                }
                if self.headerParameters != nil {
                    map["HeaderParameters"] = self.headerParameters?.toMap()
                }
                if self.networkType != nil {
                    map["NetworkType"] = self.networkType?.toMap()
                }
                if self.password != nil {
                    map["Password"] = self.password?.toMap()
                }
                if self.securityGroupId != nil {
                    map["SecurityGroupId"] = self.securityGroupId?.toMap()
                }
                if self.URL != nil {
                    map["URL"] = self.URL?.toMap()
                }
                if self.username != nil {
                    map["Username"] = self.username?.toMap()
                }
                if self.vSwitchId != nil {
                    map["VSwitchId"] = self.vSwitchId?.toMap()
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AuthorizationType"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkPrometheusParameters.AuthorizationType()
                    model.fromMap(value)
                    self.authorizationType = model
                }
                if let value = dict["Data"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkPrometheusParameters.Data()
                    model.fromMap(value)
                    self.data = model
                }
                if let value = dict["HeaderParameters"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkPrometheusParameters.HeaderParameters()
                    model.fromMap(value)
                    self.headerParameters = model
                }
                if let value = dict["NetworkType"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkPrometheusParameters.NetworkType()
                    model.fromMap(value)
                    self.networkType = model
                }
                if let value = dict["Password"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkPrometheusParameters.Password()
                    model.fromMap(value)
                    self.password = model
                }
                if let value = dict["SecurityGroupId"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkPrometheusParameters.SecurityGroupId()
                    model.fromMap(value)
                    self.securityGroupId = model
                }
                if let value = dict["URL"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkPrometheusParameters.URL()
                    model.fromMap(value)
                    self.URL = model
                }
                if let value = dict["Username"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkPrometheusParameters.Username()
                    model.fromMap(value)
                    self.username = model
                }
                if let value = dict["VSwitchId"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkPrometheusParameters.VSwitchId()
                    model.fromMap(value)
                    self.vSwitchId = model
                }
                if let value = dict["VpcId"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkPrometheusParameters.VpcId()
                    model.fromMap(value)
                    self.vpcId = model
                }
            }
        }
        public class SinkRabbitMQParameters : Tea.TeaModel {
            public class Body : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Exchange : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class InstanceId : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class MessageId : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Properties : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class QueueName : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class RoutingKey : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class TargetType : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class VirtualHostName : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var body: UpdateEventStreamingRequest.Sink.SinkRabbitMQParameters.Body?

            public var exchange: UpdateEventStreamingRequest.Sink.SinkRabbitMQParameters.Exchange?

            public var instanceId: UpdateEventStreamingRequest.Sink.SinkRabbitMQParameters.InstanceId?

            public var messageId: UpdateEventStreamingRequest.Sink.SinkRabbitMQParameters.MessageId?

            public var properties: UpdateEventStreamingRequest.Sink.SinkRabbitMQParameters.Properties?

            public var queueName: UpdateEventStreamingRequest.Sink.SinkRabbitMQParameters.QueueName?

            public var routingKey: UpdateEventStreamingRequest.Sink.SinkRabbitMQParameters.RoutingKey?

            public var targetType: UpdateEventStreamingRequest.Sink.SinkRabbitMQParameters.TargetType?

            public var virtualHostName: UpdateEventStreamingRequest.Sink.SinkRabbitMQParameters.VirtualHostName?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.body?.validate()
                try self.exchange?.validate()
                try self.instanceId?.validate()
                try self.messageId?.validate()
                try self.properties?.validate()
                try self.queueName?.validate()
                try self.routingKey?.validate()
                try self.targetType?.validate()
                try self.virtualHostName?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.body != nil {
                    map["Body"] = self.body?.toMap()
                }
                if self.exchange != nil {
                    map["Exchange"] = self.exchange?.toMap()
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId?.toMap()
                }
                if self.messageId != nil {
                    map["MessageId"] = self.messageId?.toMap()
                }
                if self.properties != nil {
                    map["Properties"] = self.properties?.toMap()
                }
                if self.queueName != nil {
                    map["QueueName"] = self.queueName?.toMap()
                }
                if self.routingKey != nil {
                    map["RoutingKey"] = self.routingKey?.toMap()
                }
                if self.targetType != nil {
                    map["TargetType"] = self.targetType?.toMap()
                }
                if self.virtualHostName != nil {
                    map["VirtualHostName"] = self.virtualHostName?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Body"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkRabbitMQParameters.Body()
                    model.fromMap(value)
                    self.body = model
                }
                if let value = dict["Exchange"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkRabbitMQParameters.Exchange()
                    model.fromMap(value)
                    self.exchange = model
                }
                if let value = dict["InstanceId"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkRabbitMQParameters.InstanceId()
                    model.fromMap(value)
                    self.instanceId = model
                }
                if let value = dict["MessageId"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkRabbitMQParameters.MessageId()
                    model.fromMap(value)
                    self.messageId = model
                }
                if let value = dict["Properties"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkRabbitMQParameters.Properties()
                    model.fromMap(value)
                    self.properties = model
                }
                if let value = dict["QueueName"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkRabbitMQParameters.QueueName()
                    model.fromMap(value)
                    self.queueName = model
                }
                if let value = dict["RoutingKey"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkRabbitMQParameters.RoutingKey()
                    model.fromMap(value)
                    self.routingKey = model
                }
                if let value = dict["TargetType"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkRabbitMQParameters.TargetType()
                    model.fromMap(value)
                    self.targetType = model
                }
                if let value = dict["VirtualHostName"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkRabbitMQParameters.VirtualHostName()
                    model.fromMap(value)
                    self.virtualHostName = model
                }
            }
        }
        public class SinkRocketMQCheckpointParameters : Tea.TeaModel {
            public class ConsumeTimestamp : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Group : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Topic : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var consumeTimestamp: UpdateEventStreamingRequest.Sink.SinkRocketMQCheckpointParameters.ConsumeTimestamp?

            public var group: UpdateEventStreamingRequest.Sink.SinkRocketMQCheckpointParameters.Group?

            public var instanceId: String?

            public var instanceType: String?

            public var topic: UpdateEventStreamingRequest.Sink.SinkRocketMQCheckpointParameters.Topic?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.consumeTimestamp?.validate()
                try self.group?.validate()
                try self.topic?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.consumeTimestamp != nil {
                    map["ConsumeTimestamp"] = self.consumeTimestamp?.toMap()
                }
                if self.group != nil {
                    map["Group"] = self.group?.toMap()
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.instanceType != nil {
                    map["InstanceType"] = self.instanceType!
                }
                if self.topic != nil {
                    map["Topic"] = self.topic?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConsumeTimestamp"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkRocketMQCheckpointParameters.ConsumeTimestamp()
                    model.fromMap(value)
                    self.consumeTimestamp = model
                }
                if let value = dict["Group"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkRocketMQCheckpointParameters.Group()
                    model.fromMap(value)
                    self.group = model
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["InstanceType"] as? String {
                    self.instanceType = value
                }
                if let value = dict["Topic"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkRocketMQCheckpointParameters.Topic()
                    model.fromMap(value)
                    self.topic = model
                }
            }
        }
        public class SinkRocketMQParameters : Tea.TeaModel {
            public class Body : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class DeliveryOrderType : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class InstanceEndpoint : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class InstanceId : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class InstancePassword : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class InstanceType : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class InstanceUsername : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Keys : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Network : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Properties : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class SecurityGroupId : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class ShardingKey : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Tags : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Topic : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class VSwitchIds : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class VpcId : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var body: UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.Body?

            public var deliveryOrderType: UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.DeliveryOrderType?

            public var instanceEndpoint: UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.InstanceEndpoint?

            public var instanceId: UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.InstanceId?

            public var instancePassword: UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.InstancePassword?

            public var instanceType: UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.InstanceType?

            public var instanceUsername: UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.InstanceUsername?

            public var keys: UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.Keys?

            public var network: UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.Network?

            public var properties: UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.Properties?

            public var securityGroupId: UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.SecurityGroupId?

            public var shardingKey: UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.ShardingKey?

            public var tags: UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.Tags?

            public var topic: UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.Topic?

            public var vSwitchIds: UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.VSwitchIds?

            public var vpcId: UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.VpcId?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.body?.validate()
                try self.deliveryOrderType?.validate()
                try self.instanceEndpoint?.validate()
                try self.instanceId?.validate()
                try self.instancePassword?.validate()
                try self.instanceType?.validate()
                try self.instanceUsername?.validate()
                try self.keys?.validate()
                try self.network?.validate()
                try self.properties?.validate()
                try self.securityGroupId?.validate()
                try self.shardingKey?.validate()
                try self.tags?.validate()
                try self.topic?.validate()
                try self.vSwitchIds?.validate()
                try self.vpcId?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.body != nil {
                    map["Body"] = self.body?.toMap()
                }
                if self.deliveryOrderType != nil {
                    map["DeliveryOrderType"] = self.deliveryOrderType?.toMap()
                }
                if self.instanceEndpoint != nil {
                    map["InstanceEndpoint"] = self.instanceEndpoint?.toMap()
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId?.toMap()
                }
                if self.instancePassword != nil {
                    map["InstancePassword"] = self.instancePassword?.toMap()
                }
                if self.instanceType != nil {
                    map["InstanceType"] = self.instanceType?.toMap()
                }
                if self.instanceUsername != nil {
                    map["InstanceUsername"] = self.instanceUsername?.toMap()
                }
                if self.keys != nil {
                    map["Keys"] = self.keys?.toMap()
                }
                if self.network != nil {
                    map["Network"] = self.network?.toMap()
                }
                if self.properties != nil {
                    map["Properties"] = self.properties?.toMap()
                }
                if self.securityGroupId != nil {
                    map["SecurityGroupId"] = self.securityGroupId?.toMap()
                }
                if self.shardingKey != nil {
                    map["ShardingKey"] = self.shardingKey?.toMap()
                }
                if self.tags != nil {
                    map["Tags"] = self.tags?.toMap()
                }
                if self.topic != nil {
                    map["Topic"] = self.topic?.toMap()
                }
                if self.vSwitchIds != nil {
                    map["VSwitchIds"] = self.vSwitchIds?.toMap()
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Body"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.Body()
                    model.fromMap(value)
                    self.body = model
                }
                if let value = dict["DeliveryOrderType"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.DeliveryOrderType()
                    model.fromMap(value)
                    self.deliveryOrderType = model
                }
                if let value = dict["InstanceEndpoint"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.InstanceEndpoint()
                    model.fromMap(value)
                    self.instanceEndpoint = model
                }
                if let value = dict["InstanceId"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.InstanceId()
                    model.fromMap(value)
                    self.instanceId = model
                }
                if let value = dict["InstancePassword"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.InstancePassword()
                    model.fromMap(value)
                    self.instancePassword = model
                }
                if let value = dict["InstanceType"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.InstanceType()
                    model.fromMap(value)
                    self.instanceType = model
                }
                if let value = dict["InstanceUsername"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.InstanceUsername()
                    model.fromMap(value)
                    self.instanceUsername = model
                }
                if let value = dict["Keys"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.Keys()
                    model.fromMap(value)
                    self.keys = model
                }
                if let value = dict["Network"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.Network()
                    model.fromMap(value)
                    self.network = model
                }
                if let value = dict["Properties"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.Properties()
                    model.fromMap(value)
                    self.properties = model
                }
                if let value = dict["SecurityGroupId"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.SecurityGroupId()
                    model.fromMap(value)
                    self.securityGroupId = model
                }
                if let value = dict["ShardingKey"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.ShardingKey()
                    model.fromMap(value)
                    self.shardingKey = model
                }
                if let value = dict["Tags"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.Tags()
                    model.fromMap(value)
                    self.tags = model
                }
                if let value = dict["Topic"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.Topic()
                    model.fromMap(value)
                    self.topic = model
                }
                if let value = dict["VSwitchIds"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.VSwitchIds()
                    model.fromMap(value)
                    self.vSwitchIds = model
                }
                if let value = dict["VpcId"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkRocketMQParameters.VpcId()
                    model.fromMap(value)
                    self.vpcId = model
                }
            }
        }
        public class SinkSLSParameters : Tea.TeaModel {
            public class Body : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class ContentSchema : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class ContentType : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class LogStore : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Project : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class RoleName : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public class Topic : Tea.TeaModel {
                public var form: String?

                public var template: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.form != nil {
                        map["Form"] = self.form!
                    }
                    if self.template != nil {
                        map["Template"] = self.template!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Form"] as? String {
                        self.form = value
                    }
                    if let value = dict["Template"] as? String {
                        self.template = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var body: UpdateEventStreamingRequest.Sink.SinkSLSParameters.Body?

            public var contentSchema: UpdateEventStreamingRequest.Sink.SinkSLSParameters.ContentSchema?

            public var contentType: UpdateEventStreamingRequest.Sink.SinkSLSParameters.ContentType?

            public var logStore: UpdateEventStreamingRequest.Sink.SinkSLSParameters.LogStore?

            public var project: UpdateEventStreamingRequest.Sink.SinkSLSParameters.Project?

            public var roleName: UpdateEventStreamingRequest.Sink.SinkSLSParameters.RoleName?

            public var topic: UpdateEventStreamingRequest.Sink.SinkSLSParameters.Topic?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.body?.validate()
                try self.contentSchema?.validate()
                try self.contentType?.validate()
                try self.logStore?.validate()
                try self.project?.validate()
                try self.roleName?.validate()
                try self.topic?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.body != nil {
                    map["Body"] = self.body?.toMap()
                }
                if self.contentSchema != nil {
                    map["ContentSchema"] = self.contentSchema?.toMap()
                }
                if self.contentType != nil {
                    map["ContentType"] = self.contentType?.toMap()
                }
                if self.logStore != nil {
                    map["LogStore"] = self.logStore?.toMap()
                }
                if self.project != nil {
                    map["Project"] = self.project?.toMap()
                }
                if self.roleName != nil {
                    map["RoleName"] = self.roleName?.toMap()
                }
                if self.topic != nil {
                    map["Topic"] = self.topic?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Body"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkSLSParameters.Body()
                    model.fromMap(value)
                    self.body = model
                }
                if let value = dict["ContentSchema"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkSLSParameters.ContentSchema()
                    model.fromMap(value)
                    self.contentSchema = model
                }
                if let value = dict["ContentType"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkSLSParameters.ContentType()
                    model.fromMap(value)
                    self.contentType = model
                }
                if let value = dict["LogStore"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkSLSParameters.LogStore()
                    model.fromMap(value)
                    self.logStore = model
                }
                if let value = dict["Project"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkSLSParameters.Project()
                    model.fromMap(value)
                    self.project = model
                }
                if let value = dict["RoleName"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkSLSParameters.RoleName()
                    model.fromMap(value)
                    self.roleName = model
                }
                if let value = dict["Topic"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Sink.SinkSLSParameters.Topic()
                    model.fromMap(value)
                    self.topic = model
                }
            }
        }
        public var sinkApacheRocketMQCheckpointParameters: UpdateEventStreamingRequest.Sink.SinkApacheRocketMQCheckpointParameters?

        public var sinkBaiLianParameters: SinkBaiLianParameters?

        public var sinkCustomizedKafkaConnectorParameters: UpdateEventStreamingRequest.Sink.SinkCustomizedKafkaConnectorParameters?

        public var sinkCustomizedKafkaParameters: UpdateEventStreamingRequest.Sink.SinkCustomizedKafkaParameters?

        public var sinkDashVectorParameters: UpdateEventStreamingRequest.Sink.SinkDashVectorParameters?

        public var sinkDataHubParameters: UpdateEventStreamingRequest.Sink.SinkDataHubParameters?

        public var sinkDorisParameters: UpdateEventStreamingRequest.Sink.SinkDorisParameters?

        public var sinkFcParameters: UpdateEventStreamingRequest.Sink.SinkFcParameters?

        public var sinkFnfParameters: UpdateEventStreamingRequest.Sink.SinkFnfParameters?

        public var sinkKafkaParameters: UpdateEventStreamingRequest.Sink.SinkKafkaParameters?

        public var sinkMNSParameters: UpdateEventStreamingRequest.Sink.SinkMNSParameters?

        public var sinkOpenSourceRabbitMQParameters: UpdateEventStreamingRequest.Sink.SinkOpenSourceRabbitMQParameters?

        public var sinkPrometheusParameters: UpdateEventStreamingRequest.Sink.SinkPrometheusParameters?

        public var sinkRabbitMQParameters: UpdateEventStreamingRequest.Sink.SinkRabbitMQParameters?

        public var sinkRocketMQCheckpointParameters: UpdateEventStreamingRequest.Sink.SinkRocketMQCheckpointParameters?

        public var sinkRocketMQParameters: UpdateEventStreamingRequest.Sink.SinkRocketMQParameters?

        public var sinkSLSParameters: UpdateEventStreamingRequest.Sink.SinkSLSParameters?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.sinkApacheRocketMQCheckpointParameters?.validate()
            try self.sinkBaiLianParameters?.validate()
            try self.sinkCustomizedKafkaConnectorParameters?.validate()
            try self.sinkCustomizedKafkaParameters?.validate()
            try self.sinkDashVectorParameters?.validate()
            try self.sinkDataHubParameters?.validate()
            try self.sinkDorisParameters?.validate()
            try self.sinkFcParameters?.validate()
            try self.sinkFnfParameters?.validate()
            try self.sinkKafkaParameters?.validate()
            try self.sinkMNSParameters?.validate()
            try self.sinkOpenSourceRabbitMQParameters?.validate()
            try self.sinkPrometheusParameters?.validate()
            try self.sinkRabbitMQParameters?.validate()
            try self.sinkRocketMQCheckpointParameters?.validate()
            try self.sinkRocketMQParameters?.validate()
            try self.sinkSLSParameters?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.sinkApacheRocketMQCheckpointParameters != nil {
                map["SinkApacheRocketMQCheckpointParameters"] = self.sinkApacheRocketMQCheckpointParameters?.toMap()
            }
            if self.sinkBaiLianParameters != nil {
                map["SinkBaiLianParameters"] = self.sinkBaiLianParameters?.toMap()
            }
            if self.sinkCustomizedKafkaConnectorParameters != nil {
                map["SinkCustomizedKafkaConnectorParameters"] = self.sinkCustomizedKafkaConnectorParameters?.toMap()
            }
            if self.sinkCustomizedKafkaParameters != nil {
                map["SinkCustomizedKafkaParameters"] = self.sinkCustomizedKafkaParameters?.toMap()
            }
            if self.sinkDashVectorParameters != nil {
                map["SinkDashVectorParameters"] = self.sinkDashVectorParameters?.toMap()
            }
            if self.sinkDataHubParameters != nil {
                map["SinkDataHubParameters"] = self.sinkDataHubParameters?.toMap()
            }
            if self.sinkDorisParameters != nil {
                map["SinkDorisParameters"] = self.sinkDorisParameters?.toMap()
            }
            if self.sinkFcParameters != nil {
                map["SinkFcParameters"] = self.sinkFcParameters?.toMap()
            }
            if self.sinkFnfParameters != nil {
                map["SinkFnfParameters"] = self.sinkFnfParameters?.toMap()
            }
            if self.sinkKafkaParameters != nil {
                map["SinkKafkaParameters"] = self.sinkKafkaParameters?.toMap()
            }
            if self.sinkMNSParameters != nil {
                map["SinkMNSParameters"] = self.sinkMNSParameters?.toMap()
            }
            if self.sinkOpenSourceRabbitMQParameters != nil {
                map["SinkOpenSourceRabbitMQParameters"] = self.sinkOpenSourceRabbitMQParameters?.toMap()
            }
            if self.sinkPrometheusParameters != nil {
                map["SinkPrometheusParameters"] = self.sinkPrometheusParameters?.toMap()
            }
            if self.sinkRabbitMQParameters != nil {
                map["SinkRabbitMQParameters"] = self.sinkRabbitMQParameters?.toMap()
            }
            if self.sinkRocketMQCheckpointParameters != nil {
                map["SinkRocketMQCheckpointParameters"] = self.sinkRocketMQCheckpointParameters?.toMap()
            }
            if self.sinkRocketMQParameters != nil {
                map["SinkRocketMQParameters"] = self.sinkRocketMQParameters?.toMap()
            }
            if self.sinkSLSParameters != nil {
                map["SinkSLSParameters"] = self.sinkSLSParameters?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SinkApacheRocketMQCheckpointParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Sink.SinkApacheRocketMQCheckpointParameters()
                model.fromMap(value)
                self.sinkApacheRocketMQCheckpointParameters = model
            }
            if let value = dict["SinkBaiLianParameters"] as? [String: Any?] {
                var model = SinkBaiLianParameters()
                model.fromMap(value)
                self.sinkBaiLianParameters = model
            }
            if let value = dict["SinkCustomizedKafkaConnectorParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Sink.SinkCustomizedKafkaConnectorParameters()
                model.fromMap(value)
                self.sinkCustomizedKafkaConnectorParameters = model
            }
            if let value = dict["SinkCustomizedKafkaParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Sink.SinkCustomizedKafkaParameters()
                model.fromMap(value)
                self.sinkCustomizedKafkaParameters = model
            }
            if let value = dict["SinkDashVectorParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Sink.SinkDashVectorParameters()
                model.fromMap(value)
                self.sinkDashVectorParameters = model
            }
            if let value = dict["SinkDataHubParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Sink.SinkDataHubParameters()
                model.fromMap(value)
                self.sinkDataHubParameters = model
            }
            if let value = dict["SinkDorisParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Sink.SinkDorisParameters()
                model.fromMap(value)
                self.sinkDorisParameters = model
            }
            if let value = dict["SinkFcParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Sink.SinkFcParameters()
                model.fromMap(value)
                self.sinkFcParameters = model
            }
            if let value = dict["SinkFnfParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Sink.SinkFnfParameters()
                model.fromMap(value)
                self.sinkFnfParameters = model
            }
            if let value = dict["SinkKafkaParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Sink.SinkKafkaParameters()
                model.fromMap(value)
                self.sinkKafkaParameters = model
            }
            if let value = dict["SinkMNSParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Sink.SinkMNSParameters()
                model.fromMap(value)
                self.sinkMNSParameters = model
            }
            if let value = dict["SinkOpenSourceRabbitMQParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Sink.SinkOpenSourceRabbitMQParameters()
                model.fromMap(value)
                self.sinkOpenSourceRabbitMQParameters = model
            }
            if let value = dict["SinkPrometheusParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Sink.SinkPrometheusParameters()
                model.fromMap(value)
                self.sinkPrometheusParameters = model
            }
            if let value = dict["SinkRabbitMQParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Sink.SinkRabbitMQParameters()
                model.fromMap(value)
                self.sinkRabbitMQParameters = model
            }
            if let value = dict["SinkRocketMQCheckpointParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Sink.SinkRocketMQCheckpointParameters()
                model.fromMap(value)
                self.sinkRocketMQCheckpointParameters = model
            }
            if let value = dict["SinkRocketMQParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Sink.SinkRocketMQParameters()
                model.fromMap(value)
                self.sinkRocketMQParameters = model
            }
            if let value = dict["SinkSLSParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Sink.SinkSLSParameters()
                model.fromMap(value)
                self.sinkSLSParameters = model
            }
        }
    }
    public class Source : Tea.TeaModel {
        public class SourceApacheRocketMQCheckpointParameters : Tea.TeaModel {
            public var instanceEndpoint: String?

            public var instancePassword: String?

            public var instanceUsername: String?

            public var networkType: String?

            public var regionId: String?

            public var securityGroupId: String?

            public var topics: [String]?

            public var vSwitchId: String?

            public var vpcId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.instanceEndpoint != nil {
                    map["InstanceEndpoint"] = self.instanceEndpoint!
                }
                if self.instancePassword != nil {
                    map["InstancePassword"] = self.instancePassword!
                }
                if self.instanceUsername != nil {
                    map["InstanceUsername"] = self.instanceUsername!
                }
                if self.networkType != nil {
                    map["NetworkType"] = self.networkType!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.securityGroupId != nil {
                    map["SecurityGroupId"] = self.securityGroupId!
                }
                if self.topics != nil {
                    map["Topics"] = self.topics!
                }
                if self.vSwitchId != nil {
                    map["VSwitchId"] = self.vSwitchId!
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InstanceEndpoint"] as? String {
                    self.instanceEndpoint = value
                }
                if let value = dict["InstancePassword"] as? String {
                    self.instancePassword = value
                }
                if let value = dict["InstanceUsername"] as? String {
                    self.instanceUsername = value
                }
                if let value = dict["NetworkType"] as? String {
                    self.networkType = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["SecurityGroupId"] as? String {
                    self.securityGroupId = value
                }
                if let value = dict["Topics"] as? [String] {
                    self.topics = value
                }
                if let value = dict["VSwitchId"] as? String {
                    self.vSwitchId = value
                }
                if let value = dict["VpcId"] as? String {
                    self.vpcId = value
                }
            }
        }
        public class SourceCustomizedKafkaConnectorParameters : Tea.TeaModel {
            public class ConnectorParameters : Tea.TeaModel {
                public var config: [String: Any]?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.config != nil {
                        map["Config"] = self.config!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Config"] as? [String: Any] {
                        self.config = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public var connectorPackageUrl: String?

            public var connectorParameters: UpdateEventStreamingRequest.Source.SourceCustomizedKafkaConnectorParameters.ConnectorParameters?

            public var workerParameters: [String: Any]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.connectorParameters?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.connectorPackageUrl != nil {
                    map["ConnectorPackageUrl"] = self.connectorPackageUrl!
                }
                if self.connectorParameters != nil {
                    map["ConnectorParameters"] = self.connectorParameters?.toMap()
                }
                if self.workerParameters != nil {
                    map["WorkerParameters"] = self.workerParameters!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConnectorPackageUrl"] as? String {
                    self.connectorPackageUrl = value
                }
                if let value = dict["ConnectorParameters"] as? [String: Any?] {
                    var model = UpdateEventStreamingRequest.Source.SourceCustomizedKafkaConnectorParameters.ConnectorParameters()
                    model.fromMap(value)
                    self.connectorParameters = model
                }
                if let value = dict["WorkerParameters"] as? [String: Any] {
                    self.workerParameters = value
                }
            }
        }
        public class SourceCustomizedKafkaParameters : Tea.TeaModel {
            public var instanceId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
            }
        }
        public class SourceDTSParameters : Tea.TeaModel {
            public var brokerUrl: String?

            public var initCheckPoint: Int64?

            public var password: String?

            public var sid: String?

            public var taskId: String?

            public var topic: String?

            public var username: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.brokerUrl != nil {
                    map["BrokerUrl"] = self.brokerUrl!
                }
                if self.initCheckPoint != nil {
                    map["InitCheckPoint"] = self.initCheckPoint!
                }
                if self.password != nil {
                    map["Password"] = self.password!
                }
                if self.sid != nil {
                    map["Sid"] = self.sid!
                }
                if self.taskId != nil {
                    map["TaskId"] = self.taskId!
                }
                if self.topic != nil {
                    map["Topic"] = self.topic!
                }
                if self.username != nil {
                    map["Username"] = self.username!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BrokerUrl"] as? String {
                    self.brokerUrl = value
                }
                if let value = dict["InitCheckPoint"] as? Int64 {
                    self.initCheckPoint = value
                }
                if let value = dict["Password"] as? String {
                    self.password = value
                }
                if let value = dict["Sid"] as? String {
                    self.sid = value
                }
                if let value = dict["TaskId"] as? String {
                    self.taskId = value
                }
                if let value = dict["Topic"] as? String {
                    self.topic = value
                }
                if let value = dict["Username"] as? String {
                    self.username = value
                }
            }
        }
        public class SourceEventBusParameters : Tea.TeaModel {
            public var eventBusName: String?

            public var eventRuleName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.eventBusName != nil {
                    map["EventBusName"] = self.eventBusName!
                }
                if self.eventRuleName != nil {
                    map["EventRuleName"] = self.eventRuleName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EventBusName"] as? String {
                    self.eventBusName = value
                }
                if let value = dict["EventRuleName"] as? String {
                    self.eventRuleName = value
                }
            }
        }
        public class SourceKafkaParameters : Tea.TeaModel {
            public var consumerGroup: String?

            public var instanceId: String?

            public var network: String?

            public var offsetReset: String?

            public var regionId: String?

            public var securityGroupId: String?

            public var topic: String?

            public var vSwitchIds: String?

            public var valueDataType: String?

            public var vpcId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.consumerGroup != nil {
                    map["ConsumerGroup"] = self.consumerGroup!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.network != nil {
                    map["Network"] = self.network!
                }
                if self.offsetReset != nil {
                    map["OffsetReset"] = self.offsetReset!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.securityGroupId != nil {
                    map["SecurityGroupId"] = self.securityGroupId!
                }
                if self.topic != nil {
                    map["Topic"] = self.topic!
                }
                if self.vSwitchIds != nil {
                    map["VSwitchIds"] = self.vSwitchIds!
                }
                if self.valueDataType != nil {
                    map["ValueDataType"] = self.valueDataType!
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConsumerGroup"] as? String {
                    self.consumerGroup = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["Network"] as? String {
                    self.network = value
                }
                if let value = dict["OffsetReset"] as? String {
                    self.offsetReset = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["SecurityGroupId"] as? String {
                    self.securityGroupId = value
                }
                if let value = dict["Topic"] as? String {
                    self.topic = value
                }
                if let value = dict["VSwitchIds"] as? String {
                    self.vSwitchIds = value
                }
                if let value = dict["ValueDataType"] as? String {
                    self.valueDataType = value
                }
                if let value = dict["VpcId"] as? String {
                    self.vpcId = value
                }
            }
        }
        public class SourceMNSParameters : Tea.TeaModel {
            public var isBase64Decode: Bool?

            public var queueName: String?

            public var regionId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.isBase64Decode != nil {
                    map["IsBase64Decode"] = self.isBase64Decode!
                }
                if self.queueName != nil {
                    map["QueueName"] = self.queueName!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["IsBase64Decode"] as? Bool {
                    self.isBase64Decode = value
                }
                if let value = dict["QueueName"] as? String {
                    self.queueName = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
            }
        }
        public class SourceMQTTParameters : Tea.TeaModel {
            public var bodyDataType: String?

            public var instanceId: String?

            public var regionId: String?

            public var topic: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bodyDataType != nil {
                    map["BodyDataType"] = self.bodyDataType!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.topic != nil {
                    map["Topic"] = self.topic!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BodyDataType"] as? String {
                    self.bodyDataType = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["Topic"] as? String {
                    self.topic = value
                }
            }
        }
        public class SourceOSSParameters : Tea.TeaModel {
            public var bucketName: String?

            public var delimiter: String?

            public var loadFormat: String?

            public var loadMode: String?

            public var prefix_: String?

            public var roleName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bucketName != nil {
                    map["BucketName"] = self.bucketName!
                }
                if self.delimiter != nil {
                    map["Delimiter"] = self.delimiter!
                }
                if self.loadFormat != nil {
                    map["LoadFormat"] = self.loadFormat!
                }
                if self.loadMode != nil {
                    map["LoadMode"] = self.loadMode!
                }
                if self.prefix_ != nil {
                    map["Prefix"] = self.prefix_!
                }
                if self.roleName != nil {
                    map["RoleName"] = self.roleName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BucketName"] as? String {
                    self.bucketName = value
                }
                if let value = dict["Delimiter"] as? String {
                    self.delimiter = value
                }
                if let value = dict["LoadFormat"] as? String {
                    self.loadFormat = value
                }
                if let value = dict["LoadMode"] as? String {
                    self.loadMode = value
                }
                if let value = dict["Prefix"] as? String {
                    self.prefix_ = value
                }
                if let value = dict["RoleName"] as? String {
                    self.roleName = value
                }
            }
        }
        public class SourceOpenSourceRabbitMQParameters : Tea.TeaModel {
            public var authType: String?

            public var bodyDataType: String?

            public var endpoint: String?

            public var networkType: String?

            public var password: String?

            public var queueName: String?

            public var securityGroupId: String?

            public var username: String?

            public var vSwitchIds: String?

            public var virtualHostName: String?

            public var vpcId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.authType != nil {
                    map["AuthType"] = self.authType!
                }
                if self.bodyDataType != nil {
                    map["BodyDataType"] = self.bodyDataType!
                }
                if self.endpoint != nil {
                    map["Endpoint"] = self.endpoint!
                }
                if self.networkType != nil {
                    map["NetworkType"] = self.networkType!
                }
                if self.password != nil {
                    map["Password"] = self.password!
                }
                if self.queueName != nil {
                    map["QueueName"] = self.queueName!
                }
                if self.securityGroupId != nil {
                    map["SecurityGroupId"] = self.securityGroupId!
                }
                if self.username != nil {
                    map["Username"] = self.username!
                }
                if self.vSwitchIds != nil {
                    map["VSwitchIds"] = self.vSwitchIds!
                }
                if self.virtualHostName != nil {
                    map["VirtualHostName"] = self.virtualHostName!
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AuthType"] as? String {
                    self.authType = value
                }
                if let value = dict["BodyDataType"] as? String {
                    self.bodyDataType = value
                }
                if let value = dict["Endpoint"] as? String {
                    self.endpoint = value
                }
                if let value = dict["NetworkType"] as? String {
                    self.networkType = value
                }
                if let value = dict["Password"] as? String {
                    self.password = value
                }
                if let value = dict["QueueName"] as? String {
                    self.queueName = value
                }
                if let value = dict["SecurityGroupId"] as? String {
                    self.securityGroupId = value
                }
                if let value = dict["Username"] as? String {
                    self.username = value
                }
                if let value = dict["VSwitchIds"] as? String {
                    self.vSwitchIds = value
                }
                if let value = dict["VirtualHostName"] as? String {
                    self.virtualHostName = value
                }
                if let value = dict["VpcId"] as? String {
                    self.vpcId = value
                }
            }
        }
        public class SourcePrometheusParameters : Tea.TeaModel {
            public var clusterId: String?

            public var dataType: String?

            public var externalLabels: String?

            public var labels: String?

            public var regionId: String?

            public var roleName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.clusterId != nil {
                    map["ClusterId"] = self.clusterId!
                }
                if self.dataType != nil {
                    map["DataType"] = self.dataType!
                }
                if self.externalLabels != nil {
                    map["ExternalLabels"] = self.externalLabels!
                }
                if self.labels != nil {
                    map["Labels"] = self.labels!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.roleName != nil {
                    map["RoleName"] = self.roleName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ClusterId"] as? String {
                    self.clusterId = value
                }
                if let value = dict["DataType"] as? String {
                    self.dataType = value
                }
                if let value = dict["ExternalLabels"] as? String {
                    self.externalLabels = value
                }
                if let value = dict["Labels"] as? String {
                    self.labels = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["RoleName"] as? String {
                    self.roleName = value
                }
            }
        }
        public class SourceRabbitMQParameters : Tea.TeaModel {
            public var instanceId: String?

            public var queueName: String?

            public var regionId: String?

            public var virtualHostName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.queueName != nil {
                    map["QueueName"] = self.queueName!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.virtualHostName != nil {
                    map["VirtualHostName"] = self.virtualHostName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["QueueName"] as? String {
                    self.queueName = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["VirtualHostName"] as? String {
                    self.virtualHostName = value
                }
            }
        }
        public class SourceRocketMQCheckpointParameters : Tea.TeaModel {
            public var instanceId: String?

            public var instanceType: String?

            public var regionId: String?

            public var topics: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.instanceType != nil {
                    map["InstanceType"] = self.instanceType!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.topics != nil {
                    map["Topics"] = self.topics!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["InstanceType"] as? String {
                    self.instanceType = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["Topics"] as? [String] {
                    self.topics = value
                }
            }
        }
        public class SourceRocketMQParameters : Tea.TeaModel {
            public var authType: String?

            public var bodyDataType: String?

            public var filterSql: String?

            public var filterType: String?

            public var groupID: String?

            public var instanceEndpoint: String?

            public var instanceId: String?

            public var instanceNetwork: String?

            public var instancePassword: String?

            public var instanceSecurityGroupId: String?

            public var instanceType: String?

            public var instanceUsername: String?

            public var instanceVSwitchIds: String?

            public var instanceVpcId: String?

            public var network: String?

            public var offset: String?

            public var regionId: String?

            public var securityGroupId: String?

            public var tag: String?

            public var timestamp: Int64?

            public var topic: String?

            public var vSwitchIds: String?

            public var vpcId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.authType != nil {
                    map["AuthType"] = self.authType!
                }
                if self.bodyDataType != nil {
                    map["BodyDataType"] = self.bodyDataType!
                }
                if self.filterSql != nil {
                    map["FilterSql"] = self.filterSql!
                }
                if self.filterType != nil {
                    map["FilterType"] = self.filterType!
                }
                if self.groupID != nil {
                    map["GroupID"] = self.groupID!
                }
                if self.instanceEndpoint != nil {
                    map["InstanceEndpoint"] = self.instanceEndpoint!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.instanceNetwork != nil {
                    map["InstanceNetwork"] = self.instanceNetwork!
                }
                if self.instancePassword != nil {
                    map["InstancePassword"] = self.instancePassword!
                }
                if self.instanceSecurityGroupId != nil {
                    map["InstanceSecurityGroupId"] = self.instanceSecurityGroupId!
                }
                if self.instanceType != nil {
                    map["InstanceType"] = self.instanceType!
                }
                if self.instanceUsername != nil {
                    map["InstanceUsername"] = self.instanceUsername!
                }
                if self.instanceVSwitchIds != nil {
                    map["InstanceVSwitchIds"] = self.instanceVSwitchIds!
                }
                if self.instanceVpcId != nil {
                    map["InstanceVpcId"] = self.instanceVpcId!
                }
                if self.network != nil {
                    map["Network"] = self.network!
                }
                if self.offset != nil {
                    map["Offset"] = self.offset!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.securityGroupId != nil {
                    map["SecurityGroupId"] = self.securityGroupId!
                }
                if self.tag != nil {
                    map["Tag"] = self.tag!
                }
                if self.timestamp != nil {
                    map["Timestamp"] = self.timestamp!
                }
                if self.topic != nil {
                    map["Topic"] = self.topic!
                }
                if self.vSwitchIds != nil {
                    map["VSwitchIds"] = self.vSwitchIds!
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AuthType"] as? String {
                    self.authType = value
                }
                if let value = dict["BodyDataType"] as? String {
                    self.bodyDataType = value
                }
                if let value = dict["FilterSql"] as? String {
                    self.filterSql = value
                }
                if let value = dict["FilterType"] as? String {
                    self.filterType = value
                }
                if let value = dict["GroupID"] as? String {
                    self.groupID = value
                }
                if let value = dict["InstanceEndpoint"] as? String {
                    self.instanceEndpoint = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["InstanceNetwork"] as? String {
                    self.instanceNetwork = value
                }
                if let value = dict["InstancePassword"] as? String {
                    self.instancePassword = value
                }
                if let value = dict["InstanceSecurityGroupId"] as? String {
                    self.instanceSecurityGroupId = value
                }
                if let value = dict["InstanceType"] as? String {
                    self.instanceType = value
                }
                if let value = dict["InstanceUsername"] as? String {
                    self.instanceUsername = value
                }
                if let value = dict["InstanceVSwitchIds"] as? String {
                    self.instanceVSwitchIds = value
                }
                if let value = dict["InstanceVpcId"] as? String {
                    self.instanceVpcId = value
                }
                if let value = dict["Network"] as? String {
                    self.network = value
                }
                if let value = dict["Offset"] as? String {
                    self.offset = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["SecurityGroupId"] as? String {
                    self.securityGroupId = value
                }
                if let value = dict["Tag"] as? String {
                    self.tag = value
                }
                if let value = dict["Timestamp"] as? Int64 {
                    self.timestamp = value
                }
                if let value = dict["Topic"] as? String {
                    self.topic = value
                }
                if let value = dict["VSwitchIds"] as? String {
                    self.vSwitchIds = value
                }
                if let value = dict["VpcId"] as? String {
                    self.vpcId = value
                }
            }
        }
        public class SourceSLSParameters : Tea.TeaModel {
            public var roleName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.roleName != nil {
                    map["RoleName"] = self.roleName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["RoleName"] as? String {
                    self.roleName = value
                }
            }
        }
        public var sourceApacheRocketMQCheckpointParameters: UpdateEventStreamingRequest.Source.SourceApacheRocketMQCheckpointParameters?

        public var sourceCustomizedKafkaConnectorParameters: UpdateEventStreamingRequest.Source.SourceCustomizedKafkaConnectorParameters?

        public var sourceCustomizedKafkaParameters: UpdateEventStreamingRequest.Source.SourceCustomizedKafkaParameters?

        public var sourceDTSParameters: UpdateEventStreamingRequest.Source.SourceDTSParameters?

        public var sourceEventBusParameters: UpdateEventStreamingRequest.Source.SourceEventBusParameters?

        public var sourceKafkaParameters: UpdateEventStreamingRequest.Source.SourceKafkaParameters?

        public var sourceMNSParameters: UpdateEventStreamingRequest.Source.SourceMNSParameters?

        public var sourceMQTTParameters: UpdateEventStreamingRequest.Source.SourceMQTTParameters?

        public var sourceMySQLParameters: SourceMySQLParameters?

        public var sourceOSSParameters: UpdateEventStreamingRequest.Source.SourceOSSParameters?

        public var sourceOpenSourceRabbitMQParameters: UpdateEventStreamingRequest.Source.SourceOpenSourceRabbitMQParameters?

        public var sourcePrometheusParameters: UpdateEventStreamingRequest.Source.SourcePrometheusParameters?

        public var sourceRabbitMQParameters: UpdateEventStreamingRequest.Source.SourceRabbitMQParameters?

        public var sourceRocketMQCheckpointParameters: UpdateEventStreamingRequest.Source.SourceRocketMQCheckpointParameters?

        public var sourceRocketMQParameters: UpdateEventStreamingRequest.Source.SourceRocketMQParameters?

        public var sourceSLSParameters: UpdateEventStreamingRequest.Source.SourceSLSParameters?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.sourceApacheRocketMQCheckpointParameters?.validate()
            try self.sourceCustomizedKafkaConnectorParameters?.validate()
            try self.sourceCustomizedKafkaParameters?.validate()
            try self.sourceDTSParameters?.validate()
            try self.sourceEventBusParameters?.validate()
            try self.sourceKafkaParameters?.validate()
            try self.sourceMNSParameters?.validate()
            try self.sourceMQTTParameters?.validate()
            try self.sourceMySQLParameters?.validate()
            try self.sourceOSSParameters?.validate()
            try self.sourceOpenSourceRabbitMQParameters?.validate()
            try self.sourcePrometheusParameters?.validate()
            try self.sourceRabbitMQParameters?.validate()
            try self.sourceRocketMQCheckpointParameters?.validate()
            try self.sourceRocketMQParameters?.validate()
            try self.sourceSLSParameters?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.sourceApacheRocketMQCheckpointParameters != nil {
                map["SourceApacheRocketMQCheckpointParameters"] = self.sourceApacheRocketMQCheckpointParameters?.toMap()
            }
            if self.sourceCustomizedKafkaConnectorParameters != nil {
                map["SourceCustomizedKafkaConnectorParameters"] = self.sourceCustomizedKafkaConnectorParameters?.toMap()
            }
            if self.sourceCustomizedKafkaParameters != nil {
                map["SourceCustomizedKafkaParameters"] = self.sourceCustomizedKafkaParameters?.toMap()
            }
            if self.sourceDTSParameters != nil {
                map["SourceDTSParameters"] = self.sourceDTSParameters?.toMap()
            }
            if self.sourceEventBusParameters != nil {
                map["SourceEventBusParameters"] = self.sourceEventBusParameters?.toMap()
            }
            if self.sourceKafkaParameters != nil {
                map["SourceKafkaParameters"] = self.sourceKafkaParameters?.toMap()
            }
            if self.sourceMNSParameters != nil {
                map["SourceMNSParameters"] = self.sourceMNSParameters?.toMap()
            }
            if self.sourceMQTTParameters != nil {
                map["SourceMQTTParameters"] = self.sourceMQTTParameters?.toMap()
            }
            if self.sourceMySQLParameters != nil {
                map["SourceMySQLParameters"] = self.sourceMySQLParameters?.toMap()
            }
            if self.sourceOSSParameters != nil {
                map["SourceOSSParameters"] = self.sourceOSSParameters?.toMap()
            }
            if self.sourceOpenSourceRabbitMQParameters != nil {
                map["SourceOpenSourceRabbitMQParameters"] = self.sourceOpenSourceRabbitMQParameters?.toMap()
            }
            if self.sourcePrometheusParameters != nil {
                map["SourcePrometheusParameters"] = self.sourcePrometheusParameters?.toMap()
            }
            if self.sourceRabbitMQParameters != nil {
                map["SourceRabbitMQParameters"] = self.sourceRabbitMQParameters?.toMap()
            }
            if self.sourceRocketMQCheckpointParameters != nil {
                map["SourceRocketMQCheckpointParameters"] = self.sourceRocketMQCheckpointParameters?.toMap()
            }
            if self.sourceRocketMQParameters != nil {
                map["SourceRocketMQParameters"] = self.sourceRocketMQParameters?.toMap()
            }
            if self.sourceSLSParameters != nil {
                map["SourceSLSParameters"] = self.sourceSLSParameters?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SourceApacheRocketMQCheckpointParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Source.SourceApacheRocketMQCheckpointParameters()
                model.fromMap(value)
                self.sourceApacheRocketMQCheckpointParameters = model
            }
            if let value = dict["SourceCustomizedKafkaConnectorParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Source.SourceCustomizedKafkaConnectorParameters()
                model.fromMap(value)
                self.sourceCustomizedKafkaConnectorParameters = model
            }
            if let value = dict["SourceCustomizedKafkaParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Source.SourceCustomizedKafkaParameters()
                model.fromMap(value)
                self.sourceCustomizedKafkaParameters = model
            }
            if let value = dict["SourceDTSParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Source.SourceDTSParameters()
                model.fromMap(value)
                self.sourceDTSParameters = model
            }
            if let value = dict["SourceEventBusParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Source.SourceEventBusParameters()
                model.fromMap(value)
                self.sourceEventBusParameters = model
            }
            if let value = dict["SourceKafkaParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Source.SourceKafkaParameters()
                model.fromMap(value)
                self.sourceKafkaParameters = model
            }
            if let value = dict["SourceMNSParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Source.SourceMNSParameters()
                model.fromMap(value)
                self.sourceMNSParameters = model
            }
            if let value = dict["SourceMQTTParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Source.SourceMQTTParameters()
                model.fromMap(value)
                self.sourceMQTTParameters = model
            }
            if let value = dict["SourceMySQLParameters"] as? [String: Any?] {
                var model = SourceMySQLParameters()
                model.fromMap(value)
                self.sourceMySQLParameters = model
            }
            if let value = dict["SourceOSSParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Source.SourceOSSParameters()
                model.fromMap(value)
                self.sourceOSSParameters = model
            }
            if let value = dict["SourceOpenSourceRabbitMQParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Source.SourceOpenSourceRabbitMQParameters()
                model.fromMap(value)
                self.sourceOpenSourceRabbitMQParameters = model
            }
            if let value = dict["SourcePrometheusParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Source.SourcePrometheusParameters()
                model.fromMap(value)
                self.sourcePrometheusParameters = model
            }
            if let value = dict["SourceRabbitMQParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Source.SourceRabbitMQParameters()
                model.fromMap(value)
                self.sourceRabbitMQParameters = model
            }
            if let value = dict["SourceRocketMQCheckpointParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Source.SourceRocketMQCheckpointParameters()
                model.fromMap(value)
                self.sourceRocketMQCheckpointParameters = model
            }
            if let value = dict["SourceRocketMQParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Source.SourceRocketMQParameters()
                model.fromMap(value)
                self.sourceRocketMQParameters = model
            }
            if let value = dict["SourceSLSParameters"] as? [String: Any?] {
                var model = UpdateEventStreamingRequest.Source.SourceSLSParameters()
                model.fromMap(value)
                self.sourceSLSParameters = model
            }
        }
    }
    public class Transforms : Tea.TeaModel {
        public var arn: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.arn != nil {
                map["Arn"] = self.arn!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Arn"] as? String {
                self.arn = value
            }
        }
    }
    public var description_: String?

    public var eventStreamingName: String?

    public var filterPattern: String?

    public var runOptions: UpdateEventStreamingRequest.RunOptions?

    public var sink: UpdateEventStreamingRequest.Sink?

    public var source: UpdateEventStreamingRequest.Source?

    public var transforms: [UpdateEventStreamingRequest.Transforms]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.runOptions?.validate()
        try self.sink?.validate()
        try self.source?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.eventStreamingName != nil {
            map["EventStreamingName"] = self.eventStreamingName!
        }
        if self.filterPattern != nil {
            map["FilterPattern"] = self.filterPattern!
        }
        if self.runOptions != nil {
            map["RunOptions"] = self.runOptions?.toMap()
        }
        if self.sink != nil {
            map["Sink"] = self.sink?.toMap()
        }
        if self.source != nil {
            map["Source"] = self.source?.toMap()
        }
        if self.transforms != nil {
            var tmp : [Any] = []
            for k in self.transforms! {
                tmp.append(k.toMap())
            }
            map["Transforms"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["EventStreamingName"] as? String {
            self.eventStreamingName = value
        }
        if let value = dict["FilterPattern"] as? String {
            self.filterPattern = value
        }
        if let value = dict["RunOptions"] as? [String: Any?] {
            var model = UpdateEventStreamingRequest.RunOptions()
            model.fromMap(value)
            self.runOptions = model
        }
        if let value = dict["Sink"] as? [String: Any?] {
            var model = UpdateEventStreamingRequest.Sink()
            model.fromMap(value)
            self.sink = model
        }
        if let value = dict["Source"] as? [String: Any?] {
            var model = UpdateEventStreamingRequest.Source()
            model.fromMap(value)
            self.source = model
        }
        if let value = dict["Transforms"] as? [Any?] {
            var tmp : [UpdateEventStreamingRequest.Transforms] = []
            for v in value {
                if v != nil {
                    var model = UpdateEventStreamingRequest.Transforms()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.transforms = tmp
        }
    }
}

public class UpdateEventStreamingShrinkRequest : Tea.TeaModel {
    public var description_: String?

    public var eventStreamingName: String?

    public var filterPattern: String?

    public var runOptionsShrink: String?

    public var sinkShrink: String?

    public var sourceShrink: String?

    public var transformsShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.eventStreamingName != nil {
            map["EventStreamingName"] = self.eventStreamingName!
        }
        if self.filterPattern != nil {
            map["FilterPattern"] = self.filterPattern!
        }
        if self.runOptionsShrink != nil {
            map["RunOptions"] = self.runOptionsShrink!
        }
        if self.sinkShrink != nil {
            map["Sink"] = self.sinkShrink!
        }
        if self.sourceShrink != nil {
            map["Source"] = self.sourceShrink!
        }
        if self.transformsShrink != nil {
            map["Transforms"] = self.transformsShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["EventStreamingName"] as? String {
            self.eventStreamingName = value
        }
        if let value = dict["FilterPattern"] as? String {
            self.filterPattern = value
        }
        if let value = dict["RunOptions"] as? String {
            self.runOptionsShrink = value
        }
        if let value = dict["Sink"] as? String {
            self.sinkShrink = value
        }
        if let value = dict["Source"] as? String {
            self.sourceShrink = value
        }
        if let value = dict["Transforms"] as? String {
            self.transformsShrink = value
        }
    }
}

public class UpdateEventStreamingResponseBody : Tea.TeaModel {
    public var code: String?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateEventStreamingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateEventStreamingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateEventStreamingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateRuleRequest : Tea.TeaModel {
    public var description_: String?

    public var eventBusName: String?

    public var filterPattern: String?

    public var ruleName: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.eventBusName != nil {
            map["EventBusName"] = self.eventBusName!
        }
        if self.filterPattern != nil {
            map["FilterPattern"] = self.filterPattern!
        }
        if self.ruleName != nil {
            map["RuleName"] = self.ruleName!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["EventBusName"] as? String {
            self.eventBusName = value
        }
        if let value = dict["FilterPattern"] as? String {
            self.filterPattern = value
        }
        if let value = dict["RuleName"] as? String {
            self.ruleName = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class UpdateRuleResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateRuleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateRuleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateRuleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}
