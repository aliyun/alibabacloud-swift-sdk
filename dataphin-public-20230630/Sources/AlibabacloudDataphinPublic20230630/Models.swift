import Foundation
import Tea
import TeaUtils
import AlibabacloudOpenApi
import AlibabaCloudOpenApiUtil
import AlibabacloudEndpointUtil

public class PrivilegeTransferResultEntrie : Tea.TeaModel {
    public var children: [PrivilegeTransferResultEntrie]?

    public var errMsg: String?

    public var isLeaf: Bool?

    public var privilege: String?

    public var privilegeDisplayName: String?

    public var status: String?

    public var test: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.children != nil {
            var tmp : [Any] = []
            for k in self.children! {
                tmp.append(k.toMap())
            }
            map["Children"] = tmp
        }
        if self.errMsg != nil {
            map["ErrMsg"] = self.errMsg!
        }
        if self.isLeaf != nil {
            map["IsLeaf"] = self.isLeaf!
        }
        if self.privilege != nil {
            map["Privilege"] = self.privilege!
        }
        if self.privilegeDisplayName != nil {
            map["PrivilegeDisplayName"] = self.privilegeDisplayName!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.test != nil {
            map["Test"] = self.test!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Children"] as? [Any?] {
            var tmp : [PrivilegeTransferResultEntrie] = []
            for v in value {
                if v != nil {
                    var model = PrivilegeTransferResultEntrie()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.children = tmp
        }
        if let value = dict["ErrMsg"] as? String {
            self.errMsg = value
        }
        if let value = dict["IsLeaf"] as? Bool {
            self.isLeaf = value
        }
        if let value = dict["Privilege"] as? String {
            self.privilege = value
        }
        if let value = dict["PrivilegeDisplayName"] as? String {
            self.privilegeDisplayName = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["Test"] as? String {
            self.test = value
        }
    }
}

public class AddDataServiceProjectMemberRequest : Tea.TeaModel {
    public class AddCommand : Tea.TeaModel {
        public class ProjectMemberList : Tea.TeaModel {
            public var accountName: String?

            public var displayName: String?

            public var role: Int32?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.accountName != nil {
                    map["AccountName"] = self.accountName!
                }
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.role != nil {
                    map["Role"] = self.role!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AccountName"] as? String {
                    self.accountName = value
                }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["Role"] as? Int32 {
                    self.role = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public var projectMemberList: [AddDataServiceProjectMemberRequest.AddCommand.ProjectMemberList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.projectMemberList != nil {
                var tmp : [Any] = []
                for k in self.projectMemberList! {
                    tmp.append(k.toMap())
                }
                map["ProjectMemberList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ProjectMemberList"] as? [Any?] {
                var tmp : [AddDataServiceProjectMemberRequest.AddCommand.ProjectMemberList] = []
                for v in value {
                    if v != nil {
                        var model = AddDataServiceProjectMemberRequest.AddCommand.ProjectMemberList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.projectMemberList = tmp
            }
        }
    }
    public var addCommand: AddDataServiceProjectMemberRequest.AddCommand?

    public var opTenantId: Int64?

    public var projectId: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.addCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addCommand != nil {
            map["AddCommand"] = self.addCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddCommand"] as? [String: Any?] {
            var model = AddDataServiceProjectMemberRequest.AddCommand()
            model.fromMap(value)
            self.addCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
    }
}

public class AddDataServiceProjectMemberShrinkRequest : Tea.TeaModel {
    public var addCommandShrink: String?

    public var opTenantId: Int64?

    public var projectId: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addCommandShrink != nil {
            map["AddCommand"] = self.addCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddCommand"] as? String {
            self.addCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
    }
}

public class AddDataServiceProjectMemberResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class AddDataServiceProjectMemberResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddDataServiceProjectMemberResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddDataServiceProjectMemberResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddProjectMemberRequest : Tea.TeaModel {
    public class AddCommand : Tea.TeaModel {
        public class UserList : Tea.TeaModel {
            public var roleList: [Int32]?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.roleList != nil {
                    map["RoleList"] = self.roleList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["RoleList"] as? [Int32] {
                    self.roleList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public var env: String?

        public var userList: [AddProjectMemberRequest.AddCommand.UserList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.env != nil {
                map["Env"] = self.env!
            }
            if self.userList != nil {
                var tmp : [Any] = []
                for k in self.userList! {
                    tmp.append(k.toMap())
                }
                map["UserList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Env"] as? String {
                self.env = value
            }
            if let value = dict["UserList"] as? [Any?] {
                var tmp : [AddProjectMemberRequest.AddCommand.UserList] = []
                for v in value {
                    if v != nil {
                        var model = AddProjectMemberRequest.AddCommand.UserList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.userList = tmp
            }
        }
    }
    public var addCommand: AddProjectMemberRequest.AddCommand?

    public var id: Int64?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.addCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addCommand != nil {
            map["AddCommand"] = self.addCommand?.toMap()
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddCommand"] as? [String: Any?] {
            var model = AddProjectMemberRequest.AddCommand()
            model.fromMap(value)
            self.addCommand = model
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class AddProjectMemberShrinkRequest : Tea.TeaModel {
    public var addCommandShrink: String?

    public var id: Int64?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addCommandShrink != nil {
            map["AddCommand"] = self.addCommandShrink!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddCommand"] as? String {
            self.addCommandShrink = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class AddProjectMemberResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class AddProjectMemberResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddProjectMemberResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddProjectMemberResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddTenantMembersRequest : Tea.TeaModel {
    public class AddCommand : Tea.TeaModel {
        public class UserList : Tea.TeaModel {
            public var id: String?

            public var roleList: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.roleList != nil {
                    map["RoleList"] = self.roleList!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["RoleList"] as? [String] {
                    self.roleList = value
                }
            }
        }
        public var userList: [AddTenantMembersRequest.AddCommand.UserList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.userList != nil {
                var tmp : [Any] = []
                for k in self.userList! {
                    tmp.append(k.toMap())
                }
                map["UserList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["UserList"] as? [Any?] {
                var tmp : [AddTenantMembersRequest.AddCommand.UserList] = []
                for v in value {
                    if v != nil {
                        var model = AddTenantMembersRequest.AddCommand.UserList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.userList = tmp
            }
        }
    }
    public var addCommand: AddTenantMembersRequest.AddCommand?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.addCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addCommand != nil {
            map["AddCommand"] = self.addCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddCommand"] as? [String: Any?] {
            var model = AddTenantMembersRequest.AddCommand()
            model.fromMap(value)
            self.addCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class AddTenantMembersShrinkRequest : Tea.TeaModel {
    public var addCommandShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addCommandShrink != nil {
            map["AddCommand"] = self.addCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddCommand"] as? String {
            self.addCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class AddTenantMembersResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class AddTenantMembersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddTenantMembersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddTenantMembersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddTenantMembersBySourceUserRequest : Tea.TeaModel {
    public class AddCommand : Tea.TeaModel {
        public class SourceUserList : Tea.TeaModel {
            public var accountName: String?

            public var dingNumber: String?

            public var displayName: String?

            public var mail: String?

            public var mobilePhone: String?

            public var sourceId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.accountName != nil {
                    map["AccountName"] = self.accountName!
                }
                if self.dingNumber != nil {
                    map["DingNumber"] = self.dingNumber!
                }
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.mail != nil {
                    map["Mail"] = self.mail!
                }
                if self.mobilePhone != nil {
                    map["MobilePhone"] = self.mobilePhone!
                }
                if self.sourceId != nil {
                    map["SourceId"] = self.sourceId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AccountName"] as? String {
                    self.accountName = value
                }
                if let value = dict["DingNumber"] as? String {
                    self.dingNumber = value
                }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["Mail"] as? String {
                    self.mail = value
                }
                if let value = dict["MobilePhone"] as? String {
                    self.mobilePhone = value
                }
                if let value = dict["SourceId"] as? String {
                    self.sourceId = value
                }
            }
        }
        public var sourceUserList: [AddTenantMembersBySourceUserRequest.AddCommand.SourceUserList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.sourceUserList != nil {
                var tmp : [Any] = []
                for k in self.sourceUserList! {
                    tmp.append(k.toMap())
                }
                map["SourceUserList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SourceUserList"] as? [Any?] {
                var tmp : [AddTenantMembersBySourceUserRequest.AddCommand.SourceUserList] = []
                for v in value {
                    if v != nil {
                        var model = AddTenantMembersBySourceUserRequest.AddCommand.SourceUserList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.sourceUserList = tmp
            }
        }
    }
    public var addCommand: AddTenantMembersBySourceUserRequest.AddCommand?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.addCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addCommand != nil {
            map["AddCommand"] = self.addCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddCommand"] as? [String: Any?] {
            var model = AddTenantMembersBySourceUserRequest.AddCommand()
            model.fromMap(value)
            self.addCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class AddTenantMembersBySourceUserShrinkRequest : Tea.TeaModel {
    public var addCommandShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addCommandShrink != nil {
            map["AddCommand"] = self.addCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddCommand"] as? String {
            self.addCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class AddTenantMembersBySourceUserResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class AddTenantMembersBySourceUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddTenantMembersBySourceUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddTenantMembersBySourceUserResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddUserGroupMemberRequest : Tea.TeaModel {
    public class AddCommand : Tea.TeaModel {
        public var userGroupId: String?

        public var userIdList: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.userGroupId != nil {
                map["UserGroupId"] = self.userGroupId!
            }
            if self.userIdList != nil {
                map["UserIdList"] = self.userIdList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["UserGroupId"] as? String {
                self.userGroupId = value
            }
            if let value = dict["UserIdList"] as? [String] {
                self.userIdList = value
            }
        }
    }
    public var addCommand: AddUserGroupMemberRequest.AddCommand?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.addCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addCommand != nil {
            map["AddCommand"] = self.addCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddCommand"] as? [String: Any?] {
            var model = AddUserGroupMemberRequest.AddCommand()
            model.fromMap(value)
            self.addCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class AddUserGroupMemberShrinkRequest : Tea.TeaModel {
    public var addCommandShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.addCommandShrink != nil {
            map["AddCommand"] = self.addCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AddCommand"] as? String {
            self.addCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class AddUserGroupMemberResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class AddUserGroupMemberResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddUserGroupMemberResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddUserGroupMemberResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ApplyDataServiceApiRequest : Tea.TeaModel {
    public class ApplyCommand : Tea.TeaModel {
        public class DevFieldList : Tea.TeaModel {
            public var id: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? Int32 {
                    self.id = value
                }
            }
        }
        public class ProdFieldList : Tea.TeaModel {
            public var id: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? Int32 {
                    self.id = value
                }
            }
        }
        public var apiId: Int64?

        public var appId: Int32?

        public var devFieldList: [ApplyDataServiceApiRequest.ApplyCommand.DevFieldList]?

        public var expireDate: String?

        public var prodFieldList: [ApplyDataServiceApiRequest.ApplyCommand.ProdFieldList]?

        public var reason: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiId != nil {
                map["ApiId"] = self.apiId!
            }
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.devFieldList != nil {
                var tmp : [Any] = []
                for k in self.devFieldList! {
                    tmp.append(k.toMap())
                }
                map["DevFieldList"] = tmp
            }
            if self.expireDate != nil {
                map["ExpireDate"] = self.expireDate!
            }
            if self.prodFieldList != nil {
                var tmp : [Any] = []
                for k in self.prodFieldList! {
                    tmp.append(k.toMap())
                }
                map["ProdFieldList"] = tmp
            }
            if self.reason != nil {
                map["Reason"] = self.reason!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiId"] as? Int64 {
                self.apiId = value
            }
            if let value = dict["AppId"] as? Int32 {
                self.appId = value
            }
            if let value = dict["DevFieldList"] as? [Any?] {
                var tmp : [ApplyDataServiceApiRequest.ApplyCommand.DevFieldList] = []
                for v in value {
                    if v != nil {
                        var model = ApplyDataServiceApiRequest.ApplyCommand.DevFieldList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.devFieldList = tmp
            }
            if let value = dict["ExpireDate"] as? String {
                self.expireDate = value
            }
            if let value = dict["ProdFieldList"] as? [Any?] {
                var tmp : [ApplyDataServiceApiRequest.ApplyCommand.ProdFieldList] = []
                for v in value {
                    if v != nil {
                        var model = ApplyDataServiceApiRequest.ApplyCommand.ProdFieldList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.prodFieldList = tmp
            }
            if let value = dict["Reason"] as? String {
                self.reason = value
            }
        }
    }
    public var applyCommand: ApplyDataServiceApiRequest.ApplyCommand?

    public var opTenantId: Int64?

    public var projectId: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.applyCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applyCommand != nil {
            map["ApplyCommand"] = self.applyCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplyCommand"] as? [String: Any?] {
            var model = ApplyDataServiceApiRequest.ApplyCommand()
            model.fromMap(value)
            self.applyCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
    }
}

public class ApplyDataServiceApiShrinkRequest : Tea.TeaModel {
    public var applyCommandShrink: String?

    public var opTenantId: Int64?

    public var projectId: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applyCommandShrink != nil {
            map["ApplyCommand"] = self.applyCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplyCommand"] as? String {
            self.applyCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
    }
}

public class ApplyDataServiceApiResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ApplyDataServiceApiResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ApplyDataServiceApiResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ApplyDataServiceApiResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ApplyDataServiceAppRequest : Tea.TeaModel {
    public class ApplyCommand : Tea.TeaModel {
        public var appId: Int32?

        public var expireDate: String?

        public var reason: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.expireDate != nil {
                map["ExpireDate"] = self.expireDate!
            }
            if self.reason != nil {
                map["Reason"] = self.reason!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppId"] as? Int32 {
                self.appId = value
            }
            if let value = dict["ExpireDate"] as? String {
                self.expireDate = value
            }
            if let value = dict["Reason"] as? String {
                self.reason = value
            }
        }
    }
    public var applyCommand: ApplyDataServiceAppRequest.ApplyCommand?

    public var opTenantId: Int64?

    public var projectId: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.applyCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applyCommand != nil {
            map["ApplyCommand"] = self.applyCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplyCommand"] as? [String: Any?] {
            var model = ApplyDataServiceAppRequest.ApplyCommand()
            model.fromMap(value)
            self.applyCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
    }
}

public class ApplyDataServiceAppShrinkRequest : Tea.TeaModel {
    public var applyCommandShrink: String?

    public var opTenantId: Int64?

    public var projectId: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.applyCommandShrink != nil {
            map["ApplyCommand"] = self.applyCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApplyCommand"] as? String {
            self.applyCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
    }
}

public class ApplyDataServiceAppResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ApplyDataServiceAppResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ApplyDataServiceAppResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ApplyDataServiceAppResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CheckComputeSourceConnectivityRequest : Tea.TeaModel {
    public class CheckCommand : Tea.TeaModel {
        public class ConfigList : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var configList: [CheckComputeSourceConnectivityRequest.CheckCommand.ConfigList]?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.configList != nil {
                var tmp : [Any] = []
                for k in self.configList! {
                    tmp.append(k.toMap())
                }
                map["ConfigList"] = tmp
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConfigList"] as? [Any?] {
                var tmp : [CheckComputeSourceConnectivityRequest.CheckCommand.ConfigList] = []
                for v in value {
                    if v != nil {
                        var model = CheckComputeSourceConnectivityRequest.CheckCommand.ConfigList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.configList = tmp
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var checkCommand: CheckComputeSourceConnectivityRequest.CheckCommand?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.checkCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.checkCommand != nil {
            map["CheckCommand"] = self.checkCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CheckCommand"] as? [String: Any?] {
            var model = CheckComputeSourceConnectivityRequest.CheckCommand()
            model.fromMap(value)
            self.checkCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CheckComputeSourceConnectivityShrinkRequest : Tea.TeaModel {
    public var checkCommandShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.checkCommandShrink != nil {
            map["CheckCommand"] = self.checkCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CheckCommand"] as? String {
            self.checkCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CheckComputeSourceConnectivityResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CheckComputeSourceConnectivityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CheckComputeSourceConnectivityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CheckComputeSourceConnectivityResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CheckComputeSourceConnectivityByIdRequest : Tea.TeaModel {
    public var id: Int64?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CheckComputeSourceConnectivityByIdResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CheckComputeSourceConnectivityByIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CheckComputeSourceConnectivityByIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CheckComputeSourceConnectivityByIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CheckDataSourceConnectivityRequest : Tea.TeaModel {
    public class CheckCommand : Tea.TeaModel {
        public class ConfigItemList : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var configItemList: [CheckDataSourceConnectivityRequest.CheckCommand.ConfigItemList]?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.configItemList != nil {
                var tmp : [Any] = []
                for k in self.configItemList! {
                    tmp.append(k.toMap())
                }
                map["ConfigItemList"] = tmp
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConfigItemList"] as? [Any?] {
                var tmp : [CheckDataSourceConnectivityRequest.CheckCommand.ConfigItemList] = []
                for v in value {
                    if v != nil {
                        var model = CheckDataSourceConnectivityRequest.CheckCommand.ConfigItemList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.configItemList = tmp
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var checkCommand: CheckDataSourceConnectivityRequest.CheckCommand?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.checkCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.checkCommand != nil {
            map["CheckCommand"] = self.checkCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CheckCommand"] as? [String: Any?] {
            var model = CheckDataSourceConnectivityRequest.CheckCommand()
            model.fromMap(value)
            self.checkCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CheckDataSourceConnectivityShrinkRequest : Tea.TeaModel {
    public var checkCommandShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.checkCommandShrink != nil {
            map["CheckCommand"] = self.checkCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CheckCommand"] as? String {
            self.checkCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CheckDataSourceConnectivityResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CheckDataSourceConnectivityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CheckDataSourceConnectivityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CheckDataSourceConnectivityResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CheckDataSourceConnectivityByIdRequest : Tea.TeaModel {
    public var id: Int64?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CheckDataSourceConnectivityByIdResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CheckDataSourceConnectivityByIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CheckDataSourceConnectivityByIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CheckDataSourceConnectivityByIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CheckProjectHasDependencyRequest : Tea.TeaModel {
    public var id: Int64?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CheckProjectHasDependencyResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CheckProjectHasDependencyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CheckProjectHasDependencyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CheckProjectHasDependencyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CheckResourcePermissionRequest : Tea.TeaModel {
    public class CheckCommand : Tea.TeaModel {
        public class ResourceList : Tea.TeaModel {
            public var resourceId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.resourceId != nil {
                    map["ResourceId"] = self.resourceId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ResourceId"] as? String {
                    self.resourceId = value
                }
            }
        }
        public var operate: String?

        public var resourceList: [CheckResourcePermissionRequest.CheckCommand.ResourceList]?

        public var resourceType: String?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.operate != nil {
                map["Operate"] = self.operate!
            }
            if self.resourceList != nil {
                var tmp : [Any] = []
                for k in self.resourceList! {
                    tmp.append(k.toMap())
                }
                map["ResourceList"] = tmp
            }
            if self.resourceType != nil {
                map["ResourceType"] = self.resourceType!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Operate"] as? String {
                self.operate = value
            }
            if let value = dict["ResourceList"] as? [Any?] {
                var tmp : [CheckResourcePermissionRequest.CheckCommand.ResourceList] = []
                for v in value {
                    if v != nil {
                        var model = CheckResourcePermissionRequest.CheckCommand.ResourceList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.resourceList = tmp
            }
            if let value = dict["ResourceType"] as? String {
                self.resourceType = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
        }
    }
    public var checkCommand: CheckResourcePermissionRequest.CheckCommand?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.checkCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.checkCommand != nil {
            map["CheckCommand"] = self.checkCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CheckCommand"] as? [String: Any?] {
            var model = CheckResourcePermissionRequest.CheckCommand()
            model.fromMap(value)
            self.checkCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CheckResourcePermissionShrinkRequest : Tea.TeaModel {
    public var checkCommandShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.checkCommandShrink != nil {
            map["CheckCommand"] = self.checkCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CheckCommand"] as? String {
            self.checkCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CheckResourcePermissionResponseBody : Tea.TeaModel {
    public class ResourcePermissionList : Tea.TeaModel {
        public var hasPermission: Bool?

        public var resourceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.hasPermission != nil {
                map["HasPermission"] = self.hasPermission!
            }
            if self.resourceId != nil {
                map["ResourceId"] = self.resourceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["HasPermission"] as? Bool {
                self.hasPermission = value
            }
            if let value = dict["ResourceId"] as? String {
                self.resourceId = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var resourcePermissionList: [CheckResourcePermissionResponseBody.ResourcePermissionList]?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resourcePermissionList != nil {
            var tmp : [Any] = []
            for k in self.resourcePermissionList! {
                tmp.append(k.toMap())
            }
            map["ResourcePermissionList"] = tmp
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResourcePermissionList"] as? [Any?] {
            var tmp : [CheckResourcePermissionResponseBody.ResourcePermissionList] = []
            for v in value {
                if v != nil {
                    var model = CheckResourcePermissionResponseBody.ResourcePermissionList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.resourcePermissionList = tmp
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CheckResourcePermissionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CheckResourcePermissionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CheckResourcePermissionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateAdHocFileRequest : Tea.TeaModel {
    public class CreateCommand : Tea.TeaModel {
        public var content: String?

        public var directory: String?

        public var name: String?

        public var projectId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.directory != nil {
                map["Directory"] = self.directory!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["Directory"] as? String {
                self.directory = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
        }
    }
    public var createCommand: CreateAdHocFileRequest.CreateCommand?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.createCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createCommand != nil {
            map["CreateCommand"] = self.createCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateCommand"] as? [String: Any?] {
            var model = CreateAdHocFileRequest.CreateCommand()
            model.fromMap(value)
            self.createCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreateAdHocFileShrinkRequest : Tea.TeaModel {
    public var createCommandShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createCommandShrink != nil {
            map["CreateCommand"] = self.createCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateCommand"] as? String {
            self.createCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreateAdHocFileResponseBody : Tea.TeaModel {
    public var code: String?

    public var fileId: Int64?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.fileId != nil {
            map["FileId"] = self.fileId!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["FileId"] as? Int64 {
            self.fileId = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateAdHocFileResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateAdHocFileResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateAdHocFileResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateBatchTaskRequest : Tea.TeaModel {
    public class CreateCommand : Tea.TeaModel {
        public var dataSourceCatalog: String?

        public var dataSourceId: String?

        public var dataSourceSchema: String?

        public var description_: String?

        public var directory: String?

        public var engine: String?

        public var name: String?

        public var projectId: Int64?

        public var pythonModuleList: [String]?

        public var scheduleType: Int32?

        public var taskType: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dataSourceCatalog != nil {
                map["DataSourceCatalog"] = self.dataSourceCatalog!
            }
            if self.dataSourceId != nil {
                map["DataSourceId"] = self.dataSourceId!
            }
            if self.dataSourceSchema != nil {
                map["DataSourceSchema"] = self.dataSourceSchema!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.directory != nil {
                map["Directory"] = self.directory!
            }
            if self.engine != nil {
                map["Engine"] = self.engine!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            if self.pythonModuleList != nil {
                map["PythonModuleList"] = self.pythonModuleList!
            }
            if self.scheduleType != nil {
                map["ScheduleType"] = self.scheduleType!
            }
            if self.taskType != nil {
                map["TaskType"] = self.taskType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DataSourceCatalog"] as? String {
                self.dataSourceCatalog = value
            }
            if let value = dict["DataSourceId"] as? String {
                self.dataSourceId = value
            }
            if let value = dict["DataSourceSchema"] as? String {
                self.dataSourceSchema = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Directory"] as? String {
                self.directory = value
            }
            if let value = dict["Engine"] as? String {
                self.engine = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
            if let value = dict["PythonModuleList"] as? [String] {
                self.pythonModuleList = value
            }
            if let value = dict["ScheduleType"] as? Int32 {
                self.scheduleType = value
            }
            if let value = dict["TaskType"] as? Int32 {
                self.taskType = value
            }
        }
    }
    public var createCommand: CreateBatchTaskRequest.CreateCommand?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.createCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createCommand != nil {
            map["CreateCommand"] = self.createCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateCommand"] as? [String: Any?] {
            var model = CreateBatchTaskRequest.CreateCommand()
            model.fromMap(value)
            self.createCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreateBatchTaskShrinkRequest : Tea.TeaModel {
    public var createCommandShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createCommandShrink != nil {
            map["CreateCommand"] = self.createCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateCommand"] as? String {
            self.createCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreateBatchTaskResponseBody : Tea.TeaModel {
    public class CreateResult : Tea.TeaModel {
        public var fileId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fileId != nil {
                map["FileId"] = self.fileId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FileId"] as? Int64 {
                self.fileId = value
            }
        }
    }
    public var code: String?

    public var createResult: CreateBatchTaskResponseBody.CreateResult?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.createResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.createResult != nil {
            map["CreateResult"] = self.createResult?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["CreateResult"] as? [String: Any?] {
            var model = CreateBatchTaskResponseBody.CreateResult()
            model.fromMap(value)
            self.createResult = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateBatchTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateBatchTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateBatchTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateBizEntityRequest : Tea.TeaModel {
    public class CreateCommand : Tea.TeaModel {
        public class BizObject : Tea.TeaModel {
            public var description_: String?

            public var displayName: String?

            public var name: String?

            public var ownerUserId: String?

            public var parentId: Int64?

            public var refBizEntityIdList: [Int64]?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.ownerUserId != nil {
                    map["OwnerUserId"] = self.ownerUserId!
                }
                if self.parentId != nil {
                    map["ParentId"] = self.parentId!
                }
                if self.refBizEntityIdList != nil {
                    map["RefBizEntityIdList"] = self.refBizEntityIdList!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["OwnerUserId"] as? String {
                    self.ownerUserId = value
                }
                if let value = dict["ParentId"] as? Int64 {
                    self.parentId = value
                }
                if let value = dict["RefBizEntityIdList"] as? [Int64] {
                    self.refBizEntityIdList = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public class BizProcess : Tea.TeaModel {
            public var bizEventEntityIdList: [Int64]?

            public var description_: String?

            public var displayName: String?

            public var name: String?

            public var ownerUserId: String?

            public var preBizProcessIdList: [Int64]?

            public var refBizEntityIdList: [Int64]?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bizEventEntityIdList != nil {
                    map["BizEventEntityIdList"] = self.bizEventEntityIdList!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.ownerUserId != nil {
                    map["OwnerUserId"] = self.ownerUserId!
                }
                if self.preBizProcessIdList != nil {
                    map["PreBizProcessIdList"] = self.preBizProcessIdList!
                }
                if self.refBizEntityIdList != nil {
                    map["RefBizEntityIdList"] = self.refBizEntityIdList!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BizEventEntityIdList"] as? [Int64] {
                    self.bizEventEntityIdList = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["OwnerUserId"] as? String {
                    self.ownerUserId = value
                }
                if let value = dict["PreBizProcessIdList"] as? [Int64] {
                    self.preBizProcessIdList = value
                }
                if let value = dict["RefBizEntityIdList"] as? [Int64] {
                    self.refBizEntityIdList = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var bizObject: CreateBizEntityRequest.CreateCommand.BizObject?

        public var bizProcess: CreateBizEntityRequest.CreateCommand.BizProcess?

        public var bizUnitId: Int64?

        public var dataDomainId: Int64?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.bizObject?.validate()
            try self.bizProcess?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bizObject != nil {
                map["BizObject"] = self.bizObject?.toMap()
            }
            if self.bizProcess != nil {
                map["BizProcess"] = self.bizProcess?.toMap()
            }
            if self.bizUnitId != nil {
                map["BizUnitId"] = self.bizUnitId!
            }
            if self.dataDomainId != nil {
                map["DataDomainId"] = self.dataDomainId!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BizObject"] as? [String: Any?] {
                var model = CreateBizEntityRequest.CreateCommand.BizObject()
                model.fromMap(value)
                self.bizObject = model
            }
            if let value = dict["BizProcess"] as? [String: Any?] {
                var model = CreateBizEntityRequest.CreateCommand.BizProcess()
                model.fromMap(value)
                self.bizProcess = model
            }
            if let value = dict["BizUnitId"] as? Int64 {
                self.bizUnitId = value
            }
            if let value = dict["DataDomainId"] as? Int64 {
                self.dataDomainId = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var createCommand: CreateBizEntityRequest.CreateCommand?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.createCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createCommand != nil {
            map["CreateCommand"] = self.createCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateCommand"] as? [String: Any?] {
            var model = CreateBizEntityRequest.CreateCommand()
            model.fromMap(value)
            self.createCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreateBizEntityShrinkRequest : Tea.TeaModel {
    public var createCommandShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createCommandShrink != nil {
            map["CreateCommand"] = self.createCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateCommand"] as? String {
            self.createCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreateBizEntityResponseBody : Tea.TeaModel {
    public class CreateResult : Tea.TeaModel {
        public var bizEntityId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bizEntityId != nil {
                map["BizEntityId"] = self.bizEntityId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BizEntityId"] as? Int64 {
                self.bizEntityId = value
            }
        }
    }
    public var code: String?

    public var createResult: CreateBizEntityResponseBody.CreateResult?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.createResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.createResult != nil {
            map["CreateResult"] = self.createResult?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["CreateResult"] as? [String: Any?] {
            var model = CreateBizEntityResponseBody.CreateResult()
            model.fromMap(value)
            self.createResult = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateBizEntityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateBizEntityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateBizEntityResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateBizUnitRequest : Tea.TeaModel {
    public class CreateCommand : Tea.TeaModel {
        public class BizUnitAccountList : Tea.TeaModel {
            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public var bizUnitAccountList: [CreateBizUnitRequest.CreateCommand.BizUnitAccountList]?

        public var description_: String?

        public var displayName: String?

        public var icon: String?

        public var mode: String?

        public var name: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bizUnitAccountList != nil {
                var tmp : [Any] = []
                for k in self.bizUnitAccountList! {
                    tmp.append(k.toMap())
                }
                map["BizUnitAccountList"] = tmp
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.icon != nil {
                map["Icon"] = self.icon!
            }
            if self.mode != nil {
                map["Mode"] = self.mode!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BizUnitAccountList"] as? [Any?] {
                var tmp : [CreateBizUnitRequest.CreateCommand.BizUnitAccountList] = []
                for v in value {
                    if v != nil {
                        var model = CreateBizUnitRequest.CreateCommand.BizUnitAccountList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.bizUnitAccountList = tmp
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["Icon"] as? String {
                self.icon = value
            }
            if let value = dict["Mode"] as? String {
                self.mode = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
        }
    }
    public var createCommand: CreateBizUnitRequest.CreateCommand?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.createCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createCommand != nil {
            map["CreateCommand"] = self.createCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateCommand"] as? [String: Any?] {
            var model = CreateBizUnitRequest.CreateCommand()
            model.fromMap(value)
            self.createCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreateBizUnitShrinkRequest : Tea.TeaModel {
    public var createCommandShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createCommandShrink != nil {
            map["CreateCommand"] = self.createCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateCommand"] as? String {
            self.createCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreateBizUnitResponseBody : Tea.TeaModel {
    public class CreateResult : Tea.TeaModel {
        public var bizUnitId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bizUnitId != nil {
                map["BizUnitId"] = self.bizUnitId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BizUnitId"] as? Int64 {
                self.bizUnitId = value
            }
        }
    }
    public var code: String?

    public var createResult: CreateBizUnitResponseBody.CreateResult?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.createResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.createResult != nil {
            map["CreateResult"] = self.createResult?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["CreateResult"] as? [String: Any?] {
            var model = CreateBizUnitResponseBody.CreateResult()
            model.fromMap(value)
            self.createResult = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateBizUnitResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateBizUnitResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateBizUnitResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateComputeSourceRequest : Tea.TeaModel {
    public class CreateCommand : Tea.TeaModel {
        public class ConfigList : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var configList: [CreateComputeSourceRequest.CreateCommand.ConfigList]?

        public var description_: String?

        public var name: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.configList != nil {
                var tmp : [Any] = []
                for k in self.configList! {
                    tmp.append(k.toMap())
                }
                map["ConfigList"] = tmp
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConfigList"] as? [Any?] {
                var tmp : [CreateComputeSourceRequest.CreateCommand.ConfigList] = []
                for v in value {
                    if v != nil {
                        var model = CreateComputeSourceRequest.CreateCommand.ConfigList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.configList = tmp
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var createCommand: CreateComputeSourceRequest.CreateCommand?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.createCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createCommand != nil {
            map["CreateCommand"] = self.createCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateCommand"] as? [String: Any?] {
            var model = CreateComputeSourceRequest.CreateCommand()
            model.fromMap(value)
            self.createCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreateComputeSourceShrinkRequest : Tea.TeaModel {
    public var createCommandShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createCommandShrink != nil {
            map["CreateCommand"] = self.createCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateCommand"] as? String {
            self.createCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreateComputeSourceResponseBody : Tea.TeaModel {
    public class CreateResult : Tea.TeaModel {
        public var id: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["Id"] = self.id!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
        }
    }
    public var code: String?

    public var createResult: CreateComputeSourceResponseBody.CreateResult?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.createResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.createResult != nil {
            map["CreateResult"] = self.createResult?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["CreateResult"] as? [String: Any?] {
            var model = CreateComputeSourceResponseBody.CreateResult()
            model.fromMap(value)
            self.createResult = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateComputeSourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateComputeSourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateComputeSourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateDataDomainRequest : Tea.TeaModel {
    public class CreateCommand : Tea.TeaModel {
        public var abbreviation: String?

        public var bizUnitId: Int64?

        public var description_: String?

        public var displayName: String?

        public var name: String?

        public var parentId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.abbreviation != nil {
                map["Abbreviation"] = self.abbreviation!
            }
            if self.bizUnitId != nil {
                map["BizUnitId"] = self.bizUnitId!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.parentId != nil {
                map["ParentId"] = self.parentId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Abbreviation"] as? String {
                self.abbreviation = value
            }
            if let value = dict["BizUnitId"] as? Int64 {
                self.bizUnitId = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["ParentId"] as? Int64 {
                self.parentId = value
            }
        }
    }
    public var createCommand: CreateDataDomainRequest.CreateCommand?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.createCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createCommand != nil {
            map["CreateCommand"] = self.createCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateCommand"] as? [String: Any?] {
            var model = CreateDataDomainRequest.CreateCommand()
            model.fromMap(value)
            self.createCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreateDataDomainShrinkRequest : Tea.TeaModel {
    public var createCommandShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createCommandShrink != nil {
            map["CreateCommand"] = self.createCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateCommand"] as? String {
            self.createCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreateDataDomainResponseBody : Tea.TeaModel {
    public class CreateResult : Tea.TeaModel {
        public var dataDomainId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dataDomainId != nil {
                map["DataDomainId"] = self.dataDomainId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DataDomainId"] as? Int64 {
                self.dataDomainId = value
            }
        }
    }
    public var code: String?

    public var createResult: CreateDataDomainResponseBody.CreateResult?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.createResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.createResult != nil {
            map["CreateResult"] = self.createResult?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["CreateResult"] as? [String: Any?] {
            var model = CreateDataDomainResponseBody.CreateResult()
            model.fromMap(value)
            self.createResult = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateDataDomainResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateDataDomainResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateDataDomainResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateDataServiceApiRequest : Tea.TeaModel {
    public class CreateCommand : Tea.TeaModel {
        public class ScriptDetails : Tea.TeaModel {
            public class ScriptRequestParameters : Tea.TeaModel {
                public var exampleValue: String?

                public var isRequiredParameter: Bool?

                public var parameterDataType: String?

                public var parameterDescription: String?

                public var parameterName: String?

                public var parameterValueType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.exampleValue != nil {
                        map["ExampleValue"] = self.exampleValue!
                    }
                    if self.isRequiredParameter != nil {
                        map["IsRequiredParameter"] = self.isRequiredParameter!
                    }
                    if self.parameterDataType != nil {
                        map["ParameterDataType"] = self.parameterDataType!
                    }
                    if self.parameterDescription != nil {
                        map["ParameterDescription"] = self.parameterDescription!
                    }
                    if self.parameterName != nil {
                        map["ParameterName"] = self.parameterName!
                    }
                    if self.parameterValueType != nil {
                        map["ParameterValueType"] = self.parameterValueType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ExampleValue"] as? String {
                        self.exampleValue = value
                    }
                    if let value = dict["IsRequiredParameter"] as? Bool {
                        self.isRequiredParameter = value
                    }
                    if let value = dict["ParameterDataType"] as? String {
                        self.parameterDataType = value
                    }
                    if let value = dict["ParameterDescription"] as? String {
                        self.parameterDescription = value
                    }
                    if let value = dict["ParameterName"] as? String {
                        self.parameterName = value
                    }
                    if let value = dict["ParameterValueType"] as? String {
                        self.parameterValueType = value
                    }
                }
            }
            public class ScriptResponseParameters : Tea.TeaModel {
                public var exampleValue: String?

                public var parameterDataType: String?

                public var parameterDescription: String?

                public var parameterName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.exampleValue != nil {
                        map["ExampleValue"] = self.exampleValue!
                    }
                    if self.parameterDataType != nil {
                        map["ParameterDataType"] = self.parameterDataType!
                    }
                    if self.parameterDescription != nil {
                        map["ParameterDescription"] = self.parameterDescription!
                    }
                    if self.parameterName != nil {
                        map["ParameterName"] = self.parameterName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ExampleValue"] as? String {
                        self.exampleValue = value
                    }
                    if let value = dict["ParameterDataType"] as? String {
                        self.parameterDataType = value
                    }
                    if let value = dict["ParameterDescription"] as? String {
                        self.parameterDescription = value
                    }
                    if let value = dict["ParameterName"] as? String {
                        self.parameterName = value
                    }
                }
            }
            public var datasourceID: Int64?

            public var datasourceType: Int32?

            public var isPaginated: Bool?

            public var script: String?

            public var scriptRequestParameters: [CreateDataServiceApiRequest.CreateCommand.ScriptDetails.ScriptRequestParameters]?

            public var scriptResponseParameters: [CreateDataServiceApiRequest.CreateCommand.ScriptDetails.ScriptResponseParameters]?

            public var sortPriority: Int32?

            public var sqlMode: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.datasourceID != nil {
                    map["DatasourceID"] = self.datasourceID!
                }
                if self.datasourceType != nil {
                    map["DatasourceType"] = self.datasourceType!
                }
                if self.isPaginated != nil {
                    map["IsPaginated"] = self.isPaginated!
                }
                if self.script != nil {
                    map["Script"] = self.script!
                }
                if self.scriptRequestParameters != nil {
                    var tmp : [Any] = []
                    for k in self.scriptRequestParameters! {
                        tmp.append(k.toMap())
                    }
                    map["ScriptRequestParameters"] = tmp
                }
                if self.scriptResponseParameters != nil {
                    var tmp : [Any] = []
                    for k in self.scriptResponseParameters! {
                        tmp.append(k.toMap())
                    }
                    map["ScriptResponseParameters"] = tmp
                }
                if self.sortPriority != nil {
                    map["SortPriority"] = self.sortPriority!
                }
                if self.sqlMode != nil {
                    map["SqlMode"] = self.sqlMode!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DatasourceID"] as? Int64 {
                    self.datasourceID = value
                }
                if let value = dict["DatasourceType"] as? Int32 {
                    self.datasourceType = value
                }
                if let value = dict["IsPaginated"] as? Bool {
                    self.isPaginated = value
                }
                if let value = dict["Script"] as? String {
                    self.script = value
                }
                if let value = dict["ScriptRequestParameters"] as? [Any?] {
                    var tmp : [CreateDataServiceApiRequest.CreateCommand.ScriptDetails.ScriptRequestParameters] = []
                    for v in value {
                        if v != nil {
                            var model = CreateDataServiceApiRequest.CreateCommand.ScriptDetails.ScriptRequestParameters()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.scriptRequestParameters = tmp
                }
                if let value = dict["ScriptResponseParameters"] as? [Any?] {
                    var tmp : [CreateDataServiceApiRequest.CreateCommand.ScriptDetails.ScriptResponseParameters] = []
                    for v in value {
                        if v != nil {
                            var model = CreateDataServiceApiRequest.CreateCommand.ScriptDetails.ScriptResponseParameters()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.scriptResponseParameters = tmp
                }
                if let value = dict["SortPriority"] as? Int32 {
                    self.sortPriority = value
                }
                if let value = dict["SqlMode"] as? Int32 {
                    self.sqlMode = value
                }
            }
        }
        public var apiGroupId: Int64?

        public var apiGroupName: String?

        public var apiName: String?

        public var apiType: Int32?

        public var bizProtocol: [Int32]?

        public var cacheTimeout: Int32?

        public var callMode: Int32?

        public var customUpdateRate: String?

        public var description_: String?

        public var executionTimeout: Int32?

        public var mode: Int32?

        public var projectId: Int64?

        public var requestType: Int32?

        public var scriptDetails: CreateDataServiceApiRequest.CreateCommand.ScriptDetails?

        public var timeout: Int32?

        public var updateRate: Int32?

        public var version: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.scriptDetails?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiGroupId != nil {
                map["ApiGroupId"] = self.apiGroupId!
            }
            if self.apiGroupName != nil {
                map["ApiGroupName"] = self.apiGroupName!
            }
            if self.apiName != nil {
                map["ApiName"] = self.apiName!
            }
            if self.apiType != nil {
                map["ApiType"] = self.apiType!
            }
            if self.bizProtocol != nil {
                map["BizProtocol"] = self.bizProtocol!
            }
            if self.cacheTimeout != nil {
                map["CacheTimeout"] = self.cacheTimeout!
            }
            if self.callMode != nil {
                map["CallMode"] = self.callMode!
            }
            if self.customUpdateRate != nil {
                map["CustomUpdateRate"] = self.customUpdateRate!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.executionTimeout != nil {
                map["ExecutionTimeout"] = self.executionTimeout!
            }
            if self.mode != nil {
                map["Mode"] = self.mode!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            if self.requestType != nil {
                map["RequestType"] = self.requestType!
            }
            if self.scriptDetails != nil {
                map["ScriptDetails"] = self.scriptDetails?.toMap()
            }
            if self.timeout != nil {
                map["Timeout"] = self.timeout!
            }
            if self.updateRate != nil {
                map["UpdateRate"] = self.updateRate!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiGroupId"] as? Int64 {
                self.apiGroupId = value
            }
            if let value = dict["ApiGroupName"] as? String {
                self.apiGroupName = value
            }
            if let value = dict["ApiName"] as? String {
                self.apiName = value
            }
            if let value = dict["ApiType"] as? Int32 {
                self.apiType = value
            }
            if let value = dict["BizProtocol"] as? [Int32] {
                self.bizProtocol = value
            }
            if let value = dict["CacheTimeout"] as? Int32 {
                self.cacheTimeout = value
            }
            if let value = dict["CallMode"] as? Int32 {
                self.callMode = value
            }
            if let value = dict["CustomUpdateRate"] as? String {
                self.customUpdateRate = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["ExecutionTimeout"] as? Int32 {
                self.executionTimeout = value
            }
            if let value = dict["Mode"] as? Int32 {
                self.mode = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
            if let value = dict["RequestType"] as? Int32 {
                self.requestType = value
            }
            if let value = dict["ScriptDetails"] as? [String: Any?] {
                var model = CreateDataServiceApiRequest.CreateCommand.ScriptDetails()
                model.fromMap(value)
                self.scriptDetails = model
            }
            if let value = dict["Timeout"] as? Int32 {
                self.timeout = value
            }
            if let value = dict["UpdateRate"] as? Int32 {
                self.updateRate = value
            }
            if let value = dict["Version"] as? String {
                self.version = value
            }
        }
    }
    public var createCommand: CreateDataServiceApiRequest.CreateCommand?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.createCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createCommand != nil {
            map["CreateCommand"] = self.createCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateCommand"] as? [String: Any?] {
            var model = CreateDataServiceApiRequest.CreateCommand()
            model.fromMap(value)
            self.createCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreateDataServiceApiShrinkRequest : Tea.TeaModel {
    public var createCommandShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createCommandShrink != nil {
            map["CreateCommand"] = self.createCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateCommand"] as? String {
            self.createCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreateDataServiceApiResponseBody : Tea.TeaModel {
    public var apiId: Int64?

    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? Int64 {
            self.apiId = value
        }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateDataServiceApiResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateDataServiceApiResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateDataServiceApiResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateDataSourceRequest : Tea.TeaModel {
    public class CreateCommand : Tea.TeaModel {
        public class DevDataSourceCreate : Tea.TeaModel {
            public class DataSourceCreate : Tea.TeaModel {
                public class ConfigItemList : Tea.TeaModel {
                    public var key: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var checkActivity: Bool?

                public var configItemList: [CreateDataSourceRequest.CreateCommand.DevDataSourceCreate.DataSourceCreate.ConfigItemList]?

                public var description_: String?

                public var name: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.checkActivity != nil {
                        map["CheckActivity"] = self.checkActivity!
                    }
                    if self.configItemList != nil {
                        var tmp : [Any] = []
                        for k in self.configItemList! {
                            tmp.append(k.toMap())
                        }
                        map["ConfigItemList"] = tmp
                    }
                    if self.description_ != nil {
                        map["Description"] = self.description_!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["CheckActivity"] as? Bool {
                        self.checkActivity = value
                    }
                    if let value = dict["ConfigItemList"] as? [Any?] {
                        var tmp : [CreateDataSourceRequest.CreateCommand.DevDataSourceCreate.DataSourceCreate.ConfigItemList] = []
                        for v in value {
                            if v != nil {
                                var model = CreateDataSourceRequest.CreateCommand.DevDataSourceCreate.DataSourceCreate.ConfigItemList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.configItemList = tmp
                    }
                    if let value = dict["Description"] as? String {
                        self.description_ = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public var dataSourceCreate: CreateDataSourceRequest.CreateCommand.DevDataSourceCreate.DataSourceCreate?

            public var prodDataSourceId: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.dataSourceCreate?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.dataSourceCreate != nil {
                    map["DataSourceCreate"] = self.dataSourceCreate?.toMap()
                }
                if self.prodDataSourceId != nil {
                    map["ProdDataSourceId"] = self.prodDataSourceId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DataSourceCreate"] as? [String: Any?] {
                    var model = CreateDataSourceRequest.CreateCommand.DevDataSourceCreate.DataSourceCreate()
                    model.fromMap(value)
                    self.dataSourceCreate = model
                }
                if let value = dict["ProdDataSourceId"] as? Int64 {
                    self.prodDataSourceId = value
                }
            }
        }
        public class ProdDataSourceCreate : Tea.TeaModel {
            public class ConfigItemList : Tea.TeaModel {
                public var key: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.key != nil {
                        map["Key"] = self.key!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Key"] as? String {
                        self.key = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var checkActivity: Bool?

            public var configItemList: [CreateDataSourceRequest.CreateCommand.ProdDataSourceCreate.ConfigItemList]?

            public var description_: String?

            public var name: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.checkActivity != nil {
                    map["CheckActivity"] = self.checkActivity!
                }
                if self.configItemList != nil {
                    var tmp : [Any] = []
                    for k in self.configItemList! {
                        tmp.append(k.toMap())
                    }
                    map["ConfigItemList"] = tmp
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CheckActivity"] as? Bool {
                    self.checkActivity = value
                }
                if let value = dict["ConfigItemList"] as? [Any?] {
                    var tmp : [CreateDataSourceRequest.CreateCommand.ProdDataSourceCreate.ConfigItemList] = []
                    for v in value {
                        if v != nil {
                            var model = CreateDataSourceRequest.CreateCommand.ProdDataSourceCreate.ConfigItemList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.configItemList = tmp
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var devDataSourceCreate: CreateDataSourceRequest.CreateCommand.DevDataSourceCreate?

        public var prodDataSourceCreate: CreateDataSourceRequest.CreateCommand.ProdDataSourceCreate?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.devDataSourceCreate?.validate()
            try self.prodDataSourceCreate?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.devDataSourceCreate != nil {
                map["DevDataSourceCreate"] = self.devDataSourceCreate?.toMap()
            }
            if self.prodDataSourceCreate != nil {
                map["ProdDataSourceCreate"] = self.prodDataSourceCreate?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DevDataSourceCreate"] as? [String: Any?] {
                var model = CreateDataSourceRequest.CreateCommand.DevDataSourceCreate()
                model.fromMap(value)
                self.devDataSourceCreate = model
            }
            if let value = dict["ProdDataSourceCreate"] as? [String: Any?] {
                var model = CreateDataSourceRequest.CreateCommand.ProdDataSourceCreate()
                model.fromMap(value)
                self.prodDataSourceCreate = model
            }
        }
    }
    public var createCommand: CreateDataSourceRequest.CreateCommand?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.createCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createCommand != nil {
            map["CreateCommand"] = self.createCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateCommand"] as? [String: Any?] {
            var model = CreateDataSourceRequest.CreateCommand()
            model.fromMap(value)
            self.createCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreateDataSourceShrinkRequest : Tea.TeaModel {
    public var createCommandShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createCommandShrink != nil {
            map["CreateCommand"] = self.createCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateCommand"] as? String {
            self.createCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreateDataSourceResponseBody : Tea.TeaModel {
    public class CreateResult : Tea.TeaModel {
        public var devDataSourceId: Int64?

        public var prodDataSourceId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.devDataSourceId != nil {
                map["DevDataSourceId"] = self.devDataSourceId!
            }
            if self.prodDataSourceId != nil {
                map["ProdDataSourceId"] = self.prodDataSourceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DevDataSourceId"] as? Int64 {
                self.devDataSourceId = value
            }
            if let value = dict["ProdDataSourceId"] as? Int64 {
                self.prodDataSourceId = value
            }
        }
    }
    public var code: String?

    public var createResult: CreateDataSourceResponseBody.CreateResult?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.createResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.createResult != nil {
            map["CreateResult"] = self.createResult?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["CreateResult"] as? [String: Any?] {
            var model = CreateDataSourceResponseBody.CreateResult()
            model.fromMap(value)
            self.createResult = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateDataSourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateDataSourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateDataSourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateDirectoryRequest : Tea.TeaModel {
    public class CreateCommand : Tea.TeaModel {
        public var category: String?

        public var directory: String?

        public var name: String?

        public var projectId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.category != nil {
                map["Category"] = self.category!
            }
            if self.directory != nil {
                map["Directory"] = self.directory!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Category"] as? String {
                self.category = value
            }
            if let value = dict["Directory"] as? String {
                self.directory = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
        }
    }
    public var createCommand: CreateDirectoryRequest.CreateCommand?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.createCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createCommand != nil {
            map["CreateCommand"] = self.createCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateCommand"] as? [String: Any?] {
            var model = CreateDirectoryRequest.CreateCommand()
            model.fromMap(value)
            self.createCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreateDirectoryShrinkRequest : Tea.TeaModel {
    public var createCommandShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createCommandShrink != nil {
            map["CreateCommand"] = self.createCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateCommand"] as? String {
            self.createCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreateDirectoryResponseBody : Tea.TeaModel {
    public var code: String?

    public var fileId: Int64?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.fileId != nil {
            map["FileId"] = self.fileId!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["FileId"] as? Int64 {
            self.fileId = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateDirectoryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateDirectoryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateDirectoryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateNodeSupplementRequest : Tea.TeaModel {
    public class CreateCommand : Tea.TeaModel {
        public class DownStreamNodeIdList : Tea.TeaModel {
            public var fieldIdList: [String]?

            public var id: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fieldIdList != nil {
                    map["FieldIdList"] = self.fieldIdList!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FieldIdList"] as? [String] {
                    self.fieldIdList = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
            }
        }
        public class FilterList : Tea.TeaModel {
            public var exclude: Bool?

            public var key: String?

            public var valueList: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.exclude != nil {
                    map["Exclude"] = self.exclude!
                }
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.valueList != nil {
                    map["ValueList"] = self.valueList!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Exclude"] as? Bool {
                    self.exclude = value
                }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["ValueList"] as? [String] {
                    self.valueList = value
                }
            }
        }
        public class GlobalParamList : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public class NodeIdList : Tea.TeaModel {
            public var fieldIdList: [String]?

            public var id: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fieldIdList != nil {
                    map["FieldIdList"] = self.fieldIdList!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FieldIdList"] as? [String] {
                    self.fieldIdList = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
            }
        }
        public class NodeParamsList : Tea.TeaModel {
            public class ParamList : Tea.TeaModel {
                public var key: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.key != nil {
                        map["Key"] = self.key!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Key"] as? String {
                        self.key = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var nodeId: String?

            public var paramList: [CreateNodeSupplementRequest.CreateCommand.NodeParamsList.ParamList]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.nodeId != nil {
                    map["NodeId"] = self.nodeId!
                }
                if self.paramList != nil {
                    var tmp : [Any] = []
                    for k in self.paramList! {
                        tmp.append(k.toMap())
                    }
                    map["ParamList"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["NodeId"] as? String {
                    self.nodeId = value
                }
                if let value = dict["ParamList"] as? [Any?] {
                    var tmp : [CreateNodeSupplementRequest.CreateCommand.NodeParamsList.ParamList] = []
                    for v in value {
                        if v != nil {
                            var model = CreateNodeSupplementRequest.CreateCommand.NodeParamsList.ParamList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.paramList = tmp
                }
            }
        }
        public var containAllDownStream: Bool?

        public var downStreamNodeIdList: [CreateNodeSupplementRequest.CreateCommand.DownStreamNodeIdList]?

        public var endBizDate: String?

        public var filterList: [CreateNodeSupplementRequest.CreateCommand.FilterList]?

        public var globalParamList: [CreateNodeSupplementRequest.CreateCommand.GlobalParamList]?

        public var maxDueTime: String?

        public var minDueTime: String?

        public var name: String?

        public var nodeIdList: [CreateNodeSupplementRequest.CreateCommand.NodeIdList]?

        public var nodeParamsList: [CreateNodeSupplementRequest.CreateCommand.NodeParamsList]?

        public var parallelism: Int32?

        public var projectId: Int64?

        public var startBizDate: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.containAllDownStream != nil {
                map["ContainAllDownStream"] = self.containAllDownStream!
            }
            if self.downStreamNodeIdList != nil {
                var tmp : [Any] = []
                for k in self.downStreamNodeIdList! {
                    tmp.append(k.toMap())
                }
                map["DownStreamNodeIdList"] = tmp
            }
            if self.endBizDate != nil {
                map["EndBizDate"] = self.endBizDate!
            }
            if self.filterList != nil {
                var tmp : [Any] = []
                for k in self.filterList! {
                    tmp.append(k.toMap())
                }
                map["FilterList"] = tmp
            }
            if self.globalParamList != nil {
                var tmp : [Any] = []
                for k in self.globalParamList! {
                    tmp.append(k.toMap())
                }
                map["GlobalParamList"] = tmp
            }
            if self.maxDueTime != nil {
                map["MaxDueTime"] = self.maxDueTime!
            }
            if self.minDueTime != nil {
                map["MinDueTime"] = self.minDueTime!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.nodeIdList != nil {
                var tmp : [Any] = []
                for k in self.nodeIdList! {
                    tmp.append(k.toMap())
                }
                map["NodeIdList"] = tmp
            }
            if self.nodeParamsList != nil {
                var tmp : [Any] = []
                for k in self.nodeParamsList! {
                    tmp.append(k.toMap())
                }
                map["NodeParamsList"] = tmp
            }
            if self.parallelism != nil {
                map["Parallelism"] = self.parallelism!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            if self.startBizDate != nil {
                map["StartBizDate"] = self.startBizDate!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ContainAllDownStream"] as? Bool {
                self.containAllDownStream = value
            }
            if let value = dict["DownStreamNodeIdList"] as? [Any?] {
                var tmp : [CreateNodeSupplementRequest.CreateCommand.DownStreamNodeIdList] = []
                for v in value {
                    if v != nil {
                        var model = CreateNodeSupplementRequest.CreateCommand.DownStreamNodeIdList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.downStreamNodeIdList = tmp
            }
            if let value = dict["EndBizDate"] as? String {
                self.endBizDate = value
            }
            if let value = dict["FilterList"] as? [Any?] {
                var tmp : [CreateNodeSupplementRequest.CreateCommand.FilterList] = []
                for v in value {
                    if v != nil {
                        var model = CreateNodeSupplementRequest.CreateCommand.FilterList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.filterList = tmp
            }
            if let value = dict["GlobalParamList"] as? [Any?] {
                var tmp : [CreateNodeSupplementRequest.CreateCommand.GlobalParamList] = []
                for v in value {
                    if v != nil {
                        var model = CreateNodeSupplementRequest.CreateCommand.GlobalParamList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.globalParamList = tmp
            }
            if let value = dict["MaxDueTime"] as? String {
                self.maxDueTime = value
            }
            if let value = dict["MinDueTime"] as? String {
                self.minDueTime = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NodeIdList"] as? [Any?] {
                var tmp : [CreateNodeSupplementRequest.CreateCommand.NodeIdList] = []
                for v in value {
                    if v != nil {
                        var model = CreateNodeSupplementRequest.CreateCommand.NodeIdList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.nodeIdList = tmp
            }
            if let value = dict["NodeParamsList"] as? [Any?] {
                var tmp : [CreateNodeSupplementRequest.CreateCommand.NodeParamsList] = []
                for v in value {
                    if v != nil {
                        var model = CreateNodeSupplementRequest.CreateCommand.NodeParamsList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.nodeParamsList = tmp
            }
            if let value = dict["Parallelism"] as? Int32 {
                self.parallelism = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
            if let value = dict["StartBizDate"] as? String {
                self.startBizDate = value
            }
        }
    }
    public var createCommand: CreateNodeSupplementRequest.CreateCommand?

    public var env: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.createCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createCommand != nil {
            map["CreateCommand"] = self.createCommand?.toMap()
        }
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateCommand"] as? [String: Any?] {
            var model = CreateNodeSupplementRequest.CreateCommand()
            model.fromMap(value)
            self.createCommand = model
        }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreateNodeSupplementShrinkRequest : Tea.TeaModel {
    public var createCommandShrink: String?

    public var env: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createCommandShrink != nil {
            map["CreateCommand"] = self.createCommandShrink!
        }
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateCommand"] as? String {
            self.createCommandShrink = value
        }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreateNodeSupplementResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var submitId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.submitId != nil {
            map["SubmitId"] = self.submitId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SubmitId"] as? String {
            self.submitId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateNodeSupplementResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateNodeSupplementResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateNodeSupplementResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreatePipelineNodeRequest : Tea.TeaModel {
    public class CreatePipelineNodeCommand : Tea.TeaModel {
        public class FileInfo : Tea.TeaModel {
            public var description_: String?

            public var directory: String?

            public var fileName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.directory != nil {
                    map["Directory"] = self.directory!
                }
                if self.fileName != nil {
                    map["FileName"] = self.fileName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Directory"] as? String {
                    self.directory = value
                }
                if let value = dict["FileName"] as? String {
                    self.fileName = value
                }
            }
        }
        public var fileInfo: CreatePipelineNodeRequest.CreatePipelineNodeCommand.FileInfo?

        public var nodeType: String?

        public var pipelineName: String?

        public var pipelineType: String?

        public var projectId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.fileInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fileInfo != nil {
                map["FileInfo"] = self.fileInfo?.toMap()
            }
            if self.nodeType != nil {
                map["NodeType"] = self.nodeType!
            }
            if self.pipelineName != nil {
                map["PipelineName"] = self.pipelineName!
            }
            if self.pipelineType != nil {
                map["PipelineType"] = self.pipelineType!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FileInfo"] as? [String: Any?] {
                var model = CreatePipelineNodeRequest.CreatePipelineNodeCommand.FileInfo()
                model.fromMap(value)
                self.fileInfo = model
            }
            if let value = dict["NodeType"] as? String {
                self.nodeType = value
            }
            if let value = dict["PipelineName"] as? String {
                self.pipelineName = value
            }
            if let value = dict["PipelineType"] as? String {
                self.pipelineType = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
        }
    }
    public var createPipelineNodeCommand: CreatePipelineNodeRequest.CreatePipelineNodeCommand?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.createPipelineNodeCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createPipelineNodeCommand != nil {
            map["CreatePipelineNodeCommand"] = self.createPipelineNodeCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreatePipelineNodeCommand"] as? [String: Any?] {
            var model = CreatePipelineNodeRequest.CreatePipelineNodeCommand()
            model.fromMap(value)
            self.createPipelineNodeCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreatePipelineNodeShrinkRequest : Tea.TeaModel {
    public var createPipelineNodeCommandShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createPipelineNodeCommandShrink != nil {
            map["CreatePipelineNodeCommand"] = self.createPipelineNodeCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreatePipelineNodeCommand"] as? String {
            self.createPipelineNodeCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreatePipelineNodeResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var errorCodeList: [String]?

        public var errorMessageList: [String]?

        public var pipelineId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCodeList != nil {
                map["ErrorCodeList"] = self.errorCodeList!
            }
            if self.errorMessageList != nil {
                map["ErrorMessageList"] = self.errorMessageList!
            }
            if self.pipelineId != nil {
                map["PipelineId"] = self.pipelineId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCodeList"] as? [String] {
                self.errorCodeList = value
            }
            if let value = dict["ErrorMessageList"] as? [String] {
                self.errorMessageList = value
            }
            if let value = dict["PipelineId"] as? Int64 {
                self.pipelineId = value
            }
        }
    }
    public var code: String?

    public var data: CreatePipelineNodeResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CreatePipelineNodeResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreatePipelineNodeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreatePipelineNodeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreatePipelineNodeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateResourceRequest : Tea.TeaModel {
    public class CreateCommand : Tea.TeaModel {
        public var comment: String?

        public var computeEngineType: String?

        public var description_: String?

        public var directory: String?

        public var name: String?

        public var projectId: Int64?

        public var resourceType: String?

        public var storageAddress: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.comment != nil {
                map["Comment"] = self.comment!
            }
            if self.computeEngineType != nil {
                map["ComputeEngineType"] = self.computeEngineType!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.directory != nil {
                map["Directory"] = self.directory!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            if self.resourceType != nil {
                map["ResourceType"] = self.resourceType!
            }
            if self.storageAddress != nil {
                map["StorageAddress"] = self.storageAddress!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Comment"] as? String {
                self.comment = value
            }
            if let value = dict["ComputeEngineType"] as? String {
                self.computeEngineType = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Directory"] as? String {
                self.directory = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
            if let value = dict["ResourceType"] as? String {
                self.resourceType = value
            }
            if let value = dict["StorageAddress"] as? String {
                self.storageAddress = value
            }
        }
    }
    public var createCommand: CreateResourceRequest.CreateCommand?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.createCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createCommand != nil {
            map["CreateCommand"] = self.createCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateCommand"] as? [String: Any?] {
            var model = CreateResourceRequest.CreateCommand()
            model.fromMap(value)
            self.createCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreateResourceShrinkRequest : Tea.TeaModel {
    public var createCommandShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createCommandShrink != nil {
            map["CreateCommand"] = self.createCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateCommand"] as? String {
            self.createCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreateResourceResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Int64?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Int64 {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateResourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateResourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateResourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateRowPermissionRequest : Tea.TeaModel {
    public class CreateRowPermissionCommand : Tea.TeaModel {
        public class MappingColumns : Tea.TeaModel {
            public var columnDesc: String?

            public var columnName: String?

            public var columnType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.columnDesc != nil {
                    map["ColumnDesc"] = self.columnDesc!
                }
                if self.columnName != nil {
                    map["ColumnName"] = self.columnName!
                }
                if self.columnType != nil {
                    map["ColumnType"] = self.columnType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ColumnDesc"] as? String {
                    self.columnDesc = value
                }
                if let value = dict["ColumnName"] as? String {
                    self.columnName = value
                }
                if let value = dict["ColumnType"] as? String {
                    self.columnType = value
                }
            }
        }
        public class Rules : Tea.TeaModel {
            public class Expressions : Tea.TeaModel {
                public var mappingColumnName: String?

                public var operator_: String?

                public var subConditions: [Any]?

                public var type: String?

                public var values: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.mappingColumnName != nil {
                        map["MappingColumnName"] = self.mappingColumnName!
                    }
                    if self.operator_ != nil {
                        map["Operator"] = self.operator_!
                    }
                    if self.subConditions != nil {
                        map["SubConditions"] = self.subConditions!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    if self.values != nil {
                        map["Values"] = self.values!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["MappingColumnName"] as? String {
                        self.mappingColumnName = value
                    }
                    if let value = dict["Operator"] as? String {
                        self.operator_ = value
                    }
                    if let value = dict["SubConditions"] as? [Any] {
                        self.subConditions = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                    if let value = dict["Values"] as? [String] {
                        self.values = value
                    }
                }
            }
            public class UserMappingList : Tea.TeaModel {
                public class Accounts : Tea.TeaModel {
                    public var accountId: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.accountId != nil {
                            map["AccountId"] = self.accountId!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["AccountId"] as? String {
                            self.accountId = value
                        }
                    }
                }
                public var accountType: String?

                public var accounts: [CreateRowPermissionRequest.CreateRowPermissionCommand.Rules.UserMappingList.Accounts]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.accountType != nil {
                        map["AccountType"] = self.accountType!
                    }
                    if self.accounts != nil {
                        var tmp : [Any] = []
                        for k in self.accounts! {
                            tmp.append(k.toMap())
                        }
                        map["Accounts"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AccountType"] as? String {
                        self.accountType = value
                    }
                    if let value = dict["Accounts"] as? [Any?] {
                        var tmp : [CreateRowPermissionRequest.CreateRowPermissionCommand.Rules.UserMappingList.Accounts] = []
                        for v in value {
                            if v != nil {
                                var model = CreateRowPermissionRequest.CreateRowPermissionCommand.Rules.UserMappingList.Accounts()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.accounts = tmp
                    }
                }
            }
            public var expressions: [CreateRowPermissionRequest.CreateRowPermissionCommand.Rules.Expressions]?

            public var isDelete: Bool?

            public var ruleName: String?

            public var scopeType: String?

            public var status: Int32?

            public var userMappingList: [CreateRowPermissionRequest.CreateRowPermissionCommand.Rules.UserMappingList]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.expressions != nil {
                    var tmp : [Any] = []
                    for k in self.expressions! {
                        tmp.append(k.toMap())
                    }
                    map["Expressions"] = tmp
                }
                if self.isDelete != nil {
                    map["IsDelete"] = self.isDelete!
                }
                if self.ruleName != nil {
                    map["RuleName"] = self.ruleName!
                }
                if self.scopeType != nil {
                    map["ScopeType"] = self.scopeType!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.userMappingList != nil {
                    var tmp : [Any] = []
                    for k in self.userMappingList! {
                        tmp.append(k.toMap())
                    }
                    map["UserMappingList"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Expressions"] as? [Any?] {
                    var tmp : [CreateRowPermissionRequest.CreateRowPermissionCommand.Rules.Expressions] = []
                    for v in value {
                        if v != nil {
                            var model = CreateRowPermissionRequest.CreateRowPermissionCommand.Rules.Expressions()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.expressions = tmp
                }
                if let value = dict["IsDelete"] as? Bool {
                    self.isDelete = value
                }
                if let value = dict["RuleName"] as? String {
                    self.ruleName = value
                }
                if let value = dict["ScopeType"] as? String {
                    self.scopeType = value
                }
                if let value = dict["Status"] as? Int32 {
                    self.status = value
                }
                if let value = dict["UserMappingList"] as? [Any?] {
                    var tmp : [CreateRowPermissionRequest.CreateRowPermissionCommand.Rules.UserMappingList] = []
                    for v in value {
                        if v != nil {
                            var model = CreateRowPermissionRequest.CreateRowPermissionCommand.Rules.UserMappingList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.userMappingList = tmp
                }
            }
        }
        public class Tables : Tea.TeaModel {
            public var columnName: String?

            public var mappingColumnName: String?

            public var resourceId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.columnName != nil {
                    map["ColumnName"] = self.columnName!
                }
                if self.mappingColumnName != nil {
                    map["MappingColumnName"] = self.mappingColumnName!
                }
                if self.resourceId != nil {
                    map["ResourceId"] = self.resourceId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ColumnName"] as? String {
                    self.columnName = value
                }
                if let value = dict["MappingColumnName"] as? String {
                    self.mappingColumnName = value
                }
                if let value = dict["ResourceId"] as? String {
                    self.resourceId = value
                }
            }
        }
        public var mappingColumns: [CreateRowPermissionRequest.CreateRowPermissionCommand.MappingColumns]?

        public var rowPermissionDesc: String?

        public var rowPermissionName: String?

        public var rules: [CreateRowPermissionRequest.CreateRowPermissionCommand.Rules]?

        public var tables: [CreateRowPermissionRequest.CreateRowPermissionCommand.Tables]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.mappingColumns != nil {
                var tmp : [Any] = []
                for k in self.mappingColumns! {
                    tmp.append(k.toMap())
                }
                map["MappingColumns"] = tmp
            }
            if self.rowPermissionDesc != nil {
                map["RowPermissionDesc"] = self.rowPermissionDesc!
            }
            if self.rowPermissionName != nil {
                map["RowPermissionName"] = self.rowPermissionName!
            }
            if self.rules != nil {
                var tmp : [Any] = []
                for k in self.rules! {
                    tmp.append(k.toMap())
                }
                map["Rules"] = tmp
            }
            if self.tables != nil {
                var tmp : [Any] = []
                for k in self.tables! {
                    tmp.append(k.toMap())
                }
                map["Tables"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MappingColumns"] as? [Any?] {
                var tmp : [CreateRowPermissionRequest.CreateRowPermissionCommand.MappingColumns] = []
                for v in value {
                    if v != nil {
                        var model = CreateRowPermissionRequest.CreateRowPermissionCommand.MappingColumns()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.mappingColumns = tmp
            }
            if let value = dict["RowPermissionDesc"] as? String {
                self.rowPermissionDesc = value
            }
            if let value = dict["RowPermissionName"] as? String {
                self.rowPermissionName = value
            }
            if let value = dict["Rules"] as? [Any?] {
                var tmp : [CreateRowPermissionRequest.CreateRowPermissionCommand.Rules] = []
                for v in value {
                    if v != nil {
                        var model = CreateRowPermissionRequest.CreateRowPermissionCommand.Rules()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.rules = tmp
            }
            if let value = dict["Tables"] as? [Any?] {
                var tmp : [CreateRowPermissionRequest.CreateRowPermissionCommand.Tables] = []
                for v in value {
                    if v != nil {
                        var model = CreateRowPermissionRequest.CreateRowPermissionCommand.Tables()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tables = tmp
            }
        }
    }
    public var createRowPermissionCommand: CreateRowPermissionRequest.CreateRowPermissionCommand?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.createRowPermissionCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createRowPermissionCommand != nil {
            map["CreateRowPermissionCommand"] = self.createRowPermissionCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateRowPermissionCommand"] as? [String: Any?] {
            var model = CreateRowPermissionRequest.CreateRowPermissionCommand()
            model.fromMap(value)
            self.createRowPermissionCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreateRowPermissionShrinkRequest : Tea.TeaModel {
    public var createRowPermissionCommandShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createRowPermissionCommandShrink != nil {
            map["CreateRowPermissionCommand"] = self.createRowPermissionCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateRowPermissionCommand"] as? String {
            self.createRowPermissionCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreateRowPermissionResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Int64?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Int64 {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateRowPermissionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateRowPermissionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateRowPermissionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateStreamBatchJobMappingRequest : Tea.TeaModel {
    public class StreamBatchJobMappingCreateCommand : Tea.TeaModel {
        public var clusterId: String?

        public var description_: String?

        public var directory: String?

        public var engineVersion: String?

        public var env: String?

        public var fileName: String?

        public var fileType: String?

        public var projectId: Int64?

        public var queueName: String?

        public var vvpClusterType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.clusterId != nil {
                map["ClusterId"] = self.clusterId!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.directory != nil {
                map["Directory"] = self.directory!
            }
            if self.engineVersion != nil {
                map["EngineVersion"] = self.engineVersion!
            }
            if self.env != nil {
                map["Env"] = self.env!
            }
            if self.fileName != nil {
                map["FileName"] = self.fileName!
            }
            if self.fileType != nil {
                map["FileType"] = self.fileType!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            if self.queueName != nil {
                map["QueueName"] = self.queueName!
            }
            if self.vvpClusterType != nil {
                map["VvpClusterType"] = self.vvpClusterType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ClusterId"] as? String {
                self.clusterId = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Directory"] as? String {
                self.directory = value
            }
            if let value = dict["EngineVersion"] as? String {
                self.engineVersion = value
            }
            if let value = dict["Env"] as? String {
                self.env = value
            }
            if let value = dict["FileName"] as? String {
                self.fileName = value
            }
            if let value = dict["FileType"] as? String {
                self.fileType = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
            if let value = dict["QueueName"] as? String {
                self.queueName = value
            }
            if let value = dict["VvpClusterType"] as? String {
                self.vvpClusterType = value
            }
        }
    }
    public var opTenantId: Int64?

    public var streamBatchJobMappingCreateCommand: CreateStreamBatchJobMappingRequest.StreamBatchJobMappingCreateCommand?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.streamBatchJobMappingCreateCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.streamBatchJobMappingCreateCommand != nil {
            map["StreamBatchJobMappingCreateCommand"] = self.streamBatchJobMappingCreateCommand?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["StreamBatchJobMappingCreateCommand"] as? [String: Any?] {
            var model = CreateStreamBatchJobMappingRequest.StreamBatchJobMappingCreateCommand()
            model.fromMap(value)
            self.streamBatchJobMappingCreateCommand = model
        }
    }
}

public class CreateStreamBatchJobMappingShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var streamBatchJobMappingCreateCommandShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.streamBatchJobMappingCreateCommandShrink != nil {
            map["StreamBatchJobMappingCreateCommand"] = self.streamBatchJobMappingCreateCommandShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["StreamBatchJobMappingCreateCommand"] as? String {
            self.streamBatchJobMappingCreateCommandShrink = value
        }
    }
}

public class CreateStreamBatchJobMappingResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var fileId: String?

        public var jobId: Int64?

        public var url: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fileId != nil {
                map["FileId"] = self.fileId!
            }
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            if self.url != nil {
                map["Url"] = self.url!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FileId"] as? String {
                self.fileId = value
            }
            if let value = dict["JobId"] as? Int64 {
                self.jobId = value
            }
            if let value = dict["Url"] as? String {
                self.url = value
            }
        }
    }
    public var code: String?

    public var data: CreateStreamBatchJobMappingResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = CreateStreamBatchJobMappingResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateStreamBatchJobMappingResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateStreamBatchJobMappingResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateStreamBatchJobMappingResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateUdfRequest : Tea.TeaModel {
    public class CreateCommand : Tea.TeaModel {
        public var category: Int32?

        public var className: String?

        public var commandHelp: String?

        public var comment: String?

        public var computeEngineType: String?

        public var description_: String?

        public var directory: String?

        public var name: String?

        public var projectId: Int64?

        public var refResourceIdList: [Int64]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.category != nil {
                map["Category"] = self.category!
            }
            if self.className != nil {
                map["ClassName"] = self.className!
            }
            if self.commandHelp != nil {
                map["CommandHelp"] = self.commandHelp!
            }
            if self.comment != nil {
                map["Comment"] = self.comment!
            }
            if self.computeEngineType != nil {
                map["ComputeEngineType"] = self.computeEngineType!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.directory != nil {
                map["Directory"] = self.directory!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            if self.refResourceIdList != nil {
                map["RefResourceIdList"] = self.refResourceIdList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Category"] as? Int32 {
                self.category = value
            }
            if let value = dict["ClassName"] as? String {
                self.className = value
            }
            if let value = dict["CommandHelp"] as? String {
                self.commandHelp = value
            }
            if let value = dict["Comment"] as? String {
                self.comment = value
            }
            if let value = dict["ComputeEngineType"] as? String {
                self.computeEngineType = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Directory"] as? String {
                self.directory = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
            if let value = dict["RefResourceIdList"] as? [Int64] {
                self.refResourceIdList = value
            }
        }
    }
    public var createCommand: CreateUdfRequest.CreateCommand?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.createCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createCommand != nil {
            map["CreateCommand"] = self.createCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateCommand"] as? [String: Any?] {
            var model = CreateUdfRequest.CreateCommand()
            model.fromMap(value)
            self.createCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreateUdfShrinkRequest : Tea.TeaModel {
    public var createCommandShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createCommandShrink != nil {
            map["CreateCommand"] = self.createCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateCommand"] as? String {
            self.createCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreateUdfResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Int64?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Int64 {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class CreateUdfResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateUdfResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateUdfResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateUserGroupRequest : Tea.TeaModel {
    public class CreateCommand : Tea.TeaModel {
        public var active: Bool?

        public var adminUserIdList: [String]?

        public var description_: String?

        public var name: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.active != nil {
                map["Active"] = self.active!
            }
            if self.adminUserIdList != nil {
                map["AdminUserIdList"] = self.adminUserIdList!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Active"] as? Bool {
                self.active = value
            }
            if let value = dict["AdminUserIdList"] as? [String] {
                self.adminUserIdList = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
        }
    }
    public var createCommand: CreateUserGroupRequest.CreateCommand?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.createCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createCommand != nil {
            map["CreateCommand"] = self.createCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateCommand"] as? [String: Any?] {
            var model = CreateUserGroupRequest.CreateCommand()
            model.fromMap(value)
            self.createCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreateUserGroupShrinkRequest : Tea.TeaModel {
    public var createCommandShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createCommandShrink != nil {
            map["CreateCommand"] = self.createCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateCommand"] as? String {
            self.createCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class CreateUserGroupResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var userGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.userGroupId != nil {
            map["UserGroupId"] = self.userGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["UserGroupId"] as? String {
            self.userGroupId = value
        }
    }
}

public class CreateUserGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateUserGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateUserGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteAdHocFileRequest : Tea.TeaModel {
    public var fileId: Int64?

    public var opTenantId: Int64?

    public var projectId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fileId != nil {
            map["FileId"] = self.fileId!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FileId"] as? Int64 {
            self.fileId = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
    }
}

public class DeleteAdHocFileResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteAdHocFileResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteAdHocFileResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteAdHocFileResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteBatchTaskRequest : Tea.TeaModel {
    public class DeleteCommand : Tea.TeaModel {
        public var comment: String?

        public var fileId: Int64?

        public var projectId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.comment != nil {
                map["Comment"] = self.comment!
            }
            if self.fileId != nil {
                map["FileId"] = self.fileId!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Comment"] as? String {
                self.comment = value
            }
            if let value = dict["FileId"] as? Int64 {
                self.fileId = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
        }
    }
    public var deleteCommand: DeleteBatchTaskRequest.DeleteCommand?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.deleteCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deleteCommand != nil {
            map["DeleteCommand"] = self.deleteCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeleteCommand"] as? [String: Any?] {
            var model = DeleteBatchTaskRequest.DeleteCommand()
            model.fromMap(value)
            self.deleteCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class DeleteBatchTaskShrinkRequest : Tea.TeaModel {
    public var deleteCommandShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deleteCommandShrink != nil {
            map["DeleteCommand"] = self.deleteCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeleteCommand"] as? String {
            self.deleteCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class DeleteBatchTaskResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteBatchTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteBatchTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteBatchTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteBizEntityRequest : Tea.TeaModel {
    public var bizUnitId: Int64?

    public var id: Int64?

    public var opTenantId: Int64?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizUnitId != nil {
            map["BizUnitId"] = self.bizUnitId!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizUnitId"] as? Int64 {
            self.bizUnitId = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class DeleteBizEntityResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteBizEntityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteBizEntityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteBizEntityResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteBizUnitRequest : Tea.TeaModel {
    public var id: Int64?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class DeleteBizUnitResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteBizUnitResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteBizUnitResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteBizUnitResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteComputeSourceRequest : Tea.TeaModel {
    public var id: Int64?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class DeleteComputeSourceResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteComputeSourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteComputeSourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteComputeSourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDataDomainRequest : Tea.TeaModel {
    public var bizUnitId: Int64?

    public var id: Int64?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizUnitId != nil {
            map["BizUnitId"] = self.bizUnitId!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizUnitId"] as? Int64 {
            self.bizUnitId = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class DeleteDataDomainResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteDataDomainResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDataDomainResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDataDomainResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDataSourceRequest : Tea.TeaModel {
    public class DeleteCommand : Tea.TeaModel {
        public var mode: String?

        public var prodDataSourceId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.mode != nil {
                map["Mode"] = self.mode!
            }
            if self.prodDataSourceId != nil {
                map["ProdDataSourceId"] = self.prodDataSourceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Mode"] as? String {
                self.mode = value
            }
            if let value = dict["ProdDataSourceId"] as? Int64 {
                self.prodDataSourceId = value
            }
        }
    }
    public var deleteCommand: DeleteDataSourceRequest.DeleteCommand?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.deleteCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deleteCommand != nil {
            map["DeleteCommand"] = self.deleteCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeleteCommand"] as? [String: Any?] {
            var model = DeleteDataSourceRequest.DeleteCommand()
            model.fromMap(value)
            self.deleteCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class DeleteDataSourceShrinkRequest : Tea.TeaModel {
    public var deleteCommandShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deleteCommandShrink != nil {
            map["DeleteCommand"] = self.deleteCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeleteCommand"] as? String {
            self.deleteCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class DeleteDataSourceResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteDataSourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDataSourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDataSourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDirectoryRequest : Tea.TeaModel {
    public var fileId: Int64?

    public var opTenantId: Int64?

    public var projectId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fileId != nil {
            map["FileId"] = self.fileId!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FileId"] as? Int64 {
            self.fileId = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
    }
}

public class DeleteDirectoryResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteDirectoryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDirectoryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDirectoryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteResourceRequest : Tea.TeaModel {
    public var comment: String?

    public var id: Int64?

    public var opTenantId: Int64?

    public var projectId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.comment != nil {
            map["Comment"] = self.comment!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Comment"] as? String {
            self.comment = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
    }
}

public class DeleteResourceResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteResourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteResourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteResourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteRowPermissionRequest : Tea.TeaModel {
    public class DeleteRowPermissionCommand : Tea.TeaModel {
        public var rowPermissionId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.rowPermissionId != nil {
                map["RowPermissionId"] = self.rowPermissionId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["RowPermissionId"] as? Int64 {
                self.rowPermissionId = value
            }
        }
    }
    public var deleteRowPermissionCommand: DeleteRowPermissionRequest.DeleteRowPermissionCommand?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.deleteRowPermissionCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deleteRowPermissionCommand != nil {
            map["DeleteRowPermissionCommand"] = self.deleteRowPermissionCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeleteRowPermissionCommand"] as? [String: Any?] {
            var model = DeleteRowPermissionRequest.DeleteRowPermissionCommand()
            model.fromMap(value)
            self.deleteRowPermissionCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class DeleteRowPermissionShrinkRequest : Tea.TeaModel {
    public var deleteRowPermissionCommandShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deleteRowPermissionCommandShrink != nil {
            map["DeleteRowPermissionCommand"] = self.deleteRowPermissionCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeleteRowPermissionCommand"] as? String {
            self.deleteRowPermissionCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class DeleteRowPermissionResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteRowPermissionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteRowPermissionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteRowPermissionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteUdfRequest : Tea.TeaModel {
    public var comment: String?

    public var id: Int64?

    public var opTenantId: Int64?

    public var projectId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.comment != nil {
            map["Comment"] = self.comment!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Comment"] as? String {
            self.comment = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
    }
}

public class DeleteUdfResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteUdfResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteUdfResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteUdfResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteUserGroupRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var userGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.userGroupId != nil {
            map["UserGroupId"] = self.userGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UserGroupId"] as? String {
            self.userGroupId = value
        }
    }
}

public class DeleteUserGroupResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class DeleteUserGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteUserGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteUserGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ExecuteAdHocTaskRequest : Tea.TeaModel {
    public class ExecuteCommand : Tea.TeaModel {
        public class ParamList : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var code: String?

        public var dataSourceCatalog: String?

        public var dataSourceId: Int64?

        public var dataSourceSchema: String?

        public var operatorType: String?

        public var paramList: [ExecuteAdHocTaskRequest.ExecuteCommand.ParamList]?

        public var projectId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.dataSourceCatalog != nil {
                map["DataSourceCatalog"] = self.dataSourceCatalog!
            }
            if self.dataSourceId != nil {
                map["DataSourceId"] = self.dataSourceId!
            }
            if self.dataSourceSchema != nil {
                map["DataSourceSchema"] = self.dataSourceSchema!
            }
            if self.operatorType != nil {
                map["OperatorType"] = self.operatorType!
            }
            if self.paramList != nil {
                var tmp : [Any] = []
                for k in self.paramList! {
                    tmp.append(k.toMap())
                }
                map["ParamList"] = tmp
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? String {
                self.code = value
            }
            if let value = dict["DataSourceCatalog"] as? String {
                self.dataSourceCatalog = value
            }
            if let value = dict["DataSourceId"] as? Int64 {
                self.dataSourceId = value
            }
            if let value = dict["DataSourceSchema"] as? String {
                self.dataSourceSchema = value
            }
            if let value = dict["OperatorType"] as? String {
                self.operatorType = value
            }
            if let value = dict["ParamList"] as? [Any?] {
                var tmp : [ExecuteAdHocTaskRequest.ExecuteCommand.ParamList] = []
                for v in value {
                    if v != nil {
                        var model = ExecuteAdHocTaskRequest.ExecuteCommand.ParamList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.paramList = tmp
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
        }
    }
    public var executeCommand: ExecuteAdHocTaskRequest.ExecuteCommand?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.executeCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.executeCommand != nil {
            map["ExecuteCommand"] = self.executeCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ExecuteCommand"] as? [String: Any?] {
            var model = ExecuteAdHocTaskRequest.ExecuteCommand()
            model.fromMap(value)
            self.executeCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ExecuteAdHocTaskShrinkRequest : Tea.TeaModel {
    public var executeCommandShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.executeCommandShrink != nil {
            map["ExecuteCommand"] = self.executeCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ExecuteCommand"] as? String {
            self.executeCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ExecuteAdHocTaskResponseBody : Tea.TeaModel {
    public class ExecuteResult : Tea.TeaModel {
        public var subTaskCount: Int32?

        public var taskId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.subTaskCount != nil {
                map["SubTaskCount"] = self.subTaskCount!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SubTaskCount"] as? Int32 {
                self.subTaskCount = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
        }
    }
    public var code: String?

    public var executeResult: ExecuteAdHocTaskResponseBody.ExecuteResult?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.executeResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.executeResult != nil {
            map["ExecuteResult"] = self.executeResult?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["ExecuteResult"] as? [String: Any?] {
            var model = ExecuteAdHocTaskResponseBody.ExecuteResult()
            model.fromMap(value)
            self.executeResult = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ExecuteAdHocTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ExecuteAdHocTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ExecuteAdHocTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ExecuteManualNodeRequest : Tea.TeaModel {
    public class ExecuteCommand : Tea.TeaModel {
        public class ParamList : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var endBizDate: String?

        public var flowName: String?

        public var nodeId: String?

        public var paramList: [ExecuteManualNodeRequest.ExecuteCommand.ParamList]?

        public var projectId: Int64?

        public var startBizDate: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.endBizDate != nil {
                map["EndBizDate"] = self.endBizDate!
            }
            if self.flowName != nil {
                map["FlowName"] = self.flowName!
            }
            if self.nodeId != nil {
                map["NodeId"] = self.nodeId!
            }
            if self.paramList != nil {
                var tmp : [Any] = []
                for k in self.paramList! {
                    tmp.append(k.toMap())
                }
                map["ParamList"] = tmp
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            if self.startBizDate != nil {
                map["StartBizDate"] = self.startBizDate!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EndBizDate"] as? String {
                self.endBizDate = value
            }
            if let value = dict["FlowName"] as? String {
                self.flowName = value
            }
            if let value = dict["NodeId"] as? String {
                self.nodeId = value
            }
            if let value = dict["ParamList"] as? [Any?] {
                var tmp : [ExecuteManualNodeRequest.ExecuteCommand.ParamList] = []
                for v in value {
                    if v != nil {
                        var model = ExecuteManualNodeRequest.ExecuteCommand.ParamList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.paramList = tmp
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
            if let value = dict["StartBizDate"] as? String {
                self.startBizDate = value
            }
        }
    }
    public var env: String?

    public var executeCommand: ExecuteManualNodeRequest.ExecuteCommand?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.executeCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.executeCommand != nil {
            map["ExecuteCommand"] = self.executeCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["ExecuteCommand"] as? [String: Any?] {
            var model = ExecuteManualNodeRequest.ExecuteCommand()
            model.fromMap(value)
            self.executeCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ExecuteManualNodeShrinkRequest : Tea.TeaModel {
    public var env: String?

    public var executeCommandShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.executeCommandShrink != nil {
            map["ExecuteCommand"] = self.executeCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["ExecuteCommand"] as? String {
            self.executeCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ExecuteManualNodeResponseBody : Tea.TeaModel {
    public var code: String?

    public var flowId: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.flowId != nil {
            map["FlowId"] = self.flowId!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["FlowId"] as? String {
            self.flowId = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ExecuteManualNodeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ExecuteManualNodeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ExecuteManualNodeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class FixDataRequest : Tea.TeaModel {
    public class FixDataCommand : Tea.TeaModel {
        public class DownStreamInstanceIdList : Tea.TeaModel {
            public var fieldInstanceIdList: [String]?

            public var id: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fieldInstanceIdList != nil {
                    map["FieldInstanceIdList"] = self.fieldInstanceIdList!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FieldInstanceIdList"] as? [String] {
                    self.fieldInstanceIdList = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
            }
        }
        public class RootInstanceId : Tea.TeaModel {
            public var fieldInstanceIdList: [String]?

            public var id: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fieldInstanceIdList != nil {
                    map["FieldInstanceIdList"] = self.fieldInstanceIdList!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FieldInstanceIdList"] as? [String] {
                    self.fieldInstanceIdList = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
            }
        }
        public var containRootInstance: Bool?

        public var downStreamInstanceIdList: [FixDataRequest.FixDataCommand.DownStreamInstanceIdList]?

        public var downstreamRange: String?

        public var forceRerun: Bool?

        public var projectId: Int64?

        public var rootInstanceId: FixDataRequest.FixDataCommand.RootInstanceId?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.rootInstanceId?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.containRootInstance != nil {
                map["ContainRootInstance"] = self.containRootInstance!
            }
            if self.downStreamInstanceIdList != nil {
                var tmp : [Any] = []
                for k in self.downStreamInstanceIdList! {
                    tmp.append(k.toMap())
                }
                map["DownStreamInstanceIdList"] = tmp
            }
            if self.downstreamRange != nil {
                map["DownstreamRange"] = self.downstreamRange!
            }
            if self.forceRerun != nil {
                map["ForceRerun"] = self.forceRerun!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            if self.rootInstanceId != nil {
                map["RootInstanceId"] = self.rootInstanceId?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ContainRootInstance"] as? Bool {
                self.containRootInstance = value
            }
            if let value = dict["DownStreamInstanceIdList"] as? [Any?] {
                var tmp : [FixDataRequest.FixDataCommand.DownStreamInstanceIdList] = []
                for v in value {
                    if v != nil {
                        var model = FixDataRequest.FixDataCommand.DownStreamInstanceIdList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.downStreamInstanceIdList = tmp
            }
            if let value = dict["DownstreamRange"] as? String {
                self.downstreamRange = value
            }
            if let value = dict["ForceRerun"] as? Bool {
                self.forceRerun = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
            if let value = dict["RootInstanceId"] as? [String: Any?] {
                var model = FixDataRequest.FixDataCommand.RootInstanceId()
                model.fromMap(value)
                self.rootInstanceId = model
            }
        }
    }
    public var env: String?

    public var fixDataCommand: FixDataRequest.FixDataCommand?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.fixDataCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.fixDataCommand != nil {
            map["FixDataCommand"] = self.fixDataCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["FixDataCommand"] as? [String: Any?] {
            var model = FixDataRequest.FixDataCommand()
            model.fromMap(value)
            self.fixDataCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class FixDataShrinkRequest : Tea.TeaModel {
    public var env: String?

    public var fixDataCommandShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.fixDataCommandShrink != nil {
            map["FixDataCommand"] = self.fixDataCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["FixDataCommand"] as? String {
            self.fixDataCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class FixDataResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var submitId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.submitId != nil {
            map["SubmitId"] = self.submitId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SubmitId"] as? String {
            self.submitId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class FixDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: FixDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = FixDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetAccountByRowPermissionIdRequest : Tea.TeaModel {
    public class GetAccountByRowPermissionIdQuery : Tea.TeaModel {
        public var rowPermissionId: Int64?

        public var ruleIds: [Int64]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.rowPermissionId != nil {
                map["RowPermissionId"] = self.rowPermissionId!
            }
            if self.ruleIds != nil {
                map["RuleIds"] = self.ruleIds!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["RowPermissionId"] as? Int64 {
                self.rowPermissionId = value
            }
            if let value = dict["RuleIds"] as? [Int64] {
                self.ruleIds = value
            }
        }
    }
    public var getAccountByRowPermissionIdQuery: GetAccountByRowPermissionIdRequest.GetAccountByRowPermissionIdQuery?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.getAccountByRowPermissionIdQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.getAccountByRowPermissionIdQuery != nil {
            map["GetAccountByRowPermissionIdQuery"] = self.getAccountByRowPermissionIdQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GetAccountByRowPermissionIdQuery"] as? [String: Any?] {
            var model = GetAccountByRowPermissionIdRequest.GetAccountByRowPermissionIdQuery()
            model.fromMap(value)
            self.getAccountByRowPermissionIdQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class GetAccountByRowPermissionIdShrinkRequest : Tea.TeaModel {
    public var getAccountByRowPermissionIdQueryShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.getAccountByRowPermissionIdQueryShrink != nil {
            map["GetAccountByRowPermissionIdQuery"] = self.getAccountByRowPermissionIdQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GetAccountByRowPermissionIdQuery"] as? String {
            self.getAccountByRowPermissionIdQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class GetAccountByRowPermissionIdResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class UserMappingList : Tea.TeaModel {
            public class Accounts : Tea.TeaModel {
                public var accountId: String?

                public var accountName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.accountId != nil {
                        map["AccountId"] = self.accountId!
                    }
                    if self.accountName != nil {
                        map["AccountName"] = self.accountName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AccountId"] as? String {
                        self.accountId = value
                    }
                    if let value = dict["AccountName"] as? String {
                        self.accountName = value
                    }
                }
            }
            public var accountType: String?

            public var accounts: [GetAccountByRowPermissionIdResponseBody.Data.UserMappingList.Accounts]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.accountType != nil {
                    map["AccountType"] = self.accountType!
                }
                if self.accounts != nil {
                    var tmp : [Any] = []
                    for k in self.accounts! {
                        tmp.append(k.toMap())
                    }
                    map["Accounts"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AccountType"] as? String {
                    self.accountType = value
                }
                if let value = dict["Accounts"] as? [Any?] {
                    var tmp : [GetAccountByRowPermissionIdResponseBody.Data.UserMappingList.Accounts] = []
                    for v in value {
                        if v != nil {
                            var model = GetAccountByRowPermissionIdResponseBody.Data.UserMappingList.Accounts()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.accounts = tmp
                }
            }
        }
        public var id: Int64?

        public var userMappingList: [GetAccountByRowPermissionIdResponseBody.Data.UserMappingList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.userMappingList != nil {
                var tmp : [Any] = []
                for k in self.userMappingList! {
                    tmp.append(k.toMap())
                }
                map["UserMappingList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["UserMappingList"] as? [Any?] {
                var tmp : [GetAccountByRowPermissionIdResponseBody.Data.UserMappingList] = []
                for v in value {
                    if v != nil {
                        var model = GetAccountByRowPermissionIdResponseBody.Data.UserMappingList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.userMappingList = tmp
            }
        }
    }
    public var code: String?

    public var data: [GetAccountByRowPermissionIdResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [GetAccountByRowPermissionIdResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = GetAccountByRowPermissionIdResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetAccountByRowPermissionIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetAccountByRowPermissionIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetAccountByRowPermissionIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetAdHocFileRequest : Tea.TeaModel {
    public var fileId: Int64?

    public var opTenantId: Int64?

    public var projectId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fileId != nil {
            map["FileId"] = self.fileId!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FileId"] as? Int64 {
            self.fileId = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
    }
}

public class GetAdHocFileResponseBody : Tea.TeaModel {
    public class FileInfo : Tea.TeaModel {
        public var content: String?

        public var creator: String?

        public var directory: String?

        public var id: Int64?

        public var lastModifier: String?

        public var name: String?

        public var projectId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.creator != nil {
                map["Creator"] = self.creator!
            }
            if self.directory != nil {
                map["Directory"] = self.directory!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.lastModifier != nil {
                map["LastModifier"] = self.lastModifier!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["Creator"] as? String {
                self.creator = value
            }
            if let value = dict["Directory"] as? String {
                self.directory = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["LastModifier"] as? String {
                self.lastModifier = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
        }
    }
    public var code: String?

    public var fileInfo: GetAdHocFileResponseBody.FileInfo?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.fileInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.fileInfo != nil {
            map["FileInfo"] = self.fileInfo?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["FileInfo"] as? [String: Any?] {
            var model = GetAdHocFileResponseBody.FileInfo()
            model.fromMap(value)
            self.fileInfo = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetAdHocFileResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetAdHocFileResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetAdHocFileResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetAdHocTaskLogRequest : Tea.TeaModel {
    public var offset: Int32?

    public var opTenantId: Int64?

    public var projectId: Int64?

    public var subTaskId: Int32?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.offset != nil {
            map["Offset"] = self.offset!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        if self.subTaskId != nil {
            map["SubTaskId"] = self.subTaskId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Offset"] as? Int32 {
            self.offset = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
        if let value = dict["SubTaskId"] as? Int32 {
            self.subTaskId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class GetAdHocTaskLogResponseBody : Tea.TeaModel {
    public class LogInfo : Tea.TeaModel {
        public var content: String?

        public var hasNext: Bool?

        public var hasResult: Bool?

        public var nextOffset: Int32?

        public var subTaskId: Int32?

        public var taskId: String?

        public var taskStatus: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.hasNext != nil {
                map["HasNext"] = self.hasNext!
            }
            if self.hasResult != nil {
                map["HasResult"] = self.hasResult!
            }
            if self.nextOffset != nil {
                map["NextOffset"] = self.nextOffset!
            }
            if self.subTaskId != nil {
                map["SubTaskId"] = self.subTaskId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.taskStatus != nil {
                map["TaskStatus"] = self.taskStatus!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["HasNext"] as? Bool {
                self.hasNext = value
            }
            if let value = dict["HasResult"] as? Bool {
                self.hasResult = value
            }
            if let value = dict["NextOffset"] as? Int32 {
                self.nextOffset = value
            }
            if let value = dict["SubTaskId"] as? Int32 {
                self.subTaskId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TaskStatus"] as? String {
                self.taskStatus = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var logInfo: GetAdHocTaskLogResponseBody.LogInfo?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.logInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.logInfo != nil {
            map["LogInfo"] = self.logInfo?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["LogInfo"] as? [String: Any?] {
            var model = GetAdHocTaskLogResponseBody.LogInfo()
            model.fromMap(value)
            self.logInfo = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetAdHocTaskLogResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetAdHocTaskLogResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetAdHocTaskLogResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetAdHocTaskResultRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var projectId: Int64?

    public var subTaskId: Int32?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        if self.subTaskId != nil {
            map["SubTaskId"] = self.subTaskId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
        if let value = dict["SubTaskId"] as? Int32 {
            self.subTaskId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class GetAdHocTaskResultResponseBody : Tea.TeaModel {
    public class ExecuteResult : Tea.TeaModel {
        public var result: String?

        public var scheduleTaskId: String?

        public var taskId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.result != nil {
                map["Result"] = self.result!
            }
            if self.scheduleTaskId != nil {
                map["ScheduleTaskId"] = self.scheduleTaskId!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Result"] as? String {
                self.result = value
            }
            if let value = dict["ScheduleTaskId"] as? String {
                self.scheduleTaskId = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
        }
    }
    public var code: String?

    public var executeResult: GetAdHocTaskResultResponseBody.ExecuteResult?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.executeResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.executeResult != nil {
            map["ExecuteResult"] = self.executeResult?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["ExecuteResult"] as? [String: Any?] {
            var model = GetAdHocTaskResultResponseBody.ExecuteResult()
            model.fromMap(value)
            self.executeResult = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetAdHocTaskResultResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetAdHocTaskResultResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetAdHocTaskResultResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetAlertEventRequest : Tea.TeaModel {
    public var id: Int64?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class GetAlertEventResponseBody : Tea.TeaModel {
    public class AlertEventInfo : Tea.TeaModel {
        public class AlertObject : Tea.TeaModel {
            public var name: String?

            public var sourceSystemType: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.sourceSystemType != nil {
                    map["SourceSystemType"] = self.sourceSystemType!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["SourceSystemType"] as? String {
                    self.sourceSystemType = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public class AlertReason : Tea.TeaModel {
            public class AlertReasonParamList : Tea.TeaModel {
                public var key: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.key != nil {
                        map["Key"] = self.key!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Key"] as? String {
                        self.key = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var alertReasonParamList: [GetAlertEventResponseBody.AlertEventInfo.AlertReason.AlertReasonParamList]?

            public var bizDate: String?

            public var type: String?

            public var uniqueKey: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alertReasonParamList != nil {
                    var tmp : [Any] = []
                    for k in self.alertReasonParamList! {
                        tmp.append(k.toMap())
                    }
                    map["AlertReasonParamList"] = tmp
                }
                if self.bizDate != nil {
                    map["BizDate"] = self.bizDate!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.uniqueKey != nil {
                    map["UniqueKey"] = self.uniqueKey!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AlertReasonParamList"] as? [Any?] {
                    var tmp : [GetAlertEventResponseBody.AlertEventInfo.AlertReason.AlertReasonParamList] = []
                    for v in value {
                        if v != nil {
                            var model = GetAlertEventResponseBody.AlertEventInfo.AlertReason.AlertReasonParamList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.alertReasonParamList = tmp
                }
                if let value = dict["BizDate"] as? String {
                    self.bizDate = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["UniqueKey"] as? String {
                    self.uniqueKey = value
                }
            }
        }
        public class AlertReceiverList : Tea.TeaModel {
            public class UserList : Tea.TeaModel {
                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public var alertChannelTypeList: [String]?

            public var customAlertChannelIdList: [String]?

            public var onCallTableName: String?

            public var type: String?

            public var userList: [GetAlertEventResponseBody.AlertEventInfo.AlertReceiverList.UserList]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alertChannelTypeList != nil {
                    map["AlertChannelTypeList"] = self.alertChannelTypeList!
                }
                if self.customAlertChannelIdList != nil {
                    map["CustomAlertChannelIdList"] = self.customAlertChannelIdList!
                }
                if self.onCallTableName != nil {
                    map["OnCallTableName"] = self.onCallTableName!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                if self.userList != nil {
                    var tmp : [Any] = []
                    for k in self.userList! {
                        tmp.append(k.toMap())
                    }
                    map["UserList"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AlertChannelTypeList"] as? [String] {
                    self.alertChannelTypeList = value
                }
                if let value = dict["CustomAlertChannelIdList"] as? [String] {
                    self.customAlertChannelIdList = value
                }
                if let value = dict["OnCallTableName"] as? String {
                    self.onCallTableName = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
                if let value = dict["UserList"] as? [Any?] {
                    var tmp : [GetAlertEventResponseBody.AlertEventInfo.AlertReceiverList.UserList] = []
                    for v in value {
                        if v != nil {
                            var model = GetAlertEventResponseBody.AlertEventInfo.AlertReceiverList.UserList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.userList = tmp
                }
            }
        }
        public class BelongProject : Tea.TeaModel {
            public var bizName: String?

            public var projectName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bizName != nil {
                    map["BizName"] = self.bizName!
                }
                if self.projectName != nil {
                    map["ProjectName"] = self.projectName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BizName"] as? String {
                    self.bizName = value
                }
                if let value = dict["ProjectName"] as? String {
                    self.projectName = value
                }
            }
        }
        public class UrlConfig : Tea.TeaModel {
            public var alertConfigUrl: String?

            public var logUrl: String?

            public var objectUrl: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alertConfigUrl != nil {
                    map["AlertConfigUrl"] = self.alertConfigUrl!
                }
                if self.logUrl != nil {
                    map["LogUrl"] = self.logUrl!
                }
                if self.objectUrl != nil {
                    map["ObjectUrl"] = self.objectUrl!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AlertConfigUrl"] as? String {
                    self.alertConfigUrl = value
                }
                if let value = dict["LogUrl"] as? String {
                    self.logUrl = value
                }
                if let value = dict["ObjectUrl"] as? String {
                    self.objectUrl = value
                }
            }
        }
        public var alertFrequency: String?

        public var alertObject: GetAlertEventResponseBody.AlertEventInfo.AlertObject?

        public var alertReason: GetAlertEventResponseBody.AlertEventInfo.AlertReason?

        public var alertReceiverList: [GetAlertEventResponseBody.AlertEventInfo.AlertReceiverList]?

        public var belongProject: GetAlertEventResponseBody.AlertEventInfo.BelongProject?

        public var doNotDisturbEndTime: String?

        public var firstAlertTime: String?

        public var id: Int64?

        public var latestAlertTime: String?

        public var status: String?

        public var totalAlertTimes: Int64?

        public var urlConfig: GetAlertEventResponseBody.AlertEventInfo.UrlConfig?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.alertObject?.validate()
            try self.alertReason?.validate()
            try self.belongProject?.validate()
            try self.urlConfig?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alertFrequency != nil {
                map["AlertFrequency"] = self.alertFrequency!
            }
            if self.alertObject != nil {
                map["AlertObject"] = self.alertObject?.toMap()
            }
            if self.alertReason != nil {
                map["AlertReason"] = self.alertReason?.toMap()
            }
            if self.alertReceiverList != nil {
                var tmp : [Any] = []
                for k in self.alertReceiverList! {
                    tmp.append(k.toMap())
                }
                map["AlertReceiverList"] = tmp
            }
            if self.belongProject != nil {
                map["BelongProject"] = self.belongProject?.toMap()
            }
            if self.doNotDisturbEndTime != nil {
                map["DoNotDisturbEndTime"] = self.doNotDisturbEndTime!
            }
            if self.firstAlertTime != nil {
                map["FirstAlertTime"] = self.firstAlertTime!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.latestAlertTime != nil {
                map["LatestAlertTime"] = self.latestAlertTime!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.totalAlertTimes != nil {
                map["TotalAlertTimes"] = self.totalAlertTimes!
            }
            if self.urlConfig != nil {
                map["UrlConfig"] = self.urlConfig?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AlertFrequency"] as? String {
                self.alertFrequency = value
            }
            if let value = dict["AlertObject"] as? [String: Any?] {
                var model = GetAlertEventResponseBody.AlertEventInfo.AlertObject()
                model.fromMap(value)
                self.alertObject = model
            }
            if let value = dict["AlertReason"] as? [String: Any?] {
                var model = GetAlertEventResponseBody.AlertEventInfo.AlertReason()
                model.fromMap(value)
                self.alertReason = model
            }
            if let value = dict["AlertReceiverList"] as? [Any?] {
                var tmp : [GetAlertEventResponseBody.AlertEventInfo.AlertReceiverList] = []
                for v in value {
                    if v != nil {
                        var model = GetAlertEventResponseBody.AlertEventInfo.AlertReceiverList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.alertReceiverList = tmp
            }
            if let value = dict["BelongProject"] as? [String: Any?] {
                var model = GetAlertEventResponseBody.AlertEventInfo.BelongProject()
                model.fromMap(value)
                self.belongProject = model
            }
            if let value = dict["DoNotDisturbEndTime"] as? String {
                self.doNotDisturbEndTime = value
            }
            if let value = dict["FirstAlertTime"] as? String {
                self.firstAlertTime = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["LatestAlertTime"] as? String {
                self.latestAlertTime = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TotalAlertTimes"] as? Int64 {
                self.totalAlertTimes = value
            }
            if let value = dict["UrlConfig"] as? [String: Any?] {
                var model = GetAlertEventResponseBody.AlertEventInfo.UrlConfig()
                model.fromMap(value)
                self.urlConfig = model
            }
        }
    }
    public var alertEventInfo: GetAlertEventResponseBody.AlertEventInfo?

    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.alertEventInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.alertEventInfo != nil {
            map["AlertEventInfo"] = self.alertEventInfo?.toMap()
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AlertEventInfo"] as? [String: Any?] {
            var model = GetAlertEventResponseBody.AlertEventInfo()
            model.fromMap(value)
            self.alertEventInfo = model
        }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetAlertEventResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetAlertEventResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetAlertEventResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetBatchTaskInfoRequest : Tea.TeaModel {
    public var env: String?

    public var fileId: Int64?

    public var includeAllUpStreams: Bool?

    public var opTenantId: Int64?

    public var projectId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.fileId != nil {
            map["FileId"] = self.fileId!
        }
        if self.includeAllUpStreams != nil {
            map["IncludeAllUpStreams"] = self.includeAllUpStreams!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["FileId"] as? Int64 {
            self.fileId = value
        }
        if let value = dict["IncludeAllUpStreams"] as? Bool {
            self.includeAllUpStreams = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
    }
}

public class GetBatchTaskInfoResponseBody : Tea.TeaModel {
    public class TaskInfo : Tea.TeaModel {
        public class CustomScheduleConfig : Tea.TeaModel {
            public var endTime: String?

            public var interval: Int32?

            public var intervalUnit: String?

            public var schedulePeriod: String?

            public var startTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endTime != nil {
                    map["EndTime"] = self.endTime!
                }
                if self.interval != nil {
                    map["Interval"] = self.interval!
                }
                if self.intervalUnit != nil {
                    map["IntervalUnit"] = self.intervalUnit!
                }
                if self.schedulePeriod != nil {
                    map["SchedulePeriod"] = self.schedulePeriod!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndTime"] as? String {
                    self.endTime = value
                }
                if let value = dict["Interval"] as? Int32 {
                    self.interval = value
                }
                if let value = dict["IntervalUnit"] as? String {
                    self.intervalUnit = value
                }
                if let value = dict["SchedulePeriod"] as? String {
                    self.schedulePeriod = value
                }
                if let value = dict["StartTime"] as? String {
                    self.startTime = value
                }
            }
        }
        public class ParamList : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public class SparkClientInfo : Tea.TeaModel {
            public var sparkClientVersion: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.sparkClientVersion != nil {
                    map["SparkClientVersion"] = self.sparkClientVersion!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["SparkClientVersion"] as? String {
                    self.sparkClientVersion = value
                }
            }
        }
        public class UpStreamList : Tea.TeaModel {
            public class DependPeriod : Tea.TeaModel {
                public var periodOffset: Int32?

                public var periodType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.periodOffset != nil {
                        map["PeriodOffset"] = self.periodOffset!
                    }
                    if self.periodType != nil {
                        map["PeriodType"] = self.periodType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["PeriodOffset"] as? Int32 {
                        self.periodOffset = value
                    }
                    if let value = dict["PeriodType"] as? String {
                        self.periodType = value
                    }
                }
            }
            public var dependPeriod: GetBatchTaskInfoResponseBody.TaskInfo.UpStreamList.DependPeriod?

            public var dependStrategy: String?

            public var fieldList: [String]?

            public var nodeType: String?

            public var periodDiff: Int32?

            public var sourceNodeEnabled: Bool?

            public var sourceNodeId: String?

            public var sourceNodeName: String?

            public var sourceNodeOutputName: String?

            public var sourceNodeUserName: String?

            public var sourceTableName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.dependPeriod?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.dependPeriod != nil {
                    map["DependPeriod"] = self.dependPeriod?.toMap()
                }
                if self.dependStrategy != nil {
                    map["DependStrategy"] = self.dependStrategy!
                }
                if self.fieldList != nil {
                    map["FieldList"] = self.fieldList!
                }
                if self.nodeType != nil {
                    map["NodeType"] = self.nodeType!
                }
                if self.periodDiff != nil {
                    map["PeriodDiff"] = self.periodDiff!
                }
                if self.sourceNodeEnabled != nil {
                    map["SourceNodeEnabled"] = self.sourceNodeEnabled!
                }
                if self.sourceNodeId != nil {
                    map["SourceNodeId"] = self.sourceNodeId!
                }
                if self.sourceNodeName != nil {
                    map["SourceNodeName"] = self.sourceNodeName!
                }
                if self.sourceNodeOutputName != nil {
                    map["SourceNodeOutputName"] = self.sourceNodeOutputName!
                }
                if self.sourceNodeUserName != nil {
                    map["SourceNodeUserName"] = self.sourceNodeUserName!
                }
                if self.sourceTableName != nil {
                    map["SourceTableName"] = self.sourceTableName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DependPeriod"] as? [String: Any?] {
                    var model = GetBatchTaskInfoResponseBody.TaskInfo.UpStreamList.DependPeriod()
                    model.fromMap(value)
                    self.dependPeriod = model
                }
                if let value = dict["DependStrategy"] as? String {
                    self.dependStrategy = value
                }
                if let value = dict["FieldList"] as? [String] {
                    self.fieldList = value
                }
                if let value = dict["NodeType"] as? String {
                    self.nodeType = value
                }
                if let value = dict["PeriodDiff"] as? Int32 {
                    self.periodDiff = value
                }
                if let value = dict["SourceNodeEnabled"] as? Bool {
                    self.sourceNodeEnabled = value
                }
                if let value = dict["SourceNodeId"] as? String {
                    self.sourceNodeId = value
                }
                if let value = dict["SourceNodeName"] as? String {
                    self.sourceNodeName = value
                }
                if let value = dict["SourceNodeOutputName"] as? String {
                    self.sourceNodeOutputName = value
                }
                if let value = dict["SourceNodeUserName"] as? String {
                    self.sourceNodeUserName = value
                }
                if let value = dict["SourceTableName"] as? String {
                    self.sourceTableName = value
                }
            }
        }
        public var code: String?

        public var cronExpression: String?

        public var customScheduleConfig: GetBatchTaskInfoResponseBody.TaskInfo.CustomScheduleConfig?

        public var dagId: String?

        public var dataSourceCatalog: String?

        public var dataSourceId: String?

        public var dataSourceSchema: String?

        public var developOwnerId: String?

        public var developOwnerName: String?

        public var fileId: Int64?

        public var hasDevNode: Bool?

        public var name: String?

        public var needPublish: Bool?

        public var nodeDescription: String?

        public var nodeFrom: String?

        public var nodeId: String?

        public var nodeName: String?

        public var nodeOutputNameList: [String]?

        public var nodeStatus: Int32?

        public var operatorUserId: String?

        public var opsOwnerId: String?

        public var opsOwnerName: String?

        public var ownerName: String?

        public var ownerUserId: String?

        public var paramList: [GetBatchTaskInfoResponseBody.TaskInfo.ParamList]?

        public var paused: Bool?

        public var priority: Int32?

        public var projectId: Int64?

        public var published: Bool?

        public var remark: String?

        public var rerunable: Bool?

        public var schedulePeriod: String?

        public var scheduleType: Int32?

        public var sparkClientInfo: GetBatchTaskInfoResponseBody.TaskInfo.SparkClientInfo?

        public var status: String?

        public var taskType: Int32?

        public var upStreamList: [GetBatchTaskInfoResponseBody.TaskInfo.UpStreamList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.customScheduleConfig?.validate()
            try self.sparkClientInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.cronExpression != nil {
                map["CronExpression"] = self.cronExpression!
            }
            if self.customScheduleConfig != nil {
                map["CustomScheduleConfig"] = self.customScheduleConfig?.toMap()
            }
            if self.dagId != nil {
                map["DagId"] = self.dagId!
            }
            if self.dataSourceCatalog != nil {
                map["DataSourceCatalog"] = self.dataSourceCatalog!
            }
            if self.dataSourceId != nil {
                map["DataSourceId"] = self.dataSourceId!
            }
            if self.dataSourceSchema != nil {
                map["DataSourceSchema"] = self.dataSourceSchema!
            }
            if self.developOwnerId != nil {
                map["DevelopOwnerId"] = self.developOwnerId!
            }
            if self.developOwnerName != nil {
                map["DevelopOwnerName"] = self.developOwnerName!
            }
            if self.fileId != nil {
                map["FileId"] = self.fileId!
            }
            if self.hasDevNode != nil {
                map["HasDevNode"] = self.hasDevNode!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.needPublish != nil {
                map["NeedPublish"] = self.needPublish!
            }
            if self.nodeDescription != nil {
                map["NodeDescription"] = self.nodeDescription!
            }
            if self.nodeFrom != nil {
                map["NodeFrom"] = self.nodeFrom!
            }
            if self.nodeId != nil {
                map["NodeId"] = self.nodeId!
            }
            if self.nodeName != nil {
                map["NodeName"] = self.nodeName!
            }
            if self.nodeOutputNameList != nil {
                map["NodeOutputNameList"] = self.nodeOutputNameList!
            }
            if self.nodeStatus != nil {
                map["NodeStatus"] = self.nodeStatus!
            }
            if self.operatorUserId != nil {
                map["OperatorUserId"] = self.operatorUserId!
            }
            if self.opsOwnerId != nil {
                map["OpsOwnerId"] = self.opsOwnerId!
            }
            if self.opsOwnerName != nil {
                map["OpsOwnerName"] = self.opsOwnerName!
            }
            if self.ownerName != nil {
                map["OwnerName"] = self.ownerName!
            }
            if self.ownerUserId != nil {
                map["OwnerUserId"] = self.ownerUserId!
            }
            if self.paramList != nil {
                var tmp : [Any] = []
                for k in self.paramList! {
                    tmp.append(k.toMap())
                }
                map["ParamList"] = tmp
            }
            if self.paused != nil {
                map["Paused"] = self.paused!
            }
            if self.priority != nil {
                map["Priority"] = self.priority!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            if self.published != nil {
                map["Published"] = self.published!
            }
            if self.remark != nil {
                map["Remark"] = self.remark!
            }
            if self.rerunable != nil {
                map["Rerunable"] = self.rerunable!
            }
            if self.schedulePeriod != nil {
                map["SchedulePeriod"] = self.schedulePeriod!
            }
            if self.scheduleType != nil {
                map["ScheduleType"] = self.scheduleType!
            }
            if self.sparkClientInfo != nil {
                map["SparkClientInfo"] = self.sparkClientInfo?.toMap()
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.taskType != nil {
                map["TaskType"] = self.taskType!
            }
            if self.upStreamList != nil {
                var tmp : [Any] = []
                for k in self.upStreamList! {
                    tmp.append(k.toMap())
                }
                map["UpStreamList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? String {
                self.code = value
            }
            if let value = dict["CronExpression"] as? String {
                self.cronExpression = value
            }
            if let value = dict["CustomScheduleConfig"] as? [String: Any?] {
                var model = GetBatchTaskInfoResponseBody.TaskInfo.CustomScheduleConfig()
                model.fromMap(value)
                self.customScheduleConfig = model
            }
            if let value = dict["DagId"] as? String {
                self.dagId = value
            }
            if let value = dict["DataSourceCatalog"] as? String {
                self.dataSourceCatalog = value
            }
            if let value = dict["DataSourceId"] as? String {
                self.dataSourceId = value
            }
            if let value = dict["DataSourceSchema"] as? String {
                self.dataSourceSchema = value
            }
            if let value = dict["DevelopOwnerId"] as? String {
                self.developOwnerId = value
            }
            if let value = dict["DevelopOwnerName"] as? String {
                self.developOwnerName = value
            }
            if let value = dict["FileId"] as? Int64 {
                self.fileId = value
            }
            if let value = dict["HasDevNode"] as? Bool {
                self.hasDevNode = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NeedPublish"] as? Bool {
                self.needPublish = value
            }
            if let value = dict["NodeDescription"] as? String {
                self.nodeDescription = value
            }
            if let value = dict["NodeFrom"] as? String {
                self.nodeFrom = value
            }
            if let value = dict["NodeId"] as? String {
                self.nodeId = value
            }
            if let value = dict["NodeName"] as? String {
                self.nodeName = value
            }
            if let value = dict["NodeOutputNameList"] as? [String] {
                self.nodeOutputNameList = value
            }
            if let value = dict["NodeStatus"] as? Int32 {
                self.nodeStatus = value
            }
            if let value = dict["OperatorUserId"] as? String {
                self.operatorUserId = value
            }
            if let value = dict["OpsOwnerId"] as? String {
                self.opsOwnerId = value
            }
            if let value = dict["OpsOwnerName"] as? String {
                self.opsOwnerName = value
            }
            if let value = dict["OwnerName"] as? String {
                self.ownerName = value
            }
            if let value = dict["OwnerUserId"] as? String {
                self.ownerUserId = value
            }
            if let value = dict["ParamList"] as? [Any?] {
                var tmp : [GetBatchTaskInfoResponseBody.TaskInfo.ParamList] = []
                for v in value {
                    if v != nil {
                        var model = GetBatchTaskInfoResponseBody.TaskInfo.ParamList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.paramList = tmp
            }
            if let value = dict["Paused"] as? Bool {
                self.paused = value
            }
            if let value = dict["Priority"] as? Int32 {
                self.priority = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
            if let value = dict["Published"] as? Bool {
                self.published = value
            }
            if let value = dict["Remark"] as? String {
                self.remark = value
            }
            if let value = dict["Rerunable"] as? Bool {
                self.rerunable = value
            }
            if let value = dict["SchedulePeriod"] as? String {
                self.schedulePeriod = value
            }
            if let value = dict["ScheduleType"] as? Int32 {
                self.scheduleType = value
            }
            if let value = dict["SparkClientInfo"] as? [String: Any?] {
                var model = GetBatchTaskInfoResponseBody.TaskInfo.SparkClientInfo()
                model.fromMap(value)
                self.sparkClientInfo = model
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TaskType"] as? Int32 {
                self.taskType = value
            }
            if let value = dict["UpStreamList"] as? [Any?] {
                var tmp : [GetBatchTaskInfoResponseBody.TaskInfo.UpStreamList] = []
                for v in value {
                    if v != nil {
                        var model = GetBatchTaskInfoResponseBody.TaskInfo.UpStreamList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.upStreamList = tmp
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var taskInfo: GetBatchTaskInfoResponseBody.TaskInfo?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.taskInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.taskInfo != nil {
            map["TaskInfo"] = self.taskInfo?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TaskInfo"] as? [String: Any?] {
            var model = GetBatchTaskInfoResponseBody.TaskInfo()
            model.fromMap(value)
            self.taskInfo = model
        }
    }
}

public class GetBatchTaskInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetBatchTaskInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetBatchTaskInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetBatchTaskInfoByVersionRequest : Tea.TeaModel {
    public var fileId: Int64?

    public var opTenantId: Int64?

    public var projectId: Int64?

    public var versionId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fileId != nil {
            map["FileId"] = self.fileId!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        if self.versionId != nil {
            map["VersionId"] = self.versionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FileId"] as? Int64 {
            self.fileId = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
        if let value = dict["VersionId"] as? Int64 {
            self.versionId = value
        }
    }
}

public class GetBatchTaskInfoByVersionResponseBody : Tea.TeaModel {
    public class TaskInfo : Tea.TeaModel {
        public class CustomScheduleConfig : Tea.TeaModel {
            public var endTime: String?

            public var interval: Int32?

            public var intervalUnit: String?

            public var schedulePeriod: String?

            public var startTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endTime != nil {
                    map["EndTime"] = self.endTime!
                }
                if self.interval != nil {
                    map["Interval"] = self.interval!
                }
                if self.intervalUnit != nil {
                    map["IntervalUnit"] = self.intervalUnit!
                }
                if self.schedulePeriod != nil {
                    map["SchedulePeriod"] = self.schedulePeriod!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndTime"] as? String {
                    self.endTime = value
                }
                if let value = dict["Interval"] as? Int32 {
                    self.interval = value
                }
                if let value = dict["IntervalUnit"] as? String {
                    self.intervalUnit = value
                }
                if let value = dict["SchedulePeriod"] as? String {
                    self.schedulePeriod = value
                }
                if let value = dict["StartTime"] as? String {
                    self.startTime = value
                }
            }
        }
        public class ParamList : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public class SparkClientInfo : Tea.TeaModel {
            public var sparkClientVersion: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.sparkClientVersion != nil {
                    map["SparkClientVersion"] = self.sparkClientVersion!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["SparkClientVersion"] as? String {
                    self.sparkClientVersion = value
                }
            }
        }
        public class UpStreamList : Tea.TeaModel {
            public class DependPeriod : Tea.TeaModel {
                public var periodOffset: Int32?

                public var periodType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.periodOffset != nil {
                        map["PeriodOffset"] = self.periodOffset!
                    }
                    if self.periodType != nil {
                        map["PeriodType"] = self.periodType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["PeriodOffset"] as? Int32 {
                        self.periodOffset = value
                    }
                    if let value = dict["PeriodType"] as? String {
                        self.periodType = value
                    }
                }
            }
            public var dependPeriod: GetBatchTaskInfoByVersionResponseBody.TaskInfo.UpStreamList.DependPeriod?

            public var dependStrategy: String?

            public var fieldList: [String]?

            public var nodeType: String?

            public var periodDiff: Int32?

            public var sourceNodeEnabled: Bool?

            public var sourceNodeId: String?

            public var sourceNodeName: String?

            public var sourceNodeOutputName: String?

            public var sourceNodeUserName: String?

            public var sourceTableName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.dependPeriod?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.dependPeriod != nil {
                    map["DependPeriod"] = self.dependPeriod?.toMap()
                }
                if self.dependStrategy != nil {
                    map["DependStrategy"] = self.dependStrategy!
                }
                if self.fieldList != nil {
                    map["FieldList"] = self.fieldList!
                }
                if self.nodeType != nil {
                    map["NodeType"] = self.nodeType!
                }
                if self.periodDiff != nil {
                    map["PeriodDiff"] = self.periodDiff!
                }
                if self.sourceNodeEnabled != nil {
                    map["SourceNodeEnabled"] = self.sourceNodeEnabled!
                }
                if self.sourceNodeId != nil {
                    map["SourceNodeId"] = self.sourceNodeId!
                }
                if self.sourceNodeName != nil {
                    map["SourceNodeName"] = self.sourceNodeName!
                }
                if self.sourceNodeOutputName != nil {
                    map["SourceNodeOutputName"] = self.sourceNodeOutputName!
                }
                if self.sourceNodeUserName != nil {
                    map["SourceNodeUserName"] = self.sourceNodeUserName!
                }
                if self.sourceTableName != nil {
                    map["SourceTableName"] = self.sourceTableName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DependPeriod"] as? [String: Any?] {
                    var model = GetBatchTaskInfoByVersionResponseBody.TaskInfo.UpStreamList.DependPeriod()
                    model.fromMap(value)
                    self.dependPeriod = model
                }
                if let value = dict["DependStrategy"] as? String {
                    self.dependStrategy = value
                }
                if let value = dict["FieldList"] as? [String] {
                    self.fieldList = value
                }
                if let value = dict["NodeType"] as? String {
                    self.nodeType = value
                }
                if let value = dict["PeriodDiff"] as? Int32 {
                    self.periodDiff = value
                }
                if let value = dict["SourceNodeEnabled"] as? Bool {
                    self.sourceNodeEnabled = value
                }
                if let value = dict["SourceNodeId"] as? String {
                    self.sourceNodeId = value
                }
                if let value = dict["SourceNodeName"] as? String {
                    self.sourceNodeName = value
                }
                if let value = dict["SourceNodeOutputName"] as? String {
                    self.sourceNodeOutputName = value
                }
                if let value = dict["SourceNodeUserName"] as? String {
                    self.sourceNodeUserName = value
                }
                if let value = dict["SourceTableName"] as? String {
                    self.sourceTableName = value
                }
            }
        }
        public var code: String?

        public var cronExpression: String?

        public var customScheduleConfig: GetBatchTaskInfoByVersionResponseBody.TaskInfo.CustomScheduleConfig?

        public var dagId: String?

        public var dataSourceCatalog: String?

        public var dataSourceId: String?

        public var dataSourceSchema: String?

        public var fileId: Int64?

        public var hasDevNode: Bool?

        public var name: String?

        public var needPublish: Bool?

        public var nodeDescription: String?

        public var nodeFrom: String?

        public var nodeId: String?

        public var nodeName: String?

        public var nodeOutputNameList: [String]?

        public var nodeStatus: Int32?

        public var operatorUserId: String?

        public var ownerName: String?

        public var ownerUserId: String?

        public var paramList: [GetBatchTaskInfoByVersionResponseBody.TaskInfo.ParamList]?

        public var paused: Bool?

        public var priority: Int32?

        public var projectId: Int64?

        public var published: Bool?

        public var remark: String?

        public var rerunable: Bool?

        public var schedulePeriod: String?

        public var scheduleType: Int32?

        public var sparkClientInfo: GetBatchTaskInfoByVersionResponseBody.TaskInfo.SparkClientInfo?

        public var status: String?

        public var taskType: Int32?

        public var upStreamList: [GetBatchTaskInfoByVersionResponseBody.TaskInfo.UpStreamList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.customScheduleConfig?.validate()
            try self.sparkClientInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.cronExpression != nil {
                map["CronExpression"] = self.cronExpression!
            }
            if self.customScheduleConfig != nil {
                map["CustomScheduleConfig"] = self.customScheduleConfig?.toMap()
            }
            if self.dagId != nil {
                map["DagId"] = self.dagId!
            }
            if self.dataSourceCatalog != nil {
                map["DataSourceCatalog"] = self.dataSourceCatalog!
            }
            if self.dataSourceId != nil {
                map["DataSourceId"] = self.dataSourceId!
            }
            if self.dataSourceSchema != nil {
                map["DataSourceSchema"] = self.dataSourceSchema!
            }
            if self.fileId != nil {
                map["FileId"] = self.fileId!
            }
            if self.hasDevNode != nil {
                map["HasDevNode"] = self.hasDevNode!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.needPublish != nil {
                map["NeedPublish"] = self.needPublish!
            }
            if self.nodeDescription != nil {
                map["NodeDescription"] = self.nodeDescription!
            }
            if self.nodeFrom != nil {
                map["NodeFrom"] = self.nodeFrom!
            }
            if self.nodeId != nil {
                map["NodeId"] = self.nodeId!
            }
            if self.nodeName != nil {
                map["NodeName"] = self.nodeName!
            }
            if self.nodeOutputNameList != nil {
                map["NodeOutputNameList"] = self.nodeOutputNameList!
            }
            if self.nodeStatus != nil {
                map["NodeStatus"] = self.nodeStatus!
            }
            if self.operatorUserId != nil {
                map["OperatorUserId"] = self.operatorUserId!
            }
            if self.ownerName != nil {
                map["OwnerName"] = self.ownerName!
            }
            if self.ownerUserId != nil {
                map["OwnerUserId"] = self.ownerUserId!
            }
            if self.paramList != nil {
                var tmp : [Any] = []
                for k in self.paramList! {
                    tmp.append(k.toMap())
                }
                map["ParamList"] = tmp
            }
            if self.paused != nil {
                map["Paused"] = self.paused!
            }
            if self.priority != nil {
                map["Priority"] = self.priority!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            if self.published != nil {
                map["Published"] = self.published!
            }
            if self.remark != nil {
                map["Remark"] = self.remark!
            }
            if self.rerunable != nil {
                map["Rerunable"] = self.rerunable!
            }
            if self.schedulePeriod != nil {
                map["SchedulePeriod"] = self.schedulePeriod!
            }
            if self.scheduleType != nil {
                map["ScheduleType"] = self.scheduleType!
            }
            if self.sparkClientInfo != nil {
                map["SparkClientInfo"] = self.sparkClientInfo?.toMap()
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.taskType != nil {
                map["TaskType"] = self.taskType!
            }
            if self.upStreamList != nil {
                var tmp : [Any] = []
                for k in self.upStreamList! {
                    tmp.append(k.toMap())
                }
                map["UpStreamList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? String {
                self.code = value
            }
            if let value = dict["CronExpression"] as? String {
                self.cronExpression = value
            }
            if let value = dict["CustomScheduleConfig"] as? [String: Any?] {
                var model = GetBatchTaskInfoByVersionResponseBody.TaskInfo.CustomScheduleConfig()
                model.fromMap(value)
                self.customScheduleConfig = model
            }
            if let value = dict["DagId"] as? String {
                self.dagId = value
            }
            if let value = dict["DataSourceCatalog"] as? String {
                self.dataSourceCatalog = value
            }
            if let value = dict["DataSourceId"] as? String {
                self.dataSourceId = value
            }
            if let value = dict["DataSourceSchema"] as? String {
                self.dataSourceSchema = value
            }
            if let value = dict["FileId"] as? Int64 {
                self.fileId = value
            }
            if let value = dict["HasDevNode"] as? Bool {
                self.hasDevNode = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NeedPublish"] as? Bool {
                self.needPublish = value
            }
            if let value = dict["NodeDescription"] as? String {
                self.nodeDescription = value
            }
            if let value = dict["NodeFrom"] as? String {
                self.nodeFrom = value
            }
            if let value = dict["NodeId"] as? String {
                self.nodeId = value
            }
            if let value = dict["NodeName"] as? String {
                self.nodeName = value
            }
            if let value = dict["NodeOutputNameList"] as? [String] {
                self.nodeOutputNameList = value
            }
            if let value = dict["NodeStatus"] as? Int32 {
                self.nodeStatus = value
            }
            if let value = dict["OperatorUserId"] as? String {
                self.operatorUserId = value
            }
            if let value = dict["OwnerName"] as? String {
                self.ownerName = value
            }
            if let value = dict["OwnerUserId"] as? String {
                self.ownerUserId = value
            }
            if let value = dict["ParamList"] as? [Any?] {
                var tmp : [GetBatchTaskInfoByVersionResponseBody.TaskInfo.ParamList] = []
                for v in value {
                    if v != nil {
                        var model = GetBatchTaskInfoByVersionResponseBody.TaskInfo.ParamList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.paramList = tmp
            }
            if let value = dict["Paused"] as? Bool {
                self.paused = value
            }
            if let value = dict["Priority"] as? Int32 {
                self.priority = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
            if let value = dict["Published"] as? Bool {
                self.published = value
            }
            if let value = dict["Remark"] as? String {
                self.remark = value
            }
            if let value = dict["Rerunable"] as? Bool {
                self.rerunable = value
            }
            if let value = dict["SchedulePeriod"] as? String {
                self.schedulePeriod = value
            }
            if let value = dict["ScheduleType"] as? Int32 {
                self.scheduleType = value
            }
            if let value = dict["SparkClientInfo"] as? [String: Any?] {
                var model = GetBatchTaskInfoByVersionResponseBody.TaskInfo.SparkClientInfo()
                model.fromMap(value)
                self.sparkClientInfo = model
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TaskType"] as? Int32 {
                self.taskType = value
            }
            if let value = dict["UpStreamList"] as? [Any?] {
                var tmp : [GetBatchTaskInfoByVersionResponseBody.TaskInfo.UpStreamList] = []
                for v in value {
                    if v != nil {
                        var model = GetBatchTaskInfoByVersionResponseBody.TaskInfo.UpStreamList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.upStreamList = tmp
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var taskInfo: GetBatchTaskInfoByVersionResponseBody.TaskInfo?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.taskInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.taskInfo != nil {
            map["TaskInfo"] = self.taskInfo?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TaskInfo"] as? [String: Any?] {
            var model = GetBatchTaskInfoByVersionResponseBody.TaskInfo()
            model.fromMap(value)
            self.taskInfo = model
        }
    }
}

public class GetBatchTaskInfoByVersionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetBatchTaskInfoByVersionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetBatchTaskInfoByVersionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetBatchTaskUdfLineagesRequest : Tea.TeaModel {
    public var fileId: Int64?

    public var opTenantId: Int64?

    public var projectId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fileId != nil {
            map["FileId"] = self.fileId!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FileId"] as? Int64 {
            self.fileId = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
    }
}

public class GetBatchTaskUdfLineagesResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class LineageGroupList : Tea.TeaModel {
            public class InputLineageList : Tea.TeaModel {
                public class ColumnList : Tea.TeaModel {
                    public var dataType: String?

                    public var description_: String?

                    public var id: String?

                    public var name: String?

                    public var partitionKey: Bool?

                    public var primaryKey: Bool?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.dataType != nil {
                            map["DataType"] = self.dataType!
                        }
                        if self.description_ != nil {
                            map["Description"] = self.description_!
                        }
                        if self.id != nil {
                            map["Id"] = self.id!
                        }
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        if self.partitionKey != nil {
                            map["PartitionKey"] = self.partitionKey!
                        }
                        if self.primaryKey != nil {
                            map["PrimaryKey"] = self.primaryKey!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["DataType"] as? String {
                            self.dataType = value
                        }
                        if let value = dict["Description"] as? String {
                            self.description_ = value
                        }
                        if let value = dict["Id"] as? String {
                            self.id = value
                        }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                        if let value = dict["PartitionKey"] as? Bool {
                            self.partitionKey = value
                        }
                        if let value = dict["PrimaryKey"] as? Bool {
                            self.primaryKey = value
                        }
                    }
                }
                public var bizUnitId: String?

                public var bizUnitName: String?

                public var columnList: [GetBatchTaskUdfLineagesResponseBody.Data.LineageGroupList.InputLineageList.ColumnList]?

                public var description_: String?

                public var displayName: String?

                public var env: String?

                public var fullTable: Bool?

                public var guid: String?

                public var name: String?

                public var ownerName: String?

                public var ownerUserId: String?

                public var projectId: String?

                public var projectName: String?

                public var subType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.bizUnitId != nil {
                        map["BizUnitId"] = self.bizUnitId!
                    }
                    if self.bizUnitName != nil {
                        map["BizUnitName"] = self.bizUnitName!
                    }
                    if self.columnList != nil {
                        var tmp : [Any] = []
                        for k in self.columnList! {
                            tmp.append(k.toMap())
                        }
                        map["ColumnList"] = tmp
                    }
                    if self.description_ != nil {
                        map["Description"] = self.description_!
                    }
                    if self.displayName != nil {
                        map["DisplayName"] = self.displayName!
                    }
                    if self.env != nil {
                        map["Env"] = self.env!
                    }
                    if self.fullTable != nil {
                        map["FullTable"] = self.fullTable!
                    }
                    if self.guid != nil {
                        map["Guid"] = self.guid!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.ownerName != nil {
                        map["OwnerName"] = self.ownerName!
                    }
                    if self.ownerUserId != nil {
                        map["OwnerUserId"] = self.ownerUserId!
                    }
                    if self.projectId != nil {
                        map["ProjectId"] = self.projectId!
                    }
                    if self.projectName != nil {
                        map["ProjectName"] = self.projectName!
                    }
                    if self.subType != nil {
                        map["SubType"] = self.subType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["BizUnitId"] as? String {
                        self.bizUnitId = value
                    }
                    if let value = dict["BizUnitName"] as? String {
                        self.bizUnitName = value
                    }
                    if let value = dict["ColumnList"] as? [Any?] {
                        var tmp : [GetBatchTaskUdfLineagesResponseBody.Data.LineageGroupList.InputLineageList.ColumnList] = []
                        for v in value {
                            if v != nil {
                                var model = GetBatchTaskUdfLineagesResponseBody.Data.LineageGroupList.InputLineageList.ColumnList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.columnList = tmp
                    }
                    if let value = dict["Description"] as? String {
                        self.description_ = value
                    }
                    if let value = dict["DisplayName"] as? String {
                        self.displayName = value
                    }
                    if let value = dict["Env"] as? String {
                        self.env = value
                    }
                    if let value = dict["FullTable"] as? Bool {
                        self.fullTable = value
                    }
                    if let value = dict["Guid"] as? String {
                        self.guid = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["OwnerName"] as? String {
                        self.ownerName = value
                    }
                    if let value = dict["OwnerUserId"] as? String {
                        self.ownerUserId = value
                    }
                    if let value = dict["ProjectId"] as? String {
                        self.projectId = value
                    }
                    if let value = dict["ProjectName"] as? String {
                        self.projectName = value
                    }
                    if let value = dict["SubType"] as? String {
                        self.subType = value
                    }
                }
            }
            public class OutputLineageList : Tea.TeaModel {
                public class ColumnList : Tea.TeaModel {
                    public var dataType: String?

                    public var description_: String?

                    public var id: String?

                    public var name: String?

                    public var partitionKey: Bool?

                    public var primaryKey: Bool?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.dataType != nil {
                            map["DataType"] = self.dataType!
                        }
                        if self.description_ != nil {
                            map["Description"] = self.description_!
                        }
                        if self.id != nil {
                            map["Id"] = self.id!
                        }
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        if self.partitionKey != nil {
                            map["PartitionKey"] = self.partitionKey!
                        }
                        if self.primaryKey != nil {
                            map["PrimaryKey"] = self.primaryKey!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["DataType"] as? String {
                            self.dataType = value
                        }
                        if let value = dict["Description"] as? String {
                            self.description_ = value
                        }
                        if let value = dict["Id"] as? String {
                            self.id = value
                        }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                        if let value = dict["PartitionKey"] as? Bool {
                            self.partitionKey = value
                        }
                        if let value = dict["PrimaryKey"] as? Bool {
                            self.primaryKey = value
                        }
                    }
                }
                public var bizUnitId: String?

                public var bizUnitName: String?

                public var columnList: [GetBatchTaskUdfLineagesResponseBody.Data.LineageGroupList.OutputLineageList.ColumnList]?

                public var description_: String?

                public var displayName: String?

                public var env: String?

                public var fullTable: Bool?

                public var guid: String?

                public var name: String?

                public var ownerName: String?

                public var ownerUserId: String?

                public var projectId: String?

                public var projectName: String?

                public var subType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.bizUnitId != nil {
                        map["BizUnitId"] = self.bizUnitId!
                    }
                    if self.bizUnitName != nil {
                        map["BizUnitName"] = self.bizUnitName!
                    }
                    if self.columnList != nil {
                        var tmp : [Any] = []
                        for k in self.columnList! {
                            tmp.append(k.toMap())
                        }
                        map["ColumnList"] = tmp
                    }
                    if self.description_ != nil {
                        map["Description"] = self.description_!
                    }
                    if self.displayName != nil {
                        map["DisplayName"] = self.displayName!
                    }
                    if self.env != nil {
                        map["Env"] = self.env!
                    }
                    if self.fullTable != nil {
                        map["FullTable"] = self.fullTable!
                    }
                    if self.guid != nil {
                        map["Guid"] = self.guid!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.ownerName != nil {
                        map["OwnerName"] = self.ownerName!
                    }
                    if self.ownerUserId != nil {
                        map["OwnerUserId"] = self.ownerUserId!
                    }
                    if self.projectId != nil {
                        map["ProjectId"] = self.projectId!
                    }
                    if self.projectName != nil {
                        map["ProjectName"] = self.projectName!
                    }
                    if self.subType != nil {
                        map["SubType"] = self.subType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["BizUnitId"] as? String {
                        self.bizUnitId = value
                    }
                    if let value = dict["BizUnitName"] as? String {
                        self.bizUnitName = value
                    }
                    if let value = dict["ColumnList"] as? [Any?] {
                        var tmp : [GetBatchTaskUdfLineagesResponseBody.Data.LineageGroupList.OutputLineageList.ColumnList] = []
                        for v in value {
                            if v != nil {
                                var model = GetBatchTaskUdfLineagesResponseBody.Data.LineageGroupList.OutputLineageList.ColumnList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.columnList = tmp
                    }
                    if let value = dict["Description"] as? String {
                        self.description_ = value
                    }
                    if let value = dict["DisplayName"] as? String {
                        self.displayName = value
                    }
                    if let value = dict["Env"] as? String {
                        self.env = value
                    }
                    if let value = dict["FullTable"] as? Bool {
                        self.fullTable = value
                    }
                    if let value = dict["Guid"] as? String {
                        self.guid = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["OwnerName"] as? String {
                        self.ownerName = value
                    }
                    if let value = dict["OwnerUserId"] as? String {
                        self.ownerUserId = value
                    }
                    if let value = dict["ProjectId"] as? String {
                        self.projectId = value
                    }
                    if let value = dict["ProjectName"] as? String {
                        self.projectName = value
                    }
                    if let value = dict["SubType"] as? String {
                        self.subType = value
                    }
                }
            }
            public var inputLineageList: [GetBatchTaskUdfLineagesResponseBody.Data.LineageGroupList.InputLineageList]?

            public var outputLineageList: [GetBatchTaskUdfLineagesResponseBody.Data.LineageGroupList.OutputLineageList]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputLineageList != nil {
                    var tmp : [Any] = []
                    for k in self.inputLineageList! {
                        tmp.append(k.toMap())
                    }
                    map["InputLineageList"] = tmp
                }
                if self.outputLineageList != nil {
                    var tmp : [Any] = []
                    for k in self.outputLineageList! {
                        tmp.append(k.toMap())
                    }
                    map["OutputLineageList"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputLineageList"] as? [Any?] {
                    var tmp : [GetBatchTaskUdfLineagesResponseBody.Data.LineageGroupList.InputLineageList] = []
                    for v in value {
                        if v != nil {
                            var model = GetBatchTaskUdfLineagesResponseBody.Data.LineageGroupList.InputLineageList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.inputLineageList = tmp
                }
                if let value = dict["OutputLineageList"] as? [Any?] {
                    var tmp : [GetBatchTaskUdfLineagesResponseBody.Data.LineageGroupList.OutputLineageList] = []
                    for v in value {
                        if v != nil {
                            var model = GetBatchTaskUdfLineagesResponseBody.Data.LineageGroupList.OutputLineageList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.outputLineageList = tmp
                }
            }
        }
        public var lineageGroupList: [GetBatchTaskUdfLineagesResponseBody.Data.LineageGroupList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.lineageGroupList != nil {
                var tmp : [Any] = []
                for k in self.lineageGroupList! {
                    tmp.append(k.toMap())
                }
                map["LineageGroupList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["LineageGroupList"] as? [Any?] {
                var tmp : [GetBatchTaskUdfLineagesResponseBody.Data.LineageGroupList] = []
                for v in value {
                    if v != nil {
                        var model = GetBatchTaskUdfLineagesResponseBody.Data.LineageGroupList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.lineageGroupList = tmp
            }
        }
    }
    public var code: String?

    public var data: GetBatchTaskUdfLineagesResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetBatchTaskUdfLineagesResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetBatchTaskUdfLineagesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetBatchTaskUdfLineagesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetBatchTaskUdfLineagesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetBatchTaskVersionsRequest : Tea.TeaModel {
    public var fileId: Int64?

    public var opTenantId: Int64?

    public var projectId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fileId != nil {
            map["FileId"] = self.fileId!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FileId"] as? Int64 {
            self.fileId = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
    }
}

public class GetBatchTaskVersionsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class BatchTaskVersionList : Tea.TeaModel {
            public var comment: String?

            public var gmtCreate: String?

            public var gmtModified: String?

            public var nodeId: String?

            public var projectId: Int64?

            public var published: Bool?

            public var userId: String?

            public var userName: String?

            public var version: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.comment != nil {
                    map["Comment"] = self.comment!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["GmtModified"] = self.gmtModified!
                }
                if self.nodeId != nil {
                    map["NodeId"] = self.nodeId!
                }
                if self.projectId != nil {
                    map["ProjectId"] = self.projectId!
                }
                if self.published != nil {
                    map["Published"] = self.published!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userName != nil {
                    map["UserName"] = self.userName!
                }
                if self.version != nil {
                    map["Version"] = self.version!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Comment"] as? String {
                    self.comment = value
                }
                if let value = dict["GmtCreate"] as? String {
                    self.gmtCreate = value
                }
                if let value = dict["GmtModified"] as? String {
                    self.gmtModified = value
                }
                if let value = dict["NodeId"] as? String {
                    self.nodeId = value
                }
                if let value = dict["ProjectId"] as? Int64 {
                    self.projectId = value
                }
                if let value = dict["Published"] as? Bool {
                    self.published = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserName"] as? String {
                    self.userName = value
                }
                if let value = dict["Version"] as? String {
                    self.version = value
                }
            }
        }
        public var batchTaskVersionList: [GetBatchTaskVersionsResponseBody.Data.BatchTaskVersionList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.batchTaskVersionList != nil {
                var tmp : [Any] = []
                for k in self.batchTaskVersionList! {
                    tmp.append(k.toMap())
                }
                map["BatchTaskVersionList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BatchTaskVersionList"] as? [Any?] {
                var tmp : [GetBatchTaskVersionsResponseBody.Data.BatchTaskVersionList] = []
                for v in value {
                    if v != nil {
                        var model = GetBatchTaskVersionsResponseBody.Data.BatchTaskVersionList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.batchTaskVersionList = tmp
            }
        }
    }
    public var code: String?

    public var data: GetBatchTaskVersionsResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetBatchTaskVersionsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetBatchTaskVersionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetBatchTaskVersionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetBatchTaskVersionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetBizEntityInfoRequest : Tea.TeaModel {
    public var id: Int64?

    public var opTenantId: Int64?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class GetBizEntityInfoResponseBody : Tea.TeaModel {
    public class BizEntityInfo : Tea.TeaModel {
        public class BizObject : Tea.TeaModel {
            public var approvalId: String?

            public var approvalStatus: String?

            public var childBizEntityIdList: [Int64]?

            public var description_: String?

            public var displayName: String?

            public var gmtCreate: String?

            public var gmtModified: String?

            public var id: Int64?

            public var lastModifier: String?

            public var lastModifierName: String?

            public var name: String?

            public var onlineStatus: String?

            public var ownerName: String?

            public var ownerUserId: String?

            public var parentId: Int64?

            public var refBizEntityIdList: [Int64]?

            public var refDimTableCount: Int32?

            public var refSummaryTableCount: Int32?

            public var status: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.approvalId != nil {
                    map["ApprovalId"] = self.approvalId!
                }
                if self.approvalStatus != nil {
                    map["ApprovalStatus"] = self.approvalStatus!
                }
                if self.childBizEntityIdList != nil {
                    map["ChildBizEntityIdList"] = self.childBizEntityIdList!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["GmtModified"] = self.gmtModified!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.lastModifier != nil {
                    map["LastModifier"] = self.lastModifier!
                }
                if self.lastModifierName != nil {
                    map["LastModifierName"] = self.lastModifierName!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.onlineStatus != nil {
                    map["OnlineStatus"] = self.onlineStatus!
                }
                if self.ownerName != nil {
                    map["OwnerName"] = self.ownerName!
                }
                if self.ownerUserId != nil {
                    map["OwnerUserId"] = self.ownerUserId!
                }
                if self.parentId != nil {
                    map["ParentId"] = self.parentId!
                }
                if self.refBizEntityIdList != nil {
                    map["RefBizEntityIdList"] = self.refBizEntityIdList!
                }
                if self.refDimTableCount != nil {
                    map["RefDimTableCount"] = self.refDimTableCount!
                }
                if self.refSummaryTableCount != nil {
                    map["RefSummaryTableCount"] = self.refSummaryTableCount!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApprovalId"] as? String {
                    self.approvalId = value
                }
                if let value = dict["ApprovalStatus"] as? String {
                    self.approvalStatus = value
                }
                if let value = dict["ChildBizEntityIdList"] as? [Int64] {
                    self.childBizEntityIdList = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["GmtCreate"] as? String {
                    self.gmtCreate = value
                }
                if let value = dict["GmtModified"] as? String {
                    self.gmtModified = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["LastModifier"] as? String {
                    self.lastModifier = value
                }
                if let value = dict["LastModifierName"] as? String {
                    self.lastModifierName = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["OnlineStatus"] as? String {
                    self.onlineStatus = value
                }
                if let value = dict["OwnerName"] as? String {
                    self.ownerName = value
                }
                if let value = dict["OwnerUserId"] as? String {
                    self.ownerUserId = value
                }
                if let value = dict["ParentId"] as? Int64 {
                    self.parentId = value
                }
                if let value = dict["RefBizEntityIdList"] as? [Int64] {
                    self.refBizEntityIdList = value
                }
                if let value = dict["RefDimTableCount"] as? Int32 {
                    self.refDimTableCount = value
                }
                if let value = dict["RefSummaryTableCount"] as? Int32 {
                    self.refSummaryTableCount = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public class BizProcess : Tea.TeaModel {
            public var approvalId: String?

            public var approvalStatus: String?

            public var bizEventEntityIdList: [Int64]?

            public var description_: String?

            public var displayName: String?

            public var gmtCreate: String?

            public var gmtModified: String?

            public var hasDependent: Bool?

            public var id: Int64?

            public var lastModifier: String?

            public var lastModifierName: String?

            public var name: String?

            public var onlineStatus: String?

            public var ownerName: String?

            public var ownerUserId: String?

            public var preBizProcessIdList: [Int64]?

            public var refBizEntityIdList: [Int64]?

            public var refFactTableCount: Int32?

            public var status: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.approvalId != nil {
                    map["ApprovalId"] = self.approvalId!
                }
                if self.approvalStatus != nil {
                    map["ApprovalStatus"] = self.approvalStatus!
                }
                if self.bizEventEntityIdList != nil {
                    map["BizEventEntityIdList"] = self.bizEventEntityIdList!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["GmtModified"] = self.gmtModified!
                }
                if self.hasDependent != nil {
                    map["HasDependent"] = self.hasDependent!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.lastModifier != nil {
                    map["LastModifier"] = self.lastModifier!
                }
                if self.lastModifierName != nil {
                    map["LastModifierName"] = self.lastModifierName!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.onlineStatus != nil {
                    map["OnlineStatus"] = self.onlineStatus!
                }
                if self.ownerName != nil {
                    map["OwnerName"] = self.ownerName!
                }
                if self.ownerUserId != nil {
                    map["OwnerUserId"] = self.ownerUserId!
                }
                if self.preBizProcessIdList != nil {
                    map["PreBizProcessIdList"] = self.preBizProcessIdList!
                }
                if self.refBizEntityIdList != nil {
                    map["RefBizEntityIdList"] = self.refBizEntityIdList!
                }
                if self.refFactTableCount != nil {
                    map["RefFactTableCount"] = self.refFactTableCount!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApprovalId"] as? String {
                    self.approvalId = value
                }
                if let value = dict["ApprovalStatus"] as? String {
                    self.approvalStatus = value
                }
                if let value = dict["BizEventEntityIdList"] as? [Int64] {
                    self.bizEventEntityIdList = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["GmtCreate"] as? String {
                    self.gmtCreate = value
                }
                if let value = dict["GmtModified"] as? String {
                    self.gmtModified = value
                }
                if let value = dict["HasDependent"] as? Bool {
                    self.hasDependent = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["LastModifier"] as? String {
                    self.lastModifier = value
                }
                if let value = dict["LastModifierName"] as? String {
                    self.lastModifierName = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["OnlineStatus"] as? String {
                    self.onlineStatus = value
                }
                if let value = dict["OwnerName"] as? String {
                    self.ownerName = value
                }
                if let value = dict["OwnerUserId"] as? String {
                    self.ownerUserId = value
                }
                if let value = dict["PreBizProcessIdList"] as? [Int64] {
                    self.preBizProcessIdList = value
                }
                if let value = dict["RefBizEntityIdList"] as? [Int64] {
                    self.refBizEntityIdList = value
                }
                if let value = dict["RefFactTableCount"] as? Int32 {
                    self.refFactTableCount = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var bizObject: GetBizEntityInfoResponseBody.BizEntityInfo.BizObject?

        public var bizProcess: GetBizEntityInfoResponseBody.BizEntityInfo.BizProcess?

        public var bizUnitId: Int64?

        public var dataDomainId: Int64?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.bizObject?.validate()
            try self.bizProcess?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bizObject != nil {
                map["BizObject"] = self.bizObject?.toMap()
            }
            if self.bizProcess != nil {
                map["BizProcess"] = self.bizProcess?.toMap()
            }
            if self.bizUnitId != nil {
                map["BizUnitId"] = self.bizUnitId!
            }
            if self.dataDomainId != nil {
                map["DataDomainId"] = self.dataDomainId!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BizObject"] as? [String: Any?] {
                var model = GetBizEntityInfoResponseBody.BizEntityInfo.BizObject()
                model.fromMap(value)
                self.bizObject = model
            }
            if let value = dict["BizProcess"] as? [String: Any?] {
                var model = GetBizEntityInfoResponseBody.BizEntityInfo.BizProcess()
                model.fromMap(value)
                self.bizProcess = model
            }
            if let value = dict["BizUnitId"] as? Int64 {
                self.bizUnitId = value
            }
            if let value = dict["DataDomainId"] as? Int64 {
                self.dataDomainId = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var bizEntityInfo: GetBizEntityInfoResponseBody.BizEntityInfo?

    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.bizEntityInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizEntityInfo != nil {
            map["BizEntityInfo"] = self.bizEntityInfo?.toMap()
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizEntityInfo"] as? [String: Any?] {
            var model = GetBizEntityInfoResponseBody.BizEntityInfo()
            model.fromMap(value)
            self.bizEntityInfo = model
        }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetBizEntityInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetBizEntityInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetBizEntityInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetBizEntityInfoByVersionRequest : Tea.TeaModel {
    public var id: Int64?

    public var opTenantId: Int64?

    public var type: String?

    public var versionId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        if self.versionId != nil {
            map["VersionId"] = self.versionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
        if let value = dict["VersionId"] as? Int64 {
            self.versionId = value
        }
    }
}

public class GetBizEntityInfoByVersionResponseBody : Tea.TeaModel {
    public class BizEntityInfo : Tea.TeaModel {
        public class BizObject : Tea.TeaModel {
            public var approvalId: String?

            public var approvalStatus: String?

            public var childBizEntityIdList: [Int64]?

            public var description_: String?

            public var displayName: String?

            public var gmtCreate: String?

            public var gmtModified: String?

            public var id: Int64?

            public var lastModifier: String?

            public var lastModifierName: String?

            public var name: String?

            public var onlineStatus: String?

            public var ownerName: String?

            public var ownerUserId: String?

            public var parentId: Int64?

            public var refBizEntityIdList: [Int64]?

            public var refDimTableCount: Int32?

            public var refSummaryTableCount: Int32?

            public var status: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.approvalId != nil {
                    map["ApprovalId"] = self.approvalId!
                }
                if self.approvalStatus != nil {
                    map["ApprovalStatus"] = self.approvalStatus!
                }
                if self.childBizEntityIdList != nil {
                    map["ChildBizEntityIdList"] = self.childBizEntityIdList!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["GmtModified"] = self.gmtModified!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.lastModifier != nil {
                    map["LastModifier"] = self.lastModifier!
                }
                if self.lastModifierName != nil {
                    map["LastModifierName"] = self.lastModifierName!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.onlineStatus != nil {
                    map["OnlineStatus"] = self.onlineStatus!
                }
                if self.ownerName != nil {
                    map["OwnerName"] = self.ownerName!
                }
                if self.ownerUserId != nil {
                    map["OwnerUserId"] = self.ownerUserId!
                }
                if self.parentId != nil {
                    map["ParentId"] = self.parentId!
                }
                if self.refBizEntityIdList != nil {
                    map["RefBizEntityIdList"] = self.refBizEntityIdList!
                }
                if self.refDimTableCount != nil {
                    map["RefDimTableCount"] = self.refDimTableCount!
                }
                if self.refSummaryTableCount != nil {
                    map["RefSummaryTableCount"] = self.refSummaryTableCount!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApprovalId"] as? String {
                    self.approvalId = value
                }
                if let value = dict["ApprovalStatus"] as? String {
                    self.approvalStatus = value
                }
                if let value = dict["ChildBizEntityIdList"] as? [Int64] {
                    self.childBizEntityIdList = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["GmtCreate"] as? String {
                    self.gmtCreate = value
                }
                if let value = dict["GmtModified"] as? String {
                    self.gmtModified = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["LastModifier"] as? String {
                    self.lastModifier = value
                }
                if let value = dict["LastModifierName"] as? String {
                    self.lastModifierName = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["OnlineStatus"] as? String {
                    self.onlineStatus = value
                }
                if let value = dict["OwnerName"] as? String {
                    self.ownerName = value
                }
                if let value = dict["OwnerUserId"] as? String {
                    self.ownerUserId = value
                }
                if let value = dict["ParentId"] as? Int64 {
                    self.parentId = value
                }
                if let value = dict["RefBizEntityIdList"] as? [Int64] {
                    self.refBizEntityIdList = value
                }
                if let value = dict["RefDimTableCount"] as? Int32 {
                    self.refDimTableCount = value
                }
                if let value = dict["RefSummaryTableCount"] as? Int32 {
                    self.refSummaryTableCount = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public class BizProcess : Tea.TeaModel {
            public var approvalId: String?

            public var approvalStatus: String?

            public var bizEventEntityIdList: [Int64]?

            public var description_: String?

            public var displayName: String?

            public var gmtCreate: String?

            public var gmtModified: String?

            public var hasDependent: Bool?

            public var id: Int64?

            public var lastModifier: String?

            public var lastModifierName: String?

            public var name: String?

            public var onlineStatus: String?

            public var ownerName: String?

            public var ownerUserId: String?

            public var preBizProcessIdList: [Int64]?

            public var refBizEntityIdList: [Int64]?

            public var refFactTableCount: Int32?

            public var status: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.approvalId != nil {
                    map["ApprovalId"] = self.approvalId!
                }
                if self.approvalStatus != nil {
                    map["ApprovalStatus"] = self.approvalStatus!
                }
                if self.bizEventEntityIdList != nil {
                    map["BizEventEntityIdList"] = self.bizEventEntityIdList!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["GmtModified"] = self.gmtModified!
                }
                if self.hasDependent != nil {
                    map["HasDependent"] = self.hasDependent!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.lastModifier != nil {
                    map["LastModifier"] = self.lastModifier!
                }
                if self.lastModifierName != nil {
                    map["LastModifierName"] = self.lastModifierName!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.onlineStatus != nil {
                    map["OnlineStatus"] = self.onlineStatus!
                }
                if self.ownerName != nil {
                    map["OwnerName"] = self.ownerName!
                }
                if self.ownerUserId != nil {
                    map["OwnerUserId"] = self.ownerUserId!
                }
                if self.preBizProcessIdList != nil {
                    map["PreBizProcessIdList"] = self.preBizProcessIdList!
                }
                if self.refBizEntityIdList != nil {
                    map["RefBizEntityIdList"] = self.refBizEntityIdList!
                }
                if self.refFactTableCount != nil {
                    map["RefFactTableCount"] = self.refFactTableCount!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApprovalId"] as? String {
                    self.approvalId = value
                }
                if let value = dict["ApprovalStatus"] as? String {
                    self.approvalStatus = value
                }
                if let value = dict["BizEventEntityIdList"] as? [Int64] {
                    self.bizEventEntityIdList = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["GmtCreate"] as? String {
                    self.gmtCreate = value
                }
                if let value = dict["GmtModified"] as? String {
                    self.gmtModified = value
                }
                if let value = dict["HasDependent"] as? Bool {
                    self.hasDependent = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["LastModifier"] as? String {
                    self.lastModifier = value
                }
                if let value = dict["LastModifierName"] as? String {
                    self.lastModifierName = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["OnlineStatus"] as? String {
                    self.onlineStatus = value
                }
                if let value = dict["OwnerName"] as? String {
                    self.ownerName = value
                }
                if let value = dict["OwnerUserId"] as? String {
                    self.ownerUserId = value
                }
                if let value = dict["PreBizProcessIdList"] as? [Int64] {
                    self.preBizProcessIdList = value
                }
                if let value = dict["RefBizEntityIdList"] as? [Int64] {
                    self.refBizEntityIdList = value
                }
                if let value = dict["RefFactTableCount"] as? Int32 {
                    self.refFactTableCount = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var bizObject: GetBizEntityInfoByVersionResponseBody.BizEntityInfo.BizObject?

        public var bizProcess: GetBizEntityInfoByVersionResponseBody.BizEntityInfo.BizProcess?

        public var bizUnitId: Int64?

        public var dataDomainId: Int64?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.bizObject?.validate()
            try self.bizProcess?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bizObject != nil {
                map["BizObject"] = self.bizObject?.toMap()
            }
            if self.bizProcess != nil {
                map["BizProcess"] = self.bizProcess?.toMap()
            }
            if self.bizUnitId != nil {
                map["BizUnitId"] = self.bizUnitId!
            }
            if self.dataDomainId != nil {
                map["DataDomainId"] = self.dataDomainId!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BizObject"] as? [String: Any?] {
                var model = GetBizEntityInfoByVersionResponseBody.BizEntityInfo.BizObject()
                model.fromMap(value)
                self.bizObject = model
            }
            if let value = dict["BizProcess"] as? [String: Any?] {
                var model = GetBizEntityInfoByVersionResponseBody.BizEntityInfo.BizProcess()
                model.fromMap(value)
                self.bizProcess = model
            }
            if let value = dict["BizUnitId"] as? Int64 {
                self.bizUnitId = value
            }
            if let value = dict["DataDomainId"] as? Int64 {
                self.dataDomainId = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var bizEntityInfo: GetBizEntityInfoByVersionResponseBody.BizEntityInfo?

    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.bizEntityInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizEntityInfo != nil {
            map["BizEntityInfo"] = self.bizEntityInfo?.toMap()
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizEntityInfo"] as? [String: Any?] {
            var model = GetBizEntityInfoByVersionResponseBody.BizEntityInfo()
            model.fromMap(value)
            self.bizEntityInfo = model
        }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetBizEntityInfoByVersionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetBizEntityInfoByVersionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetBizEntityInfoByVersionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetBizUnitInfoRequest : Tea.TeaModel {
    public var id: Int64?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class GetBizUnitInfoResponseBody : Tea.TeaModel {
    public class BizUnitInfo : Tea.TeaModel {
        public class AccountList : Tea.TeaModel {
            public var id: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
            }
        }
        public class BusinessLeaderList : Tea.TeaModel {
            public var id: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
            }
        }
        public class DataLeaderList : Tea.TeaModel {
            public var id: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
            }
        }
        public class EnvList : Tea.TeaModel {
            public var displayName: String?

            public var envName: String?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.envName != nil {
                    map["EnvName"] = self.envName!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["EnvName"] as? String {
                    self.envName = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public var accountList: [GetBizUnitInfoResponseBody.BizUnitInfo.AccountList]?

        public var bizObjectCount: Int32?

        public var bizProcessCount: Int32?

        public var businessLeaderList: [GetBizUnitInfoResponseBody.BizUnitInfo.BusinessLeaderList]?

        public var dataDomainCount: Int32?

        public var dataLeaderList: [GetBizUnitInfoResponseBody.BizUnitInfo.DataLeaderList]?

        public var description_: String?

        public var displayName: String?

        public var envList: [GetBizUnitInfoResponseBody.BizUnitInfo.EnvList]?

        public var gmtCreate: String?

        public var gmtModified: String?

        public var icon: String?

        public var id: Int64?

        public var lastModifier: String?

        public var lastModifierName: String?

        public var mode: String?

        public var name: String?

        public var ownerName: String?

        public var ownerUserId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountList != nil {
                var tmp : [Any] = []
                for k in self.accountList! {
                    tmp.append(k.toMap())
                }
                map["AccountList"] = tmp
            }
            if self.bizObjectCount != nil {
                map["BizObjectCount"] = self.bizObjectCount!
            }
            if self.bizProcessCount != nil {
                map["BizProcessCount"] = self.bizProcessCount!
            }
            if self.businessLeaderList != nil {
                var tmp : [Any] = []
                for k in self.businessLeaderList! {
                    tmp.append(k.toMap())
                }
                map["BusinessLeaderList"] = tmp
            }
            if self.dataDomainCount != nil {
                map["DataDomainCount"] = self.dataDomainCount!
            }
            if self.dataLeaderList != nil {
                var tmp : [Any] = []
                for k in self.dataLeaderList! {
                    tmp.append(k.toMap())
                }
                map["DataLeaderList"] = tmp
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.envList != nil {
                var tmp : [Any] = []
                for k in self.envList! {
                    tmp.append(k.toMap())
                }
                map["EnvList"] = tmp
            }
            if self.gmtCreate != nil {
                map["GmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.icon != nil {
                map["Icon"] = self.icon!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.lastModifier != nil {
                map["LastModifier"] = self.lastModifier!
            }
            if self.lastModifierName != nil {
                map["LastModifierName"] = self.lastModifierName!
            }
            if self.mode != nil {
                map["Mode"] = self.mode!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.ownerName != nil {
                map["OwnerName"] = self.ownerName!
            }
            if self.ownerUserId != nil {
                map["OwnerUserId"] = self.ownerUserId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccountList"] as? [Any?] {
                var tmp : [GetBizUnitInfoResponseBody.BizUnitInfo.AccountList] = []
                for v in value {
                    if v != nil {
                        var model = GetBizUnitInfoResponseBody.BizUnitInfo.AccountList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.accountList = tmp
            }
            if let value = dict["BizObjectCount"] as? Int32 {
                self.bizObjectCount = value
            }
            if let value = dict["BizProcessCount"] as? Int32 {
                self.bizProcessCount = value
            }
            if let value = dict["BusinessLeaderList"] as? [Any?] {
                var tmp : [GetBizUnitInfoResponseBody.BizUnitInfo.BusinessLeaderList] = []
                for v in value {
                    if v != nil {
                        var model = GetBizUnitInfoResponseBody.BizUnitInfo.BusinessLeaderList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.businessLeaderList = tmp
            }
            if let value = dict["DataDomainCount"] as? Int32 {
                self.dataDomainCount = value
            }
            if let value = dict["DataLeaderList"] as? [Any?] {
                var tmp : [GetBizUnitInfoResponseBody.BizUnitInfo.DataLeaderList] = []
                for v in value {
                    if v != nil {
                        var model = GetBizUnitInfoResponseBody.BizUnitInfo.DataLeaderList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.dataLeaderList = tmp
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["EnvList"] as? [Any?] {
                var tmp : [GetBizUnitInfoResponseBody.BizUnitInfo.EnvList] = []
                for v in value {
                    if v != nil {
                        var model = GetBizUnitInfoResponseBody.BizUnitInfo.EnvList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.envList = tmp
            }
            if let value = dict["GmtCreate"] as? String {
                self.gmtCreate = value
            }
            if let value = dict["GmtModified"] as? String {
                self.gmtModified = value
            }
            if let value = dict["Icon"] as? String {
                self.icon = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["LastModifier"] as? String {
                self.lastModifier = value
            }
            if let value = dict["LastModifierName"] as? String {
                self.lastModifierName = value
            }
            if let value = dict["Mode"] as? String {
                self.mode = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["OwnerName"] as? String {
                self.ownerName = value
            }
            if let value = dict["OwnerUserId"] as? String {
                self.ownerUserId = value
            }
        }
    }
    public var bizUnitInfo: GetBizUnitInfoResponseBody.BizUnitInfo?

    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.bizUnitInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bizUnitInfo != nil {
            map["BizUnitInfo"] = self.bizUnitInfo?.toMap()
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BizUnitInfo"] as? [String: Any?] {
            var model = GetBizUnitInfoResponseBody.BizUnitInfo()
            model.fromMap(value)
            self.bizUnitInfo = model
        }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetBizUnitInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetBizUnitInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetBizUnitInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetClusterQueueInfoByEnvRequest : Tea.TeaModel {
    public var env: String?

    public var opTenantId: Int64?

    public var projectId: Int64?

    public var streamBatchMode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        if self.streamBatchMode != nil {
            map["StreamBatchMode"] = self.streamBatchMode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
        if let value = dict["StreamBatchMode"] as? String {
            self.streamBatchMode = value
        }
    }
}

public class GetClusterQueueInfoByEnvResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var annotations: String?

        public var clusterId: String?

        public var createAt: String?

        public var flinkImageRegistry: String?

        public var flinkImageRepository: String?

        public var flinkImageTag: String?

        public var flinkVersion: String?

        public var labels: String?

        public var maxVcore: String?

        public var modifiedAt: String?

        public var namespace: String?

        public var queueName: String?

        public var resourceVersion: String?

        public var spec: String?

        public var vvpClusterType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.annotations != nil {
                map["Annotations"] = self.annotations!
            }
            if self.clusterId != nil {
                map["ClusterId"] = self.clusterId!
            }
            if self.createAt != nil {
                map["CreateAt"] = self.createAt!
            }
            if self.flinkImageRegistry != nil {
                map["FlinkImageRegistry"] = self.flinkImageRegistry!
            }
            if self.flinkImageRepository != nil {
                map["FlinkImageRepository"] = self.flinkImageRepository!
            }
            if self.flinkImageTag != nil {
                map["FlinkImageTag"] = self.flinkImageTag!
            }
            if self.flinkVersion != nil {
                map["FlinkVersion"] = self.flinkVersion!
            }
            if self.labels != nil {
                map["Labels"] = self.labels!
            }
            if self.maxVcore != nil {
                map["MaxVcore"] = self.maxVcore!
            }
            if self.modifiedAt != nil {
                map["ModifiedAt"] = self.modifiedAt!
            }
            if self.namespace != nil {
                map["Namespace"] = self.namespace!
            }
            if self.queueName != nil {
                map["QueueName"] = self.queueName!
            }
            if self.resourceVersion != nil {
                map["ResourceVersion"] = self.resourceVersion!
            }
            if self.spec != nil {
                map["Spec"] = self.spec!
            }
            if self.vvpClusterType != nil {
                map["VvpClusterType"] = self.vvpClusterType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Annotations"] as? String {
                self.annotations = value
            }
            if let value = dict["ClusterId"] as? String {
                self.clusterId = value
            }
            if let value = dict["CreateAt"] as? String {
                self.createAt = value
            }
            if let value = dict["FlinkImageRegistry"] as? String {
                self.flinkImageRegistry = value
            }
            if let value = dict["FlinkImageRepository"] as? String {
                self.flinkImageRepository = value
            }
            if let value = dict["FlinkImageTag"] as? String {
                self.flinkImageTag = value
            }
            if let value = dict["FlinkVersion"] as? String {
                self.flinkVersion = value
            }
            if let value = dict["Labels"] as? String {
                self.labels = value
            }
            if let value = dict["MaxVcore"] as? String {
                self.maxVcore = value
            }
            if let value = dict["ModifiedAt"] as? String {
                self.modifiedAt = value
            }
            if let value = dict["Namespace"] as? String {
                self.namespace = value
            }
            if let value = dict["QueueName"] as? String {
                self.queueName = value
            }
            if let value = dict["ResourceVersion"] as? String {
                self.resourceVersion = value
            }
            if let value = dict["Spec"] as? String {
                self.spec = value
            }
            if let value = dict["VvpClusterType"] as? String {
                self.vvpClusterType = value
            }
        }
    }
    public var code: String?

    public var data: [GetClusterQueueInfoByEnvResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [GetClusterQueueInfoByEnvResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = GetClusterQueueInfoByEnvResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetClusterQueueInfoByEnvResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetClusterQueueInfoByEnvResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetClusterQueueInfoByEnvResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetComputeSourceRequest : Tea.TeaModel {
    public var id: Int64?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class GetComputeSourceResponseBody : Tea.TeaModel {
    public class ComputeSourceInfo : Tea.TeaModel {
        public var bindProject: Bool?

        public var bindProjectId: Int64?

        public var bindProjectName: String?

        public var creator: String?

        public var creatorName: String?

        public var description_: String?

        public var displayName: String?

        public var gmtCreate: String?

        public var gmtModified: String?

        public var id: Int64?

        public var name: String?

        public var owner: String?

        public var ownerName: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bindProject != nil {
                map["BindProject"] = self.bindProject!
            }
            if self.bindProjectId != nil {
                map["BindProjectId"] = self.bindProjectId!
            }
            if self.bindProjectName != nil {
                map["BindProjectName"] = self.bindProjectName!
            }
            if self.creator != nil {
                map["Creator"] = self.creator!
            }
            if self.creatorName != nil {
                map["CreatorName"] = self.creatorName!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.gmtCreate != nil {
                map["GmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.owner != nil {
                map["Owner"] = self.owner!
            }
            if self.ownerName != nil {
                map["OwnerName"] = self.ownerName!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BindProject"] as? Bool {
                self.bindProject = value
            }
            if let value = dict["BindProjectId"] as? Int64 {
                self.bindProjectId = value
            }
            if let value = dict["BindProjectName"] as? String {
                self.bindProjectName = value
            }
            if let value = dict["Creator"] as? String {
                self.creator = value
            }
            if let value = dict["CreatorName"] as? String {
                self.creatorName = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["GmtCreate"] as? String {
                self.gmtCreate = value
            }
            if let value = dict["GmtModified"] as? String {
                self.gmtModified = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Owner"] as? String {
                self.owner = value
            }
            if let value = dict["OwnerName"] as? String {
                self.ownerName = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var code: String?

    public var computeSourceInfo: GetComputeSourceResponseBody.ComputeSourceInfo?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.computeSourceInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.computeSourceInfo != nil {
            map["ComputeSourceInfo"] = self.computeSourceInfo?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["ComputeSourceInfo"] as? [String: Any?] {
            var model = GetComputeSourceResponseBody.ComputeSourceInfo()
            model.fromMap(value)
            self.computeSourceInfo = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetComputeSourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetComputeSourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetComputeSourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDataDomainInfoRequest : Tea.TeaModel {
    public var id: Int64?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class GetDataDomainInfoResponseBody : Tea.TeaModel {
    public class DataDomainInfo : Tea.TeaModel {
        public var abbreviation: String?

        public var bizUnitId: Int64?

        public var description_: String?

        public var displayName: String?

        public var gmtCreate: String?

        public var gmtModified: String?

        public var id: Int64?

        public var lastModifier: String?

        public var lastModifierName: String?

        public var name: String?

        public var ownerName: String?

        public var ownerUserId: String?

        public var parentId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.abbreviation != nil {
                map["Abbreviation"] = self.abbreviation!
            }
            if self.bizUnitId != nil {
                map["BizUnitId"] = self.bizUnitId!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.gmtCreate != nil {
                map["GmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.lastModifier != nil {
                map["LastModifier"] = self.lastModifier!
            }
            if self.lastModifierName != nil {
                map["LastModifierName"] = self.lastModifierName!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.ownerName != nil {
                map["OwnerName"] = self.ownerName!
            }
            if self.ownerUserId != nil {
                map["OwnerUserId"] = self.ownerUserId!
            }
            if self.parentId != nil {
                map["ParentId"] = self.parentId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Abbreviation"] as? String {
                self.abbreviation = value
            }
            if let value = dict["BizUnitId"] as? Int64 {
                self.bizUnitId = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["GmtCreate"] as? String {
                self.gmtCreate = value
            }
            if let value = dict["GmtModified"] as? String {
                self.gmtModified = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["LastModifier"] as? String {
                self.lastModifier = value
            }
            if let value = dict["LastModifierName"] as? String {
                self.lastModifierName = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["OwnerName"] as? String {
                self.ownerName = value
            }
            if let value = dict["OwnerUserId"] as? String {
                self.ownerUserId = value
            }
            if let value = dict["ParentId"] as? Int64 {
                self.parentId = value
            }
        }
    }
    public var code: String?

    public var dataDomainInfo: GetDataDomainInfoResponseBody.DataDomainInfo?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.dataDomainInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.dataDomainInfo != nil {
            map["DataDomainInfo"] = self.dataDomainInfo?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["DataDomainInfo"] as? [String: Any?] {
            var model = GetDataDomainInfoResponseBody.DataDomainInfo()
            model.fromMap(value)
            self.dataDomainInfo = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetDataDomainInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDataDomainInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDataDomainInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDataServiceApiCallSummaryRequest : Tea.TeaModel {
    public var endTime: String?

    public var opTenantId: Int64?

    public var projectId: Int32?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class GetDataServiceApiCallSummaryResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var callCount: Int64?

        public var errorApiCount: Int64?

        public var errorAppCount: Int64?

        public var errorCount: Int64?

        public var errorRate: Double?

        public var offlineRate: Double?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callCount != nil {
                map["CallCount"] = self.callCount!
            }
            if self.errorApiCount != nil {
                map["ErrorApiCount"] = self.errorApiCount!
            }
            if self.errorAppCount != nil {
                map["ErrorAppCount"] = self.errorAppCount!
            }
            if self.errorCount != nil {
                map["ErrorCount"] = self.errorCount!
            }
            if self.errorRate != nil {
                map["ErrorRate"] = self.errorRate!
            }
            if self.offlineRate != nil {
                map["OfflineRate"] = self.offlineRate!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallCount"] as? Int64 {
                self.callCount = value
            }
            if let value = dict["ErrorApiCount"] as? Int64 {
                self.errorApiCount = value
            }
            if let value = dict["ErrorAppCount"] as? Int64 {
                self.errorAppCount = value
            }
            if let value = dict["ErrorCount"] as? Int64 {
                self.errorCount = value
            }
            if let value = dict["ErrorRate"] as? Double {
                self.errorRate = value
            }
            if let value = dict["OfflineRate"] as? Double {
                self.offlineRate = value
            }
        }
    }
    public var code: String?

    public var data: GetDataServiceApiCallSummaryResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetDataServiceApiCallSummaryResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetDataServiceApiCallSummaryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDataServiceApiCallSummaryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDataServiceApiCallSummaryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDataServiceApiCallTrendRequest : Tea.TeaModel {
    public var endTime: String?

    public var opTenantId: Int64?

    public var projectId: Int32?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class GetDataServiceApiCallTrendResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class CallErrorImpactTrendList : Tea.TeaModel {
            public var apiIdList: [Int64]?

            public var errorApiCount: Int32?

            public var errorAppCount: Int32?

            public var minute: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiIdList != nil {
                    map["ApiIdList"] = self.apiIdList!
                }
                if self.errorApiCount != nil {
                    map["ErrorApiCount"] = self.errorApiCount!
                }
                if self.errorAppCount != nil {
                    map["ErrorAppCount"] = self.errorAppCount!
                }
                if self.minute != nil {
                    map["Minute"] = self.minute!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiIdList"] as? [Int64] {
                    self.apiIdList = value
                }
                if let value = dict["ErrorApiCount"] as? Int32 {
                    self.errorApiCount = value
                }
                if let value = dict["ErrorAppCount"] as? Int32 {
                    self.errorAppCount = value
                }
                if let value = dict["Minute"] as? String {
                    self.minute = value
                }
            }
        }
        public class CallErrorTrendList : Tea.TeaModel {
            public var callCount: Int64?

            public var errorCount: Int64?

            public var minute: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.callCount != nil {
                    map["CallCount"] = self.callCount!
                }
                if self.errorCount != nil {
                    map["ErrorCount"] = self.errorCount!
                }
                if self.minute != nil {
                    map["Minute"] = self.minute!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CallCount"] as? Int64 {
                    self.callCount = value
                }
                if let value = dict["ErrorCount"] as? Int64 {
                    self.errorCount = value
                }
                if let value = dict["Minute"] as? String {
                    self.minute = value
                }
            }
        }
        public var callErrorImpactTrendList: [GetDataServiceApiCallTrendResponseBody.Data.CallErrorImpactTrendList]?

        public var callErrorTrendList: [GetDataServiceApiCallTrendResponseBody.Data.CallErrorTrendList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callErrorImpactTrendList != nil {
                var tmp : [Any] = []
                for k in self.callErrorImpactTrendList! {
                    tmp.append(k.toMap())
                }
                map["CallErrorImpactTrendList"] = tmp
            }
            if self.callErrorTrendList != nil {
                var tmp : [Any] = []
                for k in self.callErrorTrendList! {
                    tmp.append(k.toMap())
                }
                map["CallErrorTrendList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallErrorImpactTrendList"] as? [Any?] {
                var tmp : [GetDataServiceApiCallTrendResponseBody.Data.CallErrorImpactTrendList] = []
                for v in value {
                    if v != nil {
                        var model = GetDataServiceApiCallTrendResponseBody.Data.CallErrorImpactTrendList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.callErrorImpactTrendList = tmp
            }
            if let value = dict["CallErrorTrendList"] as? [Any?] {
                var tmp : [GetDataServiceApiCallTrendResponseBody.Data.CallErrorTrendList] = []
                for v in value {
                    if v != nil {
                        var model = GetDataServiceApiCallTrendResponseBody.Data.CallErrorTrendList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.callErrorTrendList = tmp
            }
        }
    }
    public var code: String?

    public var data: GetDataServiceApiCallTrendResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetDataServiceApiCallTrendResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetDataServiceApiCallTrendResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDataServiceApiCallTrendResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDataServiceApiCallTrendResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDataServiceApiDocumentRequest : Tea.TeaModel {
    public var id: Int64?

    public var opTenantId: Int64?

    public var versionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.versionId != nil {
            map["VersionId"] = self.versionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["VersionId"] as? String {
            self.versionId = value
        }
    }
}

public class GetDataServiceApiDocumentResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ApiRegisterInfo : Tea.TeaModel {
            public var authType: String?

            public var datasourceId: String?

            public var datasourceName: String?

            public var httpMethod: Int32?

            public var mode: Int32?

            public var path: String?

            public var protocol_: String?

            public var timeout: Int32?

            public var url: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.authType != nil {
                    map["AuthType"] = self.authType!
                }
                if self.datasourceId != nil {
                    map["DatasourceId"] = self.datasourceId!
                }
                if self.datasourceName != nil {
                    map["DatasourceName"] = self.datasourceName!
                }
                if self.httpMethod != nil {
                    map["HttpMethod"] = self.httpMethod!
                }
                if self.mode != nil {
                    map["Mode"] = self.mode!
                }
                if self.path != nil {
                    map["Path"] = self.path!
                }
                if self.protocol_ != nil {
                    map["Protocol"] = self.protocol_!
                }
                if self.timeout != nil {
                    map["Timeout"] = self.timeout!
                }
                if self.url != nil {
                    map["Url"] = self.url!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AuthType"] as? String {
                    self.authType = value
                }
                if let value = dict["DatasourceId"] as? String {
                    self.datasourceId = value
                }
                if let value = dict["DatasourceName"] as? String {
                    self.datasourceName = value
                }
                if let value = dict["HttpMethod"] as? Int32 {
                    self.httpMethod = value
                }
                if let value = dict["Mode"] as? Int32 {
                    self.mode = value
                }
                if let value = dict["Path"] as? String {
                    self.path = value
                }
                if let value = dict["Protocol"] as? String {
                    self.protocol_ = value
                }
                if let value = dict["Timeout"] as? Int32 {
                    self.timeout = value
                }
                if let value = dict["Url"] as? String {
                    self.url = value
                }
            }
        }
        public class PublicParamList : Tea.TeaModel {
            public var description_: String?

            public var isRequired: Bool?

            public var name: String?

            public var sample: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.isRequired != nil {
                    map["IsRequired"] = self.isRequired!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.sample != nil {
                    map["Sample"] = self.sample!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["IsRequired"] as? Bool {
                    self.isRequired = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Sample"] as? String {
                    self.sample = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public class RequestParamList : Tea.TeaModel {
            public var defaultValue: String?

            public var description_: String?

            public var isRequired: Bool?

            public var name: String?

            public var sample: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.defaultValue != nil {
                    map["DefaultValue"] = self.defaultValue!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.isRequired != nil {
                    map["IsRequired"] = self.isRequired!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.sample != nil {
                    map["Sample"] = self.sample!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DefaultValue"] as? String {
                    self.defaultValue = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["IsRequired"] as? Bool {
                    self.isRequired = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Sample"] as? String {
                    self.sample = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public class ResponseParamList : Tea.TeaModel {
            public var description_: String?

            public var name: String?

            public var sample: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.sample != nil {
                    map["Sample"] = self.sample!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Sample"] as? String {
                    self.sample = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var apiId: Int64?

        public var apiRegisterInfo: GetDataServiceApiDocumentResponseBody.Data.ApiRegisterInfo?

        public var apiTimeout: Int32?

        public var bizUnitName: String?

        public var cacheTime: String?

        public var createType: Int32?

        public var description_: String?

        public var directDatasourceId: Int64?

        public var directDatasourceName: String?

        public var env: Int32?

        public var groupId: Int32?

        public var groupName: String?

        public var isLogicalTable: Bool?

        public var isPagedQuery: Bool?

        public var isSpecialSql: Bool?

        public var mode: Int32?

        public var name: String?

        public var openCache: Bool?

        public var projectId: Int32?

        public var projectName: String?

        public var protocol_: Int32?

        public var publicParamList: [GetDataServiceApiDocumentResponseBody.Data.PublicParamList]?

        public var requestMethod: Int32?

        public var requestParamList: [GetDataServiceApiDocumentResponseBody.Data.RequestParamList]?

        public var resourceGroupId: String?

        public var resourceGroupName: String?

        public var responseParamList: [GetDataServiceApiDocumentResponseBody.Data.ResponseParamList]?

        public var resultSample: String?

        public var returnLimit: Int32?

        public var returnType: Int32?

        public var scriptType: String?

        public var sql: String?

        public var tableName: String?

        public var timeout: String?

        public var updateRate: Int32?

        public var version: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.apiRegisterInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiId != nil {
                map["ApiId"] = self.apiId!
            }
            if self.apiRegisterInfo != nil {
                map["ApiRegisterInfo"] = self.apiRegisterInfo?.toMap()
            }
            if self.apiTimeout != nil {
                map["ApiTimeout"] = self.apiTimeout!
            }
            if self.bizUnitName != nil {
                map["BizUnitName"] = self.bizUnitName!
            }
            if self.cacheTime != nil {
                map["CacheTime"] = self.cacheTime!
            }
            if self.createType != nil {
                map["CreateType"] = self.createType!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.directDatasourceId != nil {
                map["DirectDatasourceId"] = self.directDatasourceId!
            }
            if self.directDatasourceName != nil {
                map["DirectDatasourceName"] = self.directDatasourceName!
            }
            if self.env != nil {
                map["Env"] = self.env!
            }
            if self.groupId != nil {
                map["GroupId"] = self.groupId!
            }
            if self.groupName != nil {
                map["GroupName"] = self.groupName!
            }
            if self.isLogicalTable != nil {
                map["IsLogicalTable"] = self.isLogicalTable!
            }
            if self.isPagedQuery != nil {
                map["IsPagedQuery"] = self.isPagedQuery!
            }
            if self.isSpecialSql != nil {
                map["IsSpecialSql"] = self.isSpecialSql!
            }
            if self.mode != nil {
                map["Mode"] = self.mode!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.openCache != nil {
                map["OpenCache"] = self.openCache!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            if self.projectName != nil {
                map["ProjectName"] = self.projectName!
            }
            if self.protocol_ != nil {
                map["Protocol"] = self.protocol_!
            }
            if self.publicParamList != nil {
                var tmp : [Any] = []
                for k in self.publicParamList! {
                    tmp.append(k.toMap())
                }
                map["PublicParamList"] = tmp
            }
            if self.requestMethod != nil {
                map["RequestMethod"] = self.requestMethod!
            }
            if self.requestParamList != nil {
                var tmp : [Any] = []
                for k in self.requestParamList! {
                    tmp.append(k.toMap())
                }
                map["RequestParamList"] = tmp
            }
            if self.resourceGroupId != nil {
                map["ResourceGroupId"] = self.resourceGroupId!
            }
            if self.resourceGroupName != nil {
                map["ResourceGroupName"] = self.resourceGroupName!
            }
            if self.responseParamList != nil {
                var tmp : [Any] = []
                for k in self.responseParamList! {
                    tmp.append(k.toMap())
                }
                map["ResponseParamList"] = tmp
            }
            if self.resultSample != nil {
                map["ResultSample"] = self.resultSample!
            }
            if self.returnLimit != nil {
                map["ReturnLimit"] = self.returnLimit!
            }
            if self.returnType != nil {
                map["ReturnType"] = self.returnType!
            }
            if self.scriptType != nil {
                map["ScriptType"] = self.scriptType!
            }
            if self.sql != nil {
                map["Sql"] = self.sql!
            }
            if self.tableName != nil {
                map["TableName"] = self.tableName!
            }
            if self.timeout != nil {
                map["Timeout"] = self.timeout!
            }
            if self.updateRate != nil {
                map["UpdateRate"] = self.updateRate!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiId"] as? Int64 {
                self.apiId = value
            }
            if let value = dict["ApiRegisterInfo"] as? [String: Any?] {
                var model = GetDataServiceApiDocumentResponseBody.Data.ApiRegisterInfo()
                model.fromMap(value)
                self.apiRegisterInfo = model
            }
            if let value = dict["ApiTimeout"] as? Int32 {
                self.apiTimeout = value
            }
            if let value = dict["BizUnitName"] as? String {
                self.bizUnitName = value
            }
            if let value = dict["CacheTime"] as? String {
                self.cacheTime = value
            }
            if let value = dict["CreateType"] as? Int32 {
                self.createType = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DirectDatasourceId"] as? Int64 {
                self.directDatasourceId = value
            }
            if let value = dict["DirectDatasourceName"] as? String {
                self.directDatasourceName = value
            }
            if let value = dict["Env"] as? Int32 {
                self.env = value
            }
            if let value = dict["GroupId"] as? Int32 {
                self.groupId = value
            }
            if let value = dict["GroupName"] as? String {
                self.groupName = value
            }
            if let value = dict["IsLogicalTable"] as? Bool {
                self.isLogicalTable = value
            }
            if let value = dict["IsPagedQuery"] as? Bool {
                self.isPagedQuery = value
            }
            if let value = dict["IsSpecialSql"] as? Bool {
                self.isSpecialSql = value
            }
            if let value = dict["Mode"] as? Int32 {
                self.mode = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["OpenCache"] as? Bool {
                self.openCache = value
            }
            if let value = dict["ProjectId"] as? Int32 {
                self.projectId = value
            }
            if let value = dict["ProjectName"] as? String {
                self.projectName = value
            }
            if let value = dict["Protocol"] as? Int32 {
                self.protocol_ = value
            }
            if let value = dict["PublicParamList"] as? [Any?] {
                var tmp : [GetDataServiceApiDocumentResponseBody.Data.PublicParamList] = []
                for v in value {
                    if v != nil {
                        var model = GetDataServiceApiDocumentResponseBody.Data.PublicParamList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.publicParamList = tmp
            }
            if let value = dict["RequestMethod"] as? Int32 {
                self.requestMethod = value
            }
            if let value = dict["RequestParamList"] as? [Any?] {
                var tmp : [GetDataServiceApiDocumentResponseBody.Data.RequestParamList] = []
                for v in value {
                    if v != nil {
                        var model = GetDataServiceApiDocumentResponseBody.Data.RequestParamList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.requestParamList = tmp
            }
            if let value = dict["ResourceGroupId"] as? String {
                self.resourceGroupId = value
            }
            if let value = dict["ResourceGroupName"] as? String {
                self.resourceGroupName = value
            }
            if let value = dict["ResponseParamList"] as? [Any?] {
                var tmp : [GetDataServiceApiDocumentResponseBody.Data.ResponseParamList] = []
                for v in value {
                    if v != nil {
                        var model = GetDataServiceApiDocumentResponseBody.Data.ResponseParamList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.responseParamList = tmp
            }
            if let value = dict["ResultSample"] as? String {
                self.resultSample = value
            }
            if let value = dict["ReturnLimit"] as? Int32 {
                self.returnLimit = value
            }
            if let value = dict["ReturnType"] as? Int32 {
                self.returnType = value
            }
            if let value = dict["ScriptType"] as? String {
                self.scriptType = value
            }
            if let value = dict["Sql"] as? String {
                self.sql = value
            }
            if let value = dict["TableName"] as? String {
                self.tableName = value
            }
            if let value = dict["Timeout"] as? String {
                self.timeout = value
            }
            if let value = dict["UpdateRate"] as? Int32 {
                self.updateRate = value
            }
            if let value = dict["Version"] as? String {
                self.version = value
            }
        }
    }
    public var code: String?

    public var data: GetDataServiceApiDocumentResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetDataServiceApiDocumentResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetDataServiceApiDocumentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDataServiceApiDocumentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDataServiceApiDocumentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDataServiceApiErrorImpactRequest : Tea.TeaModel {
    public var endTime: String?

    public var opTenantId: Int64?

    public var projectId: Int32?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class GetDataServiceApiErrorImpactResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class ErrorApiList : Tea.TeaModel {
            public var apiName: String?

            public var appId: Int64?

            public var errorCount: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiName != nil {
                    map["ApiName"] = self.apiName!
                }
                if self.appId != nil {
                    map["AppId"] = self.appId!
                }
                if self.errorCount != nil {
                    map["ErrorCount"] = self.errorCount!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiName"] as? String {
                    self.apiName = value
                }
                if let value = dict["AppId"] as? Int64 {
                    self.appId = value
                }
                if let value = dict["ErrorCount"] as? Int64 {
                    self.errorCount = value
                }
            }
        }
        public class ErrorAppList : Tea.TeaModel {
            public var appId: Int32?

            public var appKey: Int64?

            public var appName: String?

            public var errorCount: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appId != nil {
                    map["AppId"] = self.appId!
                }
                if self.appKey != nil {
                    map["AppKey"] = self.appKey!
                }
                if self.appName != nil {
                    map["AppName"] = self.appName!
                }
                if self.errorCount != nil {
                    map["ErrorCount"] = self.errorCount!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AppId"] as? Int32 {
                    self.appId = value
                }
                if let value = dict["AppKey"] as? Int64 {
                    self.appKey = value
                }
                if let value = dict["AppName"] as? String {
                    self.appName = value
                }
                if let value = dict["ErrorCount"] as? Int64 {
                    self.errorCount = value
                }
            }
        }
        public var errorApiList: [GetDataServiceApiErrorImpactResponseBody.Data.ErrorApiList]?

        public var errorAppList: [GetDataServiceApiErrorImpactResponseBody.Data.ErrorAppList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorApiList != nil {
                var tmp : [Any] = []
                for k in self.errorApiList! {
                    tmp.append(k.toMap())
                }
                map["ErrorApiList"] = tmp
            }
            if self.errorAppList != nil {
                var tmp : [Any] = []
                for k in self.errorAppList! {
                    tmp.append(k.toMap())
                }
                map["ErrorAppList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorApiList"] as? [Any?] {
                var tmp : [GetDataServiceApiErrorImpactResponseBody.Data.ErrorApiList] = []
                for v in value {
                    if v != nil {
                        var model = GetDataServiceApiErrorImpactResponseBody.Data.ErrorApiList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.errorApiList = tmp
            }
            if let value = dict["ErrorAppList"] as? [Any?] {
                var tmp : [GetDataServiceApiErrorImpactResponseBody.Data.ErrorAppList] = []
                for v in value {
                    if v != nil {
                        var model = GetDataServiceApiErrorImpactResponseBody.Data.ErrorAppList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.errorAppList = tmp
            }
        }
    }
    public var code: String?

    public var data: GetDataServiceApiErrorImpactResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetDataServiceApiErrorImpactResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetDataServiceApiErrorImpactResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDataServiceApiErrorImpactResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDataServiceApiErrorImpactResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDataServiceApiGroupsRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var projectId: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
    }
}

public class GetDataServiceApiGroupsResponseBody : Tea.TeaModel {
    public class ApiGroupList : Tea.TeaModel {
        public var id: Int32?

        public var name: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Id"] as? Int32 {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
        }
    }
    public var apiGroupList: [GetDataServiceApiGroupsResponseBody.ApiGroupList]?

    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiGroupList != nil {
            var tmp : [Any] = []
            for k in self.apiGroupList! {
                tmp.append(k.toMap())
            }
            map["ApiGroupList"] = tmp
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiGroupList"] as? [Any?] {
            var tmp : [GetDataServiceApiGroupsResponseBody.ApiGroupList] = []
            for v in value {
                if v != nil {
                    var model = GetDataServiceApiGroupsResponseBody.ApiGroupList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.apiGroupList = tmp
        }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetDataServiceApiGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDataServiceApiGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDataServiceApiGroupsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDataServiceAppAuthorizedUsersRequest : Tea.TeaModel {
    public var appId: Int32?

    public var opTenantId: Int64?

    public var projectId: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? Int32 {
            self.appId = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
    }
}

public class GetDataServiceAppAuthorizedUsersResponseBody : Tea.TeaModel {
    public class UserList : Tea.TeaModel {
        public var displayName: String?

        public var id: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var userList: [GetDataServiceAppAuthorizedUsersResponseBody.UserList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.userList != nil {
            var tmp : [Any] = []
            for k in self.userList! {
                tmp.append(k.toMap())
            }
            map["UserList"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["UserList"] as? [Any?] {
            var tmp : [GetDataServiceAppAuthorizedUsersResponseBody.UserList] = []
            for v in value {
                if v != nil {
                    var model = GetDataServiceAppAuthorizedUsersResponseBody.UserList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.userList = tmp
        }
    }
}

public class GetDataServiceAppAuthorizedUsersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDataServiceAppAuthorizedUsersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDataServiceAppAuthorizedUsersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDataServiceAppGroupsRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var projectId: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
    }
}

public class GetDataServiceAppGroupsResponseBody : Tea.TeaModel {
    public class AppGroupList : Tea.TeaModel {
        public var id: Int32?

        public var name: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Id"] as? Int32 {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
        }
    }
    public var appGroupList: [GetDataServiceAppGroupsResponseBody.AppGroupList]?

    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appGroupList != nil {
            var tmp : [Any] = []
            for k in self.appGroupList! {
                tmp.append(k.toMap())
            }
            map["AppGroupList"] = tmp
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppGroupList"] as? [Any?] {
            var tmp : [GetDataServiceAppGroupsResponseBody.AppGroupList] = []
            for v in value {
                if v != nil {
                    var model = GetDataServiceAppGroupsResponseBody.AppGroupList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.appGroupList = tmp
        }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetDataServiceAppGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDataServiceAppGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDataServiceAppGroupsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDataServiceAppsByGroupIdRequest : Tea.TeaModel {
    public var groupId: Int32?

    public var opTenantId: Int64?

    public var projectId: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? Int32 {
            self.groupId = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
    }
}

public class GetDataServiceAppsByGroupIdResponseBody : Tea.TeaModel {
    public class AppInfoList : Tea.TeaModel {
        public var id: Int32?

        public var name: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Id"] as? Int32 {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
        }
    }
    public var appInfoList: [GetDataServiceAppsByGroupIdResponseBody.AppInfoList]?

    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appInfoList != nil {
            var tmp : [Any] = []
            for k in self.appInfoList! {
                tmp.append(k.toMap())
            }
            map["AppInfoList"] = tmp
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppInfoList"] as? [Any?] {
            var tmp : [GetDataServiceAppsByGroupIdResponseBody.AppInfoList] = []
            for v in value {
                if v != nil {
                    var model = GetDataServiceAppsByGroupIdResponseBody.AppInfoList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.appInfoList = tmp
        }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetDataServiceAppsByGroupIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDataServiceAppsByGroupIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDataServiceAppsByGroupIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDataServiceAuthorizedAppsByGroupIdRequest : Tea.TeaModel {
    public var groupId: Int32?

    public var opTenantId: Int64?

    public var projectId: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? Int32 {
            self.groupId = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
    }
}

public class GetDataServiceAuthorizedAppsByGroupIdResponseBody : Tea.TeaModel {
    public class AppInfoList : Tea.TeaModel {
        public var appKey: Int64?

        public var id: Int32?

        public var name: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appKey != nil {
                map["AppKey"] = self.appKey!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppKey"] as? Int64 {
                self.appKey = value
            }
            if let value = dict["Id"] as? Int32 {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
        }
    }
    public var appInfoList: [GetDataServiceAuthorizedAppsByGroupIdResponseBody.AppInfoList]?

    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appInfoList != nil {
            var tmp : [Any] = []
            for k in self.appInfoList! {
                tmp.append(k.toMap())
            }
            map["AppInfoList"] = tmp
        }
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppInfoList"] as? [Any?] {
            var tmp : [GetDataServiceAuthorizedAppsByGroupIdResponseBody.AppInfoList] = []
            for v in value {
                if v != nil {
                    var model = GetDataServiceAuthorizedAppsByGroupIdResponseBody.AppInfoList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.appInfoList = tmp
        }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetDataServiceAuthorizedAppsByGroupIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDataServiceAuthorizedAppsByGroupIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDataServiceAuthorizedAppsByGroupIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDataServiceAuthorizedProjectsRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class GetDataServiceAuthorizedProjectsResponseBody : Tea.TeaModel {
    public class ProjectList : Tea.TeaModel {
        public var projectId: Int32?

        public var projectName: String?

        public var role: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            if self.projectName != nil {
                map["ProjectName"] = self.projectName!
            }
            if self.role != nil {
                map["Role"] = self.role!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ProjectId"] as? Int32 {
                self.projectId = value
            }
            if let value = dict["ProjectName"] as? String {
                self.projectName = value
            }
            if let value = dict["Role"] as? Int32 {
                self.role = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var projectList: [GetDataServiceAuthorizedProjectsResponseBody.ProjectList]?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.projectList != nil {
            var tmp : [Any] = []
            for k in self.projectList! {
                tmp.append(k.toMap())
            }
            map["ProjectList"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["ProjectList"] as? [Any?] {
            var tmp : [GetDataServiceAuthorizedProjectsResponseBody.ProjectList] = []
            for v in value {
                if v != nil {
                    var model = GetDataServiceAuthorizedProjectsResponseBody.ProjectList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.projectList = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetDataServiceAuthorizedProjectsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDataServiceAuthorizedProjectsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDataServiceAuthorizedProjectsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDataServiceMyProjectsRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class GetDataServiceMyProjectsResponseBody : Tea.TeaModel {
    public class ProjectList : Tea.TeaModel {
        public var projectId: Int32?

        public var projectName: String?

        public var role: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            if self.projectName != nil {
                map["ProjectName"] = self.projectName!
            }
            if self.role != nil {
                map["Role"] = self.role!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ProjectId"] as? Int32 {
                self.projectId = value
            }
            if let value = dict["ProjectName"] as? String {
                self.projectName = value
            }
            if let value = dict["Role"] as? Int32 {
                self.role = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var projectList: [GetDataServiceMyProjectsResponseBody.ProjectList]?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.projectList != nil {
            var tmp : [Any] = []
            for k in self.projectList! {
                tmp.append(k.toMap())
            }
            map["ProjectList"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["ProjectList"] as? [Any?] {
            var tmp : [GetDataServiceMyProjectsResponseBody.ProjectList] = []
            for v in value {
                if v != nil {
                    var model = GetDataServiceMyProjectsResponseBody.ProjectList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.projectList = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetDataServiceMyProjectsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDataServiceMyProjectsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDataServiceMyProjectsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDataServiceProjectAddableUsersRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var projectId: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
    }
}

public class GetDataServiceProjectAddableUsersResponseBody : Tea.TeaModel {
    public class UserList : Tea.TeaModel {
        public var accountName: String?

        public var displayName: String?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountName != nil {
                map["AccountName"] = self.accountName!
            }
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccountName"] as? String {
                self.accountName = value
            }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var userList: [GetDataServiceProjectAddableUsersResponseBody.UserList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.userList != nil {
            var tmp : [Any] = []
            for k in self.userList! {
                tmp.append(k.toMap())
            }
            map["UserList"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["UserList"] as? [Any?] {
            var tmp : [GetDataServiceProjectAddableUsersResponseBody.UserList] = []
            for v in value {
                if v != nil {
                    var model = GetDataServiceProjectAddableUsersResponseBody.UserList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.userList = tmp
        }
    }
}

public class GetDataServiceProjectAddableUsersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDataServiceProjectAddableUsersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDataServiceProjectAddableUsersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDataSourceDependenciesRequest : Tea.TeaModel {
    public var id: Int64?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class GetDataSourceDependenciesResponseBody : Tea.TeaModel {
    public class DependencyList : Tea.TeaModel {
        public var id: String?

        public var name: String?

        public var type: String?

        public var typeCode: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.typeCode != nil {
                map["TypeCode"] = self.typeCode!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["TypeCode"] as? String {
                self.typeCode = value
            }
        }
    }
    public var code: String?

    public var dependencyList: [GetDataSourceDependenciesResponseBody.DependencyList]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.dependencyList != nil {
            var tmp : [Any] = []
            for k in self.dependencyList! {
                tmp.append(k.toMap())
            }
            map["DependencyList"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["DependencyList"] as? [Any?] {
            var tmp : [GetDataSourceDependenciesResponseBody.DependencyList] = []
            for v in value {
                if v != nil {
                    var model = GetDataSourceDependenciesResponseBody.DependencyList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.dependencyList = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetDataSourceDependenciesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDataSourceDependenciesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDataSourceDependenciesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDevObjectDependencyRequest : Tea.TeaModel {
    public var objectFrom: String?

    public var objectId: String?

    public var objectType: String?

    public var opTenantId: Int64?

    public var projectId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.objectFrom != nil {
            map["ObjectFrom"] = self.objectFrom!
        }
        if self.objectId != nil {
            map["ObjectId"] = self.objectId!
        }
        if self.objectType != nil {
            map["ObjectType"] = self.objectType!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ObjectFrom"] as? String {
            self.objectFrom = value
        }
        if let value = dict["ObjectId"] as? String {
            self.objectId = value
        }
        if let value = dict["ObjectType"] as? String {
            self.objectType = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
    }
}

public class GetDevObjectDependencyResponseBody : Tea.TeaModel {
    public class DevObjectDependencyList : Tea.TeaModel {
        public class DependencyPeriod : Tea.TeaModel {
            public var periodOffset: Int32?

            public var periodType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.periodOffset != nil {
                    map["PeriodOffset"] = self.periodOffset!
                }
                if self.periodType != nil {
                    map["PeriodType"] = self.periodType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["PeriodOffset"] as? Int32 {
                    self.periodOffset = value
                }
                if let value = dict["PeriodType"] as? String {
                    self.periodType = value
                }
            }
        }
        public class OutputContextParamList : Tea.TeaModel {
            public var defaultValue: String?

            public var description_: String?

            public var key: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.defaultValue != nil {
                    map["DefaultValue"] = self.defaultValue!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.key != nil {
                    map["Key"] = self.key!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DefaultValue"] as? String {
                    self.defaultValue = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
            }
        }
        public class OwnerList : Tea.TeaModel {
            public var id: String?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public var autoParse: Bool?

        public var bizType: String?

        public var bizUnitId: String?

        public var bizUnitName: String?

        public var cronExpression: String?

        public var customCronExpression: Bool?

        public var dependFieldList: [String]?

        public var dependencyPeriod: GetDevObjectDependencyResponseBody.DevObjectDependencyList.DependencyPeriod?

        public var dependencyStrategy: String?

        public var dimMidNode: Bool?

        public var effectFieldList: [String]?

        public var externalBizInfo: String?

        public var manuallyAdd: Bool?

        public var nodeId: String?

        public var nodeName: String?

        public var nodeOutputName: String?

        public var nodeOutputTableName: String?

        public var nodeType: String?

        public var outputContextParamList: [GetDevObjectDependencyResponseBody.DevObjectDependencyList.OutputContextParamList]?

        public var ownerList: [GetDevObjectDependencyResponseBody.DevObjectDependencyList.OwnerList]?

        public var periodDiff: Int32?

        public var projectId: Int64?

        public var projectName: String?

        public var scheduleType: String?

        public var selfDepend: Bool?

        public var subBizType: String?

        public var valid: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.dependencyPeriod?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.autoParse != nil {
                map["AutoParse"] = self.autoParse!
            }
            if self.bizType != nil {
                map["BizType"] = self.bizType!
            }
            if self.bizUnitId != nil {
                map["BizUnitId"] = self.bizUnitId!
            }
            if self.bizUnitName != nil {
                map["BizUnitName"] = self.bizUnitName!
            }
            if self.cronExpression != nil {
                map["CronExpression"] = self.cronExpression!
            }
            if self.customCronExpression != nil {
                map["CustomCronExpression"] = self.customCronExpression!
            }
            if self.dependFieldList != nil {
                map["DependFieldList"] = self.dependFieldList!
            }
            if self.dependencyPeriod != nil {
                map["DependencyPeriod"] = self.dependencyPeriod?.toMap()
            }
            if self.dependencyStrategy != nil {
                map["DependencyStrategy"] = self.dependencyStrategy!
            }
            if self.dimMidNode != nil {
                map["DimMidNode"] = self.dimMidNode!
            }
            if self.effectFieldList != nil {
                map["EffectFieldList"] = self.effectFieldList!
            }
            if self.externalBizInfo != nil {
                map["ExternalBizInfo"] = self.externalBizInfo!
            }
            if self.manuallyAdd != nil {
                map["ManuallyAdd"] = self.manuallyAdd!
            }
            if self.nodeId != nil {
                map["NodeId"] = self.nodeId!
            }
            if self.nodeName != nil {
                map["NodeName"] = self.nodeName!
            }
            if self.nodeOutputName != nil {
                map["NodeOutputName"] = self.nodeOutputName!
            }
            if self.nodeOutputTableName != nil {
                map["NodeOutputTableName"] = self.nodeOutputTableName!
            }
            if self.nodeType != nil {
                map["NodeType"] = self.nodeType!
            }
            if self.outputContextParamList != nil {
                var tmp : [Any] = []
                for k in self.outputContextParamList! {
                    tmp.append(k.toMap())
                }
                map["OutputContextParamList"] = tmp
            }
            if self.ownerList != nil {
                var tmp : [Any] = []
                for k in self.ownerList! {
                    tmp.append(k.toMap())
                }
                map["OwnerList"] = tmp
            }
            if self.periodDiff != nil {
                map["PeriodDiff"] = self.periodDiff!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            if self.projectName != nil {
                map["ProjectName"] = self.projectName!
            }
            if self.scheduleType != nil {
                map["ScheduleType"] = self.scheduleType!
            }
            if self.selfDepend != nil {
                map["SelfDepend"] = self.selfDepend!
            }
            if self.subBizType != nil {
                map["SubBizType"] = self.subBizType!
            }
            if self.valid != nil {
                map["Valid"] = self.valid!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AutoParse"] as? Bool {
                self.autoParse = value
            }
            if let value = dict["BizType"] as? String {
                self.bizType = value
            }
            if let value = dict["BizUnitId"] as? String {
                self.bizUnitId = value
            }
            if let value = dict["BizUnitName"] as? String {
                self.bizUnitName = value
            }
            if let value = dict["CronExpression"] as? String {
                self.cronExpression = value
            }
            if let value = dict["CustomCronExpression"] as? Bool {
                self.customCronExpression = value
            }
            if let value = dict["DependFieldList"] as? [String] {
                self.dependFieldList = value
            }
            if let value = dict["DependencyPeriod"] as? [String: Any?] {
                var model = GetDevObjectDependencyResponseBody.DevObjectDependencyList.DependencyPeriod()
                model.fromMap(value)
                self.dependencyPeriod = model
            }
            if let value = dict["DependencyStrategy"] as? String {
                self.dependencyStrategy = value
            }
            if let value = dict["DimMidNode"] as? Bool {
                self.dimMidNode = value
            }
            if let value = dict["EffectFieldList"] as? [String] {
                self.effectFieldList = value
            }
            if let value = dict["ExternalBizInfo"] as? String {
                self.externalBizInfo = value
            }
            if let value = dict["ManuallyAdd"] as? Bool {
                self.manuallyAdd = value
            }
            if let value = dict["NodeId"] as? String {
                self.nodeId = value
            }
            if let value = dict["NodeName"] as? String {
                self.nodeName = value
            }
            if let value = dict["NodeOutputName"] as? String {
                self.nodeOutputName = value
            }
            if let value = dict["NodeOutputTableName"] as? String {
                self.nodeOutputTableName = value
            }
            if let value = dict["NodeType"] as? String {
                self.nodeType = value
            }
            if let value = dict["OutputContextParamList"] as? [Any?] {
                var tmp : [GetDevObjectDependencyResponseBody.DevObjectDependencyList.OutputContextParamList] = []
                for v in value {
                    if v != nil {
                        var model = GetDevObjectDependencyResponseBody.DevObjectDependencyList.OutputContextParamList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.outputContextParamList = tmp
            }
            if let value = dict["OwnerList"] as? [Any?] {
                var tmp : [GetDevObjectDependencyResponseBody.DevObjectDependencyList.OwnerList] = []
                for v in value {
                    if v != nil {
                        var model = GetDevObjectDependencyResponseBody.DevObjectDependencyList.OwnerList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.ownerList = tmp
            }
            if let value = dict["PeriodDiff"] as? Int32 {
                self.periodDiff = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
            if let value = dict["ProjectName"] as? String {
                self.projectName = value
            }
            if let value = dict["ScheduleType"] as? String {
                self.scheduleType = value
            }
            if let value = dict["SelfDepend"] as? Bool {
                self.selfDepend = value
            }
            if let value = dict["SubBizType"] as? String {
                self.subBizType = value
            }
            if let value = dict["Valid"] as? Bool {
                self.valid = value
            }
        }
    }
    public var code: String?

    public var devObjectDependencyList: [GetDevObjectDependencyResponseBody.DevObjectDependencyList]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.devObjectDependencyList != nil {
            var tmp : [Any] = []
            for k in self.devObjectDependencyList! {
                tmp.append(k.toMap())
            }
            map["DevObjectDependencyList"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["DevObjectDependencyList"] as? [Any?] {
            var tmp : [GetDevObjectDependencyResponseBody.DevObjectDependencyList] = []
            for v in value {
                if v != nil {
                    var model = GetDevObjectDependencyResponseBody.DevObjectDependencyList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.devObjectDependencyList = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetDevObjectDependencyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDevObjectDependencyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDevObjectDependencyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetDirectoryTreeRequest : Tea.TeaModel {
    public var category: String?

    public var opTenantId: Int64?

    public var projectId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.category != nil {
            map["Category"] = self.category!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Category"] as? String {
            self.category = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
    }
}

public class GetDirectoryTreeResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Children : Tea.TeaModel {
            public var categoryType: String?

            public var creator: String?

            public var creatorName: String?

            public var dataCellId: Int64?

            public var dirName: String?

            public var gmtCreate: String?

            public var gmtModified: String?

            public var id: Int64?

            public var lastModifier: String?

            public var lastModifierName: String?

            public var name: String?

            public var projectId: Int64?

            public var stringId: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.categoryType != nil {
                    map["CategoryType"] = self.categoryType!
                }
                if self.creator != nil {
                    map["Creator"] = self.creator!
                }
                if self.creatorName != nil {
                    map["CreatorName"] = self.creatorName!
                }
                if self.dataCellId != nil {
                    map["DataCellId"] = self.dataCellId!
                }
                if self.dirName != nil {
                    map["DirName"] = self.dirName!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["GmtModified"] = self.gmtModified!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.lastModifier != nil {
                    map["LastModifier"] = self.lastModifier!
                }
                if self.lastModifierName != nil {
                    map["LastModifierName"] = self.lastModifierName!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.projectId != nil {
                    map["ProjectId"] = self.projectId!
                }
                if self.stringId != nil {
                    map["StringId"] = self.stringId!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CategoryType"] as? String {
                    self.categoryType = value
                }
                if let value = dict["Creator"] as? String {
                    self.creator = value
                }
                if let value = dict["CreatorName"] as? String {
                    self.creatorName = value
                }
                if let value = dict["DataCellId"] as? Int64 {
                    self.dataCellId = value
                }
                if let value = dict["DirName"] as? String {
                    self.dirName = value
                }
                if let value = dict["GmtCreate"] as? String {
                    self.gmtCreate = value
                }
                if let value = dict["GmtModified"] as? String {
                    self.gmtModified = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["LastModifier"] as? String {
                    self.lastModifier = value
                }
                if let value = dict["LastModifierName"] as? String {
                    self.lastModifierName = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["ProjectId"] as? Int64 {
                    self.projectId = value
                }
                if let value = dict["StringId"] as? String {
                    self.stringId = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public class Parent : Tea.TeaModel {
            public var categoryType: String?

            public var creator: String?

            public var creatorName: String?

            public var dataCellId: Int64?

            public var dirName: String?

            public var gmtCreate: String?

            public var gmtModified: String?

            public var id: Int64?

            public var lastModifier: String?

            public var lastModifierName: String?

            public var name: String?

            public var projectId: Int64?

            public var stringId: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.categoryType != nil {
                    map["CategoryType"] = self.categoryType!
                }
                if self.creator != nil {
                    map["Creator"] = self.creator!
                }
                if self.creatorName != nil {
                    map["CreatorName"] = self.creatorName!
                }
                if self.dataCellId != nil {
                    map["DataCellId"] = self.dataCellId!
                }
                if self.dirName != nil {
                    map["DirName"] = self.dirName!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["GmtModified"] = self.gmtModified!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.lastModifier != nil {
                    map["LastModifier"] = self.lastModifier!
                }
                if self.lastModifierName != nil {
                    map["LastModifierName"] = self.lastModifierName!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.projectId != nil {
                    map["ProjectId"] = self.projectId!
                }
                if self.stringId != nil {
                    map["StringId"] = self.stringId!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CategoryType"] as? String {
                    self.categoryType = value
                }
                if let value = dict["Creator"] as? String {
                    self.creator = value
                }
                if let value = dict["CreatorName"] as? String {
                    self.creatorName = value
                }
                if let value = dict["DataCellId"] as? Int64 {
                    self.dataCellId = value
                }
                if let value = dict["DirName"] as? String {
                    self.dirName = value
                }
                if let value = dict["GmtCreate"] as? String {
                    self.gmtCreate = value
                }
                if let value = dict["GmtModified"] as? String {
                    self.gmtModified = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["LastModifier"] as? String {
                    self.lastModifier = value
                }
                if let value = dict["LastModifierName"] as? String {
                    self.lastModifierName = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["ProjectId"] as? Int64 {
                    self.projectId = value
                }
                if let value = dict["StringId"] as? String {
                    self.stringId = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var children: GetDirectoryTreeResponseBody.Data.Children?

        public var parent: GetDirectoryTreeResponseBody.Data.Parent?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.children?.validate()
            try self.parent?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.children != nil {
                map["Children"] = self.children?.toMap()
            }
            if self.parent != nil {
                map["Parent"] = self.parent?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Children"] as? [String: Any?] {
                var model = GetDirectoryTreeResponseBody.Data.Children()
                model.fromMap(value)
                self.children = model
            }
            if let value = dict["Parent"] as? [String: Any?] {
                var model = GetDirectoryTreeResponseBody.Data.Parent()
                model.fromMap(value)
                self.parent = model
            }
        }
    }
    public var code: String?

    public var data: [GetDirectoryTreeResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [GetDirectoryTreeResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = GetDirectoryTreeResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetDirectoryTreeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetDirectoryTreeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetDirectoryTreeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetFileStorageCredentialRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var projectId: Int64?

    public var purpose: String?

    public var useVpcEndpoint: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        if self.purpose != nil {
            map["Purpose"] = self.purpose!
        }
        if self.useVpcEndpoint != nil {
            map["UseVpcEndpoint"] = self.useVpcEndpoint!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
        if let value = dict["Purpose"] as? String {
            self.purpose = value
        }
        if let value = dict["UseVpcEndpoint"] as? Bool {
            self.useVpcEndpoint = value
        }
    }
}

public class GetFileStorageCredentialResponseBody : Tea.TeaModel {
    public class StorageCredential : Tea.TeaModel {
        public var accessId: String?

        public var accessKey: String?

        public var bucket: String?

        public var endpoint: String?

        public var expiration: Int64?

        public var objectName: String?

        public var region: String?

        public var securityToken: String?

        public var storageType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accessId != nil {
                map["AccessId"] = self.accessId!
            }
            if self.accessKey != nil {
                map["AccessKey"] = self.accessKey!
            }
            if self.bucket != nil {
                map["Bucket"] = self.bucket!
            }
            if self.endpoint != nil {
                map["Endpoint"] = self.endpoint!
            }
            if self.expiration != nil {
                map["Expiration"] = self.expiration!
            }
            if self.objectName != nil {
                map["ObjectName"] = self.objectName!
            }
            if self.region != nil {
                map["Region"] = self.region!
            }
            if self.securityToken != nil {
                map["SecurityToken"] = self.securityToken!
            }
            if self.storageType != nil {
                map["StorageType"] = self.storageType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccessId"] as? String {
                self.accessId = value
            }
            if let value = dict["AccessKey"] as? String {
                self.accessKey = value
            }
            if let value = dict["Bucket"] as? String {
                self.bucket = value
            }
            if let value = dict["Endpoint"] as? String {
                self.endpoint = value
            }
            if let value = dict["Expiration"] as? Int64 {
                self.expiration = value
            }
            if let value = dict["ObjectName"] as? String {
                self.objectName = value
            }
            if let value = dict["Region"] as? String {
                self.region = value
            }
            if let value = dict["SecurityToken"] as? String {
                self.securityToken = value
            }
            if let value = dict["StorageType"] as? String {
                self.storageType = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var storageCredential: GetFileStorageCredentialResponseBody.StorageCredential?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.storageCredential?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.storageCredential != nil {
            map["StorageCredential"] = self.storageCredential?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["StorageCredential"] as? [String: Any?] {
            var model = GetFileStorageCredentialResponseBody.StorageCredential()
            model.fromMap(value)
            self.storageCredential = model
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetFileStorageCredentialResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetFileStorageCredentialResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetFileStorageCredentialResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetInstanceDownStreamRequest : Tea.TeaModel {
    public class InstanceGet : Tea.TeaModel {
        public var instanceId: String?

        public var nodeType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.instanceId != nil {
                map["InstanceId"] = self.instanceId!
            }
            if self.nodeType != nil {
                map["NodeType"] = self.nodeType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["InstanceId"] as? String {
                self.instanceId = value
            }
            if let value = dict["NodeType"] as? String {
                self.nodeType = value
            }
        }
    }
    public var downStreamDepth: Int32?

    public var env: String?

    public var instanceGet: GetInstanceDownStreamRequest.InstanceGet?

    public var opTenantId: Int64?

    public var runStatus: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.instanceGet?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.downStreamDepth != nil {
            map["DownStreamDepth"] = self.downStreamDepth!
        }
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.instanceGet != nil {
            map["InstanceGet"] = self.instanceGet?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.runStatus != nil {
            map["RunStatus"] = self.runStatus!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DownStreamDepth"] as? Int32 {
            self.downStreamDepth = value
        }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["InstanceGet"] as? [String: Any?] {
            var model = GetInstanceDownStreamRequest.InstanceGet()
            model.fromMap(value)
            self.instanceGet = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["RunStatus"] as? String {
            self.runStatus = value
        }
    }
}

public class GetInstanceDownStreamShrinkRequest : Tea.TeaModel {
    public var downStreamDepth: Int32?

    public var env: String?

    public var instanceGetShrink: String?

    public var opTenantId: Int64?

    public var runStatus: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.downStreamDepth != nil {
            map["DownStreamDepth"] = self.downStreamDepth!
        }
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.instanceGetShrink != nil {
            map["InstanceGet"] = self.instanceGetShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.runStatus != nil {
            map["RunStatus"] = self.runStatus!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DownStreamDepth"] as? Int32 {
            self.downStreamDepth = value
        }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["InstanceGet"] as? String {
            self.instanceGetShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["RunStatus"] as? String {
            self.runStatus = value
        }
    }
}

public class GetInstanceDownStreamResponseBody : Tea.TeaModel {
    public class InstanceRelationList : Tea.TeaModel {
        public class FieldInstanceList : Tea.TeaModel {
            public var fieldInstanceId: String?

            public var runStatus: String?

            public var selectStatus: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fieldInstanceId != nil {
                    map["FieldInstanceId"] = self.fieldInstanceId!
                }
                if self.runStatus != nil {
                    map["RunStatus"] = self.runStatus!
                }
                if self.selectStatus != nil {
                    map["SelectStatus"] = self.selectStatus!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FieldInstanceId"] as? String {
                    self.fieldInstanceId = value
                }
                if let value = dict["RunStatus"] as? String {
                    self.runStatus = value
                }
                if let value = dict["SelectStatus"] as? String {
                    self.selectStatus = value
                }
            }
        }
        public class InstanceInfo : Tea.TeaModel {
            public var id: String?

            public var name: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var downStreamDepth: Int32?

        public var extendInfo: String?

        public var fieldInstanceList: [GetInstanceDownStreamResponseBody.InstanceRelationList.FieldInstanceList]?

        public var instanceInfo: GetInstanceDownStreamResponseBody.InstanceRelationList.InstanceInfo?

        public var runStatus: String?

        public var selectStatus: String?

        public var selectStatusCause: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.instanceInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.downStreamDepth != nil {
                map["DownStreamDepth"] = self.downStreamDepth!
            }
            if self.extendInfo != nil {
                map["ExtendInfo"] = self.extendInfo!
            }
            if self.fieldInstanceList != nil {
                var tmp : [Any] = []
                for k in self.fieldInstanceList! {
                    tmp.append(k.toMap())
                }
                map["FieldInstanceList"] = tmp
            }
            if self.instanceInfo != nil {
                map["InstanceInfo"] = self.instanceInfo?.toMap()
            }
            if self.runStatus != nil {
                map["RunStatus"] = self.runStatus!
            }
            if self.selectStatus != nil {
                map["SelectStatus"] = self.selectStatus!
            }
            if self.selectStatusCause != nil {
                map["SelectStatusCause"] = self.selectStatusCause!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DownStreamDepth"] as? Int32 {
                self.downStreamDepth = value
            }
            if let value = dict["ExtendInfo"] as? String {
                self.extendInfo = value
            }
            if let value = dict["FieldInstanceList"] as? [Any?] {
                var tmp : [GetInstanceDownStreamResponseBody.InstanceRelationList.FieldInstanceList] = []
                for v in value {
                    if v != nil {
                        var model = GetInstanceDownStreamResponseBody.InstanceRelationList.FieldInstanceList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.fieldInstanceList = tmp
            }
            if let value = dict["InstanceInfo"] as? [String: Any?] {
                var model = GetInstanceDownStreamResponseBody.InstanceRelationList.InstanceInfo()
                model.fromMap(value)
                self.instanceInfo = model
            }
            if let value = dict["RunStatus"] as? String {
                self.runStatus = value
            }
            if let value = dict["SelectStatus"] as? String {
                self.selectStatus = value
            }
            if let value = dict["SelectStatusCause"] as? String {
                self.selectStatusCause = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var instanceRelationList: [GetInstanceDownStreamResponseBody.InstanceRelationList]?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.instanceRelationList != nil {
            var tmp : [Any] = []
            for k in self.instanceRelationList! {
                tmp.append(k.toMap())
            }
            map["InstanceRelationList"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["InstanceRelationList"] as? [Any?] {
            var tmp : [GetInstanceDownStreamResponseBody.InstanceRelationList] = []
            for v in value {
                if v != nil {
                    var model = GetInstanceDownStreamResponseBody.InstanceRelationList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.instanceRelationList = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetInstanceDownStreamResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetInstanceDownStreamResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetInstanceDownStreamResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetInstanceUpDownStreamRequest : Tea.TeaModel {
    public class InstanceId : Tea.TeaModel {
        public var fieldInstanceIdList: [String]?

        public var id: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fieldInstanceIdList != nil {
                map["FieldInstanceIdList"] = self.fieldInstanceIdList!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FieldInstanceIdList"] as? [String] {
                self.fieldInstanceIdList = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
        }
    }
    public var downStreamDepth: Int32?

    public var env: String?

    public var instanceId: GetInstanceUpDownStreamRequest.InstanceId?

    public var opTenantId: Int64?

    public var projectId: Int64?

    public var upStreamDepth: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.instanceId?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.downStreamDepth != nil {
            map["DownStreamDepth"] = self.downStreamDepth!
        }
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        if self.upStreamDepth != nil {
            map["UpStreamDepth"] = self.upStreamDepth!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DownStreamDepth"] as? Int32 {
            self.downStreamDepth = value
        }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["InstanceId"] as? [String: Any?] {
            var model = GetInstanceUpDownStreamRequest.InstanceId()
            model.fromMap(value)
            self.instanceId = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
        if let value = dict["UpStreamDepth"] as? Int32 {
            self.upStreamDepth = value
        }
    }
}

public class GetInstanceUpDownStreamShrinkRequest : Tea.TeaModel {
    public var downStreamDepth: Int32?

    public var env: String?

    public var instanceIdShrink: String?

    public var opTenantId: Int64?

    public var projectId: Int64?

    public var upStreamDepth: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.downStreamDepth != nil {
            map["DownStreamDepth"] = self.downStreamDepth!
        }
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.instanceIdShrink != nil {
            map["InstanceId"] = self.instanceIdShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        if self.upStreamDepth != nil {
            map["UpStreamDepth"] = self.upStreamDepth!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DownStreamDepth"] as? Int32 {
            self.downStreamDepth = value
        }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceIdShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
        if let value = dict["UpStreamDepth"] as? Int32 {
            self.upStreamDepth = value
        }
    }
}

public class GetInstanceUpDownStreamResponseBody : Tea.TeaModel {
    public class InstanceDagInfo : Tea.TeaModel {
        public class DownInstanceList : Tea.TeaModel {
            public var fieldInstanceIdList: [String]?

            public var id: String?

            public var name: String?

            public var nodeId: String?

            public var nodeType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fieldInstanceIdList != nil {
                    map["FieldInstanceIdList"] = self.fieldInstanceIdList!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.nodeId != nil {
                    map["NodeId"] = self.nodeId!
                }
                if self.nodeType != nil {
                    map["NodeType"] = self.nodeType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FieldInstanceIdList"] as? [String] {
                    self.fieldInstanceIdList = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["NodeId"] as? String {
                    self.nodeId = value
                }
                if let value = dict["NodeType"] as? String {
                    self.nodeType = value
                }
            }
        }
        public class StartInstanceList : Tea.TeaModel {
            public var fieldInstanceIdList: [String]?

            public var id: String?

            public var name: String?

            public var nodeId: String?

            public var nodeType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fieldInstanceIdList != nil {
                    map["FieldInstanceIdList"] = self.fieldInstanceIdList!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.nodeId != nil {
                    map["NodeId"] = self.nodeId!
                }
                if self.nodeType != nil {
                    map["NodeType"] = self.nodeType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FieldInstanceIdList"] as? [String] {
                    self.fieldInstanceIdList = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["NodeId"] as? String {
                    self.nodeId = value
                }
                if let value = dict["NodeType"] as? String {
                    self.nodeType = value
                }
            }
        }
        public class UpInstanceList : Tea.TeaModel {
            public var fieldInstanceIdList: [String]?

            public var id: String?

            public var name: String?

            public var nodeId: String?

            public var nodeType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fieldInstanceIdList != nil {
                    map["FieldInstanceIdList"] = self.fieldInstanceIdList!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.nodeId != nil {
                    map["NodeId"] = self.nodeId!
                }
                if self.nodeType != nil {
                    map["NodeType"] = self.nodeType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FieldInstanceIdList"] as? [String] {
                    self.fieldInstanceIdList = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["NodeId"] as? String {
                    self.nodeId = value
                }
                if let value = dict["NodeType"] as? String {
                    self.nodeType = value
                }
            }
        }
        public var downInstanceList: [GetInstanceUpDownStreamResponseBody.InstanceDagInfo.DownInstanceList]?

        public var startInstanceList: [GetInstanceUpDownStreamResponseBody.InstanceDagInfo.StartInstanceList]?

        public var upInstanceList: [GetInstanceUpDownStreamResponseBody.InstanceDagInfo.UpInstanceList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.downInstanceList != nil {
                var tmp : [Any] = []
                for k in self.downInstanceList! {
                    tmp.append(k.toMap())
                }
                map["DownInstanceList"] = tmp
            }
            if self.startInstanceList != nil {
                var tmp : [Any] = []
                for k in self.startInstanceList! {
                    tmp.append(k.toMap())
                }
                map["StartInstanceList"] = tmp
            }
            if self.upInstanceList != nil {
                var tmp : [Any] = []
                for k in self.upInstanceList! {
                    tmp.append(k.toMap())
                }
                map["UpInstanceList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DownInstanceList"] as? [Any?] {
                var tmp : [GetInstanceUpDownStreamResponseBody.InstanceDagInfo.DownInstanceList] = []
                for v in value {
                    if v != nil {
                        var model = GetInstanceUpDownStreamResponseBody.InstanceDagInfo.DownInstanceList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.downInstanceList = tmp
            }
            if let value = dict["StartInstanceList"] as? [Any?] {
                var tmp : [GetInstanceUpDownStreamResponseBody.InstanceDagInfo.StartInstanceList] = []
                for v in value {
                    if v != nil {
                        var model = GetInstanceUpDownStreamResponseBody.InstanceDagInfo.StartInstanceList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.startInstanceList = tmp
            }
            if let value = dict["UpInstanceList"] as? [Any?] {
                var tmp : [GetInstanceUpDownStreamResponseBody.InstanceDagInfo.UpInstanceList] = []
                for v in value {
                    if v != nil {
                        var model = GetInstanceUpDownStreamResponseBody.InstanceDagInfo.UpInstanceList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.upInstanceList = tmp
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var instanceDagInfo: GetInstanceUpDownStreamResponseBody.InstanceDagInfo?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.instanceDagInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.instanceDagInfo != nil {
            map["InstanceDagInfo"] = self.instanceDagInfo?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["InstanceDagInfo"] as? [String: Any?] {
            var model = GetInstanceUpDownStreamResponseBody.InstanceDagInfo()
            model.fromMap(value)
            self.instanceDagInfo = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetInstanceUpDownStreamResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetInstanceUpDownStreamResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetInstanceUpDownStreamResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetLatestSubmitDetailRequest : Tea.TeaModel {
    public class SubmitDetailQuery : Tea.TeaModel {
        public var objectId: String?

        public var objectType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.objectId != nil {
                map["ObjectId"] = self.objectId!
            }
            if self.objectType != nil {
                map["ObjectType"] = self.objectType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ObjectId"] as? String {
                self.objectId = value
            }
            if let value = dict["ObjectType"] as? String {
                self.objectType = value
            }
        }
    }
    public var opTenantId: Int64?

    public var submitDetailQuery: GetLatestSubmitDetailRequest.SubmitDetailQuery?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.submitDetailQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.submitDetailQuery != nil {
            map["SubmitDetailQuery"] = self.submitDetailQuery?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["SubmitDetailQuery"] as? [String: Any?] {
            var model = GetLatestSubmitDetailRequest.SubmitDetailQuery()
            model.fromMap(value)
            self.submitDetailQuery = model
        }
    }
}

public class GetLatestSubmitDetailShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var submitDetailQueryShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.submitDetailQueryShrink != nil {
            map["SubmitDetailQuery"] = self.submitDetailQueryShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["SubmitDetailQuery"] as? String {
            self.submitDetailQueryShrink = value
        }
    }
}

public class GetLatestSubmitDetailResponseBody : Tea.TeaModel {
    public class SubmitDetailResult : Tea.TeaModel {
        public class ReleaseObject : Tea.TeaModel {
            public class SubmitObject : Tea.TeaModel {
                public var objectId: String?

                public var objectName: String?

                public var objectType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.objectId != nil {
                        map["ObjectId"] = self.objectId!
                    }
                    if self.objectName != nil {
                        map["ObjectName"] = self.objectName!
                    }
                    if self.objectType != nil {
                        map["ObjectType"] = self.objectType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ObjectId"] as? String {
                        self.objectId = value
                    }
                    if let value = dict["ObjectName"] as? String {
                        self.objectName = value
                    }
                    if let value = dict["ObjectType"] as? String {
                        self.objectType = value
                    }
                }
            }
            public var changeType: String?

            public var nodeId: String?

            public var objectVersion: String?

            public var projectId: Int64?

            public var submitComment: String?

            public var submitObject: GetLatestSubmitDetailResponseBody.SubmitDetailResult.ReleaseObject.SubmitObject?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.submitObject?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.changeType != nil {
                    map["ChangeType"] = self.changeType!
                }
                if self.nodeId != nil {
                    map["NodeId"] = self.nodeId!
                }
                if self.objectVersion != nil {
                    map["ObjectVersion"] = self.objectVersion!
                }
                if self.projectId != nil {
                    map["ProjectId"] = self.projectId!
                }
                if self.submitComment != nil {
                    map["SubmitComment"] = self.submitComment!
                }
                if self.submitObject != nil {
                    map["SubmitObject"] = self.submitObject?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ChangeType"] as? String {
                    self.changeType = value
                }
                if let value = dict["NodeId"] as? String {
                    self.nodeId = value
                }
                if let value = dict["ObjectVersion"] as? String {
                    self.objectVersion = value
                }
                if let value = dict["ProjectId"] as? Int64 {
                    self.projectId = value
                }
                if let value = dict["SubmitComment"] as? String {
                    self.submitComment = value
                }
                if let value = dict["SubmitObject"] as? [String: Any?] {
                    var model = GetLatestSubmitDetailResponseBody.SubmitDetailResult.ReleaseObject.SubmitObject()
                    model.fromMap(value)
                    self.submitObject = model
                }
            }
        }
        public var id: Int64?

        public var publishStatus: String?

        public var releaseObject: GetLatestSubmitDetailResponseBody.SubmitDetailResult.ReleaseObject?

        public var submitStatus: String?

        public var tag: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.releaseObject?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.publishStatus != nil {
                map["PublishStatus"] = self.publishStatus!
            }
            if self.releaseObject != nil {
                map["ReleaseObject"] = self.releaseObject?.toMap()
            }
            if self.submitStatus != nil {
                map["SubmitStatus"] = self.submitStatus!
            }
            if self.tag != nil {
                map["Tag"] = self.tag!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["PublishStatus"] as? String {
                self.publishStatus = value
            }
            if let value = dict["ReleaseObject"] as? [String: Any?] {
                var model = GetLatestSubmitDetailResponseBody.SubmitDetailResult.ReleaseObject()
                model.fromMap(value)
                self.releaseObject = model
            }
            if let value = dict["SubmitStatus"] as? String {
                self.submitStatus = value
            }
            if let value = dict["Tag"] as? String {
                self.tag = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var submitDetailResult: GetLatestSubmitDetailResponseBody.SubmitDetailResult?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.submitDetailResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.submitDetailResult != nil {
            map["SubmitDetailResult"] = self.submitDetailResult?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SubmitDetailResult"] as? [String: Any?] {
            var model = GetLatestSubmitDetailResponseBody.SubmitDetailResult()
            model.fromMap(value)
            self.submitDetailResult = model
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetLatestSubmitDetailResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetLatestSubmitDetailResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetLatestSubmitDetailResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetMyRolesRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class GetMyRolesResponseBody : Tea.TeaModel {
    public class RoleList : Tea.TeaModel {
        public var description_: String?

        public var id: Int64?

        public var name: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var roleList: [GetMyRolesResponseBody.RoleList]?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.roleList != nil {
            var tmp : [Any] = []
            for k in self.roleList! {
                tmp.append(k.toMap())
            }
            map["RoleList"] = tmp
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RoleList"] as? [Any?] {
            var tmp : [GetMyRolesResponseBody.RoleList] = []
            for v in value {
                if v != nil {
                    var model = GetMyRolesResponseBody.RoleList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.roleList = tmp
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetMyRolesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetMyRolesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetMyRolesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetMyTenantsRequest : Tea.TeaModel {
    public var featureCodeList: [String]?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.featureCodeList != nil {
            map["FeatureCodeList"] = self.featureCodeList!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FeatureCodeList"] as? [String] {
            self.featureCodeList = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class GetMyTenantsShrinkRequest : Tea.TeaModel {
    public var featureCodeListShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.featureCodeListShrink != nil {
            map["FeatureCodeList"] = self.featureCodeListShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FeatureCodeList"] as? String {
            self.featureCodeListShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class GetMyTenantsResponseBody : Tea.TeaModel {
    public class TenantList : Tea.TeaModel {
        public var deleteTime: Int64?

        public var deleted: Bool?

        public var description_: String?

        public var id: Int64?

        public var name: String?

        public var opsTenant: Bool?

        public var ownerId: String?

        public var resourceLimited: Bool?

        public var tenantTypeList: [String]?

        public var titleType: String?

        public var visible: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.deleteTime != nil {
                map["DeleteTime"] = self.deleteTime!
            }
            if self.deleted != nil {
                map["Deleted"] = self.deleted!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.opsTenant != nil {
                map["OpsTenant"] = self.opsTenant!
            }
            if self.ownerId != nil {
                map["OwnerId"] = self.ownerId!
            }
            if self.resourceLimited != nil {
                map["ResourceLimited"] = self.resourceLimited!
            }
            if self.tenantTypeList != nil {
                map["TenantTypeList"] = self.tenantTypeList!
            }
            if self.titleType != nil {
                map["TitleType"] = self.titleType!
            }
            if self.visible != nil {
                map["Visible"] = self.visible!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DeleteTime"] as? Int64 {
                self.deleteTime = value
            }
            if let value = dict["Deleted"] as? Bool {
                self.deleted = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["OpsTenant"] as? Bool {
                self.opsTenant = value
            }
            if let value = dict["OwnerId"] as? String {
                self.ownerId = value
            }
            if let value = dict["ResourceLimited"] as? Bool {
                self.resourceLimited = value
            }
            if let value = dict["TenantTypeList"] as? [String] {
                self.tenantTypeList = value
            }
            if let value = dict["TitleType"] as? String {
                self.titleType = value
            }
            if let value = dict["Visible"] as? Bool {
                self.visible = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var tenantList: [GetMyTenantsResponseBody.TenantList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.tenantList != nil {
            var tmp : [Any] = []
            for k in self.tenantList! {
                tmp.append(k.toMap())
            }
            map["TenantList"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TenantList"] as? [Any?] {
            var tmp : [GetMyTenantsResponseBody.TenantList] = []
            for v in value {
                if v != nil {
                    var model = GetMyTenantsResponseBody.TenantList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tenantList = tmp
        }
    }
}

public class GetMyTenantsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetMyTenantsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetMyTenantsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetNodeUpDownStreamRequest : Tea.TeaModel {
    public class NodeId : Tea.TeaModel {
        public var fieldIdList: String?

        public var id: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fieldIdList != nil {
                map["FieldIdList"] = self.fieldIdList!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FieldIdList"] as? String {
                self.fieldIdList = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
        }
    }
    public var downStreamDepth: Int32?

    public var env: String?

    public var nodeId: GetNodeUpDownStreamRequest.NodeId?

    public var opTenantId: Int64?

    public var projectId: Int64?

    public var upStreamDepth: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.nodeId?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.downStreamDepth != nil {
            map["DownStreamDepth"] = self.downStreamDepth!
        }
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.nodeId != nil {
            map["NodeId"] = self.nodeId?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        if self.upStreamDepth != nil {
            map["UpStreamDepth"] = self.upStreamDepth!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DownStreamDepth"] as? Int32 {
            self.downStreamDepth = value
        }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["NodeId"] as? [String: Any?] {
            var model = GetNodeUpDownStreamRequest.NodeId()
            model.fromMap(value)
            self.nodeId = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
        if let value = dict["UpStreamDepth"] as? Int32 {
            self.upStreamDepth = value
        }
    }
}

public class GetNodeUpDownStreamShrinkRequest : Tea.TeaModel {
    public var downStreamDepth: Int32?

    public var env: String?

    public var nodeIdShrink: String?

    public var opTenantId: Int64?

    public var projectId: Int64?

    public var upStreamDepth: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.downStreamDepth != nil {
            map["DownStreamDepth"] = self.downStreamDepth!
        }
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.nodeIdShrink != nil {
            map["NodeId"] = self.nodeIdShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        if self.upStreamDepth != nil {
            map["UpStreamDepth"] = self.upStreamDepth!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DownStreamDepth"] as? Int32 {
            self.downStreamDepth = value
        }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["NodeId"] as? String {
            self.nodeIdShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
        if let value = dict["UpStreamDepth"] as? Int32 {
            self.upStreamDepth = value
        }
    }
}

public class GetNodeUpDownStreamResponseBody : Tea.TeaModel {
    public class NodeDagInfo : Tea.TeaModel {
        public class DownStreamNodeList : Tea.TeaModel {
            public var fieldIdList: [String]?

            public var id: String?

            public var name: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fieldIdList != nil {
                    map["FieldIdList"] = self.fieldIdList!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FieldIdList"] as? [String] {
                    self.fieldIdList = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public class StartNodeList : Tea.TeaModel {
            public var fieldIdList: [String]?

            public var id: String?

            public var name: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fieldIdList != nil {
                    map["FieldIdList"] = self.fieldIdList!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FieldIdList"] as? [String] {
                    self.fieldIdList = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public class UpStreamNodeList : Tea.TeaModel {
            public var fieldIdList: [String]?

            public var id: String?

            public var name: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fieldIdList != nil {
                    map["FieldIdList"] = self.fieldIdList!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FieldIdList"] as? [String] {
                    self.fieldIdList = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var downStreamNodeList: [GetNodeUpDownStreamResponseBody.NodeDagInfo.DownStreamNodeList]?

        public var startNodeList: [GetNodeUpDownStreamResponseBody.NodeDagInfo.StartNodeList]?

        public var upStreamNodeList: [GetNodeUpDownStreamResponseBody.NodeDagInfo.UpStreamNodeList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.downStreamNodeList != nil {
                var tmp : [Any] = []
                for k in self.downStreamNodeList! {
                    tmp.append(k.toMap())
                }
                map["DownStreamNodeList"] = tmp
            }
            if self.startNodeList != nil {
                var tmp : [Any] = []
                for k in self.startNodeList! {
                    tmp.append(k.toMap())
                }
                map["StartNodeList"] = tmp
            }
            if self.upStreamNodeList != nil {
                var tmp : [Any] = []
                for k in self.upStreamNodeList! {
                    tmp.append(k.toMap())
                }
                map["UpStreamNodeList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DownStreamNodeList"] as? [Any?] {
                var tmp : [GetNodeUpDownStreamResponseBody.NodeDagInfo.DownStreamNodeList] = []
                for v in value {
                    if v != nil {
                        var model = GetNodeUpDownStreamResponseBody.NodeDagInfo.DownStreamNodeList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.downStreamNodeList = tmp
            }
            if let value = dict["StartNodeList"] as? [Any?] {
                var tmp : [GetNodeUpDownStreamResponseBody.NodeDagInfo.StartNodeList] = []
                for v in value {
                    if v != nil {
                        var model = GetNodeUpDownStreamResponseBody.NodeDagInfo.StartNodeList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.startNodeList = tmp
            }
            if let value = dict["UpStreamNodeList"] as? [Any?] {
                var tmp : [GetNodeUpDownStreamResponseBody.NodeDagInfo.UpStreamNodeList] = []
                for v in value {
                    if v != nil {
                        var model = GetNodeUpDownStreamResponseBody.NodeDagInfo.UpStreamNodeList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.upStreamNodeList = tmp
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var nodeDagInfo: GetNodeUpDownStreamResponseBody.NodeDagInfo?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.nodeDagInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nodeDagInfo != nil {
            map["NodeDagInfo"] = self.nodeDagInfo?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NodeDagInfo"] as? [String: Any?] {
            var model = GetNodeUpDownStreamResponseBody.NodeDagInfo()
            model.fromMap(value)
            self.nodeDagInfo = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetNodeUpDownStreamResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetNodeUpDownStreamResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetNodeUpDownStreamResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetOperationSubmitStatusRequest : Tea.TeaModel {
    public var env: String?

    public var jobId: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.jobId != nil {
            map["JobId"] = self.jobId!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["JobId"] as? String {
            self.jobId = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class GetOperationSubmitStatusResponseBody : Tea.TeaModel {
    public class OperationSubmitJob : Tea.TeaModel {
        public var externalBizId: String?

        public var jobId: String?

        public var operation: String?

        public var operationStatus: String?

        public var operator_: String?

        public var progress: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.externalBizId != nil {
                map["ExternalBizId"] = self.externalBizId!
            }
            if self.jobId != nil {
                map["JobId"] = self.jobId!
            }
            if self.operation != nil {
                map["Operation"] = self.operation!
            }
            if self.operationStatus != nil {
                map["OperationStatus"] = self.operationStatus!
            }
            if self.operator_ != nil {
                map["Operator"] = self.operator_!
            }
            if self.progress != nil {
                map["Progress"] = self.progress!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ExternalBizId"] as? String {
                self.externalBizId = value
            }
            if let value = dict["JobId"] as? String {
                self.jobId = value
            }
            if let value = dict["Operation"] as? String {
                self.operation = value
            }
            if let value = dict["OperationStatus"] as? String {
                self.operationStatus = value
            }
            if let value = dict["Operator"] as? String {
                self.operator_ = value
            }
            if let value = dict["Progress"] as? String {
                self.progress = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var operationSubmitJob: GetOperationSubmitStatusResponseBody.OperationSubmitJob?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.operationSubmitJob?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.operationSubmitJob != nil {
            map["OperationSubmitJob"] = self.operationSubmitJob?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["OperationSubmitJob"] as? [String: Any?] {
            var model = GetOperationSubmitStatusResponseBody.OperationSubmitJob()
            model.fromMap(value)
            self.operationSubmitJob = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetOperationSubmitStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetOperationSubmitStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetOperationSubmitStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetPhysicalInstanceRequest : Tea.TeaModel {
    public var env: String?

    public var instanceId: String?

    public var opTenantId: Int64?

    public var projectId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
    }
}

public class GetPhysicalInstanceResponseBody : Tea.TeaModel {
    public class Instance : Tea.TeaModel {
        public class NodeInfo : Tea.TeaModel {
            public class Creator : Tea.TeaModel {
                public var id: String?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public class Modifier : Tea.TeaModel {
                public var id: String?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public class OwnerList : Tea.TeaModel {
                public var id: String?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public var bizUnitName: String?

            public var createTime: String?

            public var creator: GetPhysicalInstanceResponseBody.Instance.NodeInfo.Creator?

            public var description_: String?

            public var dryRun: Bool?

            public var from: String?

            public var hasDev: Bool?

            public var hasProd: Bool?

            public var id: String?

            public var lastModifiedTime: String?

            public var modifier: GetPhysicalInstanceResponseBody.Instance.NodeInfo.Modifier?

            public var name: String?

            public var ownerList: [GetPhysicalInstanceResponseBody.Instance.NodeInfo.OwnerList]?

            public var priorityList: [String]?

            public var resourceGroupList: [String]?

            public var schedulePaused: Bool?

            public var schedulePeriodList: [String]?

            public var subDetailType: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.creator?.validate()
                try self.modifier?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bizUnitName != nil {
                    map["BizUnitName"] = self.bizUnitName!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.creator != nil {
                    map["Creator"] = self.creator?.toMap()
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.dryRun != nil {
                    map["DryRun"] = self.dryRun!
                }
                if self.from != nil {
                    map["From"] = self.from!
                }
                if self.hasDev != nil {
                    map["HasDev"] = self.hasDev!
                }
                if self.hasProd != nil {
                    map["HasProd"] = self.hasProd!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.lastModifiedTime != nil {
                    map["LastModifiedTime"] = self.lastModifiedTime!
                }
                if self.modifier != nil {
                    map["Modifier"] = self.modifier?.toMap()
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.ownerList != nil {
                    var tmp : [Any] = []
                    for k in self.ownerList! {
                        tmp.append(k.toMap())
                    }
                    map["OwnerList"] = tmp
                }
                if self.priorityList != nil {
                    map["PriorityList"] = self.priorityList!
                }
                if self.resourceGroupList != nil {
                    map["ResourceGroupList"] = self.resourceGroupList!
                }
                if self.schedulePaused != nil {
                    map["SchedulePaused"] = self.schedulePaused!
                }
                if self.schedulePeriodList != nil {
                    map["SchedulePeriodList"] = self.schedulePeriodList!
                }
                if self.subDetailType != nil {
                    map["SubDetailType"] = self.subDetailType!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BizUnitName"] as? String {
                    self.bizUnitName = value
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["Creator"] as? [String: Any?] {
                    var model = GetPhysicalInstanceResponseBody.Instance.NodeInfo.Creator()
                    model.fromMap(value)
                    self.creator = model
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DryRun"] as? Bool {
                    self.dryRun = value
                }
                if let value = dict["From"] as? String {
                    self.from = value
                }
                if let value = dict["HasDev"] as? Bool {
                    self.hasDev = value
                }
                if let value = dict["HasProd"] as? Bool {
                    self.hasProd = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["LastModifiedTime"] as? String {
                    self.lastModifiedTime = value
                }
                if let value = dict["Modifier"] as? [String: Any?] {
                    var model = GetPhysicalInstanceResponseBody.Instance.NodeInfo.Modifier()
                    model.fromMap(value)
                    self.modifier = model
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["OwnerList"] as? [Any?] {
                    var tmp : [GetPhysicalInstanceResponseBody.Instance.NodeInfo.OwnerList] = []
                    for v in value {
                        if v != nil {
                            var model = GetPhysicalInstanceResponseBody.Instance.NodeInfo.OwnerList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.ownerList = tmp
                }
                if let value = dict["PriorityList"] as? [String] {
                    self.priorityList = value
                }
                if let value = dict["ResourceGroupList"] as? [String] {
                    self.resourceGroupList = value
                }
                if let value = dict["SchedulePaused"] as? Bool {
                    self.schedulePaused = value
                }
                if let value = dict["SchedulePeriodList"] as? [String] {
                    self.schedulePeriodList = value
                }
                if let value = dict["SubDetailType"] as? String {
                    self.subDetailType = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var bizDate: String?

        public var dueTime: String?

        public var duration: String?

        public var endExecuteTime: Int64?

        public var extendInfo: String?

        public var id: String?

        public var index: Int32?

        public var nodeInfo: GetPhysicalInstanceResponseBody.Instance.NodeInfo?

        public var startExecuteTime: Int64?

        public var statusList: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.nodeInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bizDate != nil {
                map["BizDate"] = self.bizDate!
            }
            if self.dueTime != nil {
                map["DueTime"] = self.dueTime!
            }
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.endExecuteTime != nil {
                map["EndExecuteTime"] = self.endExecuteTime!
            }
            if self.extendInfo != nil {
                map["ExtendInfo"] = self.extendInfo!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.index != nil {
                map["Index"] = self.index!
            }
            if self.nodeInfo != nil {
                map["NodeInfo"] = self.nodeInfo?.toMap()
            }
            if self.startExecuteTime != nil {
                map["StartExecuteTime"] = self.startExecuteTime!
            }
            if self.statusList != nil {
                map["StatusList"] = self.statusList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BizDate"] as? String {
                self.bizDate = value
            }
            if let value = dict["DueTime"] as? String {
                self.dueTime = value
            }
            if let value = dict["Duration"] as? String {
                self.duration = value
            }
            if let value = dict["EndExecuteTime"] as? Int64 {
                self.endExecuteTime = value
            }
            if let value = dict["ExtendInfo"] as? String {
                self.extendInfo = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Index"] as? Int32 {
                self.index = value
            }
            if let value = dict["NodeInfo"] as? [String: Any?] {
                var model = GetPhysicalInstanceResponseBody.Instance.NodeInfo()
                model.fromMap(value)
                self.nodeInfo = model
            }
            if let value = dict["StartExecuteTime"] as? Int64 {
                self.startExecuteTime = value
            }
            if let value = dict["StatusList"] as? [String] {
                self.statusList = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var instance: GetPhysicalInstanceResponseBody.Instance?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.instance?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.instance != nil {
            map["Instance"] = self.instance?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Instance"] as? [String: Any?] {
            var model = GetPhysicalInstanceResponseBody.Instance()
            model.fromMap(value)
            self.instance = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetPhysicalInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetPhysicalInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetPhysicalInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetPhysicalInstanceLogRequest : Tea.TeaModel {
    public var env: String?

    public var instanceId: String?

    public var opTenantId: Int64?

    public var projectId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
    }
}

public class GetPhysicalInstanceLogResponseBody : Tea.TeaModel {
    public class TaskrunLogList : Tea.TeaModel {
        public var duration: String?

        public var endTime: String?

        public var logContent: String?

        public var startTime: String?

        public var status: String?

        public var taskrunId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.logContent != nil {
                map["LogContent"] = self.logContent!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.taskrunId != nil {
                map["TaskrunId"] = self.taskrunId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Duration"] as? String {
                self.duration = value
            }
            if let value = dict["EndTime"] as? String {
                self.endTime = value
            }
            if let value = dict["LogContent"] as? String {
                self.logContent = value
            }
            if let value = dict["StartTime"] as? String {
                self.startTime = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TaskrunId"] as? String {
                self.taskrunId = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var taskrunLogList: [GetPhysicalInstanceLogResponseBody.TaskrunLogList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.taskrunLogList != nil {
            var tmp : [Any] = []
            for k in self.taskrunLogList! {
                tmp.append(k.toMap())
            }
            map["TaskrunLogList"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["TaskrunLogList"] as? [Any?] {
            var tmp : [GetPhysicalInstanceLogResponseBody.TaskrunLogList] = []
            for v in value {
                if v != nil {
                    var model = GetPhysicalInstanceLogResponseBody.TaskrunLogList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.taskrunLogList = tmp
        }
    }
}

public class GetPhysicalInstanceLogResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetPhysicalInstanceLogResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetPhysicalInstanceLogResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetPhysicalNodeRequest : Tea.TeaModel {
    public var env: String?

    public var nodeId: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.nodeId != nil {
            map["NodeId"] = self.nodeId!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["NodeId"] as? String {
            self.nodeId = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class GetPhysicalNodeResponseBody : Tea.TeaModel {
    public class NodeInfo : Tea.TeaModel {
        public class Creator : Tea.TeaModel {
            public var id: String?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public class Modifier : Tea.TeaModel {
            public var id: String?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public class Owner : Tea.TeaModel {
            public var id: String?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public class ProjectInfo : Tea.TeaModel {
            public var id: String?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public var createTime: Int64?

        public var creator: GetPhysicalNodeResponseBody.NodeInfo.Creator?

        public var cronExpression: String?

        public var dataSourceId: Int64?

        public var dataSourceSchema: String?

        public var description_: String?

        public var from: String?

        public var id: String?

        public var lastModifiedTime: Int64?

        public var modifier: GetPhysicalNodeResponseBody.NodeInfo.Modifier?

        public var name: String?

        public var operatorType: String?

        public var outputNameList: [String]?

        public var owner: GetPhysicalNodeResponseBody.NodeInfo.Owner?

        public var priority: String?

        public var projectInfo: GetPhysicalNodeResponseBody.NodeInfo.ProjectInfo?

        public var scheduleType: String?

        public var status: String?

        public var triggerConfig: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.creator?.validate()
            try self.modifier?.validate()
            try self.owner?.validate()
            try self.projectInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.creator != nil {
                map["Creator"] = self.creator?.toMap()
            }
            if self.cronExpression != nil {
                map["CronExpression"] = self.cronExpression!
            }
            if self.dataSourceId != nil {
                map["DataSourceId"] = self.dataSourceId!
            }
            if self.dataSourceSchema != nil {
                map["DataSourceSchema"] = self.dataSourceSchema!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.from != nil {
                map["From"] = self.from!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.lastModifiedTime != nil {
                map["LastModifiedTime"] = self.lastModifiedTime!
            }
            if self.modifier != nil {
                map["Modifier"] = self.modifier?.toMap()
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.operatorType != nil {
                map["OperatorType"] = self.operatorType!
            }
            if self.outputNameList != nil {
                map["OutputNameList"] = self.outputNameList!
            }
            if self.owner != nil {
                map["Owner"] = self.owner?.toMap()
            }
            if self.priority != nil {
                map["Priority"] = self.priority!
            }
            if self.projectInfo != nil {
                map["ProjectInfo"] = self.projectInfo?.toMap()
            }
            if self.scheduleType != nil {
                map["ScheduleType"] = self.scheduleType!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.triggerConfig != nil {
                map["TriggerConfig"] = self.triggerConfig!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTime"] as? Int64 {
                self.createTime = value
            }
            if let value = dict["Creator"] as? [String: Any?] {
                var model = GetPhysicalNodeResponseBody.NodeInfo.Creator()
                model.fromMap(value)
                self.creator = model
            }
            if let value = dict["CronExpression"] as? String {
                self.cronExpression = value
            }
            if let value = dict["DataSourceId"] as? Int64 {
                self.dataSourceId = value
            }
            if let value = dict["DataSourceSchema"] as? String {
                self.dataSourceSchema = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["From"] as? String {
                self.from = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["LastModifiedTime"] as? Int64 {
                self.lastModifiedTime = value
            }
            if let value = dict["Modifier"] as? [String: Any?] {
                var model = GetPhysicalNodeResponseBody.NodeInfo.Modifier()
                model.fromMap(value)
                self.modifier = model
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["OperatorType"] as? String {
                self.operatorType = value
            }
            if let value = dict["OutputNameList"] as? [String] {
                self.outputNameList = value
            }
            if let value = dict["Owner"] as? [String: Any?] {
                var model = GetPhysicalNodeResponseBody.NodeInfo.Owner()
                model.fromMap(value)
                self.owner = model
            }
            if let value = dict["Priority"] as? String {
                self.priority = value
            }
            if let value = dict["ProjectInfo"] as? [String: Any?] {
                var model = GetPhysicalNodeResponseBody.NodeInfo.ProjectInfo()
                model.fromMap(value)
                self.projectInfo = model
            }
            if let value = dict["ScheduleType"] as? String {
                self.scheduleType = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TriggerConfig"] as? String {
                self.triggerConfig = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var nodeInfo: GetPhysicalNodeResponseBody.NodeInfo?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.nodeInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nodeInfo != nil {
            map["NodeInfo"] = self.nodeInfo?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NodeInfo"] as? [String: Any?] {
            var model = GetPhysicalNodeResponseBody.NodeInfo()
            model.fromMap(value)
            self.nodeInfo = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetPhysicalNodeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetPhysicalNodeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetPhysicalNodeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetPhysicalNodeByOutputNameRequest : Tea.TeaModel {
    public var env: String?

    public var opTenantId: Int64?

    public var outputName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.outputName != nil {
            map["OutputName"] = self.outputName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["OutputName"] as? String {
            self.outputName = value
        }
    }
}

public class GetPhysicalNodeByOutputNameResponseBody : Tea.TeaModel {
    public class NodeInfo : Tea.TeaModel {
        public class Creator : Tea.TeaModel {
            public var id: String?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public class Modifier : Tea.TeaModel {
            public var id: String?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public class Owner : Tea.TeaModel {
            public var id: String?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public class ProjectInfo : Tea.TeaModel {
            public var id: String?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public var createTime: Int64?

        public var creator: GetPhysicalNodeByOutputNameResponseBody.NodeInfo.Creator?

        public var description_: String?

        public var from: String?

        public var id: String?

        public var lastModifiedTime: Int64?

        public var modifier: GetPhysicalNodeByOutputNameResponseBody.NodeInfo.Modifier?

        public var name: String?

        public var operatorType: String?

        public var owner: GetPhysicalNodeByOutputNameResponseBody.NodeInfo.Owner?

        public var priority: String?

        public var projectInfo: GetPhysicalNodeByOutputNameResponseBody.NodeInfo.ProjectInfo?

        public var scheduleType: String?

        public var status: String?

        public var triggerConfig: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.creator?.validate()
            try self.modifier?.validate()
            try self.owner?.validate()
            try self.projectInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createTime != nil {
                map["CreateTime"] = self.createTime!
            }
            if self.creator != nil {
                map["Creator"] = self.creator?.toMap()
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.from != nil {
                map["From"] = self.from!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.lastModifiedTime != nil {
                map["LastModifiedTime"] = self.lastModifiedTime!
            }
            if self.modifier != nil {
                map["Modifier"] = self.modifier?.toMap()
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.operatorType != nil {
                map["OperatorType"] = self.operatorType!
            }
            if self.owner != nil {
                map["Owner"] = self.owner?.toMap()
            }
            if self.priority != nil {
                map["Priority"] = self.priority!
            }
            if self.projectInfo != nil {
                map["ProjectInfo"] = self.projectInfo?.toMap()
            }
            if self.scheduleType != nil {
                map["ScheduleType"] = self.scheduleType!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.triggerConfig != nil {
                map["TriggerConfig"] = self.triggerConfig!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreateTime"] as? Int64 {
                self.createTime = value
            }
            if let value = dict["Creator"] as? [String: Any?] {
                var model = GetPhysicalNodeByOutputNameResponseBody.NodeInfo.Creator()
                model.fromMap(value)
                self.creator = model
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["From"] as? String {
                self.from = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["LastModifiedTime"] as? Int64 {
                self.lastModifiedTime = value
            }
            if let value = dict["Modifier"] as? [String: Any?] {
                var model = GetPhysicalNodeByOutputNameResponseBody.NodeInfo.Modifier()
                model.fromMap(value)
                self.modifier = model
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["OperatorType"] as? String {
                self.operatorType = value
            }
            if let value = dict["Owner"] as? [String: Any?] {
                var model = GetPhysicalNodeByOutputNameResponseBody.NodeInfo.Owner()
                model.fromMap(value)
                self.owner = model
            }
            if let value = dict["Priority"] as? String {
                self.priority = value
            }
            if let value = dict["ProjectInfo"] as? [String: Any?] {
                var model = GetPhysicalNodeByOutputNameResponseBody.NodeInfo.ProjectInfo()
                model.fromMap(value)
                self.projectInfo = model
            }
            if let value = dict["ScheduleType"] as? String {
                self.scheduleType = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["TriggerConfig"] as? String {
                self.triggerConfig = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var nodeInfo: GetPhysicalNodeByOutputNameResponseBody.NodeInfo?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.nodeInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nodeInfo != nil {
            map["NodeInfo"] = self.nodeInfo?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NodeInfo"] as? [String: Any?] {
            var model = GetPhysicalNodeByOutputNameResponseBody.NodeInfo()
            model.fromMap(value)
            self.nodeInfo = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetPhysicalNodeByOutputNameResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetPhysicalNodeByOutputNameResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetPhysicalNodeByOutputNameResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetPhysicalNodeContentRequest : Tea.TeaModel {
    public var env: String?

    public var nodeId: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.nodeId != nil {
            map["NodeId"] = self.nodeId!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["NodeId"] as? String {
            self.nodeId = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class GetPhysicalNodeContentResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var codeContent: String?

        public var nodeId: String?

        public var nodeName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.codeContent != nil {
                map["CodeContent"] = self.codeContent!
            }
            if self.nodeId != nil {
                map["NodeId"] = self.nodeId!
            }
            if self.nodeName != nil {
                map["NodeName"] = self.nodeName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CodeContent"] as? String {
                self.codeContent = value
            }
            if let value = dict["NodeId"] as? String {
                self.nodeId = value
            }
            if let value = dict["NodeName"] as? String {
                self.nodeName = value
            }
        }
    }
    public var code: String?

    public var data: GetPhysicalNodeContentResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetPhysicalNodeContentResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetPhysicalNodeContentResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetPhysicalNodeContentResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetPhysicalNodeContentResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetPhysicalNodeOperationLogRequest : Tea.TeaModel {
    public var env: String?

    public var nodeId: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.nodeId != nil {
            map["NodeId"] = self.nodeId!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["NodeId"] as? String {
            self.nodeId = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class GetPhysicalNodeOperationLogResponseBody : Tea.TeaModel {
    public class OperationLogList : Tea.TeaModel {
        public var context: String?

        public var operationTime: String?

        public var operationType: String?

        public var operator_: String?

        public var operatorName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.context != nil {
                map["Context"] = self.context!
            }
            if self.operationTime != nil {
                map["OperationTime"] = self.operationTime!
            }
            if self.operationType != nil {
                map["OperationType"] = self.operationType!
            }
            if self.operator_ != nil {
                map["Operator"] = self.operator_!
            }
            if self.operatorName != nil {
                map["OperatorName"] = self.operatorName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Context"] as? String {
                self.context = value
            }
            if let value = dict["OperationTime"] as? String {
                self.operationTime = value
            }
            if let value = dict["OperationType"] as? String {
                self.operationType = value
            }
            if let value = dict["Operator"] as? String {
                self.operator_ = value
            }
            if let value = dict["OperatorName"] as? String {
                self.operatorName = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var operationLogList: [GetPhysicalNodeOperationLogResponseBody.OperationLogList]?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.operationLogList != nil {
            var tmp : [Any] = []
            for k in self.operationLogList! {
                tmp.append(k.toMap())
            }
            map["OperationLogList"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["OperationLogList"] as? [Any?] {
            var tmp : [GetPhysicalNodeOperationLogResponseBody.OperationLogList] = []
            for v in value {
                if v != nil {
                    var model = GetPhysicalNodeOperationLogResponseBody.OperationLogList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.operationLogList = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetPhysicalNodeOperationLogResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetPhysicalNodeOperationLogResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetPhysicalNodeOperationLogResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetProjectRequest : Tea.TeaModel {
    public var env: String?

    public var id: Int64?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class GetProjectResponseBody : Tea.TeaModel {
    public class ProjectInfo : Tea.TeaModel {
        public class WhiteLists : Tea.TeaModel {
            public var description_: String?

            public var ip: String?

            public var port: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.ip != nil {
                    map["Ip"] = self.ip!
                }
                if self.port != nil {
                    map["Port"] = self.port!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Ip"] as? String {
                    self.ip = value
                }
                if let value = dict["Port"] as? String {
                    self.port = value
                }
            }
        }
        public var bizUnitDisplayName: String?

        public var bizUnitId: Int64?

        public var computeSourceId: Int64?

        public var computeSourceName: String?

        public var description_: String?

        public var displayName: String?

        public var env: String?

        public var gmtCreate: String?

        public var gmtModified: String?

        public var id: Int64?

        public var mode: String?

        public var name: String?

        public var nameSpaceTag: String?

        public var owner: String?

        public var ownerName: String?

        public var streamComputeSourceId: Int64?

        public var streamComputeSourceName: String?

        public var type: String?

        public var whiteLists: [GetProjectResponseBody.ProjectInfo.WhiteLists]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bizUnitDisplayName != nil {
                map["BizUnitDisplayName"] = self.bizUnitDisplayName!
            }
            if self.bizUnitId != nil {
                map["BizUnitId"] = self.bizUnitId!
            }
            if self.computeSourceId != nil {
                map["ComputeSourceId"] = self.computeSourceId!
            }
            if self.computeSourceName != nil {
                map["ComputeSourceName"] = self.computeSourceName!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.env != nil {
                map["Env"] = self.env!
            }
            if self.gmtCreate != nil {
                map["GmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.mode != nil {
                map["Mode"] = self.mode!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.nameSpaceTag != nil {
                map["NameSpaceTag"] = self.nameSpaceTag!
            }
            if self.owner != nil {
                map["Owner"] = self.owner!
            }
            if self.ownerName != nil {
                map["OwnerName"] = self.ownerName!
            }
            if self.streamComputeSourceId != nil {
                map["StreamComputeSourceId"] = self.streamComputeSourceId!
            }
            if self.streamComputeSourceName != nil {
                map["StreamComputeSourceName"] = self.streamComputeSourceName!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.whiteLists != nil {
                var tmp : [Any] = []
                for k in self.whiteLists! {
                    tmp.append(k.toMap())
                }
                map["WhiteLists"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BizUnitDisplayName"] as? String {
                self.bizUnitDisplayName = value
            }
            if let value = dict["BizUnitId"] as? Int64 {
                self.bizUnitId = value
            }
            if let value = dict["ComputeSourceId"] as? Int64 {
                self.computeSourceId = value
            }
            if let value = dict["ComputeSourceName"] as? String {
                self.computeSourceName = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["Env"] as? String {
                self.env = value
            }
            if let value = dict["GmtCreate"] as? String {
                self.gmtCreate = value
            }
            if let value = dict["GmtModified"] as? String {
                self.gmtModified = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Mode"] as? String {
                self.mode = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NameSpaceTag"] as? String {
                self.nameSpaceTag = value
            }
            if let value = dict["Owner"] as? String {
                self.owner = value
            }
            if let value = dict["OwnerName"] as? String {
                self.ownerName = value
            }
            if let value = dict["StreamComputeSourceId"] as? Int64 {
                self.streamComputeSourceId = value
            }
            if let value = dict["StreamComputeSourceName"] as? String {
                self.streamComputeSourceName = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["WhiteLists"] as? [Any?] {
                var tmp : [GetProjectResponseBody.ProjectInfo.WhiteLists] = []
                for v in value {
                    if v != nil {
                        var model = GetProjectResponseBody.ProjectInfo.WhiteLists()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.whiteLists = tmp
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var projectInfo: GetProjectResponseBody.ProjectInfo?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.projectInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.projectInfo != nil {
            map["ProjectInfo"] = self.projectInfo?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["ProjectInfo"] as? [String: Any?] {
            var model = GetProjectResponseBody.ProjectInfo()
            model.fromMap(value)
            self.projectInfo = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetProjectResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetProjectResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetProjectResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetProjectByNameRequest : Tea.TeaModel {
    public var name: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class GetProjectByNameResponseBody : Tea.TeaModel {
    public class ProjectInfo : Tea.TeaModel {
        public class WhiteLists : Tea.TeaModel {
            public var description_: String?

            public var ip: String?

            public var port: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.ip != nil {
                    map["Ip"] = self.ip!
                }
                if self.port != nil {
                    map["Port"] = self.port!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Ip"] as? String {
                    self.ip = value
                }
                if let value = dict["Port"] as? String {
                    self.port = value
                }
            }
        }
        public var bizUnitDisplayName: String?

        public var bizUnitId: Int64?

        public var computeSourceId: Int64?

        public var computeSourceName: String?

        public var description_: String?

        public var displayName: String?

        public var env: String?

        public var gmtCreate: String?

        public var gmtModified: String?

        public var id: Int64?

        public var mode: String?

        public var name: String?

        public var nameSpaceTag: String?

        public var owner: String?

        public var ownerName: String?

        public var streamComputeSourceId: Int64?

        public var streamComputeSourceName: String?

        public var type: String?

        public var whiteLists: [GetProjectByNameResponseBody.ProjectInfo.WhiteLists]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bizUnitDisplayName != nil {
                map["BizUnitDisplayName"] = self.bizUnitDisplayName!
            }
            if self.bizUnitId != nil {
                map["BizUnitId"] = self.bizUnitId!
            }
            if self.computeSourceId != nil {
                map["ComputeSourceId"] = self.computeSourceId!
            }
            if self.computeSourceName != nil {
                map["ComputeSourceName"] = self.computeSourceName!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.env != nil {
                map["Env"] = self.env!
            }
            if self.gmtCreate != nil {
                map["GmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.mode != nil {
                map["Mode"] = self.mode!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.nameSpaceTag != nil {
                map["NameSpaceTag"] = self.nameSpaceTag!
            }
            if self.owner != nil {
                map["Owner"] = self.owner!
            }
            if self.ownerName != nil {
                map["OwnerName"] = self.ownerName!
            }
            if self.streamComputeSourceId != nil {
                map["StreamComputeSourceId"] = self.streamComputeSourceId!
            }
            if self.streamComputeSourceName != nil {
                map["StreamComputeSourceName"] = self.streamComputeSourceName!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.whiteLists != nil {
                var tmp : [Any] = []
                for k in self.whiteLists! {
                    tmp.append(k.toMap())
                }
                map["WhiteLists"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BizUnitDisplayName"] as? String {
                self.bizUnitDisplayName = value
            }
            if let value = dict["BizUnitId"] as? Int64 {
                self.bizUnitId = value
            }
            if let value = dict["ComputeSourceId"] as? Int64 {
                self.computeSourceId = value
            }
            if let value = dict["ComputeSourceName"] as? String {
                self.computeSourceName = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["Env"] as? String {
                self.env = value
            }
            if let value = dict["GmtCreate"] as? String {
                self.gmtCreate = value
            }
            if let value = dict["GmtModified"] as? String {
                self.gmtModified = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Mode"] as? String {
                self.mode = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NameSpaceTag"] as? String {
                self.nameSpaceTag = value
            }
            if let value = dict["Owner"] as? String {
                self.owner = value
            }
            if let value = dict["OwnerName"] as? String {
                self.ownerName = value
            }
            if let value = dict["StreamComputeSourceId"] as? Int64 {
                self.streamComputeSourceId = value
            }
            if let value = dict["StreamComputeSourceName"] as? String {
                self.streamComputeSourceName = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["WhiteLists"] as? [Any?] {
                var tmp : [GetProjectByNameResponseBody.ProjectInfo.WhiteLists] = []
                for v in value {
                    if v != nil {
                        var model = GetProjectByNameResponseBody.ProjectInfo.WhiteLists()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.whiteLists = tmp
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var projectInfo: GetProjectByNameResponseBody.ProjectInfo?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.projectInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.projectInfo != nil {
            map["ProjectInfo"] = self.projectInfo?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["ProjectInfo"] as? [String: Any?] {
            var model = GetProjectByNameResponseBody.ProjectInfo()
            model.fromMap(value)
            self.projectInfo = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetProjectByNameResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetProjectByNameResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetProjectByNameResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetProjectProduceUserRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var projectId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
    }
}

public class GetProjectProduceUserResponseBody : Tea.TeaModel {
    public class User : Tea.TeaModel {
        public var id: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["Id"] = self.id!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Id"] as? String {
                self.id = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var user: GetProjectProduceUserResponseBody.User?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.user?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.user != nil {
            map["User"] = self.user?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["User"] as? [String: Any?] {
            var model = GetProjectProduceUserResponseBody.User()
            model.fromMap(value)
            self.user = model
        }
    }
}

public class GetProjectProduceUserResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetProjectProduceUserResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetProjectProduceUserResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetProjectWhiteListsRequest : Tea.TeaModel {
    public var id: Int64?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class GetProjectWhiteListsResponseBody : Tea.TeaModel {
    public class WhiteLists : Tea.TeaModel {
        public var description_: String?

        public var ip: String?

        public var port: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.ip != nil {
                map["Ip"] = self.ip!
            }
            if self.port != nil {
                map["Port"] = self.port!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Ip"] as? String {
                self.ip = value
            }
            if let value = dict["Port"] as? String {
                self.port = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var whiteLists: [GetProjectWhiteListsResponseBody.WhiteLists]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.whiteLists != nil {
            var tmp : [Any] = []
            for k in self.whiteLists! {
                tmp.append(k.toMap())
            }
            map["WhiteLists"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["WhiteLists"] as? [Any?] {
            var tmp : [GetProjectWhiteListsResponseBody.WhiteLists] = []
            for v in value {
                if v != nil {
                    var model = GetProjectWhiteListsResponseBody.WhiteLists()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.whiteLists = tmp
        }
    }
}

public class GetProjectWhiteListsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetProjectWhiteListsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetProjectWhiteListsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetQueueEngineVersionByEnvRequest : Tea.TeaModel {
    public var clusterId: String?

    public var env: String?

    public var opTenantId: Int64?

    public var projectId: Int64?

    public var queueName: String?

    public var streamBatchMode: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.clusterId != nil {
            map["ClusterId"] = self.clusterId!
        }
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        if self.queueName != nil {
            map["QueueName"] = self.queueName!
        }
        if self.streamBatchMode != nil {
            map["StreamBatchMode"] = self.streamBatchMode!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ClusterId"] as? String {
            self.clusterId = value
        }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
        if let value = dict["QueueName"] as? String {
            self.queueName = value
        }
        if let value = dict["StreamBatchMode"] as? String {
            self.streamBatchMode = value
        }
    }
}

public class GetQueueEngineVersionByEnvResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: [String]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String] {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetQueueEngineVersionByEnvResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetQueueEngineVersionByEnvResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetQueueEngineVersionByEnvResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetResourceRequest : Tea.TeaModel {
    public var name: String?

    public var opTenantId: Int64?

    public var projectId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
    }
}

public class GetResourceResponseBody : Tea.TeaModel {
    public class ResourceInfo : Tea.TeaModel {
        public var computeEngineType: String?

        public var creator: String?

        public var description_: String?

        public var directory: String?

        public var gmtCreate: String?

        public var gmtModified: String?

        public var id: Int64?

        public var lastModifier: String?

        public var name: String?

        public var projectId: Int64?

        public var resourceType: String?

        public var size: Int64?

        public var storageAddress: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.computeEngineType != nil {
                map["ComputeEngineType"] = self.computeEngineType!
            }
            if self.creator != nil {
                map["Creator"] = self.creator!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.directory != nil {
                map["Directory"] = self.directory!
            }
            if self.gmtCreate != nil {
                map["GmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.lastModifier != nil {
                map["LastModifier"] = self.lastModifier!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            if self.resourceType != nil {
                map["ResourceType"] = self.resourceType!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.storageAddress != nil {
                map["StorageAddress"] = self.storageAddress!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ComputeEngineType"] as? String {
                self.computeEngineType = value
            }
            if let value = dict["Creator"] as? String {
                self.creator = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Directory"] as? String {
                self.directory = value
            }
            if let value = dict["GmtCreate"] as? String {
                self.gmtCreate = value
            }
            if let value = dict["GmtModified"] as? String {
                self.gmtModified = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["LastModifier"] as? String {
                self.lastModifier = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
            if let value = dict["ResourceType"] as? String {
                self.resourceType = value
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["StorageAddress"] as? String {
                self.storageAddress = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var resourceInfo: GetResourceResponseBody.ResourceInfo?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resourceInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resourceInfo != nil {
            map["ResourceInfo"] = self.resourceInfo?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResourceInfo"] as? [String: Any?] {
            var model = GetResourceResponseBody.ResourceInfo()
            model.fromMap(value)
            self.resourceInfo = model
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetResourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetResourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetResourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetResourceByVersionRequest : Tea.TeaModel {
    public var name: String?

    public var opTenantId: Int64?

    public var projectId: Int64?

    public var versionId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        if self.versionId != nil {
            map["VersionId"] = self.versionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
        if let value = dict["VersionId"] as? Int64 {
            self.versionId = value
        }
    }
}

public class GetResourceByVersionResponseBody : Tea.TeaModel {
    public class ResourceInfo : Tea.TeaModel {
        public var computeEngineType: String?

        public var creator: String?

        public var description_: String?

        public var directory: String?

        public var gmtCreate: String?

        public var gmtModified: String?

        public var id: Int64?

        public var lastModifier: String?

        public var name: String?

        public var projectId: Int64?

        public var resourceType: String?

        public var size: Int64?

        public var storageAddress: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.computeEngineType != nil {
                map["ComputeEngineType"] = self.computeEngineType!
            }
            if self.creator != nil {
                map["Creator"] = self.creator!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.directory != nil {
                map["Directory"] = self.directory!
            }
            if self.gmtCreate != nil {
                map["GmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.lastModifier != nil {
                map["LastModifier"] = self.lastModifier!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            if self.resourceType != nil {
                map["ResourceType"] = self.resourceType!
            }
            if self.size != nil {
                map["Size"] = self.size!
            }
            if self.storageAddress != nil {
                map["StorageAddress"] = self.storageAddress!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ComputeEngineType"] as? String {
                self.computeEngineType = value
            }
            if let value = dict["Creator"] as? String {
                self.creator = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Directory"] as? String {
                self.directory = value
            }
            if let value = dict["GmtCreate"] as? String {
                self.gmtCreate = value
            }
            if let value = dict["GmtModified"] as? String {
                self.gmtModified = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["LastModifier"] as? String {
                self.lastModifier = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
            if let value = dict["ResourceType"] as? String {
                self.resourceType = value
            }
            if let value = dict["Size"] as? Int64 {
                self.size = value
            }
            if let value = dict["StorageAddress"] as? String {
                self.storageAddress = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var resourceInfo: GetResourceByVersionResponseBody.ResourceInfo?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resourceInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.resourceInfo != nil {
            map["ResourceInfo"] = self.resourceInfo?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["ResourceInfo"] as? [String: Any?] {
            var model = GetResourceByVersionResponseBody.ResourceInfo()
            model.fromMap(value)
            self.resourceInfo = model
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetResourceByVersionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetResourceByVersionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetResourceByVersionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSparkLocalClientInfoRequest : Tea.TeaModel {
    public var envEnum: String?

    public var opTenantId: Int64?

    public var projectId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.envEnum != nil {
            map["EnvEnum"] = self.envEnum!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EnvEnum"] as? String {
            self.envEnum = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? String {
            self.projectId = value
        }
    }
}

public class GetSparkLocalClientInfoResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var clientFileResourceId: String?

        public var clientFileResourceName: String?

        public var clientName: String?

        public var editable: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.clientFileResourceId != nil {
                map["ClientFileResourceId"] = self.clientFileResourceId!
            }
            if self.clientFileResourceName != nil {
                map["ClientFileResourceName"] = self.clientFileResourceName!
            }
            if self.clientName != nil {
                map["ClientName"] = self.clientName!
            }
            if self.editable != nil {
                map["Editable"] = self.editable!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ClientFileResourceId"] as? String {
                self.clientFileResourceId = value
            }
            if let value = dict["ClientFileResourceName"] as? String {
                self.clientFileResourceName = value
            }
            if let value = dict["ClientName"] as? String {
                self.clientName = value
            }
            if let value = dict["Editable"] as? Bool {
                self.editable = value
            }
        }
    }
    public var code: String?

    public var data: [GetSparkLocalClientInfoResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [GetSparkLocalClientInfoResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = GetSparkLocalClientInfoResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetSparkLocalClientInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSparkLocalClientInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSparkLocalClientInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetStreamJobsRequest : Tea.TeaModel {
    public var env: String?

    public var opTenantId: Int64?

    public var projectId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
    }
}

public class GetStreamJobsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var env: String?

        public var id: Int64?

        public var jobName: String?

        public var modifierId: String?

        public var ownerId: String?

        public var projectId: String?

        public var status: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.env != nil {
                map["Env"] = self.env!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.jobName != nil {
                map["JobName"] = self.jobName!
            }
            if self.modifierId != nil {
                map["ModifierId"] = self.modifierId!
            }
            if self.ownerId != nil {
                map["OwnerId"] = self.ownerId!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Env"] as? String {
                self.env = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["JobName"] as? String {
                self.jobName = value
            }
            if let value = dict["ModifierId"] as? String {
                self.modifierId = value
            }
            if let value = dict["OwnerId"] as? String {
                self.ownerId = value
            }
            if let value = dict["ProjectId"] as? String {
                self.projectId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var code: String?

    public var data: [GetStreamJobsResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [GetStreamJobsResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = GetStreamJobsResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetStreamJobsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetStreamJobsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetStreamJobsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSupplementDagrunRequest : Tea.TeaModel {
    public var env: String?

    public var opTenantId: Int64?

    public var supplementId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.supplementId != nil {
            map["SupplementId"] = self.supplementId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["SupplementId"] as? String {
            self.supplementId = value
        }
    }
}

public class GetSupplementDagrunResponseBody : Tea.TeaModel {
    public class DagrunList : Tea.TeaModel {
        public var bizDate: String?

        public var duration: String?

        public var endExecuteTime: Int64?

        public var id: String?

        public var startExecuteTime: Int64?

        public var status: String?

        public var supplementId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bizDate != nil {
                map["BizDate"] = self.bizDate!
            }
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.endExecuteTime != nil {
                map["EndExecuteTime"] = self.endExecuteTime!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.startExecuteTime != nil {
                map["StartExecuteTime"] = self.startExecuteTime!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            if self.supplementId != nil {
                map["SupplementId"] = self.supplementId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BizDate"] as? String {
                self.bizDate = value
            }
            if let value = dict["Duration"] as? String {
                self.duration = value
            }
            if let value = dict["EndExecuteTime"] as? Int64 {
                self.endExecuteTime = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["StartExecuteTime"] as? Int64 {
                self.startExecuteTime = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
            if let value = dict["SupplementId"] as? String {
                self.supplementId = value
            }
        }
    }
    public var code: String?

    public var dagrunList: [GetSupplementDagrunResponseBody.DagrunList]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.dagrunList != nil {
            var tmp : [Any] = []
            for k in self.dagrunList! {
                tmp.append(k.toMap())
            }
            map["DagrunList"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["DagrunList"] as? [Any?] {
            var tmp : [GetSupplementDagrunResponseBody.DagrunList] = []
            for v in value {
                if v != nil {
                    var model = GetSupplementDagrunResponseBody.DagrunList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.dagrunList = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetSupplementDagrunResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSupplementDagrunResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSupplementDagrunResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetSupplementDagrunInstanceRequest : Tea.TeaModel {
    public var dagrunId: String?

    public var env: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.dagrunId != nil {
            map["DagrunId"] = self.dagrunId!
        }
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DagrunId"] as? String {
            self.dagrunId = value
        }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class GetSupplementDagrunInstanceResponseBody : Tea.TeaModel {
    public class InstanceList : Tea.TeaModel {
        public class NodeInfo : Tea.TeaModel {
            public class Creator : Tea.TeaModel {
                public var id: String?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public class Modifier : Tea.TeaModel {
                public var id: String?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public class OwnerList : Tea.TeaModel {
                public var id: String?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public var bizUnitName: String?

            public var createTime: String?

            public var creator: GetSupplementDagrunInstanceResponseBody.InstanceList.NodeInfo.Creator?

            public var description_: String?

            public var dryRun: Bool?

            public var from: String?

            public var hasDev: Bool?

            public var hasProd: Bool?

            public var id: String?

            public var lastModifiedTime: String?

            public var modifier: GetSupplementDagrunInstanceResponseBody.InstanceList.NodeInfo.Modifier?

            public var name: String?

            public var ownerList: [GetSupplementDagrunInstanceResponseBody.InstanceList.NodeInfo.OwnerList]?

            public var priorityList: [String]?

            public var resourceGroupList: [String]?

            public var schedulePaused: Bool?

            public var schedulePeriodList: [String]?

            public var subDetailType: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.creator?.validate()
                try self.modifier?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bizUnitName != nil {
                    map["BizUnitName"] = self.bizUnitName!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.creator != nil {
                    map["Creator"] = self.creator?.toMap()
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.dryRun != nil {
                    map["DryRun"] = self.dryRun!
                }
                if self.from != nil {
                    map["From"] = self.from!
                }
                if self.hasDev != nil {
                    map["HasDev"] = self.hasDev!
                }
                if self.hasProd != nil {
                    map["HasProd"] = self.hasProd!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.lastModifiedTime != nil {
                    map["LastModifiedTime"] = self.lastModifiedTime!
                }
                if self.modifier != nil {
                    map["Modifier"] = self.modifier?.toMap()
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.ownerList != nil {
                    var tmp : [Any] = []
                    for k in self.ownerList! {
                        tmp.append(k.toMap())
                    }
                    map["OwnerList"] = tmp
                }
                if self.priorityList != nil {
                    map["PriorityList"] = self.priorityList!
                }
                if self.resourceGroupList != nil {
                    map["ResourceGroupList"] = self.resourceGroupList!
                }
                if self.schedulePaused != nil {
                    map["SchedulePaused"] = self.schedulePaused!
                }
                if self.schedulePeriodList != nil {
                    map["SchedulePeriodList"] = self.schedulePeriodList!
                }
                if self.subDetailType != nil {
                    map["SubDetailType"] = self.subDetailType!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BizUnitName"] as? String {
                    self.bizUnitName = value
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["Creator"] as? [String: Any?] {
                    var model = GetSupplementDagrunInstanceResponseBody.InstanceList.NodeInfo.Creator()
                    model.fromMap(value)
                    self.creator = model
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DryRun"] as? Bool {
                    self.dryRun = value
                }
                if let value = dict["From"] as? String {
                    self.from = value
                }
                if let value = dict["HasDev"] as? Bool {
                    self.hasDev = value
                }
                if let value = dict["HasProd"] as? Bool {
                    self.hasProd = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["LastModifiedTime"] as? String {
                    self.lastModifiedTime = value
                }
                if let value = dict["Modifier"] as? [String: Any?] {
                    var model = GetSupplementDagrunInstanceResponseBody.InstanceList.NodeInfo.Modifier()
                    model.fromMap(value)
                    self.modifier = model
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["OwnerList"] as? [Any?] {
                    var tmp : [GetSupplementDagrunInstanceResponseBody.InstanceList.NodeInfo.OwnerList] = []
                    for v in value {
                        if v != nil {
                            var model = GetSupplementDagrunInstanceResponseBody.InstanceList.NodeInfo.OwnerList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.ownerList = tmp
                }
                if let value = dict["PriorityList"] as? [String] {
                    self.priorityList = value
                }
                if let value = dict["ResourceGroupList"] as? [String] {
                    self.resourceGroupList = value
                }
                if let value = dict["SchedulePaused"] as? Bool {
                    self.schedulePaused = value
                }
                if let value = dict["SchedulePeriodList"] as? [String] {
                    self.schedulePeriodList = value
                }
                if let value = dict["SubDetailType"] as? String {
                    self.subDetailType = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var bizDate: Int64?

        public var dueTime: Int64?

        public var duration: String?

        public var endExecuteTime: Int64?

        public var extendInfo: String?

        public var id: String?

        public var index: Int32?

        public var nodeInfo: GetSupplementDagrunInstanceResponseBody.InstanceList.NodeInfo?

        public var startExecuteTime: Int64?

        public var statusList: [String]?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.nodeInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bizDate != nil {
                map["BizDate"] = self.bizDate!
            }
            if self.dueTime != nil {
                map["DueTime"] = self.dueTime!
            }
            if self.duration != nil {
                map["Duration"] = self.duration!
            }
            if self.endExecuteTime != nil {
                map["EndExecuteTime"] = self.endExecuteTime!
            }
            if self.extendInfo != nil {
                map["ExtendInfo"] = self.extendInfo!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.index != nil {
                map["Index"] = self.index!
            }
            if self.nodeInfo != nil {
                map["NodeInfo"] = self.nodeInfo?.toMap()
            }
            if self.startExecuteTime != nil {
                map["StartExecuteTime"] = self.startExecuteTime!
            }
            if self.statusList != nil {
                map["StatusList"] = self.statusList!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BizDate"] as? Int64 {
                self.bizDate = value
            }
            if let value = dict["DueTime"] as? Int64 {
                self.dueTime = value
            }
            if let value = dict["Duration"] as? String {
                self.duration = value
            }
            if let value = dict["EndExecuteTime"] as? Int64 {
                self.endExecuteTime = value
            }
            if let value = dict["ExtendInfo"] as? String {
                self.extendInfo = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Index"] as? Int32 {
                self.index = value
            }
            if let value = dict["NodeInfo"] as? [String: Any?] {
                var model = GetSupplementDagrunInstanceResponseBody.InstanceList.NodeInfo()
                model.fromMap(value)
                self.nodeInfo = model
            }
            if let value = dict["StartExecuteTime"] as? Int64 {
                self.startExecuteTime = value
            }
            if let value = dict["StatusList"] as? [String] {
                self.statusList = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var instanceList: [GetSupplementDagrunInstanceResponseBody.InstanceList]?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.instanceList != nil {
            var tmp : [Any] = []
            for k in self.instanceList! {
                tmp.append(k.toMap())
            }
            map["InstanceList"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["InstanceList"] as? [Any?] {
            var tmp : [GetSupplementDagrunInstanceResponseBody.InstanceList] = []
            for v in value {
                if v != nil {
                    var model = GetSupplementDagrunInstanceResponseBody.InstanceList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.instanceList = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetSupplementDagrunInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetSupplementDagrunInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetSupplementDagrunInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetTableColumnLineageByTaskIdRequest : Tea.TeaModel {
    public class TableColumnLineageByTaskIdQuery : Tea.TeaModel {
        public var needNotExistObject: Bool?

        public var taskEnv: String?

        public var taskId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.needNotExistObject != nil {
                map["NeedNotExistObject"] = self.needNotExistObject!
            }
            if self.taskEnv != nil {
                map["TaskEnv"] = self.taskEnv!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["NeedNotExistObject"] as? Bool {
                self.needNotExistObject = value
            }
            if let value = dict["TaskEnv"] as? String {
                self.taskEnv = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
        }
    }
    public var opTenantId: Int64?

    public var tableColumnLineageByTaskIdQuery: GetTableColumnLineageByTaskIdRequest.TableColumnLineageByTaskIdQuery?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tableColumnLineageByTaskIdQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.tableColumnLineageByTaskIdQuery != nil {
            map["TableColumnLineageByTaskIdQuery"] = self.tableColumnLineageByTaskIdQuery?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["TableColumnLineageByTaskIdQuery"] as? [String: Any?] {
            var model = GetTableColumnLineageByTaskIdRequest.TableColumnLineageByTaskIdQuery()
            model.fromMap(value)
            self.tableColumnLineageByTaskIdQuery = model
        }
    }
}

public class GetTableColumnLineageByTaskIdShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var tableColumnLineageByTaskIdQueryShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.tableColumnLineageByTaskIdQueryShrink != nil {
            map["TableColumnLineageByTaskIdQuery"] = self.tableColumnLineageByTaskIdQueryShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["TableColumnLineageByTaskIdQuery"] as? String {
            self.tableColumnLineageByTaskIdQueryShrink = value
        }
    }
}

public class GetTableColumnLineageByTaskIdResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var inputBizUnitId: Int64?

        public var inputColumnId: String?

        public var inputColumnName: String?

        public var inputDataSourceId: Int64?

        public var inputDataSourceType: String?

        public var inputDbType: String?

        public var inputEnv: String?

        public var inputProjectId: Int64?

        public var inputTableDeleted: Bool?

        public var inputTableId: String?

        public var inputTableName: String?

        public var inputTableType: String?

        public var outputBizUnitId: Int64?

        public var outputColumnId: String?

        public var outputColumnName: String?

        public var outputDataSourceId: Int64?

        public var outputDataSourceType: String?

        public var outputDbType: String?

        public var outputEnv: String?

        public var outputProjectId: Int64?

        public var outputTableDeleted: Bool?

        public var outputTableId: String?

        public var outputTableName: String?

        public var outputTableType: String?

        public var taskEnv: String?

        public var taskId: String?

        public var tenantId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.inputBizUnitId != nil {
                map["InputBizUnitId"] = self.inputBizUnitId!
            }
            if self.inputColumnId != nil {
                map["InputColumnId"] = self.inputColumnId!
            }
            if self.inputColumnName != nil {
                map["InputColumnName"] = self.inputColumnName!
            }
            if self.inputDataSourceId != nil {
                map["InputDataSourceId"] = self.inputDataSourceId!
            }
            if self.inputDataSourceType != nil {
                map["InputDataSourceType"] = self.inputDataSourceType!
            }
            if self.inputDbType != nil {
                map["InputDbType"] = self.inputDbType!
            }
            if self.inputEnv != nil {
                map["InputEnv"] = self.inputEnv!
            }
            if self.inputProjectId != nil {
                map["InputProjectId"] = self.inputProjectId!
            }
            if self.inputTableDeleted != nil {
                map["InputTableDeleted"] = self.inputTableDeleted!
            }
            if self.inputTableId != nil {
                map["InputTableId"] = self.inputTableId!
            }
            if self.inputTableName != nil {
                map["InputTableName"] = self.inputTableName!
            }
            if self.inputTableType != nil {
                map["InputTableType"] = self.inputTableType!
            }
            if self.outputBizUnitId != nil {
                map["OutputBizUnitId"] = self.outputBizUnitId!
            }
            if self.outputColumnId != nil {
                map["OutputColumnId"] = self.outputColumnId!
            }
            if self.outputColumnName != nil {
                map["OutputColumnName"] = self.outputColumnName!
            }
            if self.outputDataSourceId != nil {
                map["OutputDataSourceId"] = self.outputDataSourceId!
            }
            if self.outputDataSourceType != nil {
                map["OutputDataSourceType"] = self.outputDataSourceType!
            }
            if self.outputDbType != nil {
                map["OutputDbType"] = self.outputDbType!
            }
            if self.outputEnv != nil {
                map["OutputEnv"] = self.outputEnv!
            }
            if self.outputProjectId != nil {
                map["OutputProjectId"] = self.outputProjectId!
            }
            if self.outputTableDeleted != nil {
                map["OutputTableDeleted"] = self.outputTableDeleted!
            }
            if self.outputTableId != nil {
                map["OutputTableId"] = self.outputTableId!
            }
            if self.outputTableName != nil {
                map["OutputTableName"] = self.outputTableName!
            }
            if self.outputTableType != nil {
                map["OutputTableType"] = self.outputTableType!
            }
            if self.taskEnv != nil {
                map["TaskEnv"] = self.taskEnv!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.tenantId != nil {
                map["TenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["InputBizUnitId"] as? Int64 {
                self.inputBizUnitId = value
            }
            if let value = dict["InputColumnId"] as? String {
                self.inputColumnId = value
            }
            if let value = dict["InputColumnName"] as? String {
                self.inputColumnName = value
            }
            if let value = dict["InputDataSourceId"] as? Int64 {
                self.inputDataSourceId = value
            }
            if let value = dict["InputDataSourceType"] as? String {
                self.inputDataSourceType = value
            }
            if let value = dict["InputDbType"] as? String {
                self.inputDbType = value
            }
            if let value = dict["InputEnv"] as? String {
                self.inputEnv = value
            }
            if let value = dict["InputProjectId"] as? Int64 {
                self.inputProjectId = value
            }
            if let value = dict["InputTableDeleted"] as? Bool {
                self.inputTableDeleted = value
            }
            if let value = dict["InputTableId"] as? String {
                self.inputTableId = value
            }
            if let value = dict["InputTableName"] as? String {
                self.inputTableName = value
            }
            if let value = dict["InputTableType"] as? String {
                self.inputTableType = value
            }
            if let value = dict["OutputBizUnitId"] as? Int64 {
                self.outputBizUnitId = value
            }
            if let value = dict["OutputColumnId"] as? String {
                self.outputColumnId = value
            }
            if let value = dict["OutputColumnName"] as? String {
                self.outputColumnName = value
            }
            if let value = dict["OutputDataSourceId"] as? Int64 {
                self.outputDataSourceId = value
            }
            if let value = dict["OutputDataSourceType"] as? String {
                self.outputDataSourceType = value
            }
            if let value = dict["OutputDbType"] as? String {
                self.outputDbType = value
            }
            if let value = dict["OutputEnv"] as? String {
                self.outputEnv = value
            }
            if let value = dict["OutputProjectId"] as? Int64 {
                self.outputProjectId = value
            }
            if let value = dict["OutputTableDeleted"] as? Bool {
                self.outputTableDeleted = value
            }
            if let value = dict["OutputTableId"] as? String {
                self.outputTableId = value
            }
            if let value = dict["OutputTableName"] as? String {
                self.outputTableName = value
            }
            if let value = dict["OutputTableType"] as? String {
                self.outputTableType = value
            }
            if let value = dict["TaskEnv"] as? String {
                self.taskEnv = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TenantId"] as? Int64 {
                self.tenantId = value
            }
        }
    }
    public var code: String?

    public var data: [GetTableColumnLineageByTaskIdResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [GetTableColumnLineageByTaskIdResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = GetTableColumnLineageByTaskIdResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetTableColumnLineageByTaskIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetTableColumnLineageByTaskIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetTableColumnLineageByTaskIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetTableLineageByTaskIdRequest : Tea.TeaModel {
    public class TableLineageByTaskIdQuery : Tea.TeaModel {
        public var needNotExistObject: Bool?

        public var taskEnv: String?

        public var taskId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.needNotExistObject != nil {
                map["NeedNotExistObject"] = self.needNotExistObject!
            }
            if self.taskEnv != nil {
                map["TaskEnv"] = self.taskEnv!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["NeedNotExistObject"] as? Bool {
                self.needNotExistObject = value
            }
            if let value = dict["TaskEnv"] as? String {
                self.taskEnv = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
        }
    }
    public var opTenantId: Int64?

    public var tableLineageByTaskIdQuery: GetTableLineageByTaskIdRequest.TableLineageByTaskIdQuery?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tableLineageByTaskIdQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.tableLineageByTaskIdQuery != nil {
            map["TableLineageByTaskIdQuery"] = self.tableLineageByTaskIdQuery?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["TableLineageByTaskIdQuery"] as? [String: Any?] {
            var model = GetTableLineageByTaskIdRequest.TableLineageByTaskIdQuery()
            model.fromMap(value)
            self.tableLineageByTaskIdQuery = model
        }
    }
}

public class GetTableLineageByTaskIdShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var tableLineageByTaskIdQueryShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.tableLineageByTaskIdQueryShrink != nil {
            map["TableLineageByTaskIdQuery"] = self.tableLineageByTaskIdQueryShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["TableLineageByTaskIdQuery"] as? String {
            self.tableLineageByTaskIdQueryShrink = value
        }
    }
}

public class GetTableLineageByTaskIdResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public var inputBizUnitId: Int64?

        public var inputDataSourceId: Int64?

        public var inputDataSourceType: String?

        public var inputDbType: String?

        public var inputEnv: String?

        public var inputProjectId: Int64?

        public var inputTableDeleted: Bool?

        public var inputTableId: String?

        public var inputTableName: String?

        public var inputTableType: String?

        public var outputBizUnitId: Int64?

        public var outputDataSourceId: Int64?

        public var outputDataSourceType: String?

        public var outputDbType: String?

        public var outputEnv: String?

        public var outputProjectId: Int64?

        public var outputTableDeleted: Bool?

        public var outputTableId: String?

        public var outputTableName: String?

        public var outputTableType: String?

        public var taskEnv: String?

        public var taskId: String?

        public var tenantId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.inputBizUnitId != nil {
                map["InputBizUnitId"] = self.inputBizUnitId!
            }
            if self.inputDataSourceId != nil {
                map["InputDataSourceId"] = self.inputDataSourceId!
            }
            if self.inputDataSourceType != nil {
                map["InputDataSourceType"] = self.inputDataSourceType!
            }
            if self.inputDbType != nil {
                map["InputDbType"] = self.inputDbType!
            }
            if self.inputEnv != nil {
                map["InputEnv"] = self.inputEnv!
            }
            if self.inputProjectId != nil {
                map["InputProjectId"] = self.inputProjectId!
            }
            if self.inputTableDeleted != nil {
                map["InputTableDeleted"] = self.inputTableDeleted!
            }
            if self.inputTableId != nil {
                map["InputTableId"] = self.inputTableId!
            }
            if self.inputTableName != nil {
                map["InputTableName"] = self.inputTableName!
            }
            if self.inputTableType != nil {
                map["InputTableType"] = self.inputTableType!
            }
            if self.outputBizUnitId != nil {
                map["OutputBizUnitId"] = self.outputBizUnitId!
            }
            if self.outputDataSourceId != nil {
                map["OutputDataSourceId"] = self.outputDataSourceId!
            }
            if self.outputDataSourceType != nil {
                map["OutputDataSourceType"] = self.outputDataSourceType!
            }
            if self.outputDbType != nil {
                map["OutputDbType"] = self.outputDbType!
            }
            if self.outputEnv != nil {
                map["OutputEnv"] = self.outputEnv!
            }
            if self.outputProjectId != nil {
                map["OutputProjectId"] = self.outputProjectId!
            }
            if self.outputTableDeleted != nil {
                map["OutputTableDeleted"] = self.outputTableDeleted!
            }
            if self.outputTableId != nil {
                map["OutputTableId"] = self.outputTableId!
            }
            if self.outputTableName != nil {
                map["OutputTableName"] = self.outputTableName!
            }
            if self.outputTableType != nil {
                map["OutputTableType"] = self.outputTableType!
            }
            if self.taskEnv != nil {
                map["TaskEnv"] = self.taskEnv!
            }
            if self.taskId != nil {
                map["TaskId"] = self.taskId!
            }
            if self.tenantId != nil {
                map["TenantId"] = self.tenantId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["InputBizUnitId"] as? Int64 {
                self.inputBizUnitId = value
            }
            if let value = dict["InputDataSourceId"] as? Int64 {
                self.inputDataSourceId = value
            }
            if let value = dict["InputDataSourceType"] as? String {
                self.inputDataSourceType = value
            }
            if let value = dict["InputDbType"] as? String {
                self.inputDbType = value
            }
            if let value = dict["InputEnv"] as? String {
                self.inputEnv = value
            }
            if let value = dict["InputProjectId"] as? Int64 {
                self.inputProjectId = value
            }
            if let value = dict["InputTableDeleted"] as? Bool {
                self.inputTableDeleted = value
            }
            if let value = dict["InputTableId"] as? String {
                self.inputTableId = value
            }
            if let value = dict["InputTableName"] as? String {
                self.inputTableName = value
            }
            if let value = dict["InputTableType"] as? String {
                self.inputTableType = value
            }
            if let value = dict["OutputBizUnitId"] as? Int64 {
                self.outputBizUnitId = value
            }
            if let value = dict["OutputDataSourceId"] as? Int64 {
                self.outputDataSourceId = value
            }
            if let value = dict["OutputDataSourceType"] as? String {
                self.outputDataSourceType = value
            }
            if let value = dict["OutputDbType"] as? String {
                self.outputDbType = value
            }
            if let value = dict["OutputEnv"] as? String {
                self.outputEnv = value
            }
            if let value = dict["OutputProjectId"] as? Int64 {
                self.outputProjectId = value
            }
            if let value = dict["OutputTableDeleted"] as? Bool {
                self.outputTableDeleted = value
            }
            if let value = dict["OutputTableId"] as? String {
                self.outputTableId = value
            }
            if let value = dict["OutputTableName"] as? String {
                self.outputTableName = value
            }
            if let value = dict["OutputTableType"] as? String {
                self.outputTableType = value
            }
            if let value = dict["TaskEnv"] as? String {
                self.taskEnv = value
            }
            if let value = dict["TaskId"] as? String {
                self.taskId = value
            }
            if let value = dict["TenantId"] as? Int64 {
                self.tenantId = value
            }
        }
    }
    public var code: String?

    public var data: [GetTableLineageByTaskIdResponseBody.Data]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            var tmp : [Any] = []
            for k in self.data! {
                tmp.append(k.toMap())
            }
            map["Data"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [Any?] {
            var tmp : [GetTableLineageByTaskIdResponseBody.Data] = []
            for v in value {
                if v != nil {
                    var model = GetTableLineageByTaskIdResponseBody.Data()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.data = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetTableLineageByTaskIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetTableLineageByTaskIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetTableLineageByTaskIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetTransferInfoRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var proposalId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.proposalId != nil {
            map["ProposalId"] = self.proposalId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProposalId"] as? Int64 {
            self.proposalId = value
        }
    }
}

public class GetTransferInfoResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class Creator : Tea.TeaModel {
            public var displayName: String?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public class LastModifier : Tea.TeaModel {
            public var displayName: String?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public class NewOwner : Tea.TeaModel {
            public var displayName: String?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public class OldOwner : Tea.TeaModel {
            public var displayName: String?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public class PrivilegeTransferResultEntries : Tea.TeaModel {
            public var errMsg: String?

            public var privilegeDisplayName: String?

            public var status: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.errMsg != nil {
                    map["ErrMsg"] = self.errMsg!
                }
                if self.privilegeDisplayName != nil {
                    map["PrivilegeDisplayName"] = self.privilegeDisplayName!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ErrMsg"] as? String {
                    self.errMsg = value
                }
                if let value = dict["PrivilegeDisplayName"] as? String {
                    self.privilegeDisplayName = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
            }
        }
        public var creator: GetTransferInfoResponseBody.Data.Creator?

        public var flowId: Int64?

        public var gmtCreate: String?

        public var gmtModified: String?

        public var lastModifier: GetTransferInfoResponseBody.Data.LastModifier?

        public var newOwner: GetTransferInfoResponseBody.Data.NewOwner?

        public var oldOwner: GetTransferInfoResponseBody.Data.OldOwner?

        public var privilegeTransferMode: String?

        public var privilegeTransferResultEntries: [GetTransferInfoResponseBody.Data.PrivilegeTransferResultEntries]?

        public var proposalId: Int64?

        public var title: String?

        public var transferComment: String?

        public var transferStatus: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.creator?.validate()
            try self.lastModifier?.validate()
            try self.newOwner?.validate()
            try self.oldOwner?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.creator != nil {
                map["Creator"] = self.creator?.toMap()
            }
            if self.flowId != nil {
                map["FlowId"] = self.flowId!
            }
            if self.gmtCreate != nil {
                map["GmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.lastModifier != nil {
                map["LastModifier"] = self.lastModifier?.toMap()
            }
            if self.newOwner != nil {
                map["NewOwner"] = self.newOwner?.toMap()
            }
            if self.oldOwner != nil {
                map["OldOwner"] = self.oldOwner?.toMap()
            }
            if self.privilegeTransferMode != nil {
                map["PrivilegeTransferMode"] = self.privilegeTransferMode!
            }
            if self.privilegeTransferResultEntries != nil {
                var tmp : [Any] = []
                for k in self.privilegeTransferResultEntries! {
                    tmp.append(k.toMap())
                }
                map["PrivilegeTransferResultEntries"] = tmp
            }
            if self.proposalId != nil {
                map["ProposalId"] = self.proposalId!
            }
            if self.title != nil {
                map["Title"] = self.title!
            }
            if self.transferComment != nil {
                map["TransferComment"] = self.transferComment!
            }
            if self.transferStatus != nil {
                map["TransferStatus"] = self.transferStatus!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Creator"] as? [String: Any?] {
                var model = GetTransferInfoResponseBody.Data.Creator()
                model.fromMap(value)
                self.creator = model
            }
            if let value = dict["FlowId"] as? Int64 {
                self.flowId = value
            }
            if let value = dict["GmtCreate"] as? String {
                self.gmtCreate = value
            }
            if let value = dict["GmtModified"] as? String {
                self.gmtModified = value
            }
            if let value = dict["LastModifier"] as? [String: Any?] {
                var model = GetTransferInfoResponseBody.Data.LastModifier()
                model.fromMap(value)
                self.lastModifier = model
            }
            if let value = dict["NewOwner"] as? [String: Any?] {
                var model = GetTransferInfoResponseBody.Data.NewOwner()
                model.fromMap(value)
                self.newOwner = model
            }
            if let value = dict["OldOwner"] as? [String: Any?] {
                var model = GetTransferInfoResponseBody.Data.OldOwner()
                model.fromMap(value)
                self.oldOwner = model
            }
            if let value = dict["PrivilegeTransferMode"] as? String {
                self.privilegeTransferMode = value
            }
            if let value = dict["PrivilegeTransferResultEntries"] as? [Any?] {
                var tmp : [GetTransferInfoResponseBody.Data.PrivilegeTransferResultEntries] = []
                for v in value {
                    if v != nil {
                        var model = GetTransferInfoResponseBody.Data.PrivilegeTransferResultEntries()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.privilegeTransferResultEntries = tmp
            }
            if let value = dict["ProposalId"] as? Int64 {
                self.proposalId = value
            }
            if let value = dict["Title"] as? String {
                self.title = value
            }
            if let value = dict["TransferComment"] as? String {
                self.transferComment = value
            }
            if let value = dict["TransferStatus"] as? String {
                self.transferStatus = value
            }
        }
    }
    public var code: String?

    public var data: GetTransferInfoResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = GetTransferInfoResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GetTransferInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetTransferInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetTransferInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetUdfRequest : Tea.TeaModel {
    public var id: Int64?

    public var opTenantId: Int64?

    public var projectId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
    }
}

public class GetUdfResponseBody : Tea.TeaModel {
    public class UdfInfo : Tea.TeaModel {
        public var category: Int32?

        public var className: String?

        public var commandHelp: String?

        public var computeEngineType: String?

        public var creator: String?

        public var description_: String?

        public var directory: String?

        public var gmtCreate: String?

        public var gmtModified: String?

        public var id: Int64?

        public var lastModifier: String?

        public var name: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.category != nil {
                map["Category"] = self.category!
            }
            if self.className != nil {
                map["ClassName"] = self.className!
            }
            if self.commandHelp != nil {
                map["CommandHelp"] = self.commandHelp!
            }
            if self.computeEngineType != nil {
                map["ComputeEngineType"] = self.computeEngineType!
            }
            if self.creator != nil {
                map["Creator"] = self.creator!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.directory != nil {
                map["Directory"] = self.directory!
            }
            if self.gmtCreate != nil {
                map["GmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.lastModifier != nil {
                map["LastModifier"] = self.lastModifier!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Category"] as? Int32 {
                self.category = value
            }
            if let value = dict["ClassName"] as? String {
                self.className = value
            }
            if let value = dict["CommandHelp"] as? String {
                self.commandHelp = value
            }
            if let value = dict["ComputeEngineType"] as? String {
                self.computeEngineType = value
            }
            if let value = dict["Creator"] as? String {
                self.creator = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Directory"] as? String {
                self.directory = value
            }
            if let value = dict["GmtCreate"] as? String {
                self.gmtCreate = value
            }
            if let value = dict["GmtModified"] as? String {
                self.gmtModified = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["LastModifier"] as? String {
                self.lastModifier = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var udfInfo: GetUdfResponseBody.UdfInfo?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.udfInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.udfInfo != nil {
            map["UdfInfo"] = self.udfInfo?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["UdfInfo"] as? [String: Any?] {
            var model = GetUdfResponseBody.UdfInfo()
            model.fromMap(value)
            self.udfInfo = model
        }
    }
}

public class GetUdfResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetUdfResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetUdfResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetUdfByVersionRequest : Tea.TeaModel {
    public var id: Int64?

    public var opTenantId: Int64?

    public var projectId: Int64?

    public var versionId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        if self.versionId != nil {
            map["VersionId"] = self.versionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
        if let value = dict["VersionId"] as? Int64 {
            self.versionId = value
        }
    }
}

public class GetUdfByVersionResponseBody : Tea.TeaModel {
    public class UdfInfo : Tea.TeaModel {
        public var category: Int32?

        public var className: String?

        public var commandHelp: String?

        public var computeEngineType: String?

        public var creator: String?

        public var description_: String?

        public var directory: String?

        public var gmtCreate: String?

        public var gmtModified: String?

        public var id: Int64?

        public var lastModifier: String?

        public var name: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.category != nil {
                map["Category"] = self.category!
            }
            if self.className != nil {
                map["ClassName"] = self.className!
            }
            if self.commandHelp != nil {
                map["CommandHelp"] = self.commandHelp!
            }
            if self.computeEngineType != nil {
                map["ComputeEngineType"] = self.computeEngineType!
            }
            if self.creator != nil {
                map["Creator"] = self.creator!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.directory != nil {
                map["Directory"] = self.directory!
            }
            if self.gmtCreate != nil {
                map["GmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.lastModifier != nil {
                map["LastModifier"] = self.lastModifier!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Category"] as? Int32 {
                self.category = value
            }
            if let value = dict["ClassName"] as? String {
                self.className = value
            }
            if let value = dict["CommandHelp"] as? String {
                self.commandHelp = value
            }
            if let value = dict["ComputeEngineType"] as? String {
                self.computeEngineType = value
            }
            if let value = dict["Creator"] as? String {
                self.creator = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Directory"] as? String {
                self.directory = value
            }
            if let value = dict["GmtCreate"] as? String {
                self.gmtCreate = value
            }
            if let value = dict["GmtModified"] as? String {
                self.gmtModified = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["LastModifier"] as? String {
                self.lastModifier = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var udfInfo: GetUdfByVersionResponseBody.UdfInfo?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.udfInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.udfInfo != nil {
            map["UdfInfo"] = self.udfInfo?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["UdfInfo"] as? [String: Any?] {
            var model = GetUdfByVersionResponseBody.UdfInfo()
            model.fromMap(value)
            self.udfInfo = model
        }
    }
}

public class GetUdfByVersionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetUdfByVersionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetUdfByVersionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetUserBySourceIdRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var sourceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.sourceId != nil {
            map["SourceId"] = self.sourceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["SourceId"] as? String {
            self.sourceId = value
        }
    }
}

public class GetUserBySourceIdResponseBody : Tea.TeaModel {
    public class User : Tea.TeaModel {
        public var displayName: String?

        public var id: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var user: GetUserBySourceIdResponseBody.User?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.user?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.user != nil {
            map["User"] = self.user?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["User"] as? [String: Any?] {
            var model = GetUserBySourceIdResponseBody.User()
            model.fromMap(value)
            self.user = model
        }
    }
}

public class GetUserBySourceIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetUserBySourceIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetUserBySourceIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetUserGroupRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var userGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.userGroupId != nil {
            map["UserGroupId"] = self.userGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UserGroupId"] as? String {
            self.userGroupId = value
        }
    }
}

public class GetUserGroupResponseBody : Tea.TeaModel {
    public class UserGroupInfo : Tea.TeaModel {
        public class AdminList : Tea.TeaModel {
            public var accountName: String?

            public var displayName: String?

            public var id: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.accountName != nil {
                    map["AccountName"] = self.accountName!
                }
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AccountName"] as? String {
                    self.accountName = value
                }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
            }
        }
        public var active: Bool?

        public var adminList: [GetUserGroupResponseBody.UserGroupInfo.AdminList]?

        public var description_: String?

        public var id: String?

        public var myRole: String?

        public var name: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.active != nil {
                map["Active"] = self.active!
            }
            if self.adminList != nil {
                var tmp : [Any] = []
                for k in self.adminList! {
                    tmp.append(k.toMap())
                }
                map["AdminList"] = tmp
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.myRole != nil {
                map["MyRole"] = self.myRole!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Active"] as? Bool {
                self.active = value
            }
            if let value = dict["AdminList"] as? [Any?] {
                var tmp : [GetUserGroupResponseBody.UserGroupInfo.AdminList] = []
                for v in value {
                    if v != nil {
                        var model = GetUserGroupResponseBody.UserGroupInfo.AdminList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.adminList = tmp
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["MyRole"] as? String {
                self.myRole = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var userGroupInfo: GetUserGroupResponseBody.UserGroupInfo?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.userGroupInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.userGroupInfo != nil {
            map["UserGroupInfo"] = self.userGroupInfo?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["UserGroupInfo"] as? [String: Any?] {
            var model = GetUserGroupResponseBody.UserGroupInfo()
            model.fromMap(value)
            self.userGroupInfo = model
        }
    }
}

public class GetUserGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetUserGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetUserGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GetUsersRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var userIdList: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.userIdList != nil {
            map["UserIdList"] = self.userIdList!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UserIdList"] as? [String] {
            self.userIdList = value
        }
    }
}

public class GetUsersShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var userIdListShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.userIdListShrink != nil {
            map["UserIdList"] = self.userIdListShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UserIdList"] as? String {
            self.userIdListShrink = value
        }
    }
}

public class GetUsersResponseBody : Tea.TeaModel {
    public class UserList : Tea.TeaModel {
        public var accountName: String?

        public var dingNumber: String?

        public var displayName: String?

        public var displayNameWithoutStatus: String?

        public var enableWhiteIp: String?

        public var feiShuRobot: String?

        public var gmtCreate: Int64?

        public var gmtModified: Int64?

        public var id: String?

        public var mail: String?

        public var mobilePhone: String?

        public var name: String?

        public var nickName: String?

        public var parentId: String?

        public var realName: String?

        public var sourceId: String?

        public var sourceType: String?

        public var weChatRobot: String?

        public var whiteIp: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.accountName != nil {
                map["AccountName"] = self.accountName!
            }
            if self.dingNumber != nil {
                map["DingNumber"] = self.dingNumber!
            }
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.displayNameWithoutStatus != nil {
                map["DisplayNameWithoutStatus"] = self.displayNameWithoutStatus!
            }
            if self.enableWhiteIp != nil {
                map["EnableWhiteIp"] = self.enableWhiteIp!
            }
            if self.feiShuRobot != nil {
                map["FeiShuRobot"] = self.feiShuRobot!
            }
            if self.gmtCreate != nil {
                map["GmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.mail != nil {
                map["Mail"] = self.mail!
            }
            if self.mobilePhone != nil {
                map["MobilePhone"] = self.mobilePhone!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.nickName != nil {
                map["NickName"] = self.nickName!
            }
            if self.parentId != nil {
                map["ParentId"] = self.parentId!
            }
            if self.realName != nil {
                map["RealName"] = self.realName!
            }
            if self.sourceId != nil {
                map["SourceId"] = self.sourceId!
            }
            if self.sourceType != nil {
                map["SourceType"] = self.sourceType!
            }
            if self.weChatRobot != nil {
                map["WeChatRobot"] = self.weChatRobot!
            }
            if self.whiteIp != nil {
                map["WhiteIp"] = self.whiteIp!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AccountName"] as? String {
                self.accountName = value
            }
            if let value = dict["DingNumber"] as? String {
                self.dingNumber = value
            }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["DisplayNameWithoutStatus"] as? String {
                self.displayNameWithoutStatus = value
            }
            if let value = dict["EnableWhiteIp"] as? String {
                self.enableWhiteIp = value
            }
            if let value = dict["FeiShuRobot"] as? String {
                self.feiShuRobot = value
            }
            if let value = dict["GmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["GmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Mail"] as? String {
                self.mail = value
            }
            if let value = dict["MobilePhone"] as? String {
                self.mobilePhone = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NickName"] as? String {
                self.nickName = value
            }
            if let value = dict["ParentId"] as? String {
                self.parentId = value
            }
            if let value = dict["RealName"] as? String {
                self.realName = value
            }
            if let value = dict["SourceId"] as? String {
                self.sourceId = value
            }
            if let value = dict["SourceType"] as? String {
                self.sourceType = value
            }
            if let value = dict["WeChatRobot"] as? String {
                self.weChatRobot = value
            }
            if let value = dict["WhiteIp"] as? String {
                self.whiteIp = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var userList: [GetUsersResponseBody.UserList]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.userList != nil {
            var tmp : [Any] = []
            for k in self.userList! {
                tmp.append(k.toMap())
            }
            map["UserList"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["UserList"] as? [Any?] {
            var tmp : [GetUsersResponseBody.UserList] = []
            for v in value {
                if v != nil {
                    var model = GetUsersResponseBody.UserList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.userList = tmp
        }
    }
}

public class GetUsersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GetUsersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GetUsersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GrantDataServiceApiRequest : Tea.TeaModel {
    public class GrantCommand : Tea.TeaModel {
        public class DevFieldList : Tea.TeaModel {
            public var id: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? Int32 {
                    self.id = value
                }
            }
        }
        public class ProdFieldList : Tea.TeaModel {
            public var id: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.id != nil {
                    map["Id"] = self.id!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Id"] as? Int32 {
                    self.id = value
                }
            }
        }
        public var apiId: Int64?

        public var appId: Int32?

        public var devFieldList: [GrantDataServiceApiRequest.GrantCommand.DevFieldList]?

        public var expireDate: String?

        public var prodFieldList: [GrantDataServiceApiRequest.GrantCommand.ProdFieldList]?

        public var reason: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiId != nil {
                map["ApiId"] = self.apiId!
            }
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.devFieldList != nil {
                var tmp : [Any] = []
                for k in self.devFieldList! {
                    tmp.append(k.toMap())
                }
                map["DevFieldList"] = tmp
            }
            if self.expireDate != nil {
                map["ExpireDate"] = self.expireDate!
            }
            if self.prodFieldList != nil {
                var tmp : [Any] = []
                for k in self.prodFieldList! {
                    tmp.append(k.toMap())
                }
                map["ProdFieldList"] = tmp
            }
            if self.reason != nil {
                map["Reason"] = self.reason!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiId"] as? Int64 {
                self.apiId = value
            }
            if let value = dict["AppId"] as? Int32 {
                self.appId = value
            }
            if let value = dict["DevFieldList"] as? [Any?] {
                var tmp : [GrantDataServiceApiRequest.GrantCommand.DevFieldList] = []
                for v in value {
                    if v != nil {
                        var model = GrantDataServiceApiRequest.GrantCommand.DevFieldList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.devFieldList = tmp
            }
            if let value = dict["ExpireDate"] as? String {
                self.expireDate = value
            }
            if let value = dict["ProdFieldList"] as? [Any?] {
                var tmp : [GrantDataServiceApiRequest.GrantCommand.ProdFieldList] = []
                for v in value {
                    if v != nil {
                        var model = GrantDataServiceApiRequest.GrantCommand.ProdFieldList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.prodFieldList = tmp
            }
            if let value = dict["Reason"] as? String {
                self.reason = value
            }
        }
    }
    public var grantCommand: GrantDataServiceApiRequest.GrantCommand?

    public var opTenantId: Int64?

    public var projectId: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.grantCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.grantCommand != nil {
            map["GrantCommand"] = self.grantCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GrantCommand"] as? [String: Any?] {
            var model = GrantDataServiceApiRequest.GrantCommand()
            model.fromMap(value)
            self.grantCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
    }
}

public class GrantDataServiceApiShrinkRequest : Tea.TeaModel {
    public var grantCommandShrink: String?

    public var opTenantId: Int64?

    public var projectId: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.grantCommandShrink != nil {
            map["GrantCommand"] = self.grantCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GrantCommand"] as? String {
            self.grantCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
    }
}

public class GrantDataServiceApiResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GrantDataServiceApiResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GrantDataServiceApiResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GrantDataServiceApiResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class GrantResourcePermissionRequest : Tea.TeaModel {
    public class GrantCommand : Tea.TeaModel {
        public class ResourceList : Tea.TeaModel {
            public var resourceId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.resourceId != nil {
                    map["ResourceId"] = self.resourceId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ResourceId"] as? String {
                    self.resourceId = value
                }
            }
        }
        public var effectiveEnd: String?

        public var operateList: [String]?

        public var reason: String?

        public var resourceList: [GrantResourcePermissionRequest.GrantCommand.ResourceList]?

        public var resourceType: String?

        public var userIdList: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.effectiveEnd != nil {
                map["EffectiveEnd"] = self.effectiveEnd!
            }
            if self.operateList != nil {
                map["OperateList"] = self.operateList!
            }
            if self.reason != nil {
                map["Reason"] = self.reason!
            }
            if self.resourceList != nil {
                var tmp : [Any] = []
                for k in self.resourceList! {
                    tmp.append(k.toMap())
                }
                map["ResourceList"] = tmp
            }
            if self.resourceType != nil {
                map["ResourceType"] = self.resourceType!
            }
            if self.userIdList != nil {
                map["UserIdList"] = self.userIdList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EffectiveEnd"] as? String {
                self.effectiveEnd = value
            }
            if let value = dict["OperateList"] as? [String] {
                self.operateList = value
            }
            if let value = dict["Reason"] as? String {
                self.reason = value
            }
            if let value = dict["ResourceList"] as? [Any?] {
                var tmp : [GrantResourcePermissionRequest.GrantCommand.ResourceList] = []
                for v in value {
                    if v != nil {
                        var model = GrantResourcePermissionRequest.GrantCommand.ResourceList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.resourceList = tmp
            }
            if let value = dict["ResourceType"] as? String {
                self.resourceType = value
            }
            if let value = dict["UserIdList"] as? [String] {
                self.userIdList = value
            }
        }
    }
    public var grantCommand: GrantResourcePermissionRequest.GrantCommand?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.grantCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.grantCommand != nil {
            map["GrantCommand"] = self.grantCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GrantCommand"] as? [String: Any?] {
            var model = GrantResourcePermissionRequest.GrantCommand()
            model.fromMap(value)
            self.grantCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class GrantResourcePermissionShrinkRequest : Tea.TeaModel {
    public var grantCommandShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.grantCommandShrink != nil {
            map["GrantCommand"] = self.grantCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GrantCommand"] as? String {
            self.grantCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class GrantResourcePermissionResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class GrantResourcePermissionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: GrantResourcePermissionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = GrantResourcePermissionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListAddableRolesRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListAddableRolesResponseBody : Tea.TeaModel {
    public class RoleList : Tea.TeaModel {
        public var code: String?

        public var name: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? String {
                self.code = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var roleList: [ListAddableRolesResponseBody.RoleList]?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.roleList != nil {
            var tmp : [Any] = []
            for k in self.roleList! {
                tmp.append(k.toMap())
            }
            map["RoleList"] = tmp
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RoleList"] as? [Any?] {
            var tmp : [ListAddableRolesResponseBody.RoleList] = []
            for v in value {
                if v != nil {
                    var model = ListAddableRolesResponseBody.RoleList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.roleList = tmp
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListAddableRolesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAddableRolesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListAddableRolesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListAddableUsersRequest : Tea.TeaModel {
    public class ListQuery : Tea.TeaModel {
        public var page: Int32?

        public var pageSize: Int32?

        public var searchText: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.searchText != nil {
                map["SearchText"] = self.searchText!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Page"] as? Int32 {
                self.page = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["SearchText"] as? String {
                self.searchText = value
            }
        }
    }
    public var listQuery: ListAddableUsersRequest.ListQuery?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQuery != nil {
            map["ListQuery"] = self.listQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? [String: Any?] {
            var model = ListAddableUsersRequest.ListQuery()
            model.fromMap(value)
            self.listQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListAddableUsersShrinkRequest : Tea.TeaModel {
    public var listQueryShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQueryShrink != nil {
            map["ListQuery"] = self.listQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? String {
            self.listQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListAddableUsersResponseBody : Tea.TeaModel {
    public class PageResult : Tea.TeaModel {
        public class UserList : Tea.TeaModel {
            public var accountName: String?

            public var dingNumber: String?

            public var displayName: String?

            public var displayNameWithoutStatus: String?

            public var enableWhiteIp: String?

            public var feiShuRobot: String?

            public var gmtCreate: Int64?

            public var gmtModified: Int64?

            public var id: String?

            public var mail: String?

            public var mobilePhone: String?

            public var name: String?

            public var nickName: String?

            public var parentId: String?

            public var realName: String?

            public var sourceId: String?

            public var sourceType: String?

            public var weChatRobot: String?

            public var whiteIp: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.accountName != nil {
                    map["AccountName"] = self.accountName!
                }
                if self.dingNumber != nil {
                    map["DingNumber"] = self.dingNumber!
                }
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.displayNameWithoutStatus != nil {
                    map["DisplayNameWithoutStatus"] = self.displayNameWithoutStatus!
                }
                if self.enableWhiteIp != nil {
                    map["EnableWhiteIp"] = self.enableWhiteIp!
                }
                if self.feiShuRobot != nil {
                    map["FeiShuRobot"] = self.feiShuRobot!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["GmtModified"] = self.gmtModified!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.mail != nil {
                    map["Mail"] = self.mail!
                }
                if self.mobilePhone != nil {
                    map["MobilePhone"] = self.mobilePhone!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.nickName != nil {
                    map["NickName"] = self.nickName!
                }
                if self.parentId != nil {
                    map["ParentId"] = self.parentId!
                }
                if self.realName != nil {
                    map["RealName"] = self.realName!
                }
                if self.sourceId != nil {
                    map["SourceId"] = self.sourceId!
                }
                if self.sourceType != nil {
                    map["SourceType"] = self.sourceType!
                }
                if self.weChatRobot != nil {
                    map["WeChatRobot"] = self.weChatRobot!
                }
                if self.whiteIp != nil {
                    map["WhiteIp"] = self.whiteIp!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AccountName"] as? String {
                    self.accountName = value
                }
                if let value = dict["DingNumber"] as? String {
                    self.dingNumber = value
                }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["DisplayNameWithoutStatus"] as? String {
                    self.displayNameWithoutStatus = value
                }
                if let value = dict["EnableWhiteIp"] as? String {
                    self.enableWhiteIp = value
                }
                if let value = dict["FeiShuRobot"] as? String {
                    self.feiShuRobot = value
                }
                if let value = dict["GmtCreate"] as? Int64 {
                    self.gmtCreate = value
                }
                if let value = dict["GmtModified"] as? Int64 {
                    self.gmtModified = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Mail"] as? String {
                    self.mail = value
                }
                if let value = dict["MobilePhone"] as? String {
                    self.mobilePhone = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["NickName"] as? String {
                    self.nickName = value
                }
                if let value = dict["ParentId"] as? String {
                    self.parentId = value
                }
                if let value = dict["RealName"] as? String {
                    self.realName = value
                }
                if let value = dict["SourceId"] as? String {
                    self.sourceId = value
                }
                if let value = dict["SourceType"] as? String {
                    self.sourceType = value
                }
                if let value = dict["WeChatRobot"] as? String {
                    self.weChatRobot = value
                }
                if let value = dict["WhiteIp"] as? String {
                    self.whiteIp = value
                }
            }
        }
        public var totalCount: Int32?

        public var userList: [ListAddableUsersResponseBody.PageResult.UserList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            if self.userList != nil {
                var tmp : [Any] = []
                for k in self.userList! {
                    tmp.append(k.toMap())
                }
                map["UserList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
            if let value = dict["UserList"] as? [Any?] {
                var tmp : [ListAddableUsersResponseBody.PageResult.UserList] = []
                for v in value {
                    if v != nil {
                        var model = ListAddableUsersResponseBody.PageResult.UserList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.userList = tmp
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pageResult: ListAddableUsersResponseBody.PageResult?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageResult != nil {
            map["PageResult"] = self.pageResult?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageResult"] as? [String: Any?] {
            var model = ListAddableUsersResponseBody.PageResult()
            model.fromMap(value)
            self.pageResult = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListAddableUsersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAddableUsersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListAddableUsersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListAlertEventsRequest : Tea.TeaModel {
    public class ListQuery : Tea.TeaModel {
        public var alertEndTime: String?

        public var alertObjectTypeList: [String]?

        public var alertReasonList: [String]?

        public var alertStartTime: String?

        public var bizNameList: [String]?

        public var keyword: String?

        public var monitoredItemIdList: [String]?

        public var page: Int32?

        public var pageSize: Int32?

        public var projectNameList: [String]?

        public var sourceSystem: String?

        public var statusList: [String]?

        public var userIdList: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alertEndTime != nil {
                map["AlertEndTime"] = self.alertEndTime!
            }
            if self.alertObjectTypeList != nil {
                map["AlertObjectTypeList"] = self.alertObjectTypeList!
            }
            if self.alertReasonList != nil {
                map["AlertReasonList"] = self.alertReasonList!
            }
            if self.alertStartTime != nil {
                map["AlertStartTime"] = self.alertStartTime!
            }
            if self.bizNameList != nil {
                map["BizNameList"] = self.bizNameList!
            }
            if self.keyword != nil {
                map["Keyword"] = self.keyword!
            }
            if self.monitoredItemIdList != nil {
                map["MonitoredItemIdList"] = self.monitoredItemIdList!
            }
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.projectNameList != nil {
                map["ProjectNameList"] = self.projectNameList!
            }
            if self.sourceSystem != nil {
                map["SourceSystem"] = self.sourceSystem!
            }
            if self.statusList != nil {
                map["StatusList"] = self.statusList!
            }
            if self.userIdList != nil {
                map["UserIdList"] = self.userIdList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AlertEndTime"] as? String {
                self.alertEndTime = value
            }
            if let value = dict["AlertObjectTypeList"] as? [String] {
                self.alertObjectTypeList = value
            }
            if let value = dict["AlertReasonList"] as? [String] {
                self.alertReasonList = value
            }
            if let value = dict["AlertStartTime"] as? String {
                self.alertStartTime = value
            }
            if let value = dict["BizNameList"] as? [String] {
                self.bizNameList = value
            }
            if let value = dict["Keyword"] as? String {
                self.keyword = value
            }
            if let value = dict["MonitoredItemIdList"] as? [String] {
                self.monitoredItemIdList = value
            }
            if let value = dict["Page"] as? Int32 {
                self.page = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["ProjectNameList"] as? [String] {
                self.projectNameList = value
            }
            if let value = dict["SourceSystem"] as? String {
                self.sourceSystem = value
            }
            if let value = dict["StatusList"] as? [String] {
                self.statusList = value
            }
            if let value = dict["UserIdList"] as? [String] {
                self.userIdList = value
            }
        }
    }
    public var listQuery: ListAlertEventsRequest.ListQuery?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQuery != nil {
            map["ListQuery"] = self.listQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? [String: Any?] {
            var model = ListAlertEventsRequest.ListQuery()
            model.fromMap(value)
            self.listQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListAlertEventsShrinkRequest : Tea.TeaModel {
    public var listQueryShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQueryShrink != nil {
            map["ListQuery"] = self.listQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? String {
            self.listQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListAlertEventsResponseBody : Tea.TeaModel {
    public class ListResult : Tea.TeaModel {
        public class Data : Tea.TeaModel {
            public class AlertObject : Tea.TeaModel {
                public var name: String?

                public var sourceSystemType: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.sourceSystemType != nil {
                        map["SourceSystemType"] = self.sourceSystemType!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["SourceSystemType"] as? String {
                        self.sourceSystemType = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public class AlertReason : Tea.TeaModel {
                public class AlertReasonParamList : Tea.TeaModel {
                    public var key: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var alertReasonParamList: [ListAlertEventsResponseBody.ListResult.Data.AlertReason.AlertReasonParamList]?

                public var bizDate: String?

                public var type: String?

                public var uniqueKey: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.alertReasonParamList != nil {
                        var tmp : [Any] = []
                        for k in self.alertReasonParamList! {
                            tmp.append(k.toMap())
                        }
                        map["AlertReasonParamList"] = tmp
                    }
                    if self.bizDate != nil {
                        map["BizDate"] = self.bizDate!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    if self.uniqueKey != nil {
                        map["UniqueKey"] = self.uniqueKey!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AlertReasonParamList"] as? [Any?] {
                        var tmp : [ListAlertEventsResponseBody.ListResult.Data.AlertReason.AlertReasonParamList] = []
                        for v in value {
                            if v != nil {
                                var model = ListAlertEventsResponseBody.ListResult.Data.AlertReason.AlertReasonParamList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.alertReasonParamList = tmp
                    }
                    if let value = dict["BizDate"] as? String {
                        self.bizDate = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                    if let value = dict["UniqueKey"] as? String {
                        self.uniqueKey = value
                    }
                }
            }
            public class AlertReceiverList : Tea.TeaModel {
                public class UserList : Tea.TeaModel {
                    public var name: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                    }
                }
                public var alertChannelTypeList: [String]?

                public var customAlertChannelIdList: [String]?

                public var onCallTableName: String?

                public var type: String?

                public var userList: [ListAlertEventsResponseBody.ListResult.Data.AlertReceiverList.UserList]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.alertChannelTypeList != nil {
                        map["AlertChannelTypeList"] = self.alertChannelTypeList!
                    }
                    if self.customAlertChannelIdList != nil {
                        map["CustomAlertChannelIdList"] = self.customAlertChannelIdList!
                    }
                    if self.onCallTableName != nil {
                        map["OnCallTableName"] = self.onCallTableName!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    if self.userList != nil {
                        var tmp : [Any] = []
                        for k in self.userList! {
                            tmp.append(k.toMap())
                        }
                        map["UserList"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AlertChannelTypeList"] as? [String] {
                        self.alertChannelTypeList = value
                    }
                    if let value = dict["CustomAlertChannelIdList"] as? [String] {
                        self.customAlertChannelIdList = value
                    }
                    if let value = dict["OnCallTableName"] as? String {
                        self.onCallTableName = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                    if let value = dict["UserList"] as? [Any?] {
                        var tmp : [ListAlertEventsResponseBody.ListResult.Data.AlertReceiverList.UserList] = []
                        for v in value {
                            if v != nil {
                                var model = ListAlertEventsResponseBody.ListResult.Data.AlertReceiverList.UserList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.userList = tmp
                    }
                }
            }
            public class BelongProject : Tea.TeaModel {
                public var bizName: String?

                public var projectName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.bizName != nil {
                        map["BizName"] = self.bizName!
                    }
                    if self.projectName != nil {
                        map["ProjectName"] = self.projectName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["BizName"] as? String {
                        self.bizName = value
                    }
                    if let value = dict["ProjectName"] as? String {
                        self.projectName = value
                    }
                }
            }
            public class UrlConfig : Tea.TeaModel {
                public var alertConfigUrl: String?

                public var logUrl: String?

                public var objectUrl: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.alertConfigUrl != nil {
                        map["AlertConfigUrl"] = self.alertConfigUrl!
                    }
                    if self.logUrl != nil {
                        map["LogUrl"] = self.logUrl!
                    }
                    if self.objectUrl != nil {
                        map["ObjectUrl"] = self.objectUrl!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AlertConfigUrl"] as? String {
                        self.alertConfigUrl = value
                    }
                    if let value = dict["LogUrl"] as? String {
                        self.logUrl = value
                    }
                    if let value = dict["ObjectUrl"] as? String {
                        self.objectUrl = value
                    }
                }
            }
            public var alertFrequency: String?

            public var alertObject: ListAlertEventsResponseBody.ListResult.Data.AlertObject?

            public var alertReason: ListAlertEventsResponseBody.ListResult.Data.AlertReason?

            public var alertReceiverList: [ListAlertEventsResponseBody.ListResult.Data.AlertReceiverList]?

            public var belongProject: ListAlertEventsResponseBody.ListResult.Data.BelongProject?

            public var doNotDisturbEndTime: String?

            public var firstAlertTime: String?

            public var id: String?

            public var latestAlertTime: String?

            public var status: String?

            public var totalAlertTimes: Int64?

            public var urlConfig: ListAlertEventsResponseBody.ListResult.Data.UrlConfig?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.alertObject?.validate()
                try self.alertReason?.validate()
                try self.belongProject?.validate()
                try self.urlConfig?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alertFrequency != nil {
                    map["AlertFrequency"] = self.alertFrequency!
                }
                if self.alertObject != nil {
                    map["AlertObject"] = self.alertObject?.toMap()
                }
                if self.alertReason != nil {
                    map["AlertReason"] = self.alertReason?.toMap()
                }
                if self.alertReceiverList != nil {
                    var tmp : [Any] = []
                    for k in self.alertReceiverList! {
                        tmp.append(k.toMap())
                    }
                    map["AlertReceiverList"] = tmp
                }
                if self.belongProject != nil {
                    map["BelongProject"] = self.belongProject?.toMap()
                }
                if self.doNotDisturbEndTime != nil {
                    map["DoNotDisturbEndTime"] = self.doNotDisturbEndTime!
                }
                if self.firstAlertTime != nil {
                    map["FirstAlertTime"] = self.firstAlertTime!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.latestAlertTime != nil {
                    map["LatestAlertTime"] = self.latestAlertTime!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.totalAlertTimes != nil {
                    map["TotalAlertTimes"] = self.totalAlertTimes!
                }
                if self.urlConfig != nil {
                    map["UrlConfig"] = self.urlConfig?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AlertFrequency"] as? String {
                    self.alertFrequency = value
                }
                if let value = dict["AlertObject"] as? [String: Any?] {
                    var model = ListAlertEventsResponseBody.ListResult.Data.AlertObject()
                    model.fromMap(value)
                    self.alertObject = model
                }
                if let value = dict["AlertReason"] as? [String: Any?] {
                    var model = ListAlertEventsResponseBody.ListResult.Data.AlertReason()
                    model.fromMap(value)
                    self.alertReason = model
                }
                if let value = dict["AlertReceiverList"] as? [Any?] {
                    var tmp : [ListAlertEventsResponseBody.ListResult.Data.AlertReceiverList] = []
                    for v in value {
                        if v != nil {
                            var model = ListAlertEventsResponseBody.ListResult.Data.AlertReceiverList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.alertReceiverList = tmp
                }
                if let value = dict["BelongProject"] as? [String: Any?] {
                    var model = ListAlertEventsResponseBody.ListResult.Data.BelongProject()
                    model.fromMap(value)
                    self.belongProject = model
                }
                if let value = dict["DoNotDisturbEndTime"] as? String {
                    self.doNotDisturbEndTime = value
                }
                if let value = dict["FirstAlertTime"] as? String {
                    self.firstAlertTime = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["LatestAlertTime"] as? String {
                    self.latestAlertTime = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["TotalAlertTimes"] as? Int64 {
                    self.totalAlertTimes = value
                }
                if let value = dict["UrlConfig"] as? [String: Any?] {
                    var model = ListAlertEventsResponseBody.ListResult.Data.UrlConfig()
                    model.fromMap(value)
                    self.urlConfig = model
                }
            }
        }
        public var data: [ListAlertEventsResponseBody.ListResult.Data]?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.data != nil {
                var tmp : [Any] = []
                for k in self.data! {
                    tmp.append(k.toMap())
                }
                map["Data"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Data"] as? [Any?] {
                var tmp : [ListAlertEventsResponseBody.ListResult.Data] = []
                for v in value {
                    if v != nil {
                        var model = ListAlertEventsResponseBody.ListResult.Data()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.data = tmp
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var listResult: ListAlertEventsResponseBody.ListResult?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.listResult != nil {
            map["ListResult"] = self.listResult?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["ListResult"] as? [String: Any?] {
            var model = ListAlertEventsResponseBody.ListResult()
            model.fromMap(value)
            self.listResult = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListAlertEventsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAlertEventsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListAlertEventsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListAlertNotificationsRequest : Tea.TeaModel {
    public class ListQuery : Tea.TeaModel {
        public var alertReasonList: [String]?

        public var channelTypeList: [String]?

        public var customChannelIdList: [String]?

        public var keyword: String?

        public var monitoredItemIdList: [String]?

        public var notifyEndTime: String?

        public var notifyStartTime: String?

        public var page: Int32?

        public var pageSize: Int32?

        public var sourceSystem: String?

        public var statusList: [String]?

        public var userIdList: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.alertReasonList != nil {
                map["AlertReasonList"] = self.alertReasonList!
            }
            if self.channelTypeList != nil {
                map["ChannelTypeList"] = self.channelTypeList!
            }
            if self.customChannelIdList != nil {
                map["CustomChannelIdList"] = self.customChannelIdList!
            }
            if self.keyword != nil {
                map["Keyword"] = self.keyword!
            }
            if self.monitoredItemIdList != nil {
                map["MonitoredItemIdList"] = self.monitoredItemIdList!
            }
            if self.notifyEndTime != nil {
                map["NotifyEndTime"] = self.notifyEndTime!
            }
            if self.notifyStartTime != nil {
                map["NotifyStartTime"] = self.notifyStartTime!
            }
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.sourceSystem != nil {
                map["SourceSystem"] = self.sourceSystem!
            }
            if self.statusList != nil {
                map["StatusList"] = self.statusList!
            }
            if self.userIdList != nil {
                map["UserIdList"] = self.userIdList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AlertReasonList"] as? [String] {
                self.alertReasonList = value
            }
            if let value = dict["ChannelTypeList"] as? [String] {
                self.channelTypeList = value
            }
            if let value = dict["CustomChannelIdList"] as? [String] {
                self.customChannelIdList = value
            }
            if let value = dict["Keyword"] as? String {
                self.keyword = value
            }
            if let value = dict["MonitoredItemIdList"] as? [String] {
                self.monitoredItemIdList = value
            }
            if let value = dict["NotifyEndTime"] as? String {
                self.notifyEndTime = value
            }
            if let value = dict["NotifyStartTime"] as? String {
                self.notifyStartTime = value
            }
            if let value = dict["Page"] as? Int32 {
                self.page = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["SourceSystem"] as? String {
                self.sourceSystem = value
            }
            if let value = dict["StatusList"] as? [String] {
                self.statusList = value
            }
            if let value = dict["UserIdList"] as? [String] {
                self.userIdList = value
            }
        }
    }
    public var listQuery: ListAlertNotificationsRequest.ListQuery?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQuery != nil {
            map["ListQuery"] = self.listQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? [String: Any?] {
            var model = ListAlertNotificationsRequest.ListQuery()
            model.fromMap(value)
            self.listQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListAlertNotificationsShrinkRequest : Tea.TeaModel {
    public var listQueryShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQueryShrink != nil {
            map["ListQuery"] = self.listQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? String {
            self.listQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListAlertNotificationsResponseBody : Tea.TeaModel {
    public class ListResult : Tea.TeaModel {
        public class Data : Tea.TeaModel {
            public class AlertObject : Tea.TeaModel {
                public var name: String?

                public var sourceSystemType: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.sourceSystemType != nil {
                        map["SourceSystemType"] = self.sourceSystemType!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["SourceSystemType"] as? String {
                        self.sourceSystemType = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public class AlertReason : Tea.TeaModel {
                public class AlertReasonParamList : Tea.TeaModel {
                    public var key: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var alertReasonParamList: [ListAlertNotificationsResponseBody.ListResult.Data.AlertReason.AlertReasonParamList]?

                public var bizDate: String?

                public var type: String?

                public var uniqueKey: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.alertReasonParamList != nil {
                        var tmp : [Any] = []
                        for k in self.alertReasonParamList! {
                            tmp.append(k.toMap())
                        }
                        map["AlertReasonParamList"] = tmp
                    }
                    if self.bizDate != nil {
                        map["BizDate"] = self.bizDate!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    if self.uniqueKey != nil {
                        map["UniqueKey"] = self.uniqueKey!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AlertReasonParamList"] as? [Any?] {
                        var tmp : [ListAlertNotificationsResponseBody.ListResult.Data.AlertReason.AlertReasonParamList] = []
                        for v in value {
                            if v != nil {
                                var model = ListAlertNotificationsResponseBody.ListResult.Data.AlertReason.AlertReasonParamList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.alertReasonParamList = tmp
                    }
                    if let value = dict["BizDate"] as? String {
                        self.bizDate = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                    if let value = dict["UniqueKey"] as? String {
                        self.uniqueKey = value
                    }
                }
            }
            public class AlertReceiver : Tea.TeaModel {
                public class User : Tea.TeaModel {
                    public var name: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                    }
                }
                public var alertChannelType: String?

                public var customAlertChannelId: String?

                public var onCallTableId: String?

                public var onCallTableName: String?

                public var type: String?

                public var user: ListAlertNotificationsResponseBody.ListResult.Data.AlertReceiver.User?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.user?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.alertChannelType != nil {
                        map["AlertChannelType"] = self.alertChannelType!
                    }
                    if self.customAlertChannelId != nil {
                        map["CustomAlertChannelId"] = self.customAlertChannelId!
                    }
                    if self.onCallTableId != nil {
                        map["OnCallTableId"] = self.onCallTableId!
                    }
                    if self.onCallTableName != nil {
                        map["OnCallTableName"] = self.onCallTableName!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    if self.user != nil {
                        map["User"] = self.user?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AlertChannelType"] as? String {
                        self.alertChannelType = value
                    }
                    if let value = dict["CustomAlertChannelId"] as? String {
                        self.customAlertChannelId = value
                    }
                    if let value = dict["OnCallTableId"] as? String {
                        self.onCallTableId = value
                    }
                    if let value = dict["OnCallTableName"] as? String {
                        self.onCallTableName = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                    if let value = dict["User"] as? [String: Any?] {
                        var model = ListAlertNotificationsResponseBody.ListResult.Data.AlertReceiver.User()
                        model.fromMap(value)
                        self.user = model
                    }
                }
            }
            public class AlertSend : Tea.TeaModel {
                public var failReason: String?

                public var sendContent: String?

                public var sendTime: String?

                public var status: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.failReason != nil {
                        map["FailReason"] = self.failReason!
                    }
                    if self.sendContent != nil {
                        map["SendContent"] = self.sendContent!
                    }
                    if self.sendTime != nil {
                        map["SendTime"] = self.sendTime!
                    }
                    if self.status != nil {
                        map["Status"] = self.status!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["FailReason"] as? String {
                        self.failReason = value
                    }
                    if let value = dict["SendContent"] as? String {
                        self.sendContent = value
                    }
                    if let value = dict["SendTime"] as? String {
                        self.sendTime = value
                    }
                    if let value = dict["Status"] as? String {
                        self.status = value
                    }
                }
            }
            public var alertEventId: String?

            public var alertObject: ListAlertNotificationsResponseBody.ListResult.Data.AlertObject?

            public var alertReason: ListAlertNotificationsResponseBody.ListResult.Data.AlertReason?

            public var alertReceiver: ListAlertNotificationsResponseBody.ListResult.Data.AlertReceiver?

            public var alertSend: ListAlertNotificationsResponseBody.ListResult.Data.AlertSend?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.alertObject?.validate()
                try self.alertReason?.validate()
                try self.alertReceiver?.validate()
                try self.alertSend?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.alertEventId != nil {
                    map["AlertEventId"] = self.alertEventId!
                }
                if self.alertObject != nil {
                    map["AlertObject"] = self.alertObject?.toMap()
                }
                if self.alertReason != nil {
                    map["AlertReason"] = self.alertReason?.toMap()
                }
                if self.alertReceiver != nil {
                    map["AlertReceiver"] = self.alertReceiver?.toMap()
                }
                if self.alertSend != nil {
                    map["AlertSend"] = self.alertSend?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AlertEventId"] as? String {
                    self.alertEventId = value
                }
                if let value = dict["AlertObject"] as? [String: Any?] {
                    var model = ListAlertNotificationsResponseBody.ListResult.Data.AlertObject()
                    model.fromMap(value)
                    self.alertObject = model
                }
                if let value = dict["AlertReason"] as? [String: Any?] {
                    var model = ListAlertNotificationsResponseBody.ListResult.Data.AlertReason()
                    model.fromMap(value)
                    self.alertReason = model
                }
                if let value = dict["AlertReceiver"] as? [String: Any?] {
                    var model = ListAlertNotificationsResponseBody.ListResult.Data.AlertReceiver()
                    model.fromMap(value)
                    self.alertReceiver = model
                }
                if let value = dict["AlertSend"] as? [String: Any?] {
                    var model = ListAlertNotificationsResponseBody.ListResult.Data.AlertSend()
                    model.fromMap(value)
                    self.alertSend = model
                }
            }
        }
        public var data: [ListAlertNotificationsResponseBody.ListResult.Data]?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.data != nil {
                var tmp : [Any] = []
                for k in self.data! {
                    tmp.append(k.toMap())
                }
                map["Data"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Data"] as? [Any?] {
                var tmp : [ListAlertNotificationsResponseBody.ListResult.Data] = []
                for v in value {
                    if v != nil {
                        var model = ListAlertNotificationsResponseBody.ListResult.Data()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.data = tmp
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var listResult: ListAlertNotificationsResponseBody.ListResult?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.listResult != nil {
            map["ListResult"] = self.listResult?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["ListResult"] as? [String: Any?] {
            var model = ListAlertNotificationsResponseBody.ListResult()
            model.fromMap(value)
            self.listResult = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListAlertNotificationsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAlertNotificationsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListAlertNotificationsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListApiByAppRequest : Tea.TeaModel {
    public class PageQuery : Tea.TeaModel {
        public var appKey: Int64?

        public var keyword: String?

        public var pageNum: Int32?

        public var pageSize: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appKey != nil {
                map["AppKey"] = self.appKey!
            }
            if self.keyword != nil {
                map["Keyword"] = self.keyword!
            }
            if self.pageNum != nil {
                map["PageNum"] = self.pageNum!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppKey"] as? Int64 {
                self.appKey = value
            }
            if let value = dict["Keyword"] as? String {
                self.keyword = value
            }
            if let value = dict["PageNum"] as? Int32 {
                self.pageNum = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
        }
    }
    public var opTenantId: Int64?

    public var pageQuery: ListApiByAppRequest.PageQuery?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.pageQuery != nil {
            map["PageQuery"] = self.pageQuery?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["PageQuery"] as? [String: Any?] {
            var model = ListApiByAppRequest.PageQuery()
            model.fromMap(value)
            self.pageQuery = model
        }
    }
}

public class ListApiByAppShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var pageQueryShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.pageQueryShrink != nil {
            map["PageQuery"] = self.pageQueryShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["PageQuery"] as? String {
            self.pageQueryShrink = value
        }
    }
}

public class ListApiByAppResponseBody : Tea.TeaModel {
    public class ListResult : Tea.TeaModel {
        public class Data : Tea.TeaModel {
            public class PublicParamList : Tea.TeaModel {
                public class TableAndDsList : Tea.TeaModel {
                    public var datasourceId: String?

                    public var datasourceName: String?

                    public var datasourceType: Int64?

                    public var datasourceUrl: String?

                    public var tableName: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.datasourceId != nil {
                            map["DatasourceId"] = self.datasourceId!
                        }
                        if self.datasourceName != nil {
                            map["DatasourceName"] = self.datasourceName!
                        }
                        if self.datasourceType != nil {
                            map["DatasourceType"] = self.datasourceType!
                        }
                        if self.datasourceUrl != nil {
                            map["DatasourceUrl"] = self.datasourceUrl!
                        }
                        if self.tableName != nil {
                            map["TableName"] = self.tableName!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["DatasourceId"] as? String {
                            self.datasourceId = value
                        }
                        if let value = dict["DatasourceName"] as? String {
                            self.datasourceName = value
                        }
                        if let value = dict["DatasourceType"] as? Int64 {
                            self.datasourceType = value
                        }
                        if let value = dict["DatasourceUrl"] as? String {
                            self.datasourceUrl = value
                        }
                        if let value = dict["TableName"] as? String {
                            self.tableName = value
                        }
                    }
                }
                public var dateFormat: String?

                public var defaultValue: String?

                public var description_: String?

                public var descriptionCode: String?

                public var id: Int64?

                public var initialValue: String?

                public var mappingColumn: String?

                public var must: Int64?

                public var operator_: String?

                public var optional_: Int64?

                public var originalColumn: String?

                public var paramName: String?

                public var paramType: String?

                public var parameterLocation: String?

                public var sample: String?

                public var tableAndDsList: [ListApiByAppResponseBody.ListResult.Data.PublicParamList.TableAndDsList]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.dateFormat != nil {
                        map["DateFormat"] = self.dateFormat!
                    }
                    if self.defaultValue != nil {
                        map["DefaultValue"] = self.defaultValue!
                    }
                    if self.description_ != nil {
                        map["Description"] = self.description_!
                    }
                    if self.descriptionCode != nil {
                        map["DescriptionCode"] = self.descriptionCode!
                    }
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.initialValue != nil {
                        map["InitialValue"] = self.initialValue!
                    }
                    if self.mappingColumn != nil {
                        map["MappingColumn"] = self.mappingColumn!
                    }
                    if self.must != nil {
                        map["Must"] = self.must!
                    }
                    if self.operator_ != nil {
                        map["Operator"] = self.operator_!
                    }
                    if self.optional_ != nil {
                        map["Optional"] = self.optional_!
                    }
                    if self.originalColumn != nil {
                        map["OriginalColumn"] = self.originalColumn!
                    }
                    if self.paramName != nil {
                        map["ParamName"] = self.paramName!
                    }
                    if self.paramType != nil {
                        map["ParamType"] = self.paramType!
                    }
                    if self.parameterLocation != nil {
                        map["ParameterLocation"] = self.parameterLocation!
                    }
                    if self.sample != nil {
                        map["Sample"] = self.sample!
                    }
                    if self.tableAndDsList != nil {
                        var tmp : [Any] = []
                        for k in self.tableAndDsList! {
                            tmp.append(k.toMap())
                        }
                        map["TableAndDsList"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["DateFormat"] as? String {
                        self.dateFormat = value
                    }
                    if let value = dict["DefaultValue"] as? String {
                        self.defaultValue = value
                    }
                    if let value = dict["Description"] as? String {
                        self.description_ = value
                    }
                    if let value = dict["DescriptionCode"] as? String {
                        self.descriptionCode = value
                    }
                    if let value = dict["Id"] as? Int64 {
                        self.id = value
                    }
                    if let value = dict["InitialValue"] as? String {
                        self.initialValue = value
                    }
                    if let value = dict["MappingColumn"] as? String {
                        self.mappingColumn = value
                    }
                    if let value = dict["Must"] as? Int64 {
                        self.must = value
                    }
                    if let value = dict["Operator"] as? String {
                        self.operator_ = value
                    }
                    if let value = dict["Optional"] as? Int64 {
                        self.optional_ = value
                    }
                    if let value = dict["OriginalColumn"] as? String {
                        self.originalColumn = value
                    }
                    if let value = dict["ParamName"] as? String {
                        self.paramName = value
                    }
                    if let value = dict["ParamType"] as? String {
                        self.paramType = value
                    }
                    if let value = dict["ParameterLocation"] as? String {
                        self.parameterLocation = value
                    }
                    if let value = dict["Sample"] as? String {
                        self.sample = value
                    }
                    if let value = dict["TableAndDsList"] as? [Any?] {
                        var tmp : [ListApiByAppResponseBody.ListResult.Data.PublicParamList.TableAndDsList] = []
                        for v in value {
                            if v != nil {
                                var model = ListApiByAppResponseBody.ListResult.Data.PublicParamList.TableAndDsList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.tableAndDsList = tmp
                    }
                }
            }
            public class RegisterApi : Tea.TeaModel {
                public var apiId: Int64?

                public var authenticationMode: String?

                public var datasourceId: String?

                public var datasourceName: String?

                public var failExample: String?

                public var httpMethod: Int64?

                public var modelType: Int64?

                public var path: String?

                public var protocol_: String?

                public var successExample: String?

                public var timeout: Int64?

                public var url: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.apiId != nil {
                        map["ApiId"] = self.apiId!
                    }
                    if self.authenticationMode != nil {
                        map["AuthenticationMode"] = self.authenticationMode!
                    }
                    if self.datasourceId != nil {
                        map["DatasourceId"] = self.datasourceId!
                    }
                    if self.datasourceName != nil {
                        map["DatasourceName"] = self.datasourceName!
                    }
                    if self.failExample != nil {
                        map["FailExample"] = self.failExample!
                    }
                    if self.httpMethod != nil {
                        map["HttpMethod"] = self.httpMethod!
                    }
                    if self.modelType != nil {
                        map["ModelType"] = self.modelType!
                    }
                    if self.path != nil {
                        map["Path"] = self.path!
                    }
                    if self.protocol_ != nil {
                        map["Protocol"] = self.protocol_!
                    }
                    if self.successExample != nil {
                        map["SuccessExample"] = self.successExample!
                    }
                    if self.timeout != nil {
                        map["Timeout"] = self.timeout!
                    }
                    if self.url != nil {
                        map["Url"] = self.url!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ApiId"] as? Int64 {
                        self.apiId = value
                    }
                    if let value = dict["AuthenticationMode"] as? String {
                        self.authenticationMode = value
                    }
                    if let value = dict["DatasourceId"] as? String {
                        self.datasourceId = value
                    }
                    if let value = dict["DatasourceName"] as? String {
                        self.datasourceName = value
                    }
                    if let value = dict["FailExample"] as? String {
                        self.failExample = value
                    }
                    if let value = dict["HttpMethod"] as? Int64 {
                        self.httpMethod = value
                    }
                    if let value = dict["ModelType"] as? Int64 {
                        self.modelType = value
                    }
                    if let value = dict["Path"] as? String {
                        self.path = value
                    }
                    if let value = dict["Protocol"] as? String {
                        self.protocol_ = value
                    }
                    if let value = dict["SuccessExample"] as? String {
                        self.successExample = value
                    }
                    if let value = dict["Timeout"] as? Int64 {
                        self.timeout = value
                    }
                    if let value = dict["Url"] as? String {
                        self.url = value
                    }
                }
            }
            public class RequestParamList : Tea.TeaModel {
                public class TableAndDsList : Tea.TeaModel {
                    public var datasourceId: String?

                    public var datasourceName: String?

                    public var datasourceType: Int64?

                    public var datasourceUrl: String?

                    public var tableName: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.datasourceId != nil {
                            map["DatasourceId"] = self.datasourceId!
                        }
                        if self.datasourceName != nil {
                            map["DatasourceName"] = self.datasourceName!
                        }
                        if self.datasourceType != nil {
                            map["DatasourceType"] = self.datasourceType!
                        }
                        if self.datasourceUrl != nil {
                            map["DatasourceUrl"] = self.datasourceUrl!
                        }
                        if self.tableName != nil {
                            map["TableName"] = self.tableName!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["DatasourceId"] as? String {
                            self.datasourceId = value
                        }
                        if let value = dict["DatasourceName"] as? String {
                            self.datasourceName = value
                        }
                        if let value = dict["DatasourceType"] as? Int64 {
                            self.datasourceType = value
                        }
                        if let value = dict["DatasourceUrl"] as? String {
                            self.datasourceUrl = value
                        }
                        if let value = dict["TableName"] as? String {
                            self.tableName = value
                        }
                    }
                }
                public var dateFormat: String?

                public var defaultValue: String?

                public var description_: String?

                public var descriptionCode: String?

                public var id: Int64?

                public var initialValue: String?

                public var mappingColumn: String?

                public var must: Int64?

                public var operator_: String?

                public var optional_: Int64?

                public var originalColumn: String?

                public var paramName: String?

                public var paramType: String?

                public var parameterLocation: String?

                public var sample: String?

                public var tableAndDsList: [ListApiByAppResponseBody.ListResult.Data.RequestParamList.TableAndDsList]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.dateFormat != nil {
                        map["DateFormat"] = self.dateFormat!
                    }
                    if self.defaultValue != nil {
                        map["DefaultValue"] = self.defaultValue!
                    }
                    if self.description_ != nil {
                        map["Description"] = self.description_!
                    }
                    if self.descriptionCode != nil {
                        map["DescriptionCode"] = self.descriptionCode!
                    }
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.initialValue != nil {
                        map["InitialValue"] = self.initialValue!
                    }
                    if self.mappingColumn != nil {
                        map["MappingColumn"] = self.mappingColumn!
                    }
                    if self.must != nil {
                        map["Must"] = self.must!
                    }
                    if self.operator_ != nil {
                        map["Operator"] = self.operator_!
                    }
                    if self.optional_ != nil {
                        map["Optional"] = self.optional_!
                    }
                    if self.originalColumn != nil {
                        map["OriginalColumn"] = self.originalColumn!
                    }
                    if self.paramName != nil {
                        map["ParamName"] = self.paramName!
                    }
                    if self.paramType != nil {
                        map["ParamType"] = self.paramType!
                    }
                    if self.parameterLocation != nil {
                        map["ParameterLocation"] = self.parameterLocation!
                    }
                    if self.sample != nil {
                        map["Sample"] = self.sample!
                    }
                    if self.tableAndDsList != nil {
                        var tmp : [Any] = []
                        for k in self.tableAndDsList! {
                            tmp.append(k.toMap())
                        }
                        map["TableAndDsList"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["DateFormat"] as? String {
                        self.dateFormat = value
                    }
                    if let value = dict["DefaultValue"] as? String {
                        self.defaultValue = value
                    }
                    if let value = dict["Description"] as? String {
                        self.description_ = value
                    }
                    if let value = dict["DescriptionCode"] as? String {
                        self.descriptionCode = value
                    }
                    if let value = dict["Id"] as? Int64 {
                        self.id = value
                    }
                    if let value = dict["InitialValue"] as? String {
                        self.initialValue = value
                    }
                    if let value = dict["MappingColumn"] as? String {
                        self.mappingColumn = value
                    }
                    if let value = dict["Must"] as? Int64 {
                        self.must = value
                    }
                    if let value = dict["Operator"] as? String {
                        self.operator_ = value
                    }
                    if let value = dict["Optional"] as? Int64 {
                        self.optional_ = value
                    }
                    if let value = dict["OriginalColumn"] as? String {
                        self.originalColumn = value
                    }
                    if let value = dict["ParamName"] as? String {
                        self.paramName = value
                    }
                    if let value = dict["ParamType"] as? String {
                        self.paramType = value
                    }
                    if let value = dict["ParameterLocation"] as? String {
                        self.parameterLocation = value
                    }
                    if let value = dict["Sample"] as? String {
                        self.sample = value
                    }
                    if let value = dict["TableAndDsList"] as? [Any?] {
                        var tmp : [ListApiByAppResponseBody.ListResult.Data.RequestParamList.TableAndDsList] = []
                        for v in value {
                            if v != nil {
                                var model = ListApiByAppResponseBody.ListResult.Data.RequestParamList.TableAndDsList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.tableAndDsList = tmp
                    }
                }
            }
            public class ResponseParamList : Tea.TeaModel {
                public class TableAndDsList : Tea.TeaModel {
                    public var datasourceId: String?

                    public var datasourceName: String?

                    public var datasourceType: Int64?

                    public var datasourceUrl: String?

                    public var tableName: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.datasourceId != nil {
                            map["DatasourceId"] = self.datasourceId!
                        }
                        if self.datasourceName != nil {
                            map["DatasourceName"] = self.datasourceName!
                        }
                        if self.datasourceType != nil {
                            map["DatasourceType"] = self.datasourceType!
                        }
                        if self.datasourceUrl != nil {
                            map["DatasourceUrl"] = self.datasourceUrl!
                        }
                        if self.tableName != nil {
                            map["TableName"] = self.tableName!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["DatasourceId"] as? String {
                            self.datasourceId = value
                        }
                        if let value = dict["DatasourceName"] as? String {
                            self.datasourceName = value
                        }
                        if let value = dict["DatasourceType"] as? Int64 {
                            self.datasourceType = value
                        }
                        if let value = dict["DatasourceUrl"] as? String {
                            self.datasourceUrl = value
                        }
                        if let value = dict["TableName"] as? String {
                            self.tableName = value
                        }
                    }
                }
                public var dateFormat: String?

                public var defaultValue: String?

                public var description_: String?

                public var descriptionCode: String?

                public var id: Int64?

                public var initialValue: String?

                public var mappingColumn: String?

                public var must: Int64?

                public var operator_: String?

                public var optional_: Int64?

                public var originalColumn: String?

                public var paramName: String?

                public var paramType: String?

                public var parameterLocation: String?

                public var sample: String?

                public var tableAndDsList: [ListApiByAppResponseBody.ListResult.Data.ResponseParamList.TableAndDsList]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.dateFormat != nil {
                        map["DateFormat"] = self.dateFormat!
                    }
                    if self.defaultValue != nil {
                        map["DefaultValue"] = self.defaultValue!
                    }
                    if self.description_ != nil {
                        map["Description"] = self.description_!
                    }
                    if self.descriptionCode != nil {
                        map["DescriptionCode"] = self.descriptionCode!
                    }
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.initialValue != nil {
                        map["InitialValue"] = self.initialValue!
                    }
                    if self.mappingColumn != nil {
                        map["MappingColumn"] = self.mappingColumn!
                    }
                    if self.must != nil {
                        map["Must"] = self.must!
                    }
                    if self.operator_ != nil {
                        map["Operator"] = self.operator_!
                    }
                    if self.optional_ != nil {
                        map["Optional"] = self.optional_!
                    }
                    if self.originalColumn != nil {
                        map["OriginalColumn"] = self.originalColumn!
                    }
                    if self.paramName != nil {
                        map["ParamName"] = self.paramName!
                    }
                    if self.paramType != nil {
                        map["ParamType"] = self.paramType!
                    }
                    if self.parameterLocation != nil {
                        map["ParameterLocation"] = self.parameterLocation!
                    }
                    if self.sample != nil {
                        map["Sample"] = self.sample!
                    }
                    if self.tableAndDsList != nil {
                        var tmp : [Any] = []
                        for k in self.tableAndDsList! {
                            tmp.append(k.toMap())
                        }
                        map["TableAndDsList"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["DateFormat"] as? String {
                        self.dateFormat = value
                    }
                    if let value = dict["DefaultValue"] as? String {
                        self.defaultValue = value
                    }
                    if let value = dict["Description"] as? String {
                        self.description_ = value
                    }
                    if let value = dict["DescriptionCode"] as? String {
                        self.descriptionCode = value
                    }
                    if let value = dict["Id"] as? Int64 {
                        self.id = value
                    }
                    if let value = dict["InitialValue"] as? String {
                        self.initialValue = value
                    }
                    if let value = dict["MappingColumn"] as? String {
                        self.mappingColumn = value
                    }
                    if let value = dict["Must"] as? Int64 {
                        self.must = value
                    }
                    if let value = dict["Operator"] as? String {
                        self.operator_ = value
                    }
                    if let value = dict["Optional"] as? Int64 {
                        self.optional_ = value
                    }
                    if let value = dict["OriginalColumn"] as? String {
                        self.originalColumn = value
                    }
                    if let value = dict["ParamName"] as? String {
                        self.paramName = value
                    }
                    if let value = dict["ParamType"] as? String {
                        self.paramType = value
                    }
                    if let value = dict["ParameterLocation"] as? String {
                        self.parameterLocation = value
                    }
                    if let value = dict["Sample"] as? String {
                        self.sample = value
                    }
                    if let value = dict["TableAndDsList"] as? [Any?] {
                        var tmp : [ListApiByAppResponseBody.ListResult.Data.ResponseParamList.TableAndDsList] = []
                        for v in value {
                            if v != nil {
                                var model = ListApiByAppResponseBody.ListResult.Data.ResponseParamList.TableAndDsList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.tableAndDsList = tmp
                    }
                }
            }
            public var apiNo: Int64?

            public var apiTimeout: Int64?

            public var appName: String?

            public var bizModuleEnName: String?

            public var cacheSwitch: String?

            public var cacheTime: String?

            public var createType: Int64?

            public var dbEnv: Int64?

            public var description_: String?

            public var directDatasourceId: Int64?

            public var directDatasourceName: String?

            public var groupId: Int64?

            public var groupName: String?

            public var id: Int64?

            public var isLogicalTable: Bool?

            public var isPagedQuery: Int64?

            public var maxReturnNum: Int64?

            public var modelType: Int64?

            public var name: String?

            public var projId: Int64?

            public var projName: String?

            public var protocol_: Int64?

            public var protocolName: String?

            public var publicParamList: [ListApiByAppResponseBody.ListResult.Data.PublicParamList]?

            public var registerApi: ListApiByAppResponseBody.ListResult.Data.RegisterApi?

            public var requestMethod: Int64?

            public var requestMethodName: String?

            public var requestParamList: [ListApiByAppResponseBody.ListResult.Data.RequestParamList]?

            public var resourceGroupName: String?

            public var responseParamList: [ListApiByAppResponseBody.ListResult.Data.ResponseParamList]?

            public var resultSample: String?

            public var returnType: Int64?

            public var returnTypeName: String?

            public var rsGrpId: String?

            public var scriptType: String?

            public var specialSql: Int64?

            public var sqlStatement: String?

            public var tableName: String?

            public var timeout: String?

            public var updateRate: Int64?

            public var updateRateName: String?

            public var version: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.registerApi?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiNo != nil {
                    map["ApiNo"] = self.apiNo!
                }
                if self.apiTimeout != nil {
                    map["ApiTimeout"] = self.apiTimeout!
                }
                if self.appName != nil {
                    map["AppName"] = self.appName!
                }
                if self.bizModuleEnName != nil {
                    map["BizModuleEnName"] = self.bizModuleEnName!
                }
                if self.cacheSwitch != nil {
                    map["CacheSwitch"] = self.cacheSwitch!
                }
                if self.cacheTime != nil {
                    map["CacheTime"] = self.cacheTime!
                }
                if self.createType != nil {
                    map["CreateType"] = self.createType!
                }
                if self.dbEnv != nil {
                    map["DbEnv"] = self.dbEnv!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.directDatasourceId != nil {
                    map["DirectDatasourceId"] = self.directDatasourceId!
                }
                if self.directDatasourceName != nil {
                    map["DirectDatasourceName"] = self.directDatasourceName!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupName != nil {
                    map["GroupName"] = self.groupName!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.isLogicalTable != nil {
                    map["IsLogicalTable"] = self.isLogicalTable!
                }
                if self.isPagedQuery != nil {
                    map["IsPagedQuery"] = self.isPagedQuery!
                }
                if self.maxReturnNum != nil {
                    map["MaxReturnNum"] = self.maxReturnNum!
                }
                if self.modelType != nil {
                    map["ModelType"] = self.modelType!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.projId != nil {
                    map["ProjId"] = self.projId!
                }
                if self.projName != nil {
                    map["ProjName"] = self.projName!
                }
                if self.protocol_ != nil {
                    map["Protocol"] = self.protocol_!
                }
                if self.protocolName != nil {
                    map["ProtocolName"] = self.protocolName!
                }
                if self.publicParamList != nil {
                    var tmp : [Any] = []
                    for k in self.publicParamList! {
                        tmp.append(k.toMap())
                    }
                    map["PublicParamList"] = tmp
                }
                if self.registerApi != nil {
                    map["RegisterApi"] = self.registerApi?.toMap()
                }
                if self.requestMethod != nil {
                    map["RequestMethod"] = self.requestMethod!
                }
                if self.requestMethodName != nil {
                    map["RequestMethodName"] = self.requestMethodName!
                }
                if self.requestParamList != nil {
                    var tmp : [Any] = []
                    for k in self.requestParamList! {
                        tmp.append(k.toMap())
                    }
                    map["RequestParamList"] = tmp
                }
                if self.resourceGroupName != nil {
                    map["ResourceGroupName"] = self.resourceGroupName!
                }
                if self.responseParamList != nil {
                    var tmp : [Any] = []
                    for k in self.responseParamList! {
                        tmp.append(k.toMap())
                    }
                    map["ResponseParamList"] = tmp
                }
                if self.resultSample != nil {
                    map["ResultSample"] = self.resultSample!
                }
                if self.returnType != nil {
                    map["ReturnType"] = self.returnType!
                }
                if self.returnTypeName != nil {
                    map["ReturnTypeName"] = self.returnTypeName!
                }
                if self.rsGrpId != nil {
                    map["RsGrpId"] = self.rsGrpId!
                }
                if self.scriptType != nil {
                    map["ScriptType"] = self.scriptType!
                }
                if self.specialSql != nil {
                    map["SpecialSql"] = self.specialSql!
                }
                if self.sqlStatement != nil {
                    map["SqlStatement"] = self.sqlStatement!
                }
                if self.tableName != nil {
                    map["TableName"] = self.tableName!
                }
                if self.timeout != nil {
                    map["Timeout"] = self.timeout!
                }
                if self.updateRate != nil {
                    map["UpdateRate"] = self.updateRate!
                }
                if self.updateRateName != nil {
                    map["UpdateRateName"] = self.updateRateName!
                }
                if self.version != nil {
                    map["Version"] = self.version!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiNo"] as? Int64 {
                    self.apiNo = value
                }
                if let value = dict["ApiTimeout"] as? Int64 {
                    self.apiTimeout = value
                }
                if let value = dict["AppName"] as? String {
                    self.appName = value
                }
                if let value = dict["BizModuleEnName"] as? String {
                    self.bizModuleEnName = value
                }
                if let value = dict["CacheSwitch"] as? String {
                    self.cacheSwitch = value
                }
                if let value = dict["CacheTime"] as? String {
                    self.cacheTime = value
                }
                if let value = dict["CreateType"] as? Int64 {
                    self.createType = value
                }
                if let value = dict["DbEnv"] as? Int64 {
                    self.dbEnv = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DirectDatasourceId"] as? Int64 {
                    self.directDatasourceId = value
                }
                if let value = dict["DirectDatasourceName"] as? String {
                    self.directDatasourceName = value
                }
                if let value = dict["GroupId"] as? Int64 {
                    self.groupId = value
                }
                if let value = dict["GroupName"] as? String {
                    self.groupName = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["IsLogicalTable"] as? Bool {
                    self.isLogicalTable = value
                }
                if let value = dict["IsPagedQuery"] as? Int64 {
                    self.isPagedQuery = value
                }
                if let value = dict["MaxReturnNum"] as? Int64 {
                    self.maxReturnNum = value
                }
                if let value = dict["ModelType"] as? Int64 {
                    self.modelType = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["ProjId"] as? Int64 {
                    self.projId = value
                }
                if let value = dict["ProjName"] as? String {
                    self.projName = value
                }
                if let value = dict["Protocol"] as? Int64 {
                    self.protocol_ = value
                }
                if let value = dict["ProtocolName"] as? String {
                    self.protocolName = value
                }
                if let value = dict["PublicParamList"] as? [Any?] {
                    var tmp : [ListApiByAppResponseBody.ListResult.Data.PublicParamList] = []
                    for v in value {
                        if v != nil {
                            var model = ListApiByAppResponseBody.ListResult.Data.PublicParamList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.publicParamList = tmp
                }
                if let value = dict["RegisterApi"] as? [String: Any?] {
                    var model = ListApiByAppResponseBody.ListResult.Data.RegisterApi()
                    model.fromMap(value)
                    self.registerApi = model
                }
                if let value = dict["RequestMethod"] as? Int64 {
                    self.requestMethod = value
                }
                if let value = dict["RequestMethodName"] as? String {
                    self.requestMethodName = value
                }
                if let value = dict["RequestParamList"] as? [Any?] {
                    var tmp : [ListApiByAppResponseBody.ListResult.Data.RequestParamList] = []
                    for v in value {
                        if v != nil {
                            var model = ListApiByAppResponseBody.ListResult.Data.RequestParamList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.requestParamList = tmp
                }
                if let value = dict["ResourceGroupName"] as? String {
                    self.resourceGroupName = value
                }
                if let value = dict["ResponseParamList"] as? [Any?] {
                    var tmp : [ListApiByAppResponseBody.ListResult.Data.ResponseParamList] = []
                    for v in value {
                        if v != nil {
                            var model = ListApiByAppResponseBody.ListResult.Data.ResponseParamList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.responseParamList = tmp
                }
                if let value = dict["ResultSample"] as? String {
                    self.resultSample = value
                }
                if let value = dict["ReturnType"] as? Int64 {
                    self.returnType = value
                }
                if let value = dict["ReturnTypeName"] as? String {
                    self.returnTypeName = value
                }
                if let value = dict["RsGrpId"] as? String {
                    self.rsGrpId = value
                }
                if let value = dict["ScriptType"] as? String {
                    self.scriptType = value
                }
                if let value = dict["SpecialSql"] as? Int64 {
                    self.specialSql = value
                }
                if let value = dict["SqlStatement"] as? String {
                    self.sqlStatement = value
                }
                if let value = dict["TableName"] as? String {
                    self.tableName = value
                }
                if let value = dict["Timeout"] as? String {
                    self.timeout = value
                }
                if let value = dict["UpdateRate"] as? Int64 {
                    self.updateRate = value
                }
                if let value = dict["UpdateRateName"] as? String {
                    self.updateRateName = value
                }
                if let value = dict["Version"] as? String {
                    self.version = value
                }
            }
        }
        public var data: [ListApiByAppResponseBody.ListResult.Data]?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.data != nil {
                var tmp : [Any] = []
                for k in self.data! {
                    tmp.append(k.toMap())
                }
                map["Data"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Data"] as? [Any?] {
                var tmp : [ListApiByAppResponseBody.ListResult.Data] = []
                for v in value {
                    if v != nil {
                        var model = ListApiByAppResponseBody.ListResult.Data()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.data = tmp
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var listResult: ListApiByAppResponseBody.ListResult?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.listResult != nil {
            map["ListResult"] = self.listResult?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["ListResult"] as? [String: Any?] {
            var model = ListApiByAppResponseBody.ListResult()
            model.fromMap(value)
            self.listResult = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListApiByAppResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListApiByAppResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListApiByAppResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListAuthorizedDataServiceApiDetailsRequest : Tea.TeaModel {
    public class ListQuery : Tea.TeaModel {
        public var appKey: Int64?

        public var page: Int32?

        public var pageSize: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appKey != nil {
                map["AppKey"] = self.appKey!
            }
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppKey"] as? Int64 {
                self.appKey = value
            }
            if let value = dict["Page"] as? Int32 {
                self.page = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
        }
    }
    public var listQuery: ListAuthorizedDataServiceApiDetailsRequest.ListQuery?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQuery != nil {
            map["ListQuery"] = self.listQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? [String: Any?] {
            var model = ListAuthorizedDataServiceApiDetailsRequest.ListQuery()
            model.fromMap(value)
            self.listQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListAuthorizedDataServiceApiDetailsShrinkRequest : Tea.TeaModel {
    public var listQueryShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQueryShrink != nil {
            map["ListQuery"] = self.listQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? String {
            self.listQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListAuthorizedDataServiceApiDetailsResponseBody : Tea.TeaModel {
    public class Result : Tea.TeaModel {
        public class Data : Tea.TeaModel {
            public class AuthorizedDevReturnParameters : Tea.TeaModel {
                public var exampleValue: String?

                public var isAuthorized: Int32?

                public var parameterDataType: Int32?

                public var parameterDescription: String?

                public var parameterName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.exampleValue != nil {
                        map["ExampleValue"] = self.exampleValue!
                    }
                    if self.isAuthorized != nil {
                        map["IsAuthorized"] = self.isAuthorized!
                    }
                    if self.parameterDataType != nil {
                        map["ParameterDataType"] = self.parameterDataType!
                    }
                    if self.parameterDescription != nil {
                        map["ParameterDescription"] = self.parameterDescription!
                    }
                    if self.parameterName != nil {
                        map["ParameterName"] = self.parameterName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ExampleValue"] as? String {
                        self.exampleValue = value
                    }
                    if let value = dict["IsAuthorized"] as? Int32 {
                        self.isAuthorized = value
                    }
                    if let value = dict["ParameterDataType"] as? Int32 {
                        self.parameterDataType = value
                    }
                    if let value = dict["ParameterDescription"] as? String {
                        self.parameterDescription = value
                    }
                    if let value = dict["ParameterName"] as? String {
                        self.parameterName = value
                    }
                }
            }
            public class AuthorizedProdReturnParameters : Tea.TeaModel {
                public var exampleValue: String?

                public var isAuthorized: Int32?

                public var parameterDataType: Int32?

                public var parameterDescription: String?

                public var parameterName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.exampleValue != nil {
                        map["ExampleValue"] = self.exampleValue!
                    }
                    if self.isAuthorized != nil {
                        map["IsAuthorized"] = self.isAuthorized!
                    }
                    if self.parameterDataType != nil {
                        map["ParameterDataType"] = self.parameterDataType!
                    }
                    if self.parameterDescription != nil {
                        map["ParameterDescription"] = self.parameterDescription!
                    }
                    if self.parameterName != nil {
                        map["ParameterName"] = self.parameterName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ExampleValue"] as? String {
                        self.exampleValue = value
                    }
                    if let value = dict["IsAuthorized"] as? Int32 {
                        self.isAuthorized = value
                    }
                    if let value = dict["ParameterDataType"] as? Int32 {
                        self.parameterDataType = value
                    }
                    if let value = dict["ParameterDescription"] as? String {
                        self.parameterDescription = value
                    }
                    if let value = dict["ParameterName"] as? String {
                        self.parameterName = value
                    }
                }
            }
            public var apiId: Int64?

            public var apiName: String?

            public var appId: Int64?

            public var authType: String?

            public var authorizedDevReturnParameters: [ListAuthorizedDataServiceApiDetailsResponseBody.Result.Data.AuthorizedDevReturnParameters]?

            public var authorizedProdReturnParameters: [ListAuthorizedDataServiceApiDetailsResponseBody.Result.Data.AuthorizedProdReturnParameters]?

            public var description_: String?

            public var devAuthPeriod: String?

            public var prodAuthPeriod: String?

            public var projectId: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiId != nil {
                    map["ApiId"] = self.apiId!
                }
                if self.apiName != nil {
                    map["ApiName"] = self.apiName!
                }
                if self.appId != nil {
                    map["AppId"] = self.appId!
                }
                if self.authType != nil {
                    map["AuthType"] = self.authType!
                }
                if self.authorizedDevReturnParameters != nil {
                    var tmp : [Any] = []
                    for k in self.authorizedDevReturnParameters! {
                        tmp.append(k.toMap())
                    }
                    map["AuthorizedDevReturnParameters"] = tmp
                }
                if self.authorizedProdReturnParameters != nil {
                    var tmp : [Any] = []
                    for k in self.authorizedProdReturnParameters! {
                        tmp.append(k.toMap())
                    }
                    map["AuthorizedProdReturnParameters"] = tmp
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.devAuthPeriod != nil {
                    map["DevAuthPeriod"] = self.devAuthPeriod!
                }
                if self.prodAuthPeriod != nil {
                    map["ProdAuthPeriod"] = self.prodAuthPeriod!
                }
                if self.projectId != nil {
                    map["ProjectId"] = self.projectId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiId"] as? Int64 {
                    self.apiId = value
                }
                if let value = dict["ApiName"] as? String {
                    self.apiName = value
                }
                if let value = dict["AppId"] as? Int64 {
                    self.appId = value
                }
                if let value = dict["AuthType"] as? String {
                    self.authType = value
                }
                if let value = dict["AuthorizedDevReturnParameters"] as? [Any?] {
                    var tmp : [ListAuthorizedDataServiceApiDetailsResponseBody.Result.Data.AuthorizedDevReturnParameters] = []
                    for v in value {
                        if v != nil {
                            var model = ListAuthorizedDataServiceApiDetailsResponseBody.Result.Data.AuthorizedDevReturnParameters()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.authorizedDevReturnParameters = tmp
                }
                if let value = dict["AuthorizedProdReturnParameters"] as? [Any?] {
                    var tmp : [ListAuthorizedDataServiceApiDetailsResponseBody.Result.Data.AuthorizedProdReturnParameters] = []
                    for v in value {
                        if v != nil {
                            var model = ListAuthorizedDataServiceApiDetailsResponseBody.Result.Data.AuthorizedProdReturnParameters()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.authorizedProdReturnParameters = tmp
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DevAuthPeriod"] as? String {
                    self.devAuthPeriod = value
                }
                if let value = dict["ProdAuthPeriod"] as? String {
                    self.prodAuthPeriod = value
                }
                if let value = dict["ProjectId"] as? Int64 {
                    self.projectId = value
                }
            }
        }
        public var data: [ListAuthorizedDataServiceApiDetailsResponseBody.Result.Data]?

        public var totalCount: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.data != nil {
                var tmp : [Any] = []
                for k in self.data! {
                    tmp.append(k.toMap())
                }
                map["Data"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Data"] as? [Any?] {
                var tmp : [ListAuthorizedDataServiceApiDetailsResponseBody.Result.Data] = []
                for v in value {
                    if v != nil {
                        var model = ListAuthorizedDataServiceApiDetailsResponseBody.Result.Data()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.data = tmp
            }
            if let value = dict["TotalCount"] as? Int64 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var result: ListAuthorizedDataServiceApiDetailsResponseBody.Result?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.result?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.result != nil {
            map["Result"] = self.result?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Result"] as? [String: Any?] {
            var model = ListAuthorizedDataServiceApiDetailsResponseBody.Result()
            model.fromMap(value)
            self.result = model
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListAuthorizedDataServiceApiDetailsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListAuthorizedDataServiceApiDetailsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListAuthorizedDataServiceApiDetailsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListBizEntitiesRequest : Tea.TeaModel {
    public class ListQuery : Tea.TeaModel {
        public class FilterCriteria : Tea.TeaModel {
            public var bizUnitIdList: [Int64]?

            public var bizUnitNameList: [String]?

            public var dataDomainIdList: [Int64]?

            public var dataDomainNameList: [String]?

            public var hasTableRef: Bool?

            public var ownerUserIdList: [String]?

            public var statusList: [String]?

            public var subTypeList: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bizUnitIdList != nil {
                    map["BizUnitIdList"] = self.bizUnitIdList!
                }
                if self.bizUnitNameList != nil {
                    map["BizUnitNameList"] = self.bizUnitNameList!
                }
                if self.dataDomainIdList != nil {
                    map["DataDomainIdList"] = self.dataDomainIdList!
                }
                if self.dataDomainNameList != nil {
                    map["DataDomainNameList"] = self.dataDomainNameList!
                }
                if self.hasTableRef != nil {
                    map["HasTableRef"] = self.hasTableRef!
                }
                if self.ownerUserIdList != nil {
                    map["OwnerUserIdList"] = self.ownerUserIdList!
                }
                if self.statusList != nil {
                    map["StatusList"] = self.statusList!
                }
                if self.subTypeList != nil {
                    map["SubTypeList"] = self.subTypeList!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BizUnitIdList"] as? [Int64] {
                    self.bizUnitIdList = value
                }
                if let value = dict["BizUnitNameList"] as? [String] {
                    self.bizUnitNameList = value
                }
                if let value = dict["DataDomainIdList"] as? [Int64] {
                    self.dataDomainIdList = value
                }
                if let value = dict["DataDomainNameList"] as? [String] {
                    self.dataDomainNameList = value
                }
                if let value = dict["HasTableRef"] as? Bool {
                    self.hasTableRef = value
                }
                if let value = dict["OwnerUserIdList"] as? [String] {
                    self.ownerUserIdList = value
                }
                if let value = dict["StatusList"] as? [String] {
                    self.statusList = value
                }
                if let value = dict["SubTypeList"] as? [String] {
                    self.subTypeList = value
                }
            }
        }
        public var filterCriteria: ListBizEntitiesRequest.ListQuery.FilterCriteria?

        public var keyword: String?

        public var page: Int32?

        public var pageSize: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.filterCriteria?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.filterCriteria != nil {
                map["FilterCriteria"] = self.filterCriteria?.toMap()
            }
            if self.keyword != nil {
                map["Keyword"] = self.keyword!
            }
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FilterCriteria"] as? [String: Any?] {
                var model = ListBizEntitiesRequest.ListQuery.FilterCriteria()
                model.fromMap(value)
                self.filterCriteria = model
            }
            if let value = dict["Keyword"] as? String {
                self.keyword = value
            }
            if let value = dict["Page"] as? Int32 {
                self.page = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
        }
    }
    public var listQuery: ListBizEntitiesRequest.ListQuery?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQuery != nil {
            map["ListQuery"] = self.listQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? [String: Any?] {
            var model = ListBizEntitiesRequest.ListQuery()
            model.fromMap(value)
            self.listQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListBizEntitiesShrinkRequest : Tea.TeaModel {
    public var listQueryShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQueryShrink != nil {
            map["ListQuery"] = self.listQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? String {
            self.listQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListBizEntitiesResponseBody : Tea.TeaModel {
    public class PageResult : Tea.TeaModel {
        public class BizEntityList : Tea.TeaModel {
            public var belongToBizEntityIdList: [Int64]?

            public var bizUnitId: Int64?

            public var childBizEntityIdList: [Int64]?

            public var dataDomainId: Int64?

            public var description_: String?

            public var displayName: String?

            public var gmtCreate: String?

            public var gmtModified: String?

            public var hasChildBizEntity: Bool?

            public var id: Int64?

            public var lastModifier: String?

            public var lastModifierName: String?

            public var levelSubBizObject: Bool?

            public var name: String?

            public var onlineStatus: String?

            public var ownerName: String?

            public var ownerUserId: String?

            public var refBizEntityIdList: [Int64]?

            public var refTableCount: Int32?

            public var status: String?

            public var subType: String?

            public var suffixBizEntityIdList: [Int64]?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.belongToBizEntityIdList != nil {
                    map["BelongToBizEntityIdList"] = self.belongToBizEntityIdList!
                }
                if self.bizUnitId != nil {
                    map["BizUnitId"] = self.bizUnitId!
                }
                if self.childBizEntityIdList != nil {
                    map["ChildBizEntityIdList"] = self.childBizEntityIdList!
                }
                if self.dataDomainId != nil {
                    map["DataDomainId"] = self.dataDomainId!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["GmtModified"] = self.gmtModified!
                }
                if self.hasChildBizEntity != nil {
                    map["HasChildBizEntity"] = self.hasChildBizEntity!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.lastModifier != nil {
                    map["LastModifier"] = self.lastModifier!
                }
                if self.lastModifierName != nil {
                    map["LastModifierName"] = self.lastModifierName!
                }
                if self.levelSubBizObject != nil {
                    map["LevelSubBizObject"] = self.levelSubBizObject!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.onlineStatus != nil {
                    map["OnlineStatus"] = self.onlineStatus!
                }
                if self.ownerName != nil {
                    map["OwnerName"] = self.ownerName!
                }
                if self.ownerUserId != nil {
                    map["OwnerUserId"] = self.ownerUserId!
                }
                if self.refBizEntityIdList != nil {
                    map["RefBizEntityIdList"] = self.refBizEntityIdList!
                }
                if self.refTableCount != nil {
                    map["RefTableCount"] = self.refTableCount!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.subType != nil {
                    map["SubType"] = self.subType!
                }
                if self.suffixBizEntityIdList != nil {
                    map["SuffixBizEntityIdList"] = self.suffixBizEntityIdList!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BelongToBizEntityIdList"] as? [Int64] {
                    self.belongToBizEntityIdList = value
                }
                if let value = dict["BizUnitId"] as? Int64 {
                    self.bizUnitId = value
                }
                if let value = dict["ChildBizEntityIdList"] as? [Int64] {
                    self.childBizEntityIdList = value
                }
                if let value = dict["DataDomainId"] as? Int64 {
                    self.dataDomainId = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["GmtCreate"] as? String {
                    self.gmtCreate = value
                }
                if let value = dict["GmtModified"] as? String {
                    self.gmtModified = value
                }
                if let value = dict["HasChildBizEntity"] as? Bool {
                    self.hasChildBizEntity = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["LastModifier"] as? String {
                    self.lastModifier = value
                }
                if let value = dict["LastModifierName"] as? String {
                    self.lastModifierName = value
                }
                if let value = dict["LevelSubBizObject"] as? Bool {
                    self.levelSubBizObject = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["OnlineStatus"] as? String {
                    self.onlineStatus = value
                }
                if let value = dict["OwnerName"] as? String {
                    self.ownerName = value
                }
                if let value = dict["OwnerUserId"] as? String {
                    self.ownerUserId = value
                }
                if let value = dict["RefBizEntityIdList"] as? [Int64] {
                    self.refBizEntityIdList = value
                }
                if let value = dict["RefTableCount"] as? Int32 {
                    self.refTableCount = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["SubType"] as? String {
                    self.subType = value
                }
                if let value = dict["SuffixBizEntityIdList"] as? [Int64] {
                    self.suffixBizEntityIdList = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var bizEntityList: [ListBizEntitiesResponseBody.PageResult.BizEntityList]?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bizEntityList != nil {
                var tmp : [Any] = []
                for k in self.bizEntityList! {
                    tmp.append(k.toMap())
                }
                map["BizEntityList"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BizEntityList"] as? [Any?] {
                var tmp : [ListBizEntitiesResponseBody.PageResult.BizEntityList] = []
                for v in value {
                    if v != nil {
                        var model = ListBizEntitiesResponseBody.PageResult.BizEntityList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.bizEntityList = tmp
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pageResult: ListBizEntitiesResponseBody.PageResult?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageResult != nil {
            map["PageResult"] = self.pageResult?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageResult"] as? [String: Any?] {
            var model = ListBizEntitiesResponseBody.PageResult()
            model.fromMap(value)
            self.pageResult = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListBizEntitiesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListBizEntitiesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListBizEntitiesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListBizUnitsRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListBizUnitsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class BizUnitList : Tea.TeaModel {
            public class AccountList : Tea.TeaModel {
                public var id: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                }
            }
            public var accountList: [ListBizUnitsResponseBody.Data.BizUnitList.AccountList]?

            public var description_: String?

            public var displayName: String?

            public var env: String?

            public var gmtCreate: String?

            public var gmtModified: String?

            public var icon: String?

            public var id: Int64?

            public var lastModifier: String?

            public var lastModifierName: String?

            public var mode: String?

            public var name: String?

            public var ownerName: String?

            public var ownerUserId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.accountList != nil {
                    var tmp : [Any] = []
                    for k in self.accountList! {
                        tmp.append(k.toMap())
                    }
                    map["AccountList"] = tmp
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.env != nil {
                    map["Env"] = self.env!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["GmtModified"] = self.gmtModified!
                }
                if self.icon != nil {
                    map["Icon"] = self.icon!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.lastModifier != nil {
                    map["LastModifier"] = self.lastModifier!
                }
                if self.lastModifierName != nil {
                    map["LastModifierName"] = self.lastModifierName!
                }
                if self.mode != nil {
                    map["Mode"] = self.mode!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.ownerName != nil {
                    map["OwnerName"] = self.ownerName!
                }
                if self.ownerUserId != nil {
                    map["OwnerUserId"] = self.ownerUserId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AccountList"] as? [Any?] {
                    var tmp : [ListBizUnitsResponseBody.Data.BizUnitList.AccountList] = []
                    for v in value {
                        if v != nil {
                            var model = ListBizUnitsResponseBody.Data.BizUnitList.AccountList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.accountList = tmp
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["Env"] as? String {
                    self.env = value
                }
                if let value = dict["GmtCreate"] as? String {
                    self.gmtCreate = value
                }
                if let value = dict["GmtModified"] as? String {
                    self.gmtModified = value
                }
                if let value = dict["Icon"] as? String {
                    self.icon = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["LastModifier"] as? String {
                    self.lastModifier = value
                }
                if let value = dict["LastModifierName"] as? String {
                    self.lastModifierName = value
                }
                if let value = dict["Mode"] as? String {
                    self.mode = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["OwnerName"] as? String {
                    self.ownerName = value
                }
                if let value = dict["OwnerUserId"] as? String {
                    self.ownerUserId = value
                }
            }
        }
        public var bizUnitList: [ListBizUnitsResponseBody.Data.BizUnitList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bizUnitList != nil {
                var tmp : [Any] = []
                for k in self.bizUnitList! {
                    tmp.append(k.toMap())
                }
                map["BizUnitList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BizUnitList"] as? [Any?] {
                var tmp : [ListBizUnitsResponseBody.Data.BizUnitList] = []
                for v in value {
                    if v != nil {
                        var model = ListBizUnitsResponseBody.Data.BizUnitList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.bizUnitList = tmp
            }
        }
    }
    public var code: String?

    public var data: ListBizUnitsResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListBizUnitsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListBizUnitsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListBizUnitsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListBizUnitsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListComputeSourcesRequest : Tea.TeaModel {
    public class ListQuery : Tea.TeaModel {
        public var bindProject: Bool?

        public var keyword: String?

        public var pageNo: Int32?

        public var pageSize: Int32?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bindProject != nil {
                map["BindProject"] = self.bindProject!
            }
            if self.keyword != nil {
                map["Keyword"] = self.keyword!
            }
            if self.pageNo != nil {
                map["PageNo"] = self.pageNo!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BindProject"] as? Bool {
                self.bindProject = value
            }
            if let value = dict["Keyword"] as? String {
                self.keyword = value
            }
            if let value = dict["PageNo"] as? Int32 {
                self.pageNo = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var listQuery: ListComputeSourcesRequest.ListQuery?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQuery != nil {
            map["ListQuery"] = self.listQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? [String: Any?] {
            var model = ListComputeSourcesRequest.ListQuery()
            model.fromMap(value)
            self.listQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListComputeSourcesShrinkRequest : Tea.TeaModel {
    public var listQueryShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQueryShrink != nil {
            map["ListQuery"] = self.listQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? String {
            self.listQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListComputeSourcesResponseBody : Tea.TeaModel {
    public class PageResult : Tea.TeaModel {
        public class ComputeSourceList : Tea.TeaModel {
            public var bindProject: Bool?

            public var bindProjectId: Int64?

            public var bindProjectName: String?

            public var creator: String?

            public var creatorName: String?

            public var description_: String?

            public var displayName: String?

            public var gmtCreate: String?

            public var gmtModified: String?

            public var id: Int64?

            public var name: String?

            public var owner: String?

            public var ownerName: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bindProject != nil {
                    map["BindProject"] = self.bindProject!
                }
                if self.bindProjectId != nil {
                    map["BindProjectId"] = self.bindProjectId!
                }
                if self.bindProjectName != nil {
                    map["BindProjectName"] = self.bindProjectName!
                }
                if self.creator != nil {
                    map["Creator"] = self.creator!
                }
                if self.creatorName != nil {
                    map["CreatorName"] = self.creatorName!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["GmtModified"] = self.gmtModified!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.owner != nil {
                    map["Owner"] = self.owner!
                }
                if self.ownerName != nil {
                    map["OwnerName"] = self.ownerName!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BindProject"] as? Bool {
                    self.bindProject = value
                }
                if let value = dict["BindProjectId"] as? Int64 {
                    self.bindProjectId = value
                }
                if let value = dict["BindProjectName"] as? String {
                    self.bindProjectName = value
                }
                if let value = dict["Creator"] as? String {
                    self.creator = value
                }
                if let value = dict["CreatorName"] as? String {
                    self.creatorName = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["GmtCreate"] as? String {
                    self.gmtCreate = value
                }
                if let value = dict["GmtModified"] as? String {
                    self.gmtModified = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Owner"] as? String {
                    self.owner = value
                }
                if let value = dict["OwnerName"] as? String {
                    self.ownerName = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var computeSourceList: [ListComputeSourcesResponseBody.PageResult.ComputeSourceList]?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.computeSourceList != nil {
                var tmp : [Any] = []
                for k in self.computeSourceList! {
                    tmp.append(k.toMap())
                }
                map["ComputeSourceList"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ComputeSourceList"] as? [Any?] {
                var tmp : [ListComputeSourcesResponseBody.PageResult.ComputeSourceList] = []
                for v in value {
                    if v != nil {
                        var model = ListComputeSourcesResponseBody.PageResult.ComputeSourceList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.computeSourceList = tmp
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pageResult: ListComputeSourcesResponseBody.PageResult?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageResult != nil {
            map["PageResult"] = self.pageResult?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageResult"] as? [String: Any?] {
            var model = ListComputeSourcesResponseBody.PageResult()
            model.fromMap(value)
            self.pageResult = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListComputeSourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListComputeSourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListComputeSourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListDataDomainsRequest : Tea.TeaModel {
    public class ListQuery : Tea.TeaModel {
        public var bizUnitIdList: [Int64]?

        public var keyword: String?

        public var parentIdList: [Int64]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bizUnitIdList != nil {
                map["BizUnitIdList"] = self.bizUnitIdList!
            }
            if self.keyword != nil {
                map["Keyword"] = self.keyword!
            }
            if self.parentIdList != nil {
                map["ParentIdList"] = self.parentIdList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BizUnitIdList"] as? [Int64] {
                self.bizUnitIdList = value
            }
            if let value = dict["Keyword"] as? String {
                self.keyword = value
            }
            if let value = dict["ParentIdList"] as? [Int64] {
                self.parentIdList = value
            }
        }
    }
    public var listQuery: ListDataDomainsRequest.ListQuery?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQuery != nil {
            map["ListQuery"] = self.listQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? [String: Any?] {
            var model = ListDataDomainsRequest.ListQuery()
            model.fromMap(value)
            self.listQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListDataDomainsShrinkRequest : Tea.TeaModel {
    public var listQueryShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQueryShrink != nil {
            map["ListQuery"] = self.listQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? String {
            self.listQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListDataDomainsResponseBody : Tea.TeaModel {
    public class Data : Tea.TeaModel {
        public class DataDomainList : Tea.TeaModel {
            public var abbreviation: String?

            public var bizUnitId: Int64?

            public var description_: String?

            public var displayName: String?

            public var gmtCreate: String?

            public var gmtModified: String?

            public var id: Int64?

            public var lastModifier: String?

            public var lastModifierName: String?

            public var name: String?

            public var ownerName: String?

            public var ownerUserId: String?

            public var parentId: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.abbreviation != nil {
                    map["Abbreviation"] = self.abbreviation!
                }
                if self.bizUnitId != nil {
                    map["BizUnitId"] = self.bizUnitId!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["GmtModified"] = self.gmtModified!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.lastModifier != nil {
                    map["LastModifier"] = self.lastModifier!
                }
                if self.lastModifierName != nil {
                    map["LastModifierName"] = self.lastModifierName!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.ownerName != nil {
                    map["OwnerName"] = self.ownerName!
                }
                if self.ownerUserId != nil {
                    map["OwnerUserId"] = self.ownerUserId!
                }
                if self.parentId != nil {
                    map["ParentId"] = self.parentId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Abbreviation"] as? String {
                    self.abbreviation = value
                }
                if let value = dict["BizUnitId"] as? Int64 {
                    self.bizUnitId = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["GmtCreate"] as? String {
                    self.gmtCreate = value
                }
                if let value = dict["GmtModified"] as? String {
                    self.gmtModified = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["LastModifier"] as? String {
                    self.lastModifier = value
                }
                if let value = dict["LastModifierName"] as? String {
                    self.lastModifierName = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["OwnerName"] as? String {
                    self.ownerName = value
                }
                if let value = dict["OwnerUserId"] as? String {
                    self.ownerUserId = value
                }
                if let value = dict["ParentId"] as? Int64 {
                    self.parentId = value
                }
            }
        }
        public var dataDomainList: [ListDataDomainsResponseBody.Data.DataDomainList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dataDomainList != nil {
                var tmp : [Any] = []
                for k in self.dataDomainList! {
                    tmp.append(k.toMap())
                }
                map["DataDomainList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DataDomainList"] as? [Any?] {
                var tmp : [ListDataDomainsResponseBody.Data.DataDomainList] = []
                for v in value {
                    if v != nil {
                        var model = ListDataDomainsResponseBody.Data.DataDomainList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.dataDomainList = tmp
            }
        }
    }
    public var code: String?

    public var data: ListDataDomainsResponseBody.Data?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.data?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data?.toMap()
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? [String: Any?] {
            var model = ListDataDomainsResponseBody.Data()
            model.fromMap(value)
            self.data = model
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListDataDomainsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListDataDomainsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListDataDomainsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListDataServiceApiCallStatisticsRequest : Tea.TeaModel {
    public class ListQuery : Tea.TeaModel {
        public var endTime: String?

        public var keyword: String?

        public var orderColumn: String?

        public var orderType: Int32?

        public var pageNo: Int32?

        public var pageSize: Int32?

        public var startTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.keyword != nil {
                map["Keyword"] = self.keyword!
            }
            if self.orderColumn != nil {
                map["OrderColumn"] = self.orderColumn!
            }
            if self.orderType != nil {
                map["OrderType"] = self.orderType!
            }
            if self.pageNo != nil {
                map["PageNo"] = self.pageNo!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["EndTime"] as? String {
                self.endTime = value
            }
            if let value = dict["Keyword"] as? String {
                self.keyword = value
            }
            if let value = dict["OrderColumn"] as? String {
                self.orderColumn = value
            }
            if let value = dict["OrderType"] as? Int32 {
                self.orderType = value
            }
            if let value = dict["PageNo"] as? Int32 {
                self.pageNo = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["StartTime"] as? String {
                self.startTime = value
            }
        }
    }
    public var listQuery: ListDataServiceApiCallStatisticsRequest.ListQuery?

    public var opTenantId: Int64?

    public var projectId: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQuery != nil {
            map["ListQuery"] = self.listQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? [String: Any?] {
            var model = ListDataServiceApiCallStatisticsRequest.ListQuery()
            model.fromMap(value)
            self.listQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
    }
}

public class ListDataServiceApiCallStatisticsShrinkRequest : Tea.TeaModel {
    public var listQueryShrink: String?

    public var opTenantId: Int64?

    public var projectId: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQueryShrink != nil {
            map["ListQuery"] = self.listQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? String {
            self.listQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
    }
}

public class ListDataServiceApiCallStatisticsResponseBody : Tea.TeaModel {
    public class PageResult : Tea.TeaModel {
        public class CallStatisticsList : Tea.TeaModel {
            public var apiId: Int64?

            public var apiName: String?

            public var appNameList: [String]?

            public var authorizedAppCount: Int32?

            public var avgResponseTime: Double?

            public var callCount: Int64?

            public var creator: String?

            public var errorCount: String?

            public var errorRate: String?

            public var lastCallTime: String?

            public var offlineRate: String?

            public var projectId: Int32?

            public var projectName: String?

            public var sqlId: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiId != nil {
                    map["ApiId"] = self.apiId!
                }
                if self.apiName != nil {
                    map["ApiName"] = self.apiName!
                }
                if self.appNameList != nil {
                    map["AppNameList"] = self.appNameList!
                }
                if self.authorizedAppCount != nil {
                    map["AuthorizedAppCount"] = self.authorizedAppCount!
                }
                if self.avgResponseTime != nil {
                    map["AvgResponseTime"] = self.avgResponseTime!
                }
                if self.callCount != nil {
                    map["CallCount"] = self.callCount!
                }
                if self.creator != nil {
                    map["Creator"] = self.creator!
                }
                if self.errorCount != nil {
                    map["ErrorCount"] = self.errorCount!
                }
                if self.errorRate != nil {
                    map["ErrorRate"] = self.errorRate!
                }
                if self.lastCallTime != nil {
                    map["LastCallTime"] = self.lastCallTime!
                }
                if self.offlineRate != nil {
                    map["OfflineRate"] = self.offlineRate!
                }
                if self.projectId != nil {
                    map["ProjectId"] = self.projectId!
                }
                if self.projectName != nil {
                    map["ProjectName"] = self.projectName!
                }
                if self.sqlId != nil {
                    map["SqlId"] = self.sqlId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiId"] as? Int64 {
                    self.apiId = value
                }
                if let value = dict["ApiName"] as? String {
                    self.apiName = value
                }
                if let value = dict["AppNameList"] as? [String] {
                    self.appNameList = value
                }
                if let value = dict["AuthorizedAppCount"] as? Int32 {
                    self.authorizedAppCount = value
                }
                if let value = dict["AvgResponseTime"] as? Double {
                    self.avgResponseTime = value
                }
                if let value = dict["CallCount"] as? Int64 {
                    self.callCount = value
                }
                if let value = dict["Creator"] as? String {
                    self.creator = value
                }
                if let value = dict["ErrorCount"] as? String {
                    self.errorCount = value
                }
                if let value = dict["ErrorRate"] as? String {
                    self.errorRate = value
                }
                if let value = dict["LastCallTime"] as? String {
                    self.lastCallTime = value
                }
                if let value = dict["OfflineRate"] as? String {
                    self.offlineRate = value
                }
                if let value = dict["ProjectId"] as? Int32 {
                    self.projectId = value
                }
                if let value = dict["ProjectName"] as? String {
                    self.projectName = value
                }
                if let value = dict["SqlId"] as? Int32 {
                    self.sqlId = value
                }
            }
        }
        public var callStatisticsList: [ListDataServiceApiCallStatisticsResponseBody.PageResult.CallStatisticsList]?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callStatisticsList != nil {
                var tmp : [Any] = []
                for k in self.callStatisticsList! {
                    tmp.append(k.toMap())
                }
                map["CallStatisticsList"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallStatisticsList"] as? [Any?] {
                var tmp : [ListDataServiceApiCallStatisticsResponseBody.PageResult.CallStatisticsList] = []
                for v in value {
                    if v != nil {
                        var model = ListDataServiceApiCallStatisticsResponseBody.PageResult.CallStatisticsList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.callStatisticsList = tmp
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pageResult: ListDataServiceApiCallStatisticsResponseBody.PageResult?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageResult != nil {
            map["PageResult"] = self.pageResult?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageResult"] as? [String: Any?] {
            var model = ListDataServiceApiCallStatisticsResponseBody.PageResult()
            model.fromMap(value)
            self.pageResult = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListDataServiceApiCallStatisticsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListDataServiceApiCallStatisticsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListDataServiceApiCallStatisticsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListDataServiceApiCallsRequest : Tea.TeaModel {
    public class ListQuery : Tea.TeaModel {
        public var apiId: Int64?

        public var apiName: String?

        public var appKey: Int64?

        public var clientIp: String?

        public var endTime: String?

        public var pageNo: Int32?

        public var pageSize: Int32?

        public var startTime: String?

        public var successful: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiId != nil {
                map["ApiId"] = self.apiId!
            }
            if self.apiName != nil {
                map["ApiName"] = self.apiName!
            }
            if self.appKey != nil {
                map["AppKey"] = self.appKey!
            }
            if self.clientIp != nil {
                map["ClientIp"] = self.clientIp!
            }
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.pageNo != nil {
                map["PageNo"] = self.pageNo!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            if self.successful != nil {
                map["Successful"] = self.successful!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiId"] as? Int64 {
                self.apiId = value
            }
            if let value = dict["ApiName"] as? String {
                self.apiName = value
            }
            if let value = dict["AppKey"] as? Int64 {
                self.appKey = value
            }
            if let value = dict["ClientIp"] as? String {
                self.clientIp = value
            }
            if let value = dict["EndTime"] as? String {
                self.endTime = value
            }
            if let value = dict["PageNo"] as? Int32 {
                self.pageNo = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["StartTime"] as? String {
                self.startTime = value
            }
            if let value = dict["Successful"] as? Bool {
                self.successful = value
            }
        }
    }
    public var listQuery: ListDataServiceApiCallsRequest.ListQuery?

    public var opTenantId: Int64?

    public var projectId: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQuery != nil {
            map["ListQuery"] = self.listQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? [String: Any?] {
            var model = ListDataServiceApiCallsRequest.ListQuery()
            model.fromMap(value)
            self.listQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
    }
}

public class ListDataServiceApiCallsShrinkRequest : Tea.TeaModel {
    public var listQueryShrink: String?

    public var opTenantId: Int64?

    public var projectId: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQueryShrink != nil {
            map["ListQuery"] = self.listQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? String {
            self.listQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
    }
}

public class ListDataServiceApiCallsResponseBody : Tea.TeaModel {
    public class PageResult : Tea.TeaModel {
        public class CallLogList : Tea.TeaModel {
            public var apiId: Int64?

            public var apiName: String?

            public var appKey: Int64?

            public var appName: String?

            public var bizCode: String?

            public var bizCodeDescription: String?

            public var clientIp: String?

            public var costTime: Int32?

            public var endTime: String?

            public var env: Int32?

            public var executeCostTime: Int32?

            public var executeMode: Int32?

            public var httpStatusCode: String?

            public var httpStatusDescription: String?

            public var jobId: String?

            public var projectId: Int32?

            public var projectName: String?

            public var requestId: String?

            public var requestParameter: String?

            public var requestSize: Int32?

            public var responseParameter: String?

            public var responseSize: Int32?

            public var resultCount: Int32?

            public var sql: String?

            public var startTime: String?

            public var status: Int32?

            public var successful: Bool?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiId != nil {
                    map["ApiId"] = self.apiId!
                }
                if self.apiName != nil {
                    map["ApiName"] = self.apiName!
                }
                if self.appKey != nil {
                    map["AppKey"] = self.appKey!
                }
                if self.appName != nil {
                    map["AppName"] = self.appName!
                }
                if self.bizCode != nil {
                    map["BizCode"] = self.bizCode!
                }
                if self.bizCodeDescription != nil {
                    map["BizCodeDescription"] = self.bizCodeDescription!
                }
                if self.clientIp != nil {
                    map["ClientIp"] = self.clientIp!
                }
                if self.costTime != nil {
                    map["CostTime"] = self.costTime!
                }
                if self.endTime != nil {
                    map["EndTime"] = self.endTime!
                }
                if self.env != nil {
                    map["Env"] = self.env!
                }
                if self.executeCostTime != nil {
                    map["ExecuteCostTime"] = self.executeCostTime!
                }
                if self.executeMode != nil {
                    map["ExecuteMode"] = self.executeMode!
                }
                if self.httpStatusCode != nil {
                    map["HttpStatusCode"] = self.httpStatusCode!
                }
                if self.httpStatusDescription != nil {
                    map["HttpStatusDescription"] = self.httpStatusDescription!
                }
                if self.jobId != nil {
                    map["JobId"] = self.jobId!
                }
                if self.projectId != nil {
                    map["ProjectId"] = self.projectId!
                }
                if self.projectName != nil {
                    map["ProjectName"] = self.projectName!
                }
                if self.requestId != nil {
                    map["RequestId"] = self.requestId!
                }
                if self.requestParameter != nil {
                    map["RequestParameter"] = self.requestParameter!
                }
                if self.requestSize != nil {
                    map["RequestSize"] = self.requestSize!
                }
                if self.responseParameter != nil {
                    map["ResponseParameter"] = self.responseParameter!
                }
                if self.responseSize != nil {
                    map["ResponseSize"] = self.responseSize!
                }
                if self.resultCount != nil {
                    map["ResultCount"] = self.resultCount!
                }
                if self.sql != nil {
                    map["Sql"] = self.sql!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.successful != nil {
                    map["Successful"] = self.successful!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiId"] as? Int64 {
                    self.apiId = value
                }
                if let value = dict["ApiName"] as? String {
                    self.apiName = value
                }
                if let value = dict["AppKey"] as? Int64 {
                    self.appKey = value
                }
                if let value = dict["AppName"] as? String {
                    self.appName = value
                }
                if let value = dict["BizCode"] as? String {
                    self.bizCode = value
                }
                if let value = dict["BizCodeDescription"] as? String {
                    self.bizCodeDescription = value
                }
                if let value = dict["ClientIp"] as? String {
                    self.clientIp = value
                }
                if let value = dict["CostTime"] as? Int32 {
                    self.costTime = value
                }
                if let value = dict["EndTime"] as? String {
                    self.endTime = value
                }
                if let value = dict["Env"] as? Int32 {
                    self.env = value
                }
                if let value = dict["ExecuteCostTime"] as? Int32 {
                    self.executeCostTime = value
                }
                if let value = dict["ExecuteMode"] as? Int32 {
                    self.executeMode = value
                }
                if let value = dict["HttpStatusCode"] as? String {
                    self.httpStatusCode = value
                }
                if let value = dict["HttpStatusDescription"] as? String {
                    self.httpStatusDescription = value
                }
                if let value = dict["JobId"] as? String {
                    self.jobId = value
                }
                if let value = dict["ProjectId"] as? Int32 {
                    self.projectId = value
                }
                if let value = dict["ProjectName"] as? String {
                    self.projectName = value
                }
                if let value = dict["RequestId"] as? String {
                    self.requestId = value
                }
                if let value = dict["RequestParameter"] as? String {
                    self.requestParameter = value
                }
                if let value = dict["RequestSize"] as? Int32 {
                    self.requestSize = value
                }
                if let value = dict["ResponseParameter"] as? String {
                    self.responseParameter = value
                }
                if let value = dict["ResponseSize"] as? Int32 {
                    self.responseSize = value
                }
                if let value = dict["ResultCount"] as? Int32 {
                    self.resultCount = value
                }
                if let value = dict["Sql"] as? String {
                    self.sql = value
                }
                if let value = dict["StartTime"] as? String {
                    self.startTime = value
                }
                if let value = dict["Status"] as? Int32 {
                    self.status = value
                }
                if let value = dict["Successful"] as? Bool {
                    self.successful = value
                }
            }
        }
        public var callLogList: [ListDataServiceApiCallsResponseBody.PageResult.CallLogList]?

        public var totalCount: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.callLogList != nil {
                var tmp : [Any] = []
                for k in self.callLogList! {
                    tmp.append(k.toMap())
                }
                map["CallLogList"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CallLogList"] as? [Any?] {
                var tmp : [ListDataServiceApiCallsResponseBody.PageResult.CallLogList] = []
                for v in value {
                    if v != nil {
                        var model = ListDataServiceApiCallsResponseBody.PageResult.CallLogList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.callLogList = tmp
            }
            if let value = dict["TotalCount"] as? Int64 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pageResult: ListDataServiceApiCallsResponseBody.PageResult?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageResult != nil {
            map["PageResult"] = self.pageResult?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageResult"] as? [String: Any?] {
            var model = ListDataServiceApiCallsResponseBody.PageResult()
            model.fromMap(value)
            self.pageResult = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListDataServiceApiCallsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListDataServiceApiCallsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListDataServiceApiCallsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListDataServiceApiImpactsRequest : Tea.TeaModel {
    public class ListQuery : Tea.TeaModel {
        public var apiId: Int64?

        public var appName: String?

        public var endTime: String?

        public var orderColumn: String?

        public var orderType: Int32?

        public var pageNo: Int32?

        public var pageSize: Int32?

        public var startTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiId != nil {
                map["ApiId"] = self.apiId!
            }
            if self.appName != nil {
                map["AppName"] = self.appName!
            }
            if self.endTime != nil {
                map["EndTime"] = self.endTime!
            }
            if self.orderColumn != nil {
                map["OrderColumn"] = self.orderColumn!
            }
            if self.orderType != nil {
                map["OrderType"] = self.orderType!
            }
            if self.pageNo != nil {
                map["PageNo"] = self.pageNo!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.startTime != nil {
                map["StartTime"] = self.startTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiId"] as? Int64 {
                self.apiId = value
            }
            if let value = dict["AppName"] as? String {
                self.appName = value
            }
            if let value = dict["EndTime"] as? String {
                self.endTime = value
            }
            if let value = dict["OrderColumn"] as? String {
                self.orderColumn = value
            }
            if let value = dict["OrderType"] as? Int32 {
                self.orderType = value
            }
            if let value = dict["PageNo"] as? Int32 {
                self.pageNo = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["StartTime"] as? String {
                self.startTime = value
            }
        }
    }
    public var listQuery: ListDataServiceApiImpactsRequest.ListQuery?

    public var opTenantId: Int64?

    public var projectId: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQuery != nil {
            map["ListQuery"] = self.listQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? [String: Any?] {
            var model = ListDataServiceApiImpactsRequest.ListQuery()
            model.fromMap(value)
            self.listQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
    }
}

public class ListDataServiceApiImpactsShrinkRequest : Tea.TeaModel {
    public var listQueryShrink: String?

    public var opTenantId: Int64?

    public var projectId: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQueryShrink != nil {
            map["ListQuery"] = self.listQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? String {
            self.listQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
    }
}

public class ListDataServiceApiImpactsResponseBody : Tea.TeaModel {
    public class PageResult : Tea.TeaModel {
        public class ImpactList : Tea.TeaModel {
            public var apiId: Int64?

            public var appKey: Int64?

            public var appName: String?

            public var callCount: Int64?

            public var clientFailCount: Int64?

            public var clientIp: String?

            public var errorApiCount: Int64?

            public var errorCount: Int64?

            public var errorRate: String?

            public var lastCallTime: String?

            public var minute: String?

            public var offlineCount: Int64?

            public var successTimeCost: String?

            public var totalCount: Int64?

            public var totalTimeCost: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiId != nil {
                    map["ApiId"] = self.apiId!
                }
                if self.appKey != nil {
                    map["AppKey"] = self.appKey!
                }
                if self.appName != nil {
                    map["AppName"] = self.appName!
                }
                if self.callCount != nil {
                    map["CallCount"] = self.callCount!
                }
                if self.clientFailCount != nil {
                    map["ClientFailCount"] = self.clientFailCount!
                }
                if self.clientIp != nil {
                    map["ClientIp"] = self.clientIp!
                }
                if self.errorApiCount != nil {
                    map["ErrorApiCount"] = self.errorApiCount!
                }
                if self.errorCount != nil {
                    map["ErrorCount"] = self.errorCount!
                }
                if self.errorRate != nil {
                    map["ErrorRate"] = self.errorRate!
                }
                if self.lastCallTime != nil {
                    map["LastCallTime"] = self.lastCallTime!
                }
                if self.minute != nil {
                    map["Minute"] = self.minute!
                }
                if self.offlineCount != nil {
                    map["OfflineCount"] = self.offlineCount!
                }
                if self.successTimeCost != nil {
                    map["SuccessTimeCost"] = self.successTimeCost!
                }
                if self.totalCount != nil {
                    map["TotalCount"] = self.totalCount!
                }
                if self.totalTimeCost != nil {
                    map["TotalTimeCost"] = self.totalTimeCost!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiId"] as? Int64 {
                    self.apiId = value
                }
                if let value = dict["AppKey"] as? Int64 {
                    self.appKey = value
                }
                if let value = dict["AppName"] as? String {
                    self.appName = value
                }
                if let value = dict["CallCount"] as? Int64 {
                    self.callCount = value
                }
                if let value = dict["ClientFailCount"] as? Int64 {
                    self.clientFailCount = value
                }
                if let value = dict["ClientIp"] as? String {
                    self.clientIp = value
                }
                if let value = dict["ErrorApiCount"] as? Int64 {
                    self.errorApiCount = value
                }
                if let value = dict["ErrorCount"] as? Int64 {
                    self.errorCount = value
                }
                if let value = dict["ErrorRate"] as? String {
                    self.errorRate = value
                }
                if let value = dict["LastCallTime"] as? String {
                    self.lastCallTime = value
                }
                if let value = dict["Minute"] as? String {
                    self.minute = value
                }
                if let value = dict["OfflineCount"] as? Int64 {
                    self.offlineCount = value
                }
                if let value = dict["SuccessTimeCost"] as? String {
                    self.successTimeCost = value
                }
                if let value = dict["TotalCount"] as? Int64 {
                    self.totalCount = value
                }
                if let value = dict["TotalTimeCost"] as? String {
                    self.totalTimeCost = value
                }
            }
        }
        public var impactList: [ListDataServiceApiImpactsResponseBody.PageResult.ImpactList]?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.impactList != nil {
                var tmp : [Any] = []
                for k in self.impactList! {
                    tmp.append(k.toMap())
                }
                map["ImpactList"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ImpactList"] as? [Any?] {
                var tmp : [ListDataServiceApiImpactsResponseBody.PageResult.ImpactList] = []
                for v in value {
                    if v != nil {
                        var model = ListDataServiceApiImpactsResponseBody.PageResult.ImpactList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.impactList = tmp
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pageResult: ListDataServiceApiImpactsResponseBody.PageResult?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageResult != nil {
            map["PageResult"] = self.pageResult?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageResult"] as? [String: Any?] {
            var model = ListDataServiceApiImpactsResponseBody.PageResult()
            model.fromMap(value)
            self.pageResult = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListDataServiceApiImpactsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListDataServiceApiImpactsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListDataServiceApiImpactsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListDataServiceAuthorizedAppsRequest : Tea.TeaModel {
    public class ListQuery : Tea.TeaModel {
        public var keyword: String?

        public var pageNo: Int32?

        public var pageSize: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.keyword != nil {
                map["Keyword"] = self.keyword!
            }
            if self.pageNo != nil {
                map["PageNo"] = self.pageNo!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Keyword"] as? String {
                self.keyword = value
            }
            if let value = dict["PageNo"] as? Int32 {
                self.pageNo = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
        }
    }
    public var listQuery: ListDataServiceAuthorizedAppsRequest.ListQuery?

    public var opTenantId: Int64?

    public var projectId: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQuery != nil {
            map["ListQuery"] = self.listQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? [String: Any?] {
            var model = ListDataServiceAuthorizedAppsRequest.ListQuery()
            model.fromMap(value)
            self.listQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
    }
}

public class ListDataServiceAuthorizedAppsShrinkRequest : Tea.TeaModel {
    public var listQueryShrink: String?

    public var opTenantId: Int64?

    public var projectId: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQueryShrink != nil {
            map["ListQuery"] = self.listQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? String {
            self.listQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
    }
}

public class ListDataServiceAuthorizedAppsResponseBody : Tea.TeaModel {
    public class PageResult : Tea.TeaModel {
        public class AuthorizedAppList : Tea.TeaModel {
            public class RemarkForDebugList : Tea.TeaModel {
                public var key: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.key != nil {
                        map["Key"] = self.key!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Key"] as? String {
                        self.key = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var appId: Int32?

            public var appName: String?

            public var applyUserId: String?

            public var applyUserName: String?

            public var expireDate: String?

            public var id: Int32?

            public var isProjectManager: Bool?

            public var owner: String?

            public var ownerUserName: String?

            public var privilegeAccount: Int32?

            public var privilegeType: Int32?

            public var projectId: Int32?

            public var projectName: String?

            public var realHasOwnerPrivilege: Bool?

            public var realHasPrivilege: Bool?

            public var remarkForDebugList: [ListDataServiceAuthorizedAppsResponseBody.PageResult.AuthorizedAppList.RemarkForDebugList]?

            public var revocable: Bool?

            public var revocableDetail: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appId != nil {
                    map["AppId"] = self.appId!
                }
                if self.appName != nil {
                    map["AppName"] = self.appName!
                }
                if self.applyUserId != nil {
                    map["ApplyUserId"] = self.applyUserId!
                }
                if self.applyUserName != nil {
                    map["ApplyUserName"] = self.applyUserName!
                }
                if self.expireDate != nil {
                    map["ExpireDate"] = self.expireDate!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.isProjectManager != nil {
                    map["IsProjectManager"] = self.isProjectManager!
                }
                if self.owner != nil {
                    map["Owner"] = self.owner!
                }
                if self.ownerUserName != nil {
                    map["OwnerUserName"] = self.ownerUserName!
                }
                if self.privilegeAccount != nil {
                    map["PrivilegeAccount"] = self.privilegeAccount!
                }
                if self.privilegeType != nil {
                    map["PrivilegeType"] = self.privilegeType!
                }
                if self.projectId != nil {
                    map["ProjectId"] = self.projectId!
                }
                if self.projectName != nil {
                    map["ProjectName"] = self.projectName!
                }
                if self.realHasOwnerPrivilege != nil {
                    map["RealHasOwnerPrivilege"] = self.realHasOwnerPrivilege!
                }
                if self.realHasPrivilege != nil {
                    map["RealHasPrivilege"] = self.realHasPrivilege!
                }
                if self.remarkForDebugList != nil {
                    var tmp : [Any] = []
                    for k in self.remarkForDebugList! {
                        tmp.append(k.toMap())
                    }
                    map["RemarkForDebugList"] = tmp
                }
                if self.revocable != nil {
                    map["Revocable"] = self.revocable!
                }
                if self.revocableDetail != nil {
                    map["RevocableDetail"] = self.revocableDetail!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AppId"] as? Int32 {
                    self.appId = value
                }
                if let value = dict["AppName"] as? String {
                    self.appName = value
                }
                if let value = dict["ApplyUserId"] as? String {
                    self.applyUserId = value
                }
                if let value = dict["ApplyUserName"] as? String {
                    self.applyUserName = value
                }
                if let value = dict["ExpireDate"] as? String {
                    self.expireDate = value
                }
                if let value = dict["Id"] as? Int32 {
                    self.id = value
                }
                if let value = dict["IsProjectManager"] as? Bool {
                    self.isProjectManager = value
                }
                if let value = dict["Owner"] as? String {
                    self.owner = value
                }
                if let value = dict["OwnerUserName"] as? String {
                    self.ownerUserName = value
                }
                if let value = dict["PrivilegeAccount"] as? Int32 {
                    self.privilegeAccount = value
                }
                if let value = dict["PrivilegeType"] as? Int32 {
                    self.privilegeType = value
                }
                if let value = dict["ProjectId"] as? Int32 {
                    self.projectId = value
                }
                if let value = dict["ProjectName"] as? String {
                    self.projectName = value
                }
                if let value = dict["RealHasOwnerPrivilege"] as? Bool {
                    self.realHasOwnerPrivilege = value
                }
                if let value = dict["RealHasPrivilege"] as? Bool {
                    self.realHasPrivilege = value
                }
                if let value = dict["RemarkForDebugList"] as? [Any?] {
                    var tmp : [ListDataServiceAuthorizedAppsResponseBody.PageResult.AuthorizedAppList.RemarkForDebugList] = []
                    for v in value {
                        if v != nil {
                            var model = ListDataServiceAuthorizedAppsResponseBody.PageResult.AuthorizedAppList.RemarkForDebugList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.remarkForDebugList = tmp
                }
                if let value = dict["Revocable"] as? Bool {
                    self.revocable = value
                }
                if let value = dict["RevocableDetail"] as? Int32 {
                    self.revocableDetail = value
                }
            }
        }
        public var authorizedAppList: [ListDataServiceAuthorizedAppsResponseBody.PageResult.AuthorizedAppList]?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.authorizedAppList != nil {
                var tmp : [Any] = []
                for k in self.authorizedAppList! {
                    tmp.append(k.toMap())
                }
                map["AuthorizedAppList"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AuthorizedAppList"] as? [Any?] {
                var tmp : [ListDataServiceAuthorizedAppsResponseBody.PageResult.AuthorizedAppList] = []
                for v in value {
                    if v != nil {
                        var model = ListDataServiceAuthorizedAppsResponseBody.PageResult.AuthorizedAppList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.authorizedAppList = tmp
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pageResult: ListDataServiceAuthorizedAppsResponseBody.PageResult?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageResult != nil {
            map["PageResult"] = self.pageResult?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageResult"] as? [String: Any?] {
            var model = ListDataServiceAuthorizedAppsResponseBody.PageResult()
            model.fromMap(value)
            self.pageResult = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListDataServiceAuthorizedAppsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListDataServiceAuthorizedAppsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListDataServiceAuthorizedAppsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListDataServiceMyApiPermissionsRequest : Tea.TeaModel {
    public class ListQuery : Tea.TeaModel {
        public var keyword: String?

        public var pageNo: Int32?

        public var pageSize: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.keyword != nil {
                map["Keyword"] = self.keyword!
            }
            if self.pageNo != nil {
                map["PageNo"] = self.pageNo!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Keyword"] as? String {
                self.keyword = value
            }
            if let value = dict["PageNo"] as? Int32 {
                self.pageNo = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
        }
    }
    public var listQuery: ListDataServiceMyApiPermissionsRequest.ListQuery?

    public var opTenantId: Int64?

    public var projectId: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQuery != nil {
            map["ListQuery"] = self.listQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? [String: Any?] {
            var model = ListDataServiceMyApiPermissionsRequest.ListQuery()
            model.fromMap(value)
            self.listQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
    }
}

public class ListDataServiceMyApiPermissionsShrinkRequest : Tea.TeaModel {
    public var listQueryShrink: String?

    public var opTenantId: Int64?

    public var projectId: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQueryShrink != nil {
            map["ListQuery"] = self.listQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? String {
            self.listQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
    }
}

public class ListDataServiceMyApiPermissionsResponseBody : Tea.TeaModel {
    public class PageResult : Tea.TeaModel {
        public class PermissionList : Tea.TeaModel {
            public var apiId: Int64?

            public var apiName: String?

            public var createUserName: String?

            public var creator: String?

            public var owner: String?

            public var ownerUserName: String?

            public var privilegeBelongTo: String?

            public var privilegeFrom: Int32?

            public var projectId: Int32?

            public var projectName: String?

            public var role: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiId != nil {
                    map["ApiId"] = self.apiId!
                }
                if self.apiName != nil {
                    map["ApiName"] = self.apiName!
                }
                if self.createUserName != nil {
                    map["CreateUserName"] = self.createUserName!
                }
                if self.creator != nil {
                    map["Creator"] = self.creator!
                }
                if self.owner != nil {
                    map["Owner"] = self.owner!
                }
                if self.ownerUserName != nil {
                    map["OwnerUserName"] = self.ownerUserName!
                }
                if self.privilegeBelongTo != nil {
                    map["PrivilegeBelongTo"] = self.privilegeBelongTo!
                }
                if self.privilegeFrom != nil {
                    map["PrivilegeFrom"] = self.privilegeFrom!
                }
                if self.projectId != nil {
                    map["ProjectId"] = self.projectId!
                }
                if self.projectName != nil {
                    map["ProjectName"] = self.projectName!
                }
                if self.role != nil {
                    map["Role"] = self.role!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiId"] as? Int64 {
                    self.apiId = value
                }
                if let value = dict["ApiName"] as? String {
                    self.apiName = value
                }
                if let value = dict["CreateUserName"] as? String {
                    self.createUserName = value
                }
                if let value = dict["Creator"] as? String {
                    self.creator = value
                }
                if let value = dict["Owner"] as? String {
                    self.owner = value
                }
                if let value = dict["OwnerUserName"] as? String {
                    self.ownerUserName = value
                }
                if let value = dict["PrivilegeBelongTo"] as? String {
                    self.privilegeBelongTo = value
                }
                if let value = dict["PrivilegeFrom"] as? Int32 {
                    self.privilegeFrom = value
                }
                if let value = dict["ProjectId"] as? Int32 {
                    self.projectId = value
                }
                if let value = dict["ProjectName"] as? String {
                    self.projectName = value
                }
                if let value = dict["Role"] as? Int32 {
                    self.role = value
                }
            }
        }
        public var permissionList: [ListDataServiceMyApiPermissionsResponseBody.PageResult.PermissionList]?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.permissionList != nil {
                var tmp : [Any] = []
                for k in self.permissionList! {
                    tmp.append(k.toMap())
                }
                map["PermissionList"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PermissionList"] as? [Any?] {
                var tmp : [ListDataServiceMyApiPermissionsResponseBody.PageResult.PermissionList] = []
                for v in value {
                    if v != nil {
                        var model = ListDataServiceMyApiPermissionsResponseBody.PageResult.PermissionList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.permissionList = tmp
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pageResult: ListDataServiceMyApiPermissionsResponseBody.PageResult?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageResult != nil {
            map["PageResult"] = self.pageResult?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageResult"] as? [String: Any?] {
            var model = ListDataServiceMyApiPermissionsResponseBody.PageResult()
            model.fromMap(value)
            self.pageResult = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListDataServiceMyApiPermissionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListDataServiceMyApiPermissionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListDataServiceMyApiPermissionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListDataServiceMyAppPermissionsRequest : Tea.TeaModel {
    public class ListQuery : Tea.TeaModel {
        public var keyword: String?

        public var pageNo: Int32?

        public var pageSize: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.keyword != nil {
                map["Keyword"] = self.keyword!
            }
            if self.pageNo != nil {
                map["PageNo"] = self.pageNo!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Keyword"] as? String {
                self.keyword = value
            }
            if let value = dict["PageNo"] as? Int32 {
                self.pageNo = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
        }
    }
    public var listQuery: ListDataServiceMyAppPermissionsRequest.ListQuery?

    public var opTenantId: Int64?

    public var projectId: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQuery != nil {
            map["ListQuery"] = self.listQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? [String: Any?] {
            var model = ListDataServiceMyAppPermissionsRequest.ListQuery()
            model.fromMap(value)
            self.listQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
    }
}

public class ListDataServiceMyAppPermissionsShrinkRequest : Tea.TeaModel {
    public var listQueryShrink: String?

    public var opTenantId: Int64?

    public var projectId: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQueryShrink != nil {
            map["ListQuery"] = self.listQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? String {
            self.listQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
    }
}

public class ListDataServiceMyAppPermissionsResponseBody : Tea.TeaModel {
    public class PageResult : Tea.TeaModel {
        public class PermissionList : Tea.TeaModel {
            public class RemarkForDebugList : Tea.TeaModel {
                public var key: String?

                public var value: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.key != nil {
                        map["Key"] = self.key!
                    }
                    if self.value != nil {
                        map["Value"] = self.value!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Key"] as? String {
                        self.key = value
                    }
                    if let value = dict["Value"] as? String {
                        self.value = value
                    }
                }
            }
            public var appId: Int32?

            public var appName: String?

            public var createUserName: String?

            public var creator: String?

            public var currentUserRole: String?

            public var owner: String?

            public var ownerUserName: String?

            public var privilegeBelongTo: String?

            public var privilegeFrom: Int32?

            public var projectId: Int32?

            public var projectName: String?

            public var remarkForDebugList: [ListDataServiceMyAppPermissionsResponseBody.PageResult.PermissionList.RemarkForDebugList]?

            public var role: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appId != nil {
                    map["AppId"] = self.appId!
                }
                if self.appName != nil {
                    map["AppName"] = self.appName!
                }
                if self.createUserName != nil {
                    map["CreateUserName"] = self.createUserName!
                }
                if self.creator != nil {
                    map["Creator"] = self.creator!
                }
                if self.currentUserRole != nil {
                    map["CurrentUserRole"] = self.currentUserRole!
                }
                if self.owner != nil {
                    map["Owner"] = self.owner!
                }
                if self.ownerUserName != nil {
                    map["OwnerUserName"] = self.ownerUserName!
                }
                if self.privilegeBelongTo != nil {
                    map["PrivilegeBelongTo"] = self.privilegeBelongTo!
                }
                if self.privilegeFrom != nil {
                    map["PrivilegeFrom"] = self.privilegeFrom!
                }
                if self.projectId != nil {
                    map["ProjectId"] = self.projectId!
                }
                if self.projectName != nil {
                    map["ProjectName"] = self.projectName!
                }
                if self.remarkForDebugList != nil {
                    var tmp : [Any] = []
                    for k in self.remarkForDebugList! {
                        tmp.append(k.toMap())
                    }
                    map["RemarkForDebugList"] = tmp
                }
                if self.role != nil {
                    map["Role"] = self.role!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AppId"] as? Int32 {
                    self.appId = value
                }
                if let value = dict["AppName"] as? String {
                    self.appName = value
                }
                if let value = dict["CreateUserName"] as? String {
                    self.createUserName = value
                }
                if let value = dict["Creator"] as? String {
                    self.creator = value
                }
                if let value = dict["CurrentUserRole"] as? String {
                    self.currentUserRole = value
                }
                if let value = dict["Owner"] as? String {
                    self.owner = value
                }
                if let value = dict["OwnerUserName"] as? String {
                    self.ownerUserName = value
                }
                if let value = dict["PrivilegeBelongTo"] as? String {
                    self.privilegeBelongTo = value
                }
                if let value = dict["PrivilegeFrom"] as? Int32 {
                    self.privilegeFrom = value
                }
                if let value = dict["ProjectId"] as? Int32 {
                    self.projectId = value
                }
                if let value = dict["ProjectName"] as? String {
                    self.projectName = value
                }
                if let value = dict["RemarkForDebugList"] as? [Any?] {
                    var tmp : [ListDataServiceMyAppPermissionsResponseBody.PageResult.PermissionList.RemarkForDebugList] = []
                    for v in value {
                        if v != nil {
                            var model = ListDataServiceMyAppPermissionsResponseBody.PageResult.PermissionList.RemarkForDebugList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.remarkForDebugList = tmp
                }
                if let value = dict["Role"] as? Int32 {
                    self.role = value
                }
            }
        }
        public var permissionList: [ListDataServiceMyAppPermissionsResponseBody.PageResult.PermissionList]?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.permissionList != nil {
                var tmp : [Any] = []
                for k in self.permissionList! {
                    tmp.append(k.toMap())
                }
                map["PermissionList"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PermissionList"] as? [Any?] {
                var tmp : [ListDataServiceMyAppPermissionsResponseBody.PageResult.PermissionList] = []
                for v in value {
                    if v != nil {
                        var model = ListDataServiceMyAppPermissionsResponseBody.PageResult.PermissionList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.permissionList = tmp
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pageResult: ListDataServiceMyAppPermissionsResponseBody.PageResult?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageResult != nil {
            map["PageResult"] = self.pageResult?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageResult"] as? [String: Any?] {
            var model = ListDataServiceMyAppPermissionsResponseBody.PageResult()
            model.fromMap(value)
            self.pageResult = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListDataServiceMyAppPermissionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListDataServiceMyAppPermissionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListDataServiceMyAppPermissionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListDataServicePublishedApisRequest : Tea.TeaModel {
    public class ListQuery : Tea.TeaModel {
        public var apiName: String?

        public var groupId: Int32?

        public var pageNo: Int32?

        public var pageSize: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiName != nil {
                map["ApiName"] = self.apiName!
            }
            if self.groupId != nil {
                map["GroupId"] = self.groupId!
            }
            if self.pageNo != nil {
                map["PageNo"] = self.pageNo!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiName"] as? String {
                self.apiName = value
            }
            if let value = dict["GroupId"] as? Int32 {
                self.groupId = value
            }
            if let value = dict["PageNo"] as? Int32 {
                self.pageNo = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
        }
    }
    public var listQuery: ListDataServicePublishedApisRequest.ListQuery?

    public var opTenantId: Int64?

    public var projectId: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQuery != nil {
            map["ListQuery"] = self.listQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? [String: Any?] {
            var model = ListDataServicePublishedApisRequest.ListQuery()
            model.fromMap(value)
            self.listQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
    }
}

public class ListDataServicePublishedApisShrinkRequest : Tea.TeaModel {
    public var listQueryShrink: String?

    public var opTenantId: Int64?

    public var projectId: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQueryShrink != nil {
            map["ListQuery"] = self.listQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? String {
            self.listQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
    }
}

public class ListDataServicePublishedApisResponseBody : Tea.TeaModel {
    public class PageResult : Tea.TeaModel {
        public class ApiList : Tea.TeaModel {
            public class AppInfoList : Tea.TeaModel {
                public var appId: Int32?

                public var appKey: Int64?

                public var appName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.appId != nil {
                        map["AppId"] = self.appId!
                    }
                    if self.appKey != nil {
                        map["AppKey"] = self.appKey!
                    }
                    if self.appName != nil {
                        map["AppName"] = self.appName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AppId"] as? Int32 {
                        self.appId = value
                    }
                    if let value = dict["AppKey"] as? Int64 {
                        self.appKey = value
                    }
                    if let value = dict["AppName"] as? String {
                        self.appName = value
                    }
                }
            }
            public var apiId: Int64?

            public var apiName: String?

            public var appCount: Int32?

            public var appInfoList: [ListDataServicePublishedApisResponseBody.PageResult.ApiList.AppInfoList]?

            public var applyStatus: Int32?

            public var callCount: Int32?

            public var createType: Int32?

            public var customUpdateRate: String?

            public var deployTime: String?

            public var description_: String?

            public var executeMode: Int32?

            public var groupId: Int32?

            public var groupName: String?

            public var logicUnitNo: Int64?

            public var mode: Int32?

            public var owner: String?

            public var ownerUserName: String?

            public var projectId: Int32?

            public var projectName: String?

            public var updateRate: Int32?

            public var updateTime: String?

            public var version: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiId != nil {
                    map["ApiId"] = self.apiId!
                }
                if self.apiName != nil {
                    map["ApiName"] = self.apiName!
                }
                if self.appCount != nil {
                    map["AppCount"] = self.appCount!
                }
                if self.appInfoList != nil {
                    var tmp : [Any] = []
                    for k in self.appInfoList! {
                        tmp.append(k.toMap())
                    }
                    map["AppInfoList"] = tmp
                }
                if self.applyStatus != nil {
                    map["ApplyStatus"] = self.applyStatus!
                }
                if self.callCount != nil {
                    map["CallCount"] = self.callCount!
                }
                if self.createType != nil {
                    map["CreateType"] = self.createType!
                }
                if self.customUpdateRate != nil {
                    map["CustomUpdateRate"] = self.customUpdateRate!
                }
                if self.deployTime != nil {
                    map["DeployTime"] = self.deployTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.executeMode != nil {
                    map["ExecuteMode"] = self.executeMode!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupName != nil {
                    map["GroupName"] = self.groupName!
                }
                if self.logicUnitNo != nil {
                    map["LogicUnitNo"] = self.logicUnitNo!
                }
                if self.mode != nil {
                    map["Mode"] = self.mode!
                }
                if self.owner != nil {
                    map["Owner"] = self.owner!
                }
                if self.ownerUserName != nil {
                    map["OwnerUserName"] = self.ownerUserName!
                }
                if self.projectId != nil {
                    map["ProjectId"] = self.projectId!
                }
                if self.projectName != nil {
                    map["ProjectName"] = self.projectName!
                }
                if self.updateRate != nil {
                    map["UpdateRate"] = self.updateRate!
                }
                if self.updateTime != nil {
                    map["UpdateTime"] = self.updateTime!
                }
                if self.version != nil {
                    map["Version"] = self.version!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiId"] as? Int64 {
                    self.apiId = value
                }
                if let value = dict["ApiName"] as? String {
                    self.apiName = value
                }
                if let value = dict["AppCount"] as? Int32 {
                    self.appCount = value
                }
                if let value = dict["AppInfoList"] as? [Any?] {
                    var tmp : [ListDataServicePublishedApisResponseBody.PageResult.ApiList.AppInfoList] = []
                    for v in value {
                        if v != nil {
                            var model = ListDataServicePublishedApisResponseBody.PageResult.ApiList.AppInfoList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.appInfoList = tmp
                }
                if let value = dict["ApplyStatus"] as? Int32 {
                    self.applyStatus = value
                }
                if let value = dict["CallCount"] as? Int32 {
                    self.callCount = value
                }
                if let value = dict["CreateType"] as? Int32 {
                    self.createType = value
                }
                if let value = dict["CustomUpdateRate"] as? String {
                    self.customUpdateRate = value
                }
                if let value = dict["DeployTime"] as? String {
                    self.deployTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["ExecuteMode"] as? Int32 {
                    self.executeMode = value
                }
                if let value = dict["GroupId"] as? Int32 {
                    self.groupId = value
                }
                if let value = dict["GroupName"] as? String {
                    self.groupName = value
                }
                if let value = dict["LogicUnitNo"] as? Int64 {
                    self.logicUnitNo = value
                }
                if let value = dict["Mode"] as? Int32 {
                    self.mode = value
                }
                if let value = dict["Owner"] as? String {
                    self.owner = value
                }
                if let value = dict["OwnerUserName"] as? String {
                    self.ownerUserName = value
                }
                if let value = dict["ProjectId"] as? Int32 {
                    self.projectId = value
                }
                if let value = dict["ProjectName"] as? String {
                    self.projectName = value
                }
                if let value = dict["UpdateRate"] as? Int32 {
                    self.updateRate = value
                }
                if let value = dict["UpdateTime"] as? String {
                    self.updateTime = value
                }
                if let value = dict["Version"] as? String {
                    self.version = value
                }
            }
        }
        public var apiList: [ListDataServicePublishedApisResponseBody.PageResult.ApiList]?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiList != nil {
                var tmp : [Any] = []
                for k in self.apiList! {
                    tmp.append(k.toMap())
                }
                map["ApiList"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiList"] as? [Any?] {
                var tmp : [ListDataServicePublishedApisResponseBody.PageResult.ApiList] = []
                for v in value {
                    if v != nil {
                        var model = ListDataServicePublishedApisResponseBody.PageResult.ApiList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.apiList = tmp
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pageResult: ListDataServicePublishedApisResponseBody.PageResult?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageResult != nil {
            map["PageResult"] = self.pageResult?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageResult"] as? [String: Any?] {
            var model = ListDataServicePublishedApisResponseBody.PageResult()
            model.fromMap(value)
            self.pageResult = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListDataServicePublishedApisResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListDataServicePublishedApisResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListDataServicePublishedApisResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListDataSourceWithConfigRequest : Tea.TeaModel {
    public class ListQuery : Tea.TeaModel {
        public var name: String?

        public var ownerList: [String]?

        public var page: Int32?

        public var pageSize: Int32?

        public var scopeList: [String]?

        public var tag: String?

        public var typeList: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.ownerList != nil {
                map["OwnerList"] = self.ownerList!
            }
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.scopeList != nil {
                map["ScopeList"] = self.scopeList!
            }
            if self.tag != nil {
                map["Tag"] = self.tag!
            }
            if self.typeList != nil {
                map["TypeList"] = self.typeList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["OwnerList"] as? [String] {
                self.ownerList = value
            }
            if let value = dict["Page"] as? Int32 {
                self.page = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["ScopeList"] as? [String] {
                self.scopeList = value
            }
            if let value = dict["Tag"] as? String {
                self.tag = value
            }
            if let value = dict["TypeList"] as? [String] {
                self.typeList = value
            }
        }
    }
    public var listQuery: ListDataSourceWithConfigRequest.ListQuery?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQuery != nil {
            map["ListQuery"] = self.listQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? [String: Any?] {
            var model = ListDataSourceWithConfigRequest.ListQuery()
            model.fromMap(value)
            self.listQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListDataSourceWithConfigShrinkRequest : Tea.TeaModel {
    public var listQueryShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQueryShrink != nil {
            map["ListQuery"] = self.listQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? String {
            self.listQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListDataSourceWithConfigResponseBody : Tea.TeaModel {
    public class PageResult : Tea.TeaModel {
        public class DataSourceList : Tea.TeaModel {
            public class DevDataSourceInfo : Tea.TeaModel {
                public class ConfigItemList : Tea.TeaModel {
                    public var key: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var configItemList: [ListDataSourceWithConfigResponseBody.PageResult.DataSourceList.DevDataSourceInfo.ConfigItemList]?

                public var createTime: Int64?

                public var creator: String?

                public var creatorName: String?

                public var description_: String?

                public var env: String?

                public var id: Int64?

                public var modifyTime: Int64?

                public var name: String?

                public var owner: String?

                public var ownerName: String?

                public var scope: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.configItemList != nil {
                        var tmp : [Any] = []
                        for k in self.configItemList! {
                            tmp.append(k.toMap())
                        }
                        map["ConfigItemList"] = tmp
                    }
                    if self.createTime != nil {
                        map["CreateTime"] = self.createTime!
                    }
                    if self.creator != nil {
                        map["Creator"] = self.creator!
                    }
                    if self.creatorName != nil {
                        map["CreatorName"] = self.creatorName!
                    }
                    if self.description_ != nil {
                        map["Description"] = self.description_!
                    }
                    if self.env != nil {
                        map["Env"] = self.env!
                    }
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.modifyTime != nil {
                        map["ModifyTime"] = self.modifyTime!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.owner != nil {
                        map["Owner"] = self.owner!
                    }
                    if self.ownerName != nil {
                        map["OwnerName"] = self.ownerName!
                    }
                    if self.scope != nil {
                        map["Scope"] = self.scope!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ConfigItemList"] as? [Any?] {
                        var tmp : [ListDataSourceWithConfigResponseBody.PageResult.DataSourceList.DevDataSourceInfo.ConfigItemList] = []
                        for v in value {
                            if v != nil {
                                var model = ListDataSourceWithConfigResponseBody.PageResult.DataSourceList.DevDataSourceInfo.ConfigItemList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.configItemList = tmp
                    }
                    if let value = dict["CreateTime"] as? Int64 {
                        self.createTime = value
                    }
                    if let value = dict["Creator"] as? String {
                        self.creator = value
                    }
                    if let value = dict["CreatorName"] as? String {
                        self.creatorName = value
                    }
                    if let value = dict["Description"] as? String {
                        self.description_ = value
                    }
                    if let value = dict["Env"] as? String {
                        self.env = value
                    }
                    if let value = dict["Id"] as? Int64 {
                        self.id = value
                    }
                    if let value = dict["ModifyTime"] as? Int64 {
                        self.modifyTime = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["Owner"] as? String {
                        self.owner = value
                    }
                    if let value = dict["OwnerName"] as? String {
                        self.ownerName = value
                    }
                    if let value = dict["Scope"] as? String {
                        self.scope = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public class ProdDataSourceInfo : Tea.TeaModel {
                public class ConfigItemList : Tea.TeaModel {
                    public var key: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var configItemList: [ListDataSourceWithConfigResponseBody.PageResult.DataSourceList.ProdDataSourceInfo.ConfigItemList]?

                public var createTime: Int64?

                public var creator: String?

                public var creatorName: String?

                public var description_: String?

                public var env: String?

                public var id: Int64?

                public var modifyTime: Int64?

                public var name: String?

                public var owner: String?

                public var ownerName: String?

                public var scope: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.configItemList != nil {
                        var tmp : [Any] = []
                        for k in self.configItemList! {
                            tmp.append(k.toMap())
                        }
                        map["ConfigItemList"] = tmp
                    }
                    if self.createTime != nil {
                        map["CreateTime"] = self.createTime!
                    }
                    if self.creator != nil {
                        map["Creator"] = self.creator!
                    }
                    if self.creatorName != nil {
                        map["CreatorName"] = self.creatorName!
                    }
                    if self.description_ != nil {
                        map["Description"] = self.description_!
                    }
                    if self.env != nil {
                        map["Env"] = self.env!
                    }
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.modifyTime != nil {
                        map["ModifyTime"] = self.modifyTime!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.owner != nil {
                        map["Owner"] = self.owner!
                    }
                    if self.ownerName != nil {
                        map["OwnerName"] = self.ownerName!
                    }
                    if self.scope != nil {
                        map["Scope"] = self.scope!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ConfigItemList"] as? [Any?] {
                        var tmp : [ListDataSourceWithConfigResponseBody.PageResult.DataSourceList.ProdDataSourceInfo.ConfigItemList] = []
                        for v in value {
                            if v != nil {
                                var model = ListDataSourceWithConfigResponseBody.PageResult.DataSourceList.ProdDataSourceInfo.ConfigItemList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.configItemList = tmp
                    }
                    if let value = dict["CreateTime"] as? Int64 {
                        self.createTime = value
                    }
                    if let value = dict["Creator"] as? String {
                        self.creator = value
                    }
                    if let value = dict["CreatorName"] as? String {
                        self.creatorName = value
                    }
                    if let value = dict["Description"] as? String {
                        self.description_ = value
                    }
                    if let value = dict["Env"] as? String {
                        self.env = value
                    }
                    if let value = dict["Id"] as? Int64 {
                        self.id = value
                    }
                    if let value = dict["ModifyTime"] as? Int64 {
                        self.modifyTime = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["Owner"] as? String {
                        self.owner = value
                    }
                    if let value = dict["OwnerName"] as? String {
                        self.ownerName = value
                    }
                    if let value = dict["Scope"] as? String {
                        self.scope = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public var devDataSourceInfo: ListDataSourceWithConfigResponseBody.PageResult.DataSourceList.DevDataSourceInfo?

            public var prodDataSourceInfo: ListDataSourceWithConfigResponseBody.PageResult.DataSourceList.ProdDataSourceInfo?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.devDataSourceInfo?.validate()
                try self.prodDataSourceInfo?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.devDataSourceInfo != nil {
                    map["DevDataSourceInfo"] = self.devDataSourceInfo?.toMap()
                }
                if self.prodDataSourceInfo != nil {
                    map["ProdDataSourceInfo"] = self.prodDataSourceInfo?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DevDataSourceInfo"] as? [String: Any?] {
                    var model = ListDataSourceWithConfigResponseBody.PageResult.DataSourceList.DevDataSourceInfo()
                    model.fromMap(value)
                    self.devDataSourceInfo = model
                }
                if let value = dict["ProdDataSourceInfo"] as? [String: Any?] {
                    var model = ListDataSourceWithConfigResponseBody.PageResult.DataSourceList.ProdDataSourceInfo()
                    model.fromMap(value)
                    self.prodDataSourceInfo = model
                }
            }
        }
        public var dataSourceList: [ListDataSourceWithConfigResponseBody.PageResult.DataSourceList]?

        public var totalCount: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dataSourceList != nil {
                var tmp : [Any] = []
                for k in self.dataSourceList! {
                    tmp.append(k.toMap())
                }
                map["DataSourceList"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DataSourceList"] as? [Any?] {
                var tmp : [ListDataSourceWithConfigResponseBody.PageResult.DataSourceList] = []
                for v in value {
                    if v != nil {
                        var model = ListDataSourceWithConfigResponseBody.PageResult.DataSourceList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.dataSourceList = tmp
            }
            if let value = dict["TotalCount"] as? Int64 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pageResult: ListDataSourceWithConfigResponseBody.PageResult?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageResult != nil {
            map["PageResult"] = self.pageResult?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageResult"] as? [String: Any?] {
            var model = ListDataSourceWithConfigResponseBody.PageResult()
            model.fromMap(value)
            self.pageResult = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListDataSourceWithConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListDataSourceWithConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListDataSourceWithConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListFilesRequest : Tea.TeaModel {
    public class ListQuery : Tea.TeaModel {
        public var category: String?

        public var directory: String?

        public var env: String?

        public var projectId: Int64?

        public var recursive: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.category != nil {
                map["Category"] = self.category!
            }
            if self.directory != nil {
                map["Directory"] = self.directory!
            }
            if self.env != nil {
                map["Env"] = self.env!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            if self.recursive != nil {
                map["Recursive"] = self.recursive!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Category"] as? String {
                self.category = value
            }
            if let value = dict["Directory"] as? String {
                self.directory = value
            }
            if let value = dict["Env"] as? String {
                self.env = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
            if let value = dict["Recursive"] as? Bool {
                self.recursive = value
            }
        }
    }
    public var listQuery: ListFilesRequest.ListQuery?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQuery != nil {
            map["ListQuery"] = self.listQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? [String: Any?] {
            var model = ListFilesRequest.ListQuery()
            model.fromMap(value)
            self.listQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListFilesShrinkRequest : Tea.TeaModel {
    public var listQueryShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQueryShrink != nil {
            map["ListQuery"] = self.listQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? String {
            self.listQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListFilesResponseBody : Tea.TeaModel {
    public class FileList : Tea.TeaModel {
        public var category: String?

        public var content: String?

        public var creator: String?

        public var directory: String?

        public var fileType: String?

        public var gmtCreate: Int64?

        public var gmtModified: Int64?

        public var id: Int64?

        public var lastModifier: String?

        public var name: String?

        public var projectId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.category != nil {
                map["Category"] = self.category!
            }
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.creator != nil {
                map["Creator"] = self.creator!
            }
            if self.directory != nil {
                map["Directory"] = self.directory!
            }
            if self.fileType != nil {
                map["FileType"] = self.fileType!
            }
            if self.gmtCreate != nil {
                map["GmtCreate"] = self.gmtCreate!
            }
            if self.gmtModified != nil {
                map["GmtModified"] = self.gmtModified!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.lastModifier != nil {
                map["LastModifier"] = self.lastModifier!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Category"] as? String {
                self.category = value
            }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["Creator"] as? String {
                self.creator = value
            }
            if let value = dict["Directory"] as? String {
                self.directory = value
            }
            if let value = dict["FileType"] as? String {
                self.fileType = value
            }
            if let value = dict["GmtCreate"] as? Int64 {
                self.gmtCreate = value
            }
            if let value = dict["GmtModified"] as? Int64 {
                self.gmtModified = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["LastModifier"] as? String {
                self.lastModifier = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
        }
    }
    public var code: String?

    public var fileList: [ListFilesResponseBody.FileList]?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.fileList != nil {
            var tmp : [Any] = []
            for k in self.fileList! {
                tmp.append(k.toMap())
            }
            map["FileList"] = tmp
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["FileList"] as? [Any?] {
            var tmp : [ListFilesResponseBody.FileList] = []
            for v in value {
                if v != nil {
                    var model = ListFilesResponseBody.FileList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.fileList = tmp
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListFilesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListFilesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListFilesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListInstancesRequest : Tea.TeaModel {
    public class ListQuery : Tea.TeaModel {
        public var bizType: String?

        public var bizUnitId: Int64?

        public var flowId: String?

        public var maxBizDate: String?

        public var maxRunDate: String?

        public var minBizDate: String?

        public var minRunDate: String?

        public var nodeId: String?

        public var ownerList: [String]?

        public var page: Int32?

        public var pageSize: Int32?

        public var priorityList: [String]?

        public var projectId: Int64?

        public var runStatusList: [String]?

        public var schedulePaused: Bool?

        public var schedulePeriodList: [String]?

        public var scheduleType: String?

        public var searchText: String?

        public var subBizTypeList: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bizType != nil {
                map["BizType"] = self.bizType!
            }
            if self.bizUnitId != nil {
                map["BizUnitId"] = self.bizUnitId!
            }
            if self.flowId != nil {
                map["FlowId"] = self.flowId!
            }
            if self.maxBizDate != nil {
                map["MaxBizDate"] = self.maxBizDate!
            }
            if self.maxRunDate != nil {
                map["MaxRunDate"] = self.maxRunDate!
            }
            if self.minBizDate != nil {
                map["MinBizDate"] = self.minBizDate!
            }
            if self.minRunDate != nil {
                map["MinRunDate"] = self.minRunDate!
            }
            if self.nodeId != nil {
                map["NodeId"] = self.nodeId!
            }
            if self.ownerList != nil {
                map["OwnerList"] = self.ownerList!
            }
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.priorityList != nil {
                map["PriorityList"] = self.priorityList!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            if self.runStatusList != nil {
                map["RunStatusList"] = self.runStatusList!
            }
            if self.schedulePaused != nil {
                map["SchedulePaused"] = self.schedulePaused!
            }
            if self.schedulePeriodList != nil {
                map["SchedulePeriodList"] = self.schedulePeriodList!
            }
            if self.scheduleType != nil {
                map["ScheduleType"] = self.scheduleType!
            }
            if self.searchText != nil {
                map["SearchText"] = self.searchText!
            }
            if self.subBizTypeList != nil {
                map["SubBizTypeList"] = self.subBizTypeList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BizType"] as? String {
                self.bizType = value
            }
            if let value = dict["BizUnitId"] as? Int64 {
                self.bizUnitId = value
            }
            if let value = dict["FlowId"] as? String {
                self.flowId = value
            }
            if let value = dict["MaxBizDate"] as? String {
                self.maxBizDate = value
            }
            if let value = dict["MaxRunDate"] as? String {
                self.maxRunDate = value
            }
            if let value = dict["MinBizDate"] as? String {
                self.minBizDate = value
            }
            if let value = dict["MinRunDate"] as? String {
                self.minRunDate = value
            }
            if let value = dict["NodeId"] as? String {
                self.nodeId = value
            }
            if let value = dict["OwnerList"] as? [String] {
                self.ownerList = value
            }
            if let value = dict["Page"] as? Int32 {
                self.page = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["PriorityList"] as? [String] {
                self.priorityList = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
            if let value = dict["RunStatusList"] as? [String] {
                self.runStatusList = value
            }
            if let value = dict["SchedulePaused"] as? Bool {
                self.schedulePaused = value
            }
            if let value = dict["SchedulePeriodList"] as? [String] {
                self.schedulePeriodList = value
            }
            if let value = dict["ScheduleType"] as? String {
                self.scheduleType = value
            }
            if let value = dict["SearchText"] as? String {
                self.searchText = value
            }
            if let value = dict["SubBizTypeList"] as? [String] {
                self.subBizTypeList = value
            }
        }
    }
    public var env: String?

    public var listQuery: ListInstancesRequest.ListQuery?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.listQuery != nil {
            map["ListQuery"] = self.listQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["ListQuery"] as? [String: Any?] {
            var model = ListInstancesRequest.ListQuery()
            model.fromMap(value)
            self.listQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListInstancesShrinkRequest : Tea.TeaModel {
    public var env: String?

    public var listQueryShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.listQueryShrink != nil {
            map["ListQuery"] = self.listQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["ListQuery"] as? String {
            self.listQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListInstancesResponseBody : Tea.TeaModel {
    public class PageResult : Tea.TeaModel {
        public class Data : Tea.TeaModel {
            public class NodeInfo : Tea.TeaModel {
                public class Creator : Tea.TeaModel {
                    public var id: String?

                    public var name: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.id != nil {
                            map["Id"] = self.id!
                        }
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Id"] as? String {
                            self.id = value
                        }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                    }
                }
                public class Modifier : Tea.TeaModel {
                    public var id: String?

                    public var name: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.id != nil {
                            map["Id"] = self.id!
                        }
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Id"] as? String {
                            self.id = value
                        }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                    }
                }
                public class OwnerList : Tea.TeaModel {
                    public var id: String?

                    public var name: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.id != nil {
                            map["Id"] = self.id!
                        }
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Id"] as? String {
                            self.id = value
                        }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                    }
                }
                public var bizUnitName: String?

                public var createTime: String?

                public var creator: ListInstancesResponseBody.PageResult.Data.NodeInfo.Creator?

                public var description_: String?

                public var dryRun: Bool?

                public var from: String?

                public var hasDev: Bool?

                public var hasProd: Bool?

                public var id: String?

                public var lastModifiedTime: String?

                public var modifier: ListInstancesResponseBody.PageResult.Data.NodeInfo.Modifier?

                public var name: String?

                public var ownerList: [ListInstancesResponseBody.PageResult.Data.NodeInfo.OwnerList]?

                public var priorityList: [String]?

                public var resourceGroupList: [String]?

                public var schedulePaused: Bool?

                public var schedulePeriodList: [String]?

                public var subDetailType: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.creator?.validate()
                    try self.modifier?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.bizUnitName != nil {
                        map["BizUnitName"] = self.bizUnitName!
                    }
                    if self.createTime != nil {
                        map["CreateTime"] = self.createTime!
                    }
                    if self.creator != nil {
                        map["Creator"] = self.creator?.toMap()
                    }
                    if self.description_ != nil {
                        map["Description"] = self.description_!
                    }
                    if self.dryRun != nil {
                        map["DryRun"] = self.dryRun!
                    }
                    if self.from != nil {
                        map["From"] = self.from!
                    }
                    if self.hasDev != nil {
                        map["HasDev"] = self.hasDev!
                    }
                    if self.hasProd != nil {
                        map["HasProd"] = self.hasProd!
                    }
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.lastModifiedTime != nil {
                        map["LastModifiedTime"] = self.lastModifiedTime!
                    }
                    if self.modifier != nil {
                        map["Modifier"] = self.modifier?.toMap()
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.ownerList != nil {
                        var tmp : [Any] = []
                        for k in self.ownerList! {
                            tmp.append(k.toMap())
                        }
                        map["OwnerList"] = tmp
                    }
                    if self.priorityList != nil {
                        map["PriorityList"] = self.priorityList!
                    }
                    if self.resourceGroupList != nil {
                        map["ResourceGroupList"] = self.resourceGroupList!
                    }
                    if self.schedulePaused != nil {
                        map["SchedulePaused"] = self.schedulePaused!
                    }
                    if self.schedulePeriodList != nil {
                        map["SchedulePeriodList"] = self.schedulePeriodList!
                    }
                    if self.subDetailType != nil {
                        map["SubDetailType"] = self.subDetailType!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["BizUnitName"] as? String {
                        self.bizUnitName = value
                    }
                    if let value = dict["CreateTime"] as? String {
                        self.createTime = value
                    }
                    if let value = dict["Creator"] as? [String: Any?] {
                        var model = ListInstancesResponseBody.PageResult.Data.NodeInfo.Creator()
                        model.fromMap(value)
                        self.creator = model
                    }
                    if let value = dict["Description"] as? String {
                        self.description_ = value
                    }
                    if let value = dict["DryRun"] as? Bool {
                        self.dryRun = value
                    }
                    if let value = dict["From"] as? String {
                        self.from = value
                    }
                    if let value = dict["HasDev"] as? Bool {
                        self.hasDev = value
                    }
                    if let value = dict["HasProd"] as? Bool {
                        self.hasProd = value
                    }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                    if let value = dict["LastModifiedTime"] as? String {
                        self.lastModifiedTime = value
                    }
                    if let value = dict["Modifier"] as? [String: Any?] {
                        var model = ListInstancesResponseBody.PageResult.Data.NodeInfo.Modifier()
                        model.fromMap(value)
                        self.modifier = model
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["OwnerList"] as? [Any?] {
                        var tmp : [ListInstancesResponseBody.PageResult.Data.NodeInfo.OwnerList] = []
                        for v in value {
                            if v != nil {
                                var model = ListInstancesResponseBody.PageResult.Data.NodeInfo.OwnerList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.ownerList = tmp
                    }
                    if let value = dict["PriorityList"] as? [String] {
                        self.priorityList = value
                    }
                    if let value = dict["ResourceGroupList"] as? [String] {
                        self.resourceGroupList = value
                    }
                    if let value = dict["SchedulePaused"] as? Bool {
                        self.schedulePaused = value
                    }
                    if let value = dict["SchedulePeriodList"] as? [String] {
                        self.schedulePeriodList = value
                    }
                    if let value = dict["SubDetailType"] as? String {
                        self.subDetailType = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public var bizDate: String?

            public var dueTime: String?

            public var duration: String?

            public var endExecuteTime: Int64?

            public var extendInfo: String?

            public var id: String?

            public var index: Int32?

            public var nodeInfo: ListInstancesResponseBody.PageResult.Data.NodeInfo?

            public var startExecuteTime: Int64?

            public var statusList: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.nodeInfo?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bizDate != nil {
                    map["BizDate"] = self.bizDate!
                }
                if self.dueTime != nil {
                    map["DueTime"] = self.dueTime!
                }
                if self.duration != nil {
                    map["Duration"] = self.duration!
                }
                if self.endExecuteTime != nil {
                    map["EndExecuteTime"] = self.endExecuteTime!
                }
                if self.extendInfo != nil {
                    map["ExtendInfo"] = self.extendInfo!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.index != nil {
                    map["Index"] = self.index!
                }
                if self.nodeInfo != nil {
                    map["NodeInfo"] = self.nodeInfo?.toMap()
                }
                if self.startExecuteTime != nil {
                    map["StartExecuteTime"] = self.startExecuteTime!
                }
                if self.statusList != nil {
                    map["StatusList"] = self.statusList!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BizDate"] as? String {
                    self.bizDate = value
                }
                if let value = dict["DueTime"] as? String {
                    self.dueTime = value
                }
                if let value = dict["Duration"] as? String {
                    self.duration = value
                }
                if let value = dict["EndExecuteTime"] as? Int64 {
                    self.endExecuteTime = value
                }
                if let value = dict["ExtendInfo"] as? String {
                    self.extendInfo = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Index"] as? Int32 {
                    self.index = value
                }
                if let value = dict["NodeInfo"] as? [String: Any?] {
                    var model = ListInstancesResponseBody.PageResult.Data.NodeInfo()
                    model.fromMap(value)
                    self.nodeInfo = model
                }
                if let value = dict["StartExecuteTime"] as? Int64 {
                    self.startExecuteTime = value
                }
                if let value = dict["StatusList"] as? [String] {
                    self.statusList = value
                }
            }
        }
        public var data: [ListInstancesResponseBody.PageResult.Data]?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.data != nil {
                var tmp : [Any] = []
                for k in self.data! {
                    tmp.append(k.toMap())
                }
                map["Data"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Data"] as? [Any?] {
                var tmp : [ListInstancesResponseBody.PageResult.Data] = []
                for v in value {
                    if v != nil {
                        var model = ListInstancesResponseBody.PageResult.Data()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.data = tmp
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pageResult: ListInstancesResponseBody.PageResult?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageResult != nil {
            map["PageResult"] = self.pageResult?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageResult"] as? [String: Any?] {
            var model = ListInstancesResponseBody.PageResult()
            model.fromMap(value)
            self.pageResult = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListInstancesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListInstancesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListInstancesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListNodeDownStreamRequest : Tea.TeaModel {
    public class ListQuery : Tea.TeaModel {
        public class FilterList : Tea.TeaModel {
            public var exclude: Bool?

            public var key: String?

            public var valueList: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.exclude != nil {
                    map["Exclude"] = self.exclude!
                }
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.valueList != nil {
                    map["ValueList"] = self.valueList!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Exclude"] as? Bool {
                    self.exclude = value
                }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["ValueList"] as? [String] {
                    self.valueList = value
                }
            }
        }
        public class NodeIdList : Tea.TeaModel {
            public var fieldIdList: [String]?

            public var id: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fieldIdList != nil {
                    map["FieldIdList"] = self.fieldIdList!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FieldIdList"] as? [String] {
                    self.fieldIdList = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
            }
        }
        public var downStreamDepth: Int32?

        public var filterList: [ListNodeDownStreamRequest.ListQuery.FilterList]?

        public var nodeIdList: [ListNodeDownStreamRequest.ListQuery.NodeIdList]?

        public var projectId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.downStreamDepth != nil {
                map["DownStreamDepth"] = self.downStreamDepth!
            }
            if self.filterList != nil {
                var tmp : [Any] = []
                for k in self.filterList! {
                    tmp.append(k.toMap())
                }
                map["FilterList"] = tmp
            }
            if self.nodeIdList != nil {
                var tmp : [Any] = []
                for k in self.nodeIdList! {
                    tmp.append(k.toMap())
                }
                map["NodeIdList"] = tmp
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DownStreamDepth"] as? Int32 {
                self.downStreamDepth = value
            }
            if let value = dict["FilterList"] as? [Any?] {
                var tmp : [ListNodeDownStreamRequest.ListQuery.FilterList] = []
                for v in value {
                    if v != nil {
                        var model = ListNodeDownStreamRequest.ListQuery.FilterList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.filterList = tmp
            }
            if let value = dict["NodeIdList"] as? [Any?] {
                var tmp : [ListNodeDownStreamRequest.ListQuery.NodeIdList] = []
                for v in value {
                    if v != nil {
                        var model = ListNodeDownStreamRequest.ListQuery.NodeIdList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.nodeIdList = tmp
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
        }
    }
    public var env: String?

    public var listQuery: ListNodeDownStreamRequest.ListQuery?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.listQuery != nil {
            map["ListQuery"] = self.listQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["ListQuery"] as? [String: Any?] {
            var model = ListNodeDownStreamRequest.ListQuery()
            model.fromMap(value)
            self.listQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListNodeDownStreamShrinkRequest : Tea.TeaModel {
    public var env: String?

    public var listQueryShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.listQueryShrink != nil {
            map["ListQuery"] = self.listQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["ListQuery"] as? String {
            self.listQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListNodeDownStreamResponseBody : Tea.TeaModel {
    public class NodeInfoList : Tea.TeaModel {
        public var depth: Int32?

        public var fieldIdList: [String]?

        public var id: String?

        public var name: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.depth != nil {
                map["Depth"] = self.depth!
            }
            if self.fieldIdList != nil {
                map["FieldIdList"] = self.fieldIdList!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Depth"] as? Int32 {
                self.depth = value
            }
            if let value = dict["FieldIdList"] as? [String] {
                self.fieldIdList = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var nodeInfoList: [ListNodeDownStreamResponseBody.NodeInfoList]?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nodeInfoList != nil {
            var tmp : [Any] = []
            for k in self.nodeInfoList! {
                tmp.append(k.toMap())
            }
            map["NodeInfoList"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NodeInfoList"] as? [Any?] {
            var tmp : [ListNodeDownStreamResponseBody.NodeInfoList] = []
            for v in value {
                if v != nil {
                    var model = ListNodeDownStreamResponseBody.NodeInfoList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.nodeInfoList = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListNodeDownStreamResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListNodeDownStreamResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListNodeDownStreamResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListNodesRequest : Tea.TeaModel {
    public class ListQuery : Tea.TeaModel {
        public var dryRun: Bool?

        public var nodeBizType: String?

        public var nodeSubBizTypeList: [String]?

        public var ownerList: [String]?

        public var page: Int32?

        public var pageSize: Int32?

        public var priorityList: [String]?

        public var projectId: Int64?

        public var schedulePaused: Bool?

        public var schedulePeriodList: [String]?

        public var scheduleType: String?

        public var searchText: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dryRun != nil {
                map["DryRun"] = self.dryRun!
            }
            if self.nodeBizType != nil {
                map["NodeBizType"] = self.nodeBizType!
            }
            if self.nodeSubBizTypeList != nil {
                map["NodeSubBizTypeList"] = self.nodeSubBizTypeList!
            }
            if self.ownerList != nil {
                map["OwnerList"] = self.ownerList!
            }
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.priorityList != nil {
                map["PriorityList"] = self.priorityList!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            if self.schedulePaused != nil {
                map["SchedulePaused"] = self.schedulePaused!
            }
            if self.schedulePeriodList != nil {
                map["SchedulePeriodList"] = self.schedulePeriodList!
            }
            if self.scheduleType != nil {
                map["ScheduleType"] = self.scheduleType!
            }
            if self.searchText != nil {
                map["SearchText"] = self.searchText!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DryRun"] as? Bool {
                self.dryRun = value
            }
            if let value = dict["NodeBizType"] as? String {
                self.nodeBizType = value
            }
            if let value = dict["NodeSubBizTypeList"] as? [String] {
                self.nodeSubBizTypeList = value
            }
            if let value = dict["OwnerList"] as? [String] {
                self.ownerList = value
            }
            if let value = dict["Page"] as? Int32 {
                self.page = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["PriorityList"] as? [String] {
                self.priorityList = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
            if let value = dict["SchedulePaused"] as? Bool {
                self.schedulePaused = value
            }
            if let value = dict["SchedulePeriodList"] as? [String] {
                self.schedulePeriodList = value
            }
            if let value = dict["ScheduleType"] as? String {
                self.scheduleType = value
            }
            if let value = dict["SearchText"] as? String {
                self.searchText = value
            }
        }
    }
    public var env: String?

    public var listQuery: ListNodesRequest.ListQuery?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.listQuery != nil {
            map["ListQuery"] = self.listQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["ListQuery"] as? [String: Any?] {
            var model = ListNodesRequest.ListQuery()
            model.fromMap(value)
            self.listQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListNodesShrinkRequest : Tea.TeaModel {
    public var env: String?

    public var listQueryShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.listQueryShrink != nil {
            map["ListQuery"] = self.listQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["ListQuery"] as? String {
            self.listQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListNodesResponseBody : Tea.TeaModel {
    public class PageResult : Tea.TeaModel {
        public class NodeList : Tea.TeaModel {
            public class Creator : Tea.TeaModel {
                public var id: String?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public class Modifier : Tea.TeaModel {
                public var id: String?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public class OwnerList : Tea.TeaModel {
                public var id: String?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public class ProjectInfo : Tea.TeaModel {
                public var id: String?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public var bizUnitName: String?

            public var createTime: String?

            public var creator: ListNodesResponseBody.PageResult.NodeList.Creator?

            public var description_: String?

            public var dryRun: Bool?

            public var extendInfo: String?

            public var from: String?

            public var hasDev: Bool?

            public var hasProd: Bool?

            public var id: String?

            public var lastModifiedTime: String?

            public var modifier: ListNodesResponseBody.PageResult.NodeList.Modifier?

            public var name: String?

            public var ownerList: [ListNodesResponseBody.PageResult.NodeList.OwnerList]?

            public var priorityList: [String]?

            public var projectInfo: ListNodesResponseBody.PageResult.NodeList.ProjectInfo?

            public var schedulePaused: Bool?

            public var schedulePeriodList: [String]?

            public var subDetailType: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.creator?.validate()
                try self.modifier?.validate()
                try self.projectInfo?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bizUnitName != nil {
                    map["BizUnitName"] = self.bizUnitName!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.creator != nil {
                    map["Creator"] = self.creator?.toMap()
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.dryRun != nil {
                    map["DryRun"] = self.dryRun!
                }
                if self.extendInfo != nil {
                    map["ExtendInfo"] = self.extendInfo!
                }
                if self.from != nil {
                    map["From"] = self.from!
                }
                if self.hasDev != nil {
                    map["HasDev"] = self.hasDev!
                }
                if self.hasProd != nil {
                    map["HasProd"] = self.hasProd!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.lastModifiedTime != nil {
                    map["LastModifiedTime"] = self.lastModifiedTime!
                }
                if self.modifier != nil {
                    map["Modifier"] = self.modifier?.toMap()
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.ownerList != nil {
                    var tmp : [Any] = []
                    for k in self.ownerList! {
                        tmp.append(k.toMap())
                    }
                    map["OwnerList"] = tmp
                }
                if self.priorityList != nil {
                    map["PriorityList"] = self.priorityList!
                }
                if self.projectInfo != nil {
                    map["ProjectInfo"] = self.projectInfo?.toMap()
                }
                if self.schedulePaused != nil {
                    map["SchedulePaused"] = self.schedulePaused!
                }
                if self.schedulePeriodList != nil {
                    map["SchedulePeriodList"] = self.schedulePeriodList!
                }
                if self.subDetailType != nil {
                    map["SubDetailType"] = self.subDetailType!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BizUnitName"] as? String {
                    self.bizUnitName = value
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["Creator"] as? [String: Any?] {
                    var model = ListNodesResponseBody.PageResult.NodeList.Creator()
                    model.fromMap(value)
                    self.creator = model
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DryRun"] as? Bool {
                    self.dryRun = value
                }
                if let value = dict["ExtendInfo"] as? String {
                    self.extendInfo = value
                }
                if let value = dict["From"] as? String {
                    self.from = value
                }
                if let value = dict["HasDev"] as? Bool {
                    self.hasDev = value
                }
                if let value = dict["HasProd"] as? Bool {
                    self.hasProd = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["LastModifiedTime"] as? String {
                    self.lastModifiedTime = value
                }
                if let value = dict["Modifier"] as? [String: Any?] {
                    var model = ListNodesResponseBody.PageResult.NodeList.Modifier()
                    model.fromMap(value)
                    self.modifier = model
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["OwnerList"] as? [Any?] {
                    var tmp : [ListNodesResponseBody.PageResult.NodeList.OwnerList] = []
                    for v in value {
                        if v != nil {
                            var model = ListNodesResponseBody.PageResult.NodeList.OwnerList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.ownerList = tmp
                }
                if let value = dict["PriorityList"] as? [String] {
                    self.priorityList = value
                }
                if let value = dict["ProjectInfo"] as? [String: Any?] {
                    var model = ListNodesResponseBody.PageResult.NodeList.ProjectInfo()
                    model.fromMap(value)
                    self.projectInfo = model
                }
                if let value = dict["SchedulePaused"] as? Bool {
                    self.schedulePaused = value
                }
                if let value = dict["SchedulePeriodList"] as? [String] {
                    self.schedulePeriodList = value
                }
                if let value = dict["SubDetailType"] as? String {
                    self.subDetailType = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var nodeList: [ListNodesResponseBody.PageResult.NodeList]?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.nodeList != nil {
                var tmp : [Any] = []
                for k in self.nodeList! {
                    tmp.append(k.toMap())
                }
                map["NodeList"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["NodeList"] as? [Any?] {
                var tmp : [ListNodesResponseBody.PageResult.NodeList] = []
                for v in value {
                    if v != nil {
                        var model = ListNodesResponseBody.PageResult.NodeList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.nodeList = tmp
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pageResult: ListNodesResponseBody.PageResult?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageResult != nil {
            map["PageResult"] = self.pageResult?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageResult"] as? [String: Any?] {
            var model = ListNodesResponseBody.PageResult()
            model.fromMap(value)
            self.pageResult = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListNodesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListNodesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListNodesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListProjectMembersRequest : Tea.TeaModel {
    public class ListQuery : Tea.TeaModel {
        public var env: String?

        public var pageNo: Int32?

        public var pageSize: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.env != nil {
                map["Env"] = self.env!
            }
            if self.pageNo != nil {
                map["PageNo"] = self.pageNo!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Env"] as? String {
                self.env = value
            }
            if let value = dict["PageNo"] as? Int32 {
                self.pageNo = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
        }
    }
    public var id: Int64?

    public var listQuery: ListProjectMembersRequest.ListQuery?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.listQuery != nil {
            map["ListQuery"] = self.listQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["ListQuery"] as? [String: Any?] {
            var model = ListProjectMembersRequest.ListQuery()
            model.fromMap(value)
            self.listQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListProjectMembersShrinkRequest : Tea.TeaModel {
    public var id: Int64?

    public var listQueryShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.listQueryShrink != nil {
            map["ListQuery"] = self.listQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["ListQuery"] as? String {
            self.listQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListProjectMembersResponseBody : Tea.TeaModel {
    public class PageResult : Tea.TeaModel {
        public class ProjectMemberList : Tea.TeaModel {
            public var gmtCreate: String?

            public var gmtModified: String?

            public var id: Int64?

            public var lastModifier: String?

            public var lastModifierName: String?

            public var roleIdList: [Int32]?

            public var userId: String?

            public var userName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["GmtModified"] = self.gmtModified!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.lastModifier != nil {
                    map["LastModifier"] = self.lastModifier!
                }
                if self.lastModifierName != nil {
                    map["LastModifierName"] = self.lastModifierName!
                }
                if self.roleIdList != nil {
                    map["RoleIdList"] = self.roleIdList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                if self.userName != nil {
                    map["UserName"] = self.userName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["GmtCreate"] as? String {
                    self.gmtCreate = value
                }
                if let value = dict["GmtModified"] as? String {
                    self.gmtModified = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["LastModifier"] as? String {
                    self.lastModifier = value
                }
                if let value = dict["LastModifierName"] as? String {
                    self.lastModifierName = value
                }
                if let value = dict["RoleIdList"] as? [Int32] {
                    self.roleIdList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
                if let value = dict["UserName"] as? String {
                    self.userName = value
                }
            }
        }
        public var projectMemberList: [ListProjectMembersResponseBody.PageResult.ProjectMemberList]?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.projectMemberList != nil {
                var tmp : [Any] = []
                for k in self.projectMemberList! {
                    tmp.append(k.toMap())
                }
                map["ProjectMemberList"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ProjectMemberList"] as? [Any?] {
                var tmp : [ListProjectMembersResponseBody.PageResult.ProjectMemberList] = []
                for v in value {
                    if v != nil {
                        var model = ListProjectMembersResponseBody.PageResult.ProjectMemberList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.projectMemberList = tmp
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pageResult: ListProjectMembersResponseBody.PageResult?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageResult != nil {
            map["PageResult"] = self.pageResult?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageResult"] as? [String: Any?] {
            var model = ListProjectMembersResponseBody.PageResult()
            model.fromMap(value)
            self.pageResult = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListProjectMembersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListProjectMembersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListProjectMembersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListProjectsRequest : Tea.TeaModel {
    public class ListQuery : Tea.TeaModel {
        public var env: String?

        public var keyword: String?

        public var mode: String?

        public var pageNo: Int32?

        public var pageSize: Int32?

        public var tagList: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.env != nil {
                map["Env"] = self.env!
            }
            if self.keyword != nil {
                map["Keyword"] = self.keyword!
            }
            if self.mode != nil {
                map["Mode"] = self.mode!
            }
            if self.pageNo != nil {
                map["PageNo"] = self.pageNo!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.tagList != nil {
                map["TagList"] = self.tagList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Env"] as? String {
                self.env = value
            }
            if let value = dict["Keyword"] as? String {
                self.keyword = value
            }
            if let value = dict["Mode"] as? String {
                self.mode = value
            }
            if let value = dict["PageNo"] as? Int32 {
                self.pageNo = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["TagList"] as? [String] {
                self.tagList = value
            }
        }
    }
    public var listQuery: ListProjectsRequest.ListQuery?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQuery != nil {
            map["ListQuery"] = self.listQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? [String: Any?] {
            var model = ListProjectsRequest.ListQuery()
            model.fromMap(value)
            self.listQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListProjectsShrinkRequest : Tea.TeaModel {
    public var listQueryShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQueryShrink != nil {
            map["ListQuery"] = self.listQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? String {
            self.listQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListProjectsResponseBody : Tea.TeaModel {
    public class PageResult : Tea.TeaModel {
        public class ProjectList : Tea.TeaModel {
            public var bizUnitId: Int64?

            public var dataSourceId: Int64?

            public var dataSourceName: String?

            public var description_: String?

            public var displayName: String?

            public var env: String?

            public var gmtCreate: String?

            public var gmtModified: String?

            public var id: Int64?

            public var mode: String?

            public var name: String?

            public var owner: String?

            public var ownerName: String?

            public var realtimeDataSourceId: Int64?

            public var realtimeDataSourceName: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bizUnitId != nil {
                    map["BizUnitId"] = self.bizUnitId!
                }
                if self.dataSourceId != nil {
                    map["DataSourceId"] = self.dataSourceId!
                }
                if self.dataSourceName != nil {
                    map["DataSourceName"] = self.dataSourceName!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.env != nil {
                    map["Env"] = self.env!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["GmtModified"] = self.gmtModified!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.mode != nil {
                    map["Mode"] = self.mode!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.owner != nil {
                    map["Owner"] = self.owner!
                }
                if self.ownerName != nil {
                    map["OwnerName"] = self.ownerName!
                }
                if self.realtimeDataSourceId != nil {
                    map["RealtimeDataSourceId"] = self.realtimeDataSourceId!
                }
                if self.realtimeDataSourceName != nil {
                    map["RealtimeDataSourceName"] = self.realtimeDataSourceName!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BizUnitId"] as? Int64 {
                    self.bizUnitId = value
                }
                if let value = dict["DataSourceId"] as? Int64 {
                    self.dataSourceId = value
                }
                if let value = dict["DataSourceName"] as? String {
                    self.dataSourceName = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["Env"] as? String {
                    self.env = value
                }
                if let value = dict["GmtCreate"] as? String {
                    self.gmtCreate = value
                }
                if let value = dict["GmtModified"] as? String {
                    self.gmtModified = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["Mode"] as? String {
                    self.mode = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Owner"] as? String {
                    self.owner = value
                }
                if let value = dict["OwnerName"] as? String {
                    self.ownerName = value
                }
                if let value = dict["RealtimeDataSourceId"] as? Int64 {
                    self.realtimeDataSourceId = value
                }
                if let value = dict["RealtimeDataSourceName"] as? String {
                    self.realtimeDataSourceName = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var projectList: [ListProjectsResponseBody.PageResult.ProjectList]?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.projectList != nil {
                var tmp : [Any] = []
                for k in self.projectList! {
                    tmp.append(k.toMap())
                }
                map["ProjectList"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ProjectList"] as? [Any?] {
                var tmp : [ListProjectsResponseBody.PageResult.ProjectList] = []
                for v in value {
                    if v != nil {
                        var model = ListProjectsResponseBody.PageResult.ProjectList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.projectList = tmp
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pageResult: ListProjectsResponseBody.PageResult?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageResult != nil {
            map["PageResult"] = self.pageResult?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageResult"] as? [String: Any?] {
            var model = ListProjectsResponseBody.PageResult()
            model.fromMap(value)
            self.pageResult = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListProjectsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListProjectsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListProjectsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListPublishRecordsRequest : Tea.TeaModel {
    public class ListQuery : Tea.TeaModel {
        public class SearchFilter : Tea.TeaModel {
            public var changeTypeList: [Int32]?

            public var page: Int32?

            public var pageSize: Int32?

            public var projectIdList: [Int64]?

            public var publishEndTime: String?

            public var publishStartTime: String?

            public var publishStatusList: [Int32]?

            public var submitterList: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.changeTypeList != nil {
                    map["ChangeTypeList"] = self.changeTypeList!
                }
                if self.page != nil {
                    map["Page"] = self.page!
                }
                if self.pageSize != nil {
                    map["PageSize"] = self.pageSize!
                }
                if self.projectIdList != nil {
                    map["ProjectIdList"] = self.projectIdList!
                }
                if self.publishEndTime != nil {
                    map["PublishEndTime"] = self.publishEndTime!
                }
                if self.publishStartTime != nil {
                    map["PublishStartTime"] = self.publishStartTime!
                }
                if self.publishStatusList != nil {
                    map["PublishStatusList"] = self.publishStatusList!
                }
                if self.submitterList != nil {
                    map["SubmitterList"] = self.submitterList!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ChangeTypeList"] as? [Int32] {
                    self.changeTypeList = value
                }
                if let value = dict["Page"] as? Int32 {
                    self.page = value
                }
                if let value = dict["PageSize"] as? Int32 {
                    self.pageSize = value
                }
                if let value = dict["ProjectIdList"] as? [Int64] {
                    self.projectIdList = value
                }
                if let value = dict["PublishEndTime"] as? String {
                    self.publishEndTime = value
                }
                if let value = dict["PublishStartTime"] as? String {
                    self.publishStartTime = value
                }
                if let value = dict["PublishStatusList"] as? [Int32] {
                    self.publishStatusList = value
                }
                if let value = dict["SubmitterList"] as? [String] {
                    self.submitterList = value
                }
            }
        }
        public var keyword: String?

        public var searchFilter: ListPublishRecordsRequest.ListQuery.SearchFilter?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.searchFilter?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.keyword != nil {
                map["Keyword"] = self.keyword!
            }
            if self.searchFilter != nil {
                map["SearchFilter"] = self.searchFilter?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Keyword"] as? String {
                self.keyword = value
            }
            if let value = dict["SearchFilter"] as? [String: Any?] {
                var model = ListPublishRecordsRequest.ListQuery.SearchFilter()
                model.fromMap(value)
                self.searchFilter = model
            }
        }
    }
    public var listQuery: ListPublishRecordsRequest.ListQuery?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQuery != nil {
            map["ListQuery"] = self.listQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? [String: Any?] {
            var model = ListPublishRecordsRequest.ListQuery()
            model.fromMap(value)
            self.listQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListPublishRecordsShrinkRequest : Tea.TeaModel {
    public var listQueryShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQueryShrink != nil {
            map["ListQuery"] = self.listQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? String {
            self.listQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListPublishRecordsResponseBody : Tea.TeaModel {
    public class ListResult : Tea.TeaModel {
        public class Data : Tea.TeaModel {
            public var changeType: Int32?

            public var errorMessage: String?

            public var finishTime: String?

            public var gmtCreate: String?

            public var gmtModify: String?

            public var id: Int64?

            public var nodeId: String?

            public var objectId: String?

            public var objectName: String?

            public var objectType: String?

            public var objectVersion: String?

            public var projectId: String?

            public var publishName: String?

            public var publishStatus: Int32?

            public var publisher: String?

            public var publisherName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.changeType != nil {
                    map["ChangeType"] = self.changeType!
                }
                if self.errorMessage != nil {
                    map["ErrorMessage"] = self.errorMessage!
                }
                if self.finishTime != nil {
                    map["FinishTime"] = self.finishTime!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtModify != nil {
                    map["GmtModify"] = self.gmtModify!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.nodeId != nil {
                    map["NodeId"] = self.nodeId!
                }
                if self.objectId != nil {
                    map["ObjectId"] = self.objectId!
                }
                if self.objectName != nil {
                    map["ObjectName"] = self.objectName!
                }
                if self.objectType != nil {
                    map["ObjectType"] = self.objectType!
                }
                if self.objectVersion != nil {
                    map["ObjectVersion"] = self.objectVersion!
                }
                if self.projectId != nil {
                    map["ProjectId"] = self.projectId!
                }
                if self.publishName != nil {
                    map["PublishName"] = self.publishName!
                }
                if self.publishStatus != nil {
                    map["PublishStatus"] = self.publishStatus!
                }
                if self.publisher != nil {
                    map["Publisher"] = self.publisher!
                }
                if self.publisherName != nil {
                    map["PublisherName"] = self.publisherName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ChangeType"] as? Int32 {
                    self.changeType = value
                }
                if let value = dict["ErrorMessage"] as? String {
                    self.errorMessage = value
                }
                if let value = dict["FinishTime"] as? String {
                    self.finishTime = value
                }
                if let value = dict["GmtCreate"] as? String {
                    self.gmtCreate = value
                }
                if let value = dict["GmtModify"] as? String {
                    self.gmtModify = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["NodeId"] as? String {
                    self.nodeId = value
                }
                if let value = dict["ObjectId"] as? String {
                    self.objectId = value
                }
                if let value = dict["ObjectName"] as? String {
                    self.objectName = value
                }
                if let value = dict["ObjectType"] as? String {
                    self.objectType = value
                }
                if let value = dict["ObjectVersion"] as? String {
                    self.objectVersion = value
                }
                if let value = dict["ProjectId"] as? String {
                    self.projectId = value
                }
                if let value = dict["PublishName"] as? String {
                    self.publishName = value
                }
                if let value = dict["PublishStatus"] as? Int32 {
                    self.publishStatus = value
                }
                if let value = dict["Publisher"] as? String {
                    self.publisher = value
                }
                if let value = dict["PublisherName"] as? String {
                    self.publisherName = value
                }
            }
        }
        public var data: [ListPublishRecordsResponseBody.ListResult.Data]?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.data != nil {
                var tmp : [Any] = []
                for k in self.data! {
                    tmp.append(k.toMap())
                }
                map["Data"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Data"] as? [Any?] {
                var tmp : [ListPublishRecordsResponseBody.ListResult.Data] = []
                for v in value {
                    if v != nil {
                        var model = ListPublishRecordsResponseBody.ListResult.Data()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.data = tmp
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var listResult: ListPublishRecordsResponseBody.ListResult?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.listResult != nil {
            map["ListResult"] = self.listResult?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["ListResult"] as? [String: Any?] {
            var model = ListPublishRecordsResponseBody.ListResult()
            model.fromMap(value)
            self.listResult = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListPublishRecordsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListPublishRecordsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListPublishRecordsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListResourcePermissionOperationLogRequest : Tea.TeaModel {
    public class ListQuery : Tea.TeaModel {
        public var page: Int32?

        public var pageSize: Int32?

        public var searchText: String?

        public var tabType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.searchText != nil {
                map["SearchText"] = self.searchText!
            }
            if self.tabType != nil {
                map["TabType"] = self.tabType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Page"] as? Int32 {
                self.page = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["SearchText"] as? String {
                self.searchText = value
            }
            if let value = dict["TabType"] as? String {
                self.tabType = value
            }
        }
    }
    public var listQuery: ListResourcePermissionOperationLogRequest.ListQuery?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQuery != nil {
            map["ListQuery"] = self.listQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? [String: Any?] {
            var model = ListResourcePermissionOperationLogRequest.ListQuery()
            model.fromMap(value)
            self.listQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListResourcePermissionOperationLogShrinkRequest : Tea.TeaModel {
    public var listQueryShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQueryShrink != nil {
            map["ListQuery"] = self.listQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? String {
            self.listQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListResourcePermissionOperationLogResponseBody : Tea.TeaModel {
    public class PageResult : Tea.TeaModel {
        public class Data : Tea.TeaModel {
            public class Account : Tea.TeaModel {
                public var id: String?

                public var name: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public class Period : Tea.TeaModel {
                public var endTime: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.endTime != nil {
                        map["EndTime"] = self.endTime!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["EndTime"] as? String {
                        self.endTime = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public class ResourceInfo : Tea.TeaModel {
                public class BizUnitInfo : Tea.TeaModel {
                    public var displayName: String?

                    public var env: String?

                    public var id: String?

                    public var name: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.displayName != nil {
                            map["DisplayName"] = self.displayName!
                        }
                        if self.env != nil {
                            map["Env"] = self.env!
                        }
                        if self.id != nil {
                            map["Id"] = self.id!
                        }
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["DisplayName"] as? String {
                            self.displayName = value
                        }
                        if let value = dict["Env"] as? String {
                            self.env = value
                        }
                        if let value = dict["Id"] as? String {
                            self.id = value
                        }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                    }
                }
                public class ProjectInfo : Tea.TeaModel {
                    public var displayName: String?

                    public var env: String?

                    public var id: Int64?

                    public var name: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.displayName != nil {
                            map["DisplayName"] = self.displayName!
                        }
                        if self.env != nil {
                            map["Env"] = self.env!
                        }
                        if self.id != nil {
                            map["Id"] = self.id!
                        }
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["DisplayName"] as? String {
                            self.displayName = value
                        }
                        if let value = dict["Env"] as? String {
                            self.env = value
                        }
                        if let value = dict["Id"] as? Int64 {
                            self.id = value
                        }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                    }
                }
                public var bizUnitInfo: ListResourcePermissionOperationLogResponseBody.PageResult.Data.ResourceInfo.BizUnitInfo?

                public var displayName: String?

                public var env: String?

                public var id: String?

                public var name: String?

                public var projectInfo: ListResourcePermissionOperationLogResponseBody.PageResult.Data.ResourceInfo.ProjectInfo?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.bizUnitInfo?.validate()
                    try self.projectInfo?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.bizUnitInfo != nil {
                        map["BizUnitInfo"] = self.bizUnitInfo?.toMap()
                    }
                    if self.displayName != nil {
                        map["DisplayName"] = self.displayName!
                    }
                    if self.env != nil {
                        map["Env"] = self.env!
                    }
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.projectInfo != nil {
                        map["ProjectInfo"] = self.projectInfo?.toMap()
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["BizUnitInfo"] as? [String: Any?] {
                        var model = ListResourcePermissionOperationLogResponseBody.PageResult.Data.ResourceInfo.BizUnitInfo()
                        model.fromMap(value)
                        self.bizUnitInfo = model
                    }
                    if let value = dict["DisplayName"] as? String {
                        self.displayName = value
                    }
                    if let value = dict["Env"] as? String {
                        self.env = value
                    }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["ProjectInfo"] as? [String: Any?] {
                        var model = ListResourcePermissionOperationLogResponseBody.PageResult.Data.ResourceInfo.ProjectInfo()
                        model.fromMap(value)
                        self.projectInfo = model
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public class TargetAccount : Tea.TeaModel {
                public var id: String?

                public var name: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public var account: ListResourcePermissionOperationLogResponseBody.PageResult.Data.Account?

            public var authScope: String?

            public var operateId: Int64?

            public var operateTime: Int64?

            public var operateType: String?

            public var period: ListResourcePermissionOperationLogResponseBody.PageResult.Data.Period?

            public var reason: String?

            public var resourceInfo: ListResourcePermissionOperationLogResponseBody.PageResult.Data.ResourceInfo?

            public var targetAccount: ListResourcePermissionOperationLogResponseBody.PageResult.Data.TargetAccount?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.account?.validate()
                try self.period?.validate()
                try self.resourceInfo?.validate()
                try self.targetAccount?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.account != nil {
                    map["Account"] = self.account?.toMap()
                }
                if self.authScope != nil {
                    map["AuthScope"] = self.authScope!
                }
                if self.operateId != nil {
                    map["OperateId"] = self.operateId!
                }
                if self.operateTime != nil {
                    map["OperateTime"] = self.operateTime!
                }
                if self.operateType != nil {
                    map["OperateType"] = self.operateType!
                }
                if self.period != nil {
                    map["Period"] = self.period?.toMap()
                }
                if self.reason != nil {
                    map["Reason"] = self.reason!
                }
                if self.resourceInfo != nil {
                    map["ResourceInfo"] = self.resourceInfo?.toMap()
                }
                if self.targetAccount != nil {
                    map["TargetAccount"] = self.targetAccount?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Account"] as? [String: Any?] {
                    var model = ListResourcePermissionOperationLogResponseBody.PageResult.Data.Account()
                    model.fromMap(value)
                    self.account = model
                }
                if let value = dict["AuthScope"] as? String {
                    self.authScope = value
                }
                if let value = dict["OperateId"] as? Int64 {
                    self.operateId = value
                }
                if let value = dict["OperateTime"] as? Int64 {
                    self.operateTime = value
                }
                if let value = dict["OperateType"] as? String {
                    self.operateType = value
                }
                if let value = dict["Period"] as? [String: Any?] {
                    var model = ListResourcePermissionOperationLogResponseBody.PageResult.Data.Period()
                    model.fromMap(value)
                    self.period = model
                }
                if let value = dict["Reason"] as? String {
                    self.reason = value
                }
                if let value = dict["ResourceInfo"] as? [String: Any?] {
                    var model = ListResourcePermissionOperationLogResponseBody.PageResult.Data.ResourceInfo()
                    model.fromMap(value)
                    self.resourceInfo = model
                }
                if let value = dict["TargetAccount"] as? [String: Any?] {
                    var model = ListResourcePermissionOperationLogResponseBody.PageResult.Data.TargetAccount()
                    model.fromMap(value)
                    self.targetAccount = model
                }
            }
        }
        public var data: [ListResourcePermissionOperationLogResponseBody.PageResult.Data]?

        public var totalCount: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.data != nil {
                var tmp : [Any] = []
                for k in self.data! {
                    tmp.append(k.toMap())
                }
                map["Data"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Data"] as? [Any?] {
                var tmp : [ListResourcePermissionOperationLogResponseBody.PageResult.Data] = []
                for v in value {
                    if v != nil {
                        var model = ListResourcePermissionOperationLogResponseBody.PageResult.Data()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.data = tmp
            }
            if let value = dict["TotalCount"] as? Int64 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pageResult: ListResourcePermissionOperationLogResponseBody.PageResult?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageResult != nil {
            map["PageResult"] = self.pageResult?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageResult"] as? [String: Any?] {
            var model = ListResourcePermissionOperationLogResponseBody.PageResult()
            model.fromMap(value)
            self.pageResult = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListResourcePermissionOperationLogResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListResourcePermissionOperationLogResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListResourcePermissionOperationLogResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListResourcePermissionsRequest : Tea.TeaModel {
    public class ListQuery : Tea.TeaModel {
        public var page: Int32?

        public var pageSize: Int32?

        public var searchText: String?

        public var tabType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.searchText != nil {
                map["SearchText"] = self.searchText!
            }
            if self.tabType != nil {
                map["TabType"] = self.tabType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Page"] as? Int32 {
                self.page = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["SearchText"] as? String {
                self.searchText = value
            }
            if let value = dict["TabType"] as? String {
                self.tabType = value
            }
        }
    }
    public var listQuery: ListResourcePermissionsRequest.ListQuery?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQuery != nil {
            map["ListQuery"] = self.listQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? [String: Any?] {
            var model = ListResourcePermissionsRequest.ListQuery()
            model.fromMap(value)
            self.listQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListResourcePermissionsShrinkRequest : Tea.TeaModel {
    public var listQueryShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQueryShrink != nil {
            map["ListQuery"] = self.listQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? String {
            self.listQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListResourcePermissionsResponseBody : Tea.TeaModel {
    public class PageResult : Tea.TeaModel {
        public class Data : Tea.TeaModel {
            public class Period : Tea.TeaModel {
                public var endTime: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.endTime != nil {
                        map["EndTime"] = self.endTime!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["EndTime"] as? String {
                        self.endTime = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public class PermissionPeriodList : Tea.TeaModel {
                public class Period : Tea.TeaModel {
                    public var endTime: String?

                    public var type: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.endTime != nil {
                            map["EndTime"] = self.endTime!
                        }
                        if self.type != nil {
                            map["Type"] = self.type!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["EndTime"] as? String {
                            self.endTime = value
                        }
                        if let value = dict["Type"] as? String {
                            self.type = value
                        }
                    }
                }
                public var period: ListResourcePermissionsResponseBody.PageResult.Data.PermissionPeriodList.Period?

                public var permissionType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.period?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.period != nil {
                        map["Period"] = self.period?.toMap()
                    }
                    if self.permissionType != nil {
                        map["PermissionType"] = self.permissionType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Period"] as? [String: Any?] {
                        var model = ListResourcePermissionsResponseBody.PageResult.Data.PermissionPeriodList.Period()
                        model.fromMap(value)
                        self.period = model
                    }
                    if let value = dict["PermissionType"] as? String {
                        self.permissionType = value
                    }
                }
            }
            public class ResourceInfo : Tea.TeaModel {
                public class BizUnitInfo : Tea.TeaModel {
                    public var displayName: String?

                    public var env: String?

                    public var id: String?

                    public var name: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.displayName != nil {
                            map["DisplayName"] = self.displayName!
                        }
                        if self.env != nil {
                            map["Env"] = self.env!
                        }
                        if self.id != nil {
                            map["Id"] = self.id!
                        }
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["DisplayName"] as? String {
                            self.displayName = value
                        }
                        if let value = dict["Env"] as? String {
                            self.env = value
                        }
                        if let value = dict["Id"] as? String {
                            self.id = value
                        }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                    }
                }
                public class ProjectInfo : Tea.TeaModel {
                    public var displayName: String?

                    public var env: String?

                    public var id: Int64?

                    public var name: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.displayName != nil {
                            map["DisplayName"] = self.displayName!
                        }
                        if self.env != nil {
                            map["Env"] = self.env!
                        }
                        if self.id != nil {
                            map["Id"] = self.id!
                        }
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["DisplayName"] as? String {
                            self.displayName = value
                        }
                        if let value = dict["Env"] as? String {
                            self.env = value
                        }
                        if let value = dict["Id"] as? Int64 {
                            self.id = value
                        }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                    }
                }
                public var bizUnitInfo: ListResourcePermissionsResponseBody.PageResult.Data.ResourceInfo.BizUnitInfo?

                public var displayName: String?

                public var env: String?

                public var id: String?

                public var name: String?

                public var projectInfo: ListResourcePermissionsResponseBody.PageResult.Data.ResourceInfo.ProjectInfo?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.bizUnitInfo?.validate()
                    try self.projectInfo?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.bizUnitInfo != nil {
                        map["BizUnitInfo"] = self.bizUnitInfo?.toMap()
                    }
                    if self.displayName != nil {
                        map["DisplayName"] = self.displayName!
                    }
                    if self.env != nil {
                        map["Env"] = self.env!
                    }
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.projectInfo != nil {
                        map["ProjectInfo"] = self.projectInfo?.toMap()
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["BizUnitInfo"] as? [String: Any?] {
                        var model = ListResourcePermissionsResponseBody.PageResult.Data.ResourceInfo.BizUnitInfo()
                        model.fromMap(value)
                        self.bizUnitInfo = model
                    }
                    if let value = dict["DisplayName"] as? String {
                        self.displayName = value
                    }
                    if let value = dict["Env"] as? String {
                        self.env = value
                    }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["ProjectInfo"] as? [String: Any?] {
                        var model = ListResourcePermissionsResponseBody.PageResult.Data.ResourceInfo.ProjectInfo()
                        model.fromMap(value)
                        self.projectInfo = model
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public class TargetAccount : Tea.TeaModel {
                public var id: String?

                public var name: String?

                public var type: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                }
            }
            public var authScope: String?

            public var period: ListResourcePermissionsResponseBody.PageResult.Data.Period?

            public var permissionPeriodList: [ListResourcePermissionsResponseBody.PageResult.Data.PermissionPeriodList]?

            public var recordId: String?

            public var resourceInfo: ListResourcePermissionsResponseBody.PageResult.Data.ResourceInfo?

            public var targetAccount: ListResourcePermissionsResponseBody.PageResult.Data.TargetAccount?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.period?.validate()
                try self.resourceInfo?.validate()
                try self.targetAccount?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.authScope != nil {
                    map["AuthScope"] = self.authScope!
                }
                if self.period != nil {
                    map["Period"] = self.period?.toMap()
                }
                if self.permissionPeriodList != nil {
                    var tmp : [Any] = []
                    for k in self.permissionPeriodList! {
                        tmp.append(k.toMap())
                    }
                    map["PermissionPeriodList"] = tmp
                }
                if self.recordId != nil {
                    map["RecordId"] = self.recordId!
                }
                if self.resourceInfo != nil {
                    map["ResourceInfo"] = self.resourceInfo?.toMap()
                }
                if self.targetAccount != nil {
                    map["TargetAccount"] = self.targetAccount?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AuthScope"] as? String {
                    self.authScope = value
                }
                if let value = dict["Period"] as? [String: Any?] {
                    var model = ListResourcePermissionsResponseBody.PageResult.Data.Period()
                    model.fromMap(value)
                    self.period = model
                }
                if let value = dict["PermissionPeriodList"] as? [Any?] {
                    var tmp : [ListResourcePermissionsResponseBody.PageResult.Data.PermissionPeriodList] = []
                    for v in value {
                        if v != nil {
                            var model = ListResourcePermissionsResponseBody.PageResult.Data.PermissionPeriodList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.permissionPeriodList = tmp
                }
                if let value = dict["RecordId"] as? String {
                    self.recordId = value
                }
                if let value = dict["ResourceInfo"] as? [String: Any?] {
                    var model = ListResourcePermissionsResponseBody.PageResult.Data.ResourceInfo()
                    model.fromMap(value)
                    self.resourceInfo = model
                }
                if let value = dict["TargetAccount"] as? [String: Any?] {
                    var model = ListResourcePermissionsResponseBody.PageResult.Data.TargetAccount()
                    model.fromMap(value)
                    self.targetAccount = model
                }
            }
        }
        public var data: [ListResourcePermissionsResponseBody.PageResult.Data]?

        public var totalCount: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.data != nil {
                var tmp : [Any] = []
                for k in self.data! {
                    tmp.append(k.toMap())
                }
                map["Data"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Data"] as? [Any?] {
                var tmp : [ListResourcePermissionsResponseBody.PageResult.Data] = []
                for v in value {
                    if v != nil {
                        var model = ListResourcePermissionsResponseBody.PageResult.Data()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.data = tmp
            }
            if let value = dict["TotalCount"] as? Int64 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pageResult: ListResourcePermissionsResponseBody.PageResult?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageResult != nil {
            map["PageResult"] = self.pageResult?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageResult"] as? [String: Any?] {
            var model = ListResourcePermissionsResponseBody.PageResult()
            model.fromMap(value)
            self.pageResult = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListResourcePermissionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListResourcePermissionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListResourcePermissionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListRowPermissionRequest : Tea.TeaModel {
    public class PageRowPermissionQuery : Tea.TeaModel {
        public var keyword: String?

        public var pageNum: Int32?

        public var pageSize: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.keyword != nil {
                map["Keyword"] = self.keyword!
            }
            if self.pageNum != nil {
                map["PageNum"] = self.pageNum!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Keyword"] as? String {
                self.keyword = value
            }
            if let value = dict["PageNum"] as? Int32 {
                self.pageNum = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
        }
    }
    public var opTenantId: Int64?

    public var pageRowPermissionQuery: ListRowPermissionRequest.PageRowPermissionQuery?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageRowPermissionQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.pageRowPermissionQuery != nil {
            map["PageRowPermissionQuery"] = self.pageRowPermissionQuery?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["PageRowPermissionQuery"] as? [String: Any?] {
            var model = ListRowPermissionRequest.PageRowPermissionQuery()
            model.fromMap(value)
            self.pageRowPermissionQuery = model
        }
    }
}

public class ListRowPermissionShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var pageRowPermissionQueryShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.pageRowPermissionQueryShrink != nil {
            map["PageRowPermissionQuery"] = self.pageRowPermissionQueryShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["PageRowPermissionQuery"] as? String {
            self.pageRowPermissionQueryShrink = value
        }
    }
}

public class ListRowPermissionResponseBody : Tea.TeaModel {
    public class PageResult : Tea.TeaModel {
        public class Data : Tea.TeaModel {
            public class MappingColumns : Tea.TeaModel {
                public var columnDesc: String?

                public var columnName: String?

                public var columnType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.columnDesc != nil {
                        map["ColumnDesc"] = self.columnDesc!
                    }
                    if self.columnName != nil {
                        map["ColumnName"] = self.columnName!
                    }
                    if self.columnType != nil {
                        map["ColumnType"] = self.columnType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ColumnDesc"] as? String {
                        self.columnDesc = value
                    }
                    if let value = dict["ColumnName"] as? String {
                        self.columnName = value
                    }
                    if let value = dict["ColumnType"] as? String {
                        self.columnType = value
                    }
                }
            }
            public class Rules : Tea.TeaModel {
                public class Expressions : Tea.TeaModel {
                    public var mappingColumnName: String?

                    public var operator_: String?

                    public var subConditions: [Any]?

                    public var type: String?

                    public var values: [String]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.mappingColumnName != nil {
                            map["MappingColumnName"] = self.mappingColumnName!
                        }
                        if self.operator_ != nil {
                            map["Operator"] = self.operator_!
                        }
                        if self.subConditions != nil {
                            map["SubConditions"] = self.subConditions!
                        }
                        if self.type != nil {
                            map["Type"] = self.type!
                        }
                        if self.values != nil {
                            map["Values"] = self.values!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["MappingColumnName"] as? String {
                            self.mappingColumnName = value
                        }
                        if let value = dict["Operator"] as? String {
                            self.operator_ = value
                        }
                        if let value = dict["SubConditions"] as? [Any] {
                            self.subConditions = value
                        }
                        if let value = dict["Type"] as? String {
                            self.type = value
                        }
                        if let value = dict["Values"] as? [String] {
                            self.values = value
                        }
                    }
                }
                public class UserMappingList : Tea.TeaModel {
                    public class Accounts : Tea.TeaModel {
                        public var accountId: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.accountId != nil {
                                map["AccountId"] = self.accountId!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["AccountId"] as? String {
                                self.accountId = value
                            }
                        }
                    }
                    public var accountType: String?

                    public var accounts: [ListRowPermissionResponseBody.PageResult.Data.Rules.UserMappingList.Accounts]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.accountType != nil {
                            map["AccountType"] = self.accountType!
                        }
                        if self.accounts != nil {
                            var tmp : [Any] = []
                            for k in self.accounts! {
                                tmp.append(k.toMap())
                            }
                            map["Accounts"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["AccountType"] as? String {
                            self.accountType = value
                        }
                        if let value = dict["Accounts"] as? [Any?] {
                            var tmp : [ListRowPermissionResponseBody.PageResult.Data.Rules.UserMappingList.Accounts] = []
                            for v in value {
                                if v != nil {
                                    var model = ListRowPermissionResponseBody.PageResult.Data.Rules.UserMappingList.Accounts()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.accounts = tmp
                        }
                    }
                }
                public var expressions: [ListRowPermissionResponseBody.PageResult.Data.Rules.Expressions]?

                public var isDelete: Bool?

                public var ruleName: String?

                public var scopeType: String?

                public var status: Int32?

                public var userMappingList: [ListRowPermissionResponseBody.PageResult.Data.Rules.UserMappingList]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.expressions != nil {
                        var tmp : [Any] = []
                        for k in self.expressions! {
                            tmp.append(k.toMap())
                        }
                        map["Expressions"] = tmp
                    }
                    if self.isDelete != nil {
                        map["IsDelete"] = self.isDelete!
                    }
                    if self.ruleName != nil {
                        map["RuleName"] = self.ruleName!
                    }
                    if self.scopeType != nil {
                        map["ScopeType"] = self.scopeType!
                    }
                    if self.status != nil {
                        map["Status"] = self.status!
                    }
                    if self.userMappingList != nil {
                        var tmp : [Any] = []
                        for k in self.userMappingList! {
                            tmp.append(k.toMap())
                        }
                        map["UserMappingList"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Expressions"] as? [Any?] {
                        var tmp : [ListRowPermissionResponseBody.PageResult.Data.Rules.Expressions] = []
                        for v in value {
                            if v != nil {
                                var model = ListRowPermissionResponseBody.PageResult.Data.Rules.Expressions()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.expressions = tmp
                    }
                    if let value = dict["IsDelete"] as? Bool {
                        self.isDelete = value
                    }
                    if let value = dict["RuleName"] as? String {
                        self.ruleName = value
                    }
                    if let value = dict["ScopeType"] as? String {
                        self.scopeType = value
                    }
                    if let value = dict["Status"] as? Int32 {
                        self.status = value
                    }
                    if let value = dict["UserMappingList"] as? [Any?] {
                        var tmp : [ListRowPermissionResponseBody.PageResult.Data.Rules.UserMappingList] = []
                        for v in value {
                            if v != nil {
                                var model = ListRowPermissionResponseBody.PageResult.Data.Rules.UserMappingList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.userMappingList = tmp
                    }
                }
            }
            public class Tables : Tea.TeaModel {
                public var columnName: String?

                public var mappingColumnName: String?

                public var resourceId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.columnName != nil {
                        map["ColumnName"] = self.columnName!
                    }
                    if self.mappingColumnName != nil {
                        map["MappingColumnName"] = self.mappingColumnName!
                    }
                    if self.resourceId != nil {
                        map["ResourceId"] = self.resourceId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ColumnName"] as? String {
                        self.columnName = value
                    }
                    if let value = dict["MappingColumnName"] as? String {
                        self.mappingColumnName = value
                    }
                    if let value = dict["ResourceId"] as? String {
                        self.resourceId = value
                    }
                }
            }
            public var creator: String?

            public var gmtCreate: String?

            public var gmtModified: String?

            public var mappingColumns: [ListRowPermissionResponseBody.PageResult.Data.MappingColumns]?

            public var modifier: String?

            public var rowPermissionDesc: String?

            public var rowPermissionId: Int64?

            public var rowPermissionName: String?

            public var rules: [ListRowPermissionResponseBody.PageResult.Data.Rules]?

            public var tables: [ListRowPermissionResponseBody.PageResult.Data.Tables]?

            public var tenantId: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.creator != nil {
                    map["Creator"] = self.creator!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["GmtModified"] = self.gmtModified!
                }
                if self.mappingColumns != nil {
                    var tmp : [Any] = []
                    for k in self.mappingColumns! {
                        tmp.append(k.toMap())
                    }
                    map["MappingColumns"] = tmp
                }
                if self.modifier != nil {
                    map["Modifier"] = self.modifier!
                }
                if self.rowPermissionDesc != nil {
                    map["RowPermissionDesc"] = self.rowPermissionDesc!
                }
                if self.rowPermissionId != nil {
                    map["RowPermissionId"] = self.rowPermissionId!
                }
                if self.rowPermissionName != nil {
                    map["RowPermissionName"] = self.rowPermissionName!
                }
                if self.rules != nil {
                    var tmp : [Any] = []
                    for k in self.rules! {
                        tmp.append(k.toMap())
                    }
                    map["Rules"] = tmp
                }
                if self.tables != nil {
                    var tmp : [Any] = []
                    for k in self.tables! {
                        tmp.append(k.toMap())
                    }
                    map["Tables"] = tmp
                }
                if self.tenantId != nil {
                    map["TenantId"] = self.tenantId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Creator"] as? String {
                    self.creator = value
                }
                if let value = dict["GmtCreate"] as? String {
                    self.gmtCreate = value
                }
                if let value = dict["GmtModified"] as? String {
                    self.gmtModified = value
                }
                if let value = dict["MappingColumns"] as? [Any?] {
                    var tmp : [ListRowPermissionResponseBody.PageResult.Data.MappingColumns] = []
                    for v in value {
                        if v != nil {
                            var model = ListRowPermissionResponseBody.PageResult.Data.MappingColumns()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.mappingColumns = tmp
                }
                if let value = dict["Modifier"] as? String {
                    self.modifier = value
                }
                if let value = dict["RowPermissionDesc"] as? String {
                    self.rowPermissionDesc = value
                }
                if let value = dict["RowPermissionId"] as? Int64 {
                    self.rowPermissionId = value
                }
                if let value = dict["RowPermissionName"] as? String {
                    self.rowPermissionName = value
                }
                if let value = dict["Rules"] as? [Any?] {
                    var tmp : [ListRowPermissionResponseBody.PageResult.Data.Rules] = []
                    for v in value {
                        if v != nil {
                            var model = ListRowPermissionResponseBody.PageResult.Data.Rules()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.rules = tmp
                }
                if let value = dict["Tables"] as? [Any?] {
                    var tmp : [ListRowPermissionResponseBody.PageResult.Data.Tables] = []
                    for v in value {
                        if v != nil {
                            var model = ListRowPermissionResponseBody.PageResult.Data.Tables()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.tables = tmp
                }
                if let value = dict["TenantId"] as? Int64 {
                    self.tenantId = value
                }
            }
        }
        public var data: [ListRowPermissionResponseBody.PageResult.Data]?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.data != nil {
                var tmp : [Any] = []
                for k in self.data! {
                    tmp.append(k.toMap())
                }
                map["Data"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Data"] as? [Any?] {
                var tmp : [ListRowPermissionResponseBody.PageResult.Data] = []
                for v in value {
                    if v != nil {
                        var model = ListRowPermissionResponseBody.PageResult.Data()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.data = tmp
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pageResult: ListRowPermissionResponseBody.PageResult?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageResult != nil {
            map["PageResult"] = self.pageResult?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageResult"] as? [String: Any?] {
            var model = ListRowPermissionResponseBody.PageResult()
            model.fromMap(value)
            self.pageResult = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListRowPermissionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListRowPermissionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListRowPermissionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListRowPermissionByUserIdRequest : Tea.TeaModel {
    public class ListRowPermissionByUserIdQuery : Tea.TeaModel {
        public var operator_: String?

        public var pageNum: Int32?

        public var pageSize: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.operator_ != nil {
                map["Operator"] = self.operator_!
            }
            if self.pageNum != nil {
                map["PageNum"] = self.pageNum!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Operator"] as? String {
                self.operator_ = value
            }
            if let value = dict["PageNum"] as? Int32 {
                self.pageNum = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
        }
    }
    public var listRowPermissionByUserIdQuery: ListRowPermissionByUserIdRequest.ListRowPermissionByUserIdQuery?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listRowPermissionByUserIdQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listRowPermissionByUserIdQuery != nil {
            map["ListRowPermissionByUserIdQuery"] = self.listRowPermissionByUserIdQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListRowPermissionByUserIdQuery"] as? [String: Any?] {
            var model = ListRowPermissionByUserIdRequest.ListRowPermissionByUserIdQuery()
            model.fromMap(value)
            self.listRowPermissionByUserIdQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListRowPermissionByUserIdShrinkRequest : Tea.TeaModel {
    public var listRowPermissionByUserIdQueryShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listRowPermissionByUserIdQueryShrink != nil {
            map["ListRowPermissionByUserIdQuery"] = self.listRowPermissionByUserIdQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListRowPermissionByUserIdQuery"] as? String {
            self.listRowPermissionByUserIdQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListRowPermissionByUserIdResponseBody : Tea.TeaModel {
    public class PageResult : Tea.TeaModel {
        public class Data : Tea.TeaModel {
            public class Rules : Tea.TeaModel {
                public class Expressions : Tea.TeaModel {
                    public var mappingColumnName: String?

                    public var operator_: String?

                    public var subConditions: [Any]?

                    public var type: String?

                    public var values: [String]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.mappingColumnName != nil {
                            map["MappingColumnName"] = self.mappingColumnName!
                        }
                        if self.operator_ != nil {
                            map["Operator"] = self.operator_!
                        }
                        if self.subConditions != nil {
                            map["SubConditions"] = self.subConditions!
                        }
                        if self.type != nil {
                            map["Type"] = self.type!
                        }
                        if self.values != nil {
                            map["Values"] = self.values!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["MappingColumnName"] as? String {
                            self.mappingColumnName = value
                        }
                        if let value = dict["Operator"] as? String {
                            self.operator_ = value
                        }
                        if let value = dict["SubConditions"] as? [Any] {
                            self.subConditions = value
                        }
                        if let value = dict["Type"] as? String {
                            self.type = value
                        }
                        if let value = dict["Values"] as? [String] {
                            self.values = value
                        }
                    }
                }
                public class UserMappingList : Tea.TeaModel {
                    public class Accounts : Tea.TeaModel {
                        public var accountId: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.accountId != nil {
                                map["AccountId"] = self.accountId!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["AccountId"] as? String {
                                self.accountId = value
                            }
                        }
                    }
                    public var accountType: String?

                    public var accounts: [ListRowPermissionByUserIdResponseBody.PageResult.Data.Rules.UserMappingList.Accounts]?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.accountType != nil {
                            map["AccountType"] = self.accountType!
                        }
                        if self.accounts != nil {
                            var tmp : [Any] = []
                            for k in self.accounts! {
                                tmp.append(k.toMap())
                            }
                            map["Accounts"] = tmp
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["AccountType"] as? String {
                            self.accountType = value
                        }
                        if let value = dict["Accounts"] as? [Any?] {
                            var tmp : [ListRowPermissionByUserIdResponseBody.PageResult.Data.Rules.UserMappingList.Accounts] = []
                            for v in value {
                                if v != nil {
                                    var model = ListRowPermissionByUserIdResponseBody.PageResult.Data.Rules.UserMappingList.Accounts()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.accounts = tmp
                        }
                    }
                }
                public var expressions: [ListRowPermissionByUserIdResponseBody.PageResult.Data.Rules.Expressions]?

                public var isDelete: Bool?

                public var ruleName: String?

                public var scopeType: String?

                public var status: Int32?

                public var userMappingList: [ListRowPermissionByUserIdResponseBody.PageResult.Data.Rules.UserMappingList]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.expressions != nil {
                        var tmp : [Any] = []
                        for k in self.expressions! {
                            tmp.append(k.toMap())
                        }
                        map["Expressions"] = tmp
                    }
                    if self.isDelete != nil {
                        map["IsDelete"] = self.isDelete!
                    }
                    if self.ruleName != nil {
                        map["RuleName"] = self.ruleName!
                    }
                    if self.scopeType != nil {
                        map["ScopeType"] = self.scopeType!
                    }
                    if self.status != nil {
                        map["Status"] = self.status!
                    }
                    if self.userMappingList != nil {
                        var tmp : [Any] = []
                        for k in self.userMappingList! {
                            tmp.append(k.toMap())
                        }
                        map["UserMappingList"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Expressions"] as? [Any?] {
                        var tmp : [ListRowPermissionByUserIdResponseBody.PageResult.Data.Rules.Expressions] = []
                        for v in value {
                            if v != nil {
                                var model = ListRowPermissionByUserIdResponseBody.PageResult.Data.Rules.Expressions()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.expressions = tmp
                    }
                    if let value = dict["IsDelete"] as? Bool {
                        self.isDelete = value
                    }
                    if let value = dict["RuleName"] as? String {
                        self.ruleName = value
                    }
                    if let value = dict["ScopeType"] as? String {
                        self.scopeType = value
                    }
                    if let value = dict["Status"] as? Int32 {
                        self.status = value
                    }
                    if let value = dict["UserMappingList"] as? [Any?] {
                        var tmp : [ListRowPermissionByUserIdResponseBody.PageResult.Data.Rules.UserMappingList] = []
                        for v in value {
                            if v != nil {
                                var model = ListRowPermissionByUserIdResponseBody.PageResult.Data.Rules.UserMappingList()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.userMappingList = tmp
                    }
                }
            }
            public class Tables : Tea.TeaModel {
                public var columnName: String?

                public var mappingColumnName: String?

                public var resourceId: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.columnName != nil {
                        map["ColumnName"] = self.columnName!
                    }
                    if self.mappingColumnName != nil {
                        map["MappingColumnName"] = self.mappingColumnName!
                    }
                    if self.resourceId != nil {
                        map["ResourceId"] = self.resourceId!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ColumnName"] as? String {
                        self.columnName = value
                    }
                    if let value = dict["MappingColumnName"] as? String {
                        self.mappingColumnName = value
                    }
                    if let value = dict["ResourceId"] as? String {
                        self.resourceId = value
                    }
                }
            }
            public var creator: String?

            public var gmtCreate: String?

            public var gmtModified: String?

            public var modifier: String?

            public var rules: [ListRowPermissionByUserIdResponseBody.PageResult.Data.Rules]?

            public var tables: [ListRowPermissionByUserIdResponseBody.PageResult.Data.Tables]?

            public var tenantId: Int64?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.creator != nil {
                    map["Creator"] = self.creator!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["GmtModified"] = self.gmtModified!
                }
                if self.modifier != nil {
                    map["Modifier"] = self.modifier!
                }
                if self.rules != nil {
                    var tmp : [Any] = []
                    for k in self.rules! {
                        tmp.append(k.toMap())
                    }
                    map["Rules"] = tmp
                }
                if self.tables != nil {
                    var tmp : [Any] = []
                    for k in self.tables! {
                        tmp.append(k.toMap())
                    }
                    map["Tables"] = tmp
                }
                if self.tenantId != nil {
                    map["TenantId"] = self.tenantId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Creator"] as? String {
                    self.creator = value
                }
                if let value = dict["GmtCreate"] as? String {
                    self.gmtCreate = value
                }
                if let value = dict["GmtModified"] as? String {
                    self.gmtModified = value
                }
                if let value = dict["Modifier"] as? String {
                    self.modifier = value
                }
                if let value = dict["Rules"] as? [Any?] {
                    var tmp : [ListRowPermissionByUserIdResponseBody.PageResult.Data.Rules] = []
                    for v in value {
                        if v != nil {
                            var model = ListRowPermissionByUserIdResponseBody.PageResult.Data.Rules()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.rules = tmp
                }
                if let value = dict["Tables"] as? [Any?] {
                    var tmp : [ListRowPermissionByUserIdResponseBody.PageResult.Data.Tables] = []
                    for v in value {
                        if v != nil {
                            var model = ListRowPermissionByUserIdResponseBody.PageResult.Data.Tables()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.tables = tmp
                }
                if let value = dict["TenantId"] as? Int64 {
                    self.tenantId = value
                }
            }
        }
        public var data: [ListRowPermissionByUserIdResponseBody.PageResult.Data]?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.data != nil {
                var tmp : [Any] = []
                for k in self.data! {
                    tmp.append(k.toMap())
                }
                map["Data"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Data"] as? [Any?] {
                var tmp : [ListRowPermissionByUserIdResponseBody.PageResult.Data] = []
                for v in value {
                    if v != nil {
                        var model = ListRowPermissionByUserIdResponseBody.PageResult.Data()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.data = tmp
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pageResult: ListRowPermissionByUserIdResponseBody.PageResult?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageResult != nil {
            map["PageResult"] = self.pageResult?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageResult"] as? [String: Any?] {
            var model = ListRowPermissionByUserIdResponseBody.PageResult()
            model.fromMap(value)
            self.pageResult = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListRowPermissionByUserIdResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListRowPermissionByUserIdResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListRowPermissionByUserIdResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListSubmitRecordsRequest : Tea.TeaModel {
    public class ListQuery : Tea.TeaModel {
        public class SearchFilter : Tea.TeaModel {
            public var changeTypeList: [Int32]?

            public var page: Int32?

            public var pageSize: Int32?

            public var projectIdList: [Int64]?

            public var submitEndTime: String?

            public var submitStartTime: String?

            public var submitterList: [String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.changeTypeList != nil {
                    map["ChangeTypeList"] = self.changeTypeList!
                }
                if self.page != nil {
                    map["Page"] = self.page!
                }
                if self.pageSize != nil {
                    map["PageSize"] = self.pageSize!
                }
                if self.projectIdList != nil {
                    map["ProjectIdList"] = self.projectIdList!
                }
                if self.submitEndTime != nil {
                    map["SubmitEndTime"] = self.submitEndTime!
                }
                if self.submitStartTime != nil {
                    map["SubmitStartTime"] = self.submitStartTime!
                }
                if self.submitterList != nil {
                    map["SubmitterList"] = self.submitterList!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ChangeTypeList"] as? [Int32] {
                    self.changeTypeList = value
                }
                if let value = dict["Page"] as? Int32 {
                    self.page = value
                }
                if let value = dict["PageSize"] as? Int32 {
                    self.pageSize = value
                }
                if let value = dict["ProjectIdList"] as? [Int64] {
                    self.projectIdList = value
                }
                if let value = dict["SubmitEndTime"] as? String {
                    self.submitEndTime = value
                }
                if let value = dict["SubmitStartTime"] as? String {
                    self.submitStartTime = value
                }
                if let value = dict["SubmitterList"] as? [String] {
                    self.submitterList = value
                }
            }
        }
        public var keyword: String?

        public var searchFilter: ListSubmitRecordsRequest.ListQuery.SearchFilter?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.searchFilter?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.keyword != nil {
                map["Keyword"] = self.keyword!
            }
            if self.searchFilter != nil {
                map["SearchFilter"] = self.searchFilter?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Keyword"] as? String {
                self.keyword = value
            }
            if let value = dict["SearchFilter"] as? [String: Any?] {
                var model = ListSubmitRecordsRequest.ListQuery.SearchFilter()
                model.fromMap(value)
                self.searchFilter = model
            }
        }
    }
    public var listQuery: ListSubmitRecordsRequest.ListQuery?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQuery != nil {
            map["ListQuery"] = self.listQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? [String: Any?] {
            var model = ListSubmitRecordsRequest.ListQuery()
            model.fromMap(value)
            self.listQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListSubmitRecordsShrinkRequest : Tea.TeaModel {
    public var listQueryShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQueryShrink != nil {
            map["ListQuery"] = self.listQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? String {
            self.listQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListSubmitRecordsResponseBody : Tea.TeaModel {
    public class ListResult : Tea.TeaModel {
        public class Data : Tea.TeaModel {
            public var changeType: Int32?

            public var gmtCreate: String?

            public var gmtModify: String?

            public var id: Int64?

            public var nodeId: String?

            public var objectId: String?

            public var objectName: String?

            public var objectType: String?

            public var objectVersion: String?

            public var projectId: String?

            public var submitComment: String?

            public var submitter: String?

            public var submitterName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.changeType != nil {
                    map["ChangeType"] = self.changeType!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtModify != nil {
                    map["GmtModify"] = self.gmtModify!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.nodeId != nil {
                    map["NodeId"] = self.nodeId!
                }
                if self.objectId != nil {
                    map["ObjectId"] = self.objectId!
                }
                if self.objectName != nil {
                    map["ObjectName"] = self.objectName!
                }
                if self.objectType != nil {
                    map["ObjectType"] = self.objectType!
                }
                if self.objectVersion != nil {
                    map["ObjectVersion"] = self.objectVersion!
                }
                if self.projectId != nil {
                    map["ProjectId"] = self.projectId!
                }
                if self.submitComment != nil {
                    map["SubmitComment"] = self.submitComment!
                }
                if self.submitter != nil {
                    map["Submitter"] = self.submitter!
                }
                if self.submitterName != nil {
                    map["SubmitterName"] = self.submitterName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ChangeType"] as? Int32 {
                    self.changeType = value
                }
                if let value = dict["GmtCreate"] as? String {
                    self.gmtCreate = value
                }
                if let value = dict["GmtModify"] as? String {
                    self.gmtModify = value
                }
                if let value = dict["Id"] as? Int64 {
                    self.id = value
                }
                if let value = dict["NodeId"] as? String {
                    self.nodeId = value
                }
                if let value = dict["ObjectId"] as? String {
                    self.objectId = value
                }
                if let value = dict["ObjectName"] as? String {
                    self.objectName = value
                }
                if let value = dict["ObjectType"] as? String {
                    self.objectType = value
                }
                if let value = dict["ObjectVersion"] as? String {
                    self.objectVersion = value
                }
                if let value = dict["ProjectId"] as? String {
                    self.projectId = value
                }
                if let value = dict["SubmitComment"] as? String {
                    self.submitComment = value
                }
                if let value = dict["Submitter"] as? String {
                    self.submitter = value
                }
                if let value = dict["SubmitterName"] as? String {
                    self.submitterName = value
                }
            }
        }
        public var data: [ListSubmitRecordsResponseBody.ListResult.Data]?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.data != nil {
                var tmp : [Any] = []
                for k in self.data! {
                    tmp.append(k.toMap())
                }
                map["Data"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Data"] as? [Any?] {
                var tmp : [ListSubmitRecordsResponseBody.ListResult.Data] = []
                for v in value {
                    if v != nil {
                        var model = ListSubmitRecordsResponseBody.ListResult.Data()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.data = tmp
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var listResult: ListSubmitRecordsResponseBody.ListResult?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.listResult != nil {
            map["ListResult"] = self.listResult?.toMap()
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["ListResult"] as? [String: Any?] {
            var model = ListSubmitRecordsResponseBody.ListResult()
            model.fromMap(value)
            self.listResult = model
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListSubmitRecordsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListSubmitRecordsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListSubmitRecordsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListTenantMembersRequest : Tea.TeaModel {
    public class ListQuery : Tea.TeaModel {
        public var page: Int32?

        public var pageSize: Int32?

        public var roleList: [String]?

        public var searchText: String?

        public var userGroupIdList: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.page != nil {
                map["Page"] = self.page!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.roleList != nil {
                map["RoleList"] = self.roleList!
            }
            if self.searchText != nil {
                map["SearchText"] = self.searchText!
            }
            if self.userGroupIdList != nil {
                map["UserGroupIdList"] = self.userGroupIdList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Page"] as? Int32 {
                self.page = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["RoleList"] as? [String] {
                self.roleList = value
            }
            if let value = dict["SearchText"] as? String {
                self.searchText = value
            }
            if let value = dict["UserGroupIdList"] as? [String] {
                self.userGroupIdList = value
            }
        }
    }
    public var listQuery: ListTenantMembersRequest.ListQuery?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQuery != nil {
            map["ListQuery"] = self.listQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? [String: Any?] {
            var model = ListTenantMembersRequest.ListQuery()
            model.fromMap(value)
            self.listQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListTenantMembersShrinkRequest : Tea.TeaModel {
    public var listQueryShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQueryShrink != nil {
            map["ListQuery"] = self.listQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? String {
            self.listQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListTenantMembersResponseBody : Tea.TeaModel {
    public class PageResult : Tea.TeaModel {
        public class UserList : Tea.TeaModel {
            public class UserGroupList : Tea.TeaModel {
                public var active: Bool?

                public var description_: String?

                public var id: String?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.active != nil {
                        map["Active"] = self.active!
                    }
                    if self.description_ != nil {
                        map["Description"] = self.description_!
                    }
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Active"] as? Bool {
                        self.active = value
                    }
                    if let value = dict["Description"] as? String {
                        self.description_ = value
                    }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public var accountName: String?

            public var dingNumber: String?

            public var displayName: String?

            public var displayNameWithoutStatus: String?

            public var enableWhiteIp: String?

            public var gmtCreate: Int64?

            public var gmtModified: Int64?

            public var id: String?

            public var mail: String?

            public var mobilePhone: String?

            public var name: String?

            public var nickName: String?

            public var realName: String?

            public var roleList: [String]?

            public var sourceId: String?

            public var sourceType: String?

            public var userGroupList: [ListTenantMembersResponseBody.PageResult.UserList.UserGroupList]?

            public var whiteIp: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.accountName != nil {
                    map["AccountName"] = self.accountName!
                }
                if self.dingNumber != nil {
                    map["DingNumber"] = self.dingNumber!
                }
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.displayNameWithoutStatus != nil {
                    map["DisplayNameWithoutStatus"] = self.displayNameWithoutStatus!
                }
                if self.enableWhiteIp != nil {
                    map["EnableWhiteIp"] = self.enableWhiteIp!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["GmtModified"] = self.gmtModified!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.mail != nil {
                    map["Mail"] = self.mail!
                }
                if self.mobilePhone != nil {
                    map["MobilePhone"] = self.mobilePhone!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.nickName != nil {
                    map["NickName"] = self.nickName!
                }
                if self.realName != nil {
                    map["RealName"] = self.realName!
                }
                if self.roleList != nil {
                    map["RoleList"] = self.roleList!
                }
                if self.sourceId != nil {
                    map["SourceId"] = self.sourceId!
                }
                if self.sourceType != nil {
                    map["SourceType"] = self.sourceType!
                }
                if self.userGroupList != nil {
                    var tmp : [Any] = []
                    for k in self.userGroupList! {
                        tmp.append(k.toMap())
                    }
                    map["UserGroupList"] = tmp
                }
                if self.whiteIp != nil {
                    map["WhiteIp"] = self.whiteIp!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AccountName"] as? String {
                    self.accountName = value
                }
                if let value = dict["DingNumber"] as? String {
                    self.dingNumber = value
                }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["DisplayNameWithoutStatus"] as? String {
                    self.displayNameWithoutStatus = value
                }
                if let value = dict["EnableWhiteIp"] as? String {
                    self.enableWhiteIp = value
                }
                if let value = dict["GmtCreate"] as? Int64 {
                    self.gmtCreate = value
                }
                if let value = dict["GmtModified"] as? Int64 {
                    self.gmtModified = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Mail"] as? String {
                    self.mail = value
                }
                if let value = dict["MobilePhone"] as? String {
                    self.mobilePhone = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["NickName"] as? String {
                    self.nickName = value
                }
                if let value = dict["RealName"] as? String {
                    self.realName = value
                }
                if let value = dict["RoleList"] as? [String] {
                    self.roleList = value
                }
                if let value = dict["SourceId"] as? String {
                    self.sourceId = value
                }
                if let value = dict["SourceType"] as? String {
                    self.sourceType = value
                }
                if let value = dict["UserGroupList"] as? [Any?] {
                    var tmp : [ListTenantMembersResponseBody.PageResult.UserList.UserGroupList] = []
                    for v in value {
                        if v != nil {
                            var model = ListTenantMembersResponseBody.PageResult.UserList.UserGroupList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.userGroupList = tmp
                }
                if let value = dict["WhiteIp"] as? String {
                    self.whiteIp = value
                }
            }
        }
        public var totalCount: Int32?

        public var userList: [ListTenantMembersResponseBody.PageResult.UserList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            if self.userList != nil {
                var tmp : [Any] = []
                for k in self.userList! {
                    tmp.append(k.toMap())
                }
                map["UserList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
            if let value = dict["UserList"] as? [Any?] {
                var tmp : [ListTenantMembersResponseBody.PageResult.UserList] = []
                for v in value {
                    if v != nil {
                        var model = ListTenantMembersResponseBody.PageResult.UserList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.userList = tmp
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pageResult: ListTenantMembersResponseBody.PageResult?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageResult != nil {
            map["PageResult"] = self.pageResult?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageResult"] as? [String: Any?] {
            var model = ListTenantMembersResponseBody.PageResult()
            model.fromMap(value)
            self.pageResult = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListTenantMembersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTenantMembersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListTenantMembersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListUserGroupMembersRequest : Tea.TeaModel {
    public class ListQuery : Tea.TeaModel {
        public var keyword: String?

        public var pageNo: Int32?

        public var pageSize: Int32?

        public var userGroupId: String?

        public var userIdList: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.keyword != nil {
                map["Keyword"] = self.keyword!
            }
            if self.pageNo != nil {
                map["PageNo"] = self.pageNo!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            if self.userGroupId != nil {
                map["UserGroupId"] = self.userGroupId!
            }
            if self.userIdList != nil {
                map["UserIdList"] = self.userIdList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Keyword"] as? String {
                self.keyword = value
            }
            if let value = dict["PageNo"] as? Int32 {
                self.pageNo = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
            if let value = dict["UserGroupId"] as? String {
                self.userGroupId = value
            }
            if let value = dict["UserIdList"] as? [String] {
                self.userIdList = value
            }
        }
    }
    public var listQuery: ListUserGroupMembersRequest.ListQuery?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQuery != nil {
            map["ListQuery"] = self.listQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? [String: Any?] {
            var model = ListUserGroupMembersRequest.ListQuery()
            model.fromMap(value)
            self.listQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListUserGroupMembersShrinkRequest : Tea.TeaModel {
    public var listQueryShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQueryShrink != nil {
            map["ListQuery"] = self.listQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? String {
            self.listQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListUserGroupMembersResponseBody : Tea.TeaModel {
    public class PageResult : Tea.TeaModel {
        public class MemberList : Tea.TeaModel {
            public class Creator : Tea.TeaModel {
                public var accountName: String?

                public var displayName: String?

                public var id: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.accountName != nil {
                        map["AccountName"] = self.accountName!
                    }
                    if self.displayName != nil {
                        map["DisplayName"] = self.displayName!
                    }
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AccountName"] as? String {
                        self.accountName = value
                    }
                    if let value = dict["DisplayName"] as? String {
                        self.displayName = value
                    }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                }
            }
            public class UserInfo : Tea.TeaModel {
                public var accountName: String?

                public var displayName: String?

                public var id: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.accountName != nil {
                        map["AccountName"] = self.accountName!
                    }
                    if self.displayName != nil {
                        map["DisplayName"] = self.displayName!
                    }
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AccountName"] as? String {
                        self.accountName = value
                    }
                    if let value = dict["DisplayName"] as? String {
                        self.displayName = value
                    }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                }
            }
            public var creator: ListUserGroupMembersResponseBody.PageResult.MemberList.Creator?

            public var gmtCreate: Int64?

            public var id: String?

            public var userGroupId: String?

            public var userInfo: ListUserGroupMembersResponseBody.PageResult.MemberList.UserInfo?

            public var userRole: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.creator?.validate()
                try self.userInfo?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.creator != nil {
                    map["Creator"] = self.creator?.toMap()
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.userGroupId != nil {
                    map["UserGroupId"] = self.userGroupId!
                }
                if self.userInfo != nil {
                    map["UserInfo"] = self.userInfo?.toMap()
                }
                if self.userRole != nil {
                    map["UserRole"] = self.userRole!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Creator"] as? [String: Any?] {
                    var model = ListUserGroupMembersResponseBody.PageResult.MemberList.Creator()
                    model.fromMap(value)
                    self.creator = model
                }
                if let value = dict["GmtCreate"] as? Int64 {
                    self.gmtCreate = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["UserGroupId"] as? String {
                    self.userGroupId = value
                }
                if let value = dict["UserInfo"] as? [String: Any?] {
                    var model = ListUserGroupMembersResponseBody.PageResult.MemberList.UserInfo()
                    model.fromMap(value)
                    self.userInfo = model
                }
                if let value = dict["UserRole"] as? String {
                    self.userRole = value
                }
            }
        }
        public var memberList: [ListUserGroupMembersResponseBody.PageResult.MemberList]?

        public var totalCount: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.memberList != nil {
                var tmp : [Any] = []
                for k in self.memberList! {
                    tmp.append(k.toMap())
                }
                map["MemberList"] = tmp
            }
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MemberList"] as? [Any?] {
                var tmp : [ListUserGroupMembersResponseBody.PageResult.MemberList] = []
                for v in value {
                    if v != nil {
                        var model = ListUserGroupMembersResponseBody.PageResult.MemberList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.memberList = tmp
            }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pageResult: ListUserGroupMembersResponseBody.PageResult?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageResult != nil {
            map["PageResult"] = self.pageResult?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageResult"] as? [String: Any?] {
            var model = ListUserGroupMembersResponseBody.PageResult()
            model.fromMap(value)
            self.pageResult = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListUserGroupMembersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListUserGroupMembersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListUserGroupMembersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListUserGroupsRequest : Tea.TeaModel {
    public class ListQuery : Tea.TeaModel {
        public var active: Bool?

        public var adminIdList: [String]?

        public var filterMine: Bool?

        public var keyword: String?

        public var pageNo: Int32?

        public var pageSize: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.active != nil {
                map["Active"] = self.active!
            }
            if self.adminIdList != nil {
                map["AdminIdList"] = self.adminIdList!
            }
            if self.filterMine != nil {
                map["FilterMine"] = self.filterMine!
            }
            if self.keyword != nil {
                map["Keyword"] = self.keyword!
            }
            if self.pageNo != nil {
                map["PageNo"] = self.pageNo!
            }
            if self.pageSize != nil {
                map["PageSize"] = self.pageSize!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Active"] as? Bool {
                self.active = value
            }
            if let value = dict["AdminIdList"] as? [String] {
                self.adminIdList = value
            }
            if let value = dict["FilterMine"] as? Bool {
                self.filterMine = value
            }
            if let value = dict["Keyword"] as? String {
                self.keyword = value
            }
            if let value = dict["PageNo"] as? Int32 {
                self.pageNo = value
            }
            if let value = dict["PageSize"] as? Int32 {
                self.pageSize = value
            }
        }
    }
    public var listQuery: ListUserGroupsRequest.ListQuery?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.listQuery?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQuery != nil {
            map["ListQuery"] = self.listQuery?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? [String: Any?] {
            var model = ListUserGroupsRequest.ListQuery()
            model.fromMap(value)
            self.listQuery = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListUserGroupsShrinkRequest : Tea.TeaModel {
    public var listQueryShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.listQueryShrink != nil {
            map["ListQuery"] = self.listQueryShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ListQuery"] as? String {
            self.listQueryShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class ListUserGroupsResponseBody : Tea.TeaModel {
    public class PageResult : Tea.TeaModel {
        public class UserGroupList : Tea.TeaModel {
            public class AdminList : Tea.TeaModel {
                public var accountName: String?

                public var displayName: String?

                public var id: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.accountName != nil {
                        map["AccountName"] = self.accountName!
                    }
                    if self.displayName != nil {
                        map["DisplayName"] = self.displayName!
                    }
                    if self.id != nil {
                        map["Id"] = self.id!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AccountName"] as? String {
                        self.accountName = value
                    }
                    if let value = dict["DisplayName"] as? String {
                        self.displayName = value
                    }
                    if let value = dict["Id"] as? String {
                        self.id = value
                    }
                }
            }
            public var active: Bool?

            public var adminList: [ListUserGroupsResponseBody.PageResult.UserGroupList.AdminList]?

            public var description_: String?

            public var id: String?

            public var myRole: String?

            public var name: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.active != nil {
                    map["Active"] = self.active!
                }
                if self.adminList != nil {
                    var tmp : [Any] = []
                    for k in self.adminList! {
                        tmp.append(k.toMap())
                    }
                    map["AdminList"] = tmp
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.myRole != nil {
                    map["MyRole"] = self.myRole!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Active"] as? Bool {
                    self.active = value
                }
                if let value = dict["AdminList"] as? [Any?] {
                    var tmp : [ListUserGroupsResponseBody.PageResult.UserGroupList.AdminList] = []
                    for v in value {
                        if v != nil {
                            var model = ListUserGroupsResponseBody.PageResult.UserGroupList.AdminList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.adminList = tmp
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["MyRole"] as? String {
                    self.myRole = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
            }
        }
        public var totalCount: Int32?

        public var userGroupList: [ListUserGroupsResponseBody.PageResult.UserGroupList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.totalCount != nil {
                map["TotalCount"] = self.totalCount!
            }
            if self.userGroupList != nil {
                var tmp : [Any] = []
                for k in self.userGroupList! {
                    tmp.append(k.toMap())
                }
                map["UserGroupList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TotalCount"] as? Int32 {
                self.totalCount = value
            }
            if let value = dict["UserGroupList"] as? [Any?] {
                var tmp : [ListUserGroupsResponseBody.PageResult.UserGroupList] = []
                for v in value {
                    if v != nil {
                        var model = ListUserGroupsResponseBody.PageResult.UserGroupList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.userGroupList = tmp
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var pageResult: ListUserGroupsResponseBody.PageResult?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pageResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.pageResult != nil {
            map["PageResult"] = self.pageResult?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PageResult"] as? [String: Any?] {
            var model = ListUserGroupsResponseBody.PageResult()
            model.fromMap(value)
            self.pageResult = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ListUserGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListUserGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListUserGroupsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class OfflineBatchTaskRequest : Tea.TeaModel {
    public var comment: String?

    public var fileId: Int64?

    public var opTenantId: Int64?

    public var projectId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.comment != nil {
            map["Comment"] = self.comment!
        }
        if self.fileId != nil {
            map["FileId"] = self.fileId!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Comment"] as? String {
            self.comment = value
        }
        if let value = dict["FileId"] as? Int64 {
            self.fileId = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
    }
}

public class OfflineBatchTaskResponseBody : Tea.TeaModel {
    public class OfflineResult : Tea.TeaModel {
        public var publishObjectId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.publishObjectId != nil {
                map["PublishObjectId"] = self.publishObjectId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PublishObjectId"] as? Int64 {
                self.publishObjectId = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var offlineResult: OfflineBatchTaskResponseBody.OfflineResult?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.offlineResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.offlineResult != nil {
            map["OfflineResult"] = self.offlineResult?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["OfflineResult"] as? [String: Any?] {
            var model = OfflineBatchTaskResponseBody.OfflineResult()
            model.fromMap(value)
            self.offlineResult = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class OfflineBatchTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: OfflineBatchTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = OfflineBatchTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class OfflineBizEntityRequest : Tea.TeaModel {
    public class OfflineCommand : Tea.TeaModel {
        public var bizUnitId: Int64?

        public var comment: String?

        public var id: Int64?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bizUnitId != nil {
                map["BizUnitId"] = self.bizUnitId!
            }
            if self.comment != nil {
                map["Comment"] = self.comment!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BizUnitId"] as? Int64 {
                self.bizUnitId = value
            }
            if let value = dict["Comment"] as? String {
                self.comment = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var offlineCommand: OfflineBizEntityRequest.OfflineCommand?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.offlineCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.offlineCommand != nil {
            map["OfflineCommand"] = self.offlineCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OfflineCommand"] as? [String: Any?] {
            var model = OfflineBizEntityRequest.OfflineCommand()
            model.fromMap(value)
            self.offlineCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class OfflineBizEntityShrinkRequest : Tea.TeaModel {
    public var offlineCommandShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.offlineCommandShrink != nil {
            map["OfflineCommand"] = self.offlineCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OfflineCommand"] as? String {
            self.offlineCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class OfflineBizEntityResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class OfflineBizEntityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: OfflineBizEntityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = OfflineBizEntityResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class OnlineBizEntityRequest : Tea.TeaModel {
    public class OnlineCommand : Tea.TeaModel {
        public var bizUnitId: Int64?

        public var comment: String?

        public var id: Int64?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bizUnitId != nil {
                map["BizUnitId"] = self.bizUnitId!
            }
            if self.comment != nil {
                map["Comment"] = self.comment!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BizUnitId"] as? Int64 {
                self.bizUnitId = value
            }
            if let value = dict["Comment"] as? String {
                self.comment = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var onlineCommand: OnlineBizEntityRequest.OnlineCommand?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.onlineCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.onlineCommand != nil {
            map["OnlineCommand"] = self.onlineCommand?.toMap()
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OnlineCommand"] as? [String: Any?] {
            var model = OnlineBizEntityRequest.OnlineCommand()
            model.fromMap(value)
            self.onlineCommand = model
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class OnlineBizEntityShrinkRequest : Tea.TeaModel {
    public var onlineCommandShrink: String?

    public var opTenantId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.onlineCommandShrink != nil {
            map["OnlineCommand"] = self.onlineCommandShrink!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OnlineCommand"] as? String {
            self.onlineCommandShrink = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
    }
}

public class OnlineBizEntityResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class OnlineBizEntityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: OnlineBizEntityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = OnlineBizEntityResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class OperateInstanceRequest : Tea.TeaModel {
    public class OperateCommand : Tea.TeaModel {
        public class InstanceIdList : Tea.TeaModel {
            public var fieldInstanceIdList: [String]?

            public var id: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.fieldInstanceIdList != nil {
                    map["FieldInstanceIdList"] = self.fieldInstanceIdList!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["FieldInstanceIdList"] as? [String] {
                    self.fieldInstanceIdList = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
            }
        }
        public var instanceIdList: [OperateInstanceRequest.OperateCommand.InstanceIdList]?

        public var operation: String?

        public var projectId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.instanceIdList != nil {
                var tmp : [Any] = []
                for k in self.instanceIdList! {
                    tmp.append(k.toMap())
                }
                map["InstanceIdList"] = tmp
            }
            if self.operation != nil {
                map["Operation"] = self.operation!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["InstanceIdList"] as? [Any?] {
                var tmp : [OperateInstanceRequest.OperateCommand.InstanceIdList] = []
                for v in value {
                    if v != nil {
                        var model = OperateInstanceRequest.OperateCommand.InstanceIdList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.instanceIdList = tmp
            }
            if let value = dict["Operation"] as? String {
                self.operation = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
        }
    }
    public var env: String?

    public var opTenantId: Int64?

    public var operateCommand: OperateInstanceRequest.OperateCommand?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.operateCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.operateCommand != nil {
            map["OperateCommand"] = self.operateCommand?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["OperateCommand"] as? [String: Any?] {
            var model = OperateInstanceRequest.OperateCommand()
            model.fromMap(value)
            self.operateCommand = model
        }
    }
}

public class OperateInstanceShrinkRequest : Tea.TeaModel {
    public var env: String?

    public var opTenantId: Int64?

    public var operateCommandShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.operateCommandShrink != nil {
            map["OperateCommand"] = self.operateCommandShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["OperateCommand"] as? String {
            self.operateCommandShrink = value
        }
    }
}

public class OperateInstanceResponseBody : Tea.TeaModel {
    public class InstanceStatusList : Tea.TeaModel {
        public var displayName: String?

        public var errorMessage: String?

        public var id: String?

        public var name: String?

        public var ownerId: String?

        public var ownerName: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.ownerId != nil {
                map["OwnerId"] = self.ownerId!
            }
            if self.ownerName != nil {
                map["OwnerName"] = self.ownerName!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["OwnerId"] as? String {
                self.ownerId = value
            }
            if let value = dict["OwnerName"] as? String {
                self.ownerName = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var instanceStatusList: [OperateInstanceResponseBody.InstanceStatusList]?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.instanceStatusList != nil {
            var tmp : [Any] = []
            for k in self.instanceStatusList! {
                tmp.append(k.toMap())
            }
            map["InstanceStatusList"] = tmp
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["InstanceStatusList"] as? [Any?] {
            var tmp : [OperateInstanceResponseBody.InstanceStatusList] = []
            for v in value {
                if v != nil {
                    var model = OperateInstanceResponseBody.InstanceStatusList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.instanceStatusList = tmp
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class OperateInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: OperateInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = OperateInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ParseBatchTaskDependencyRequest : Tea.TeaModel {
    public class ParseCommand : Tea.TeaModel {
        public var code: String?

        public var dataSourceCatalog: String?

        public var dataSourceId: Int64?

        public var dataSourceSchema: String?

        public var includeAllInputTables: Bool?

        public var needQueryLineages: Bool?

        public var operatorType: String?

        public var projectId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.dataSourceCatalog != nil {
                map["DataSourceCatalog"] = self.dataSourceCatalog!
            }
            if self.dataSourceId != nil {
                map["DataSourceId"] = self.dataSourceId!
            }
            if self.dataSourceSchema != nil {
                map["DataSourceSchema"] = self.dataSourceSchema!
            }
            if self.includeAllInputTables != nil {
                map["IncludeAllInputTables"] = self.includeAllInputTables!
            }
            if self.needQueryLineages != nil {
                map["NeedQueryLineages"] = self.needQueryLineages!
            }
            if self.operatorType != nil {
                map["OperatorType"] = self.operatorType!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? String {
                self.code = value
            }
            if let value = dict["DataSourceCatalog"] as? String {
                self.dataSourceCatalog = value
            }
            if let value = dict["DataSourceId"] as? Int64 {
                self.dataSourceId = value
            }
            if let value = dict["DataSourceSchema"] as? String {
                self.dataSourceSchema = value
            }
            if let value = dict["IncludeAllInputTables"] as? Bool {
                self.includeAllInputTables = value
            }
            if let value = dict["NeedQueryLineages"] as? Bool {
                self.needQueryLineages = value
            }
            if let value = dict["OperatorType"] as? String {
                self.operatorType = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
        }
    }
    public var opTenantId: Int64?

    public var parseCommand: ParseBatchTaskDependencyRequest.ParseCommand?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.parseCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.parseCommand != nil {
            map["ParseCommand"] = self.parseCommand?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ParseCommand"] as? [String: Any?] {
            var model = ParseBatchTaskDependencyRequest.ParseCommand()
            model.fromMap(value)
            self.parseCommand = model
        }
    }
}

public class ParseBatchTaskDependencyShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var parseCommandShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.parseCommandShrink != nil {
            map["ParseCommand"] = self.parseCommandShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ParseCommand"] as? String {
            self.parseCommandShrink = value
        }
    }
}

public class ParseBatchTaskDependencyResponseBody : Tea.TeaModel {
    public class ParseResult : Tea.TeaModel {
        public class DependNodeList : Tea.TeaModel {
            public class ScheduleNodeInfoList : Tea.TeaModel {
                public var fieldList: [String]?

                public var nodeId: String?

                public var nodeName: String?

                public var outputName: String?

                public var ownerName: String?

                public var ownerUserId: String?

                public var tableName: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.fieldList != nil {
                        map["FieldList"] = self.fieldList!
                    }
                    if self.nodeId != nil {
                        map["NodeId"] = self.nodeId!
                    }
                    if self.nodeName != nil {
                        map["NodeName"] = self.nodeName!
                    }
                    if self.outputName != nil {
                        map["OutputName"] = self.outputName!
                    }
                    if self.ownerName != nil {
                        map["OwnerName"] = self.ownerName!
                    }
                    if self.ownerUserId != nil {
                        map["OwnerUserId"] = self.ownerUserId!
                    }
                    if self.tableName != nil {
                        map["TableName"] = self.tableName!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["FieldList"] as? [String] {
                        self.fieldList = value
                    }
                    if let value = dict["NodeId"] as? String {
                        self.nodeId = value
                    }
                    if let value = dict["NodeName"] as? String {
                        self.nodeName = value
                    }
                    if let value = dict["OutputName"] as? String {
                        self.outputName = value
                    }
                    if let value = dict["OwnerName"] as? String {
                        self.ownerName = value
                    }
                    if let value = dict["OwnerUserId"] as? String {
                        self.ownerUserId = value
                    }
                    if let value = dict["TableName"] as? String {
                        self.tableName = value
                    }
                }
            }
            public var nodeIoType: String?

            public var scheduleNodeInfoList: [ParseBatchTaskDependencyResponseBody.ParseResult.DependNodeList.ScheduleNodeInfoList]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.nodeIoType != nil {
                    map["NodeIoType"] = self.nodeIoType!
                }
                if self.scheduleNodeInfoList != nil {
                    var tmp : [Any] = []
                    for k in self.scheduleNodeInfoList! {
                        tmp.append(k.toMap())
                    }
                    map["ScheduleNodeInfoList"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["NodeIoType"] as? String {
                    self.nodeIoType = value
                }
                if let value = dict["ScheduleNodeInfoList"] as? [Any?] {
                    var tmp : [ParseBatchTaskDependencyResponseBody.ParseResult.DependNodeList.ScheduleNodeInfoList] = []
                    for v in value {
                        if v != nil {
                            var model = ParseBatchTaskDependencyResponseBody.ParseResult.DependNodeList.ScheduleNodeInfoList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.scheduleNodeInfoList = tmp
                }
            }
        }
        public var dependNodeList: [ParseBatchTaskDependencyResponseBody.ParseResult.DependNodeList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.dependNodeList != nil {
                var tmp : [Any] = []
                for k in self.dependNodeList! {
                    tmp.append(k.toMap())
                }
                map["DependNodeList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DependNodeList"] as? [Any?] {
                var tmp : [ParseBatchTaskDependencyResponseBody.ParseResult.DependNodeList] = []
                for v in value {
                    if v != nil {
                        var model = ParseBatchTaskDependencyResponseBody.ParseResult.DependNodeList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.dependNodeList = tmp
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var parseResult: ParseBatchTaskDependencyResponseBody.ParseResult?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.parseResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.parseResult != nil {
            map["ParseResult"] = self.parseResult?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["ParseResult"] as? [String: Any?] {
            var model = ParseBatchTaskDependencyResponseBody.ParseResult()
            model.fromMap(value)
            self.parseResult = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ParseBatchTaskDependencyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ParseBatchTaskDependencyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ParseBatchTaskDependencyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PausePhysicalNodeRequest : Tea.TeaModel {
    public class PauseCommand : Tea.TeaModel {
        public var nodeIdList: [String]?

        public var projectId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.nodeIdList != nil {
                map["NodeIdList"] = self.nodeIdList!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["NodeIdList"] as? [String] {
                self.nodeIdList = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
        }
    }
    public var env: String?

    public var opTenantId: Int64?

    public var pauseCommand: PausePhysicalNodeRequest.PauseCommand?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pauseCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.pauseCommand != nil {
            map["PauseCommand"] = self.pauseCommand?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["PauseCommand"] as? [String: Any?] {
            var model = PausePhysicalNodeRequest.PauseCommand()
            model.fromMap(value)
            self.pauseCommand = model
        }
    }
}

public class PausePhysicalNodeShrinkRequest : Tea.TeaModel {
    public var env: String?

    public var opTenantId: Int64?

    public var pauseCommandShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.pauseCommandShrink != nil {
            map["PauseCommand"] = self.pauseCommandShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["PauseCommand"] as? String {
            self.pauseCommandShrink = value
        }
    }
}

public class PausePhysicalNodeResponseBody : Tea.TeaModel {
    public class NodeOperateResultList : Tea.TeaModel {
        public var errorMessage: String?

        public var nodeId: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.nodeId != nil {
                map["NodeId"] = self.nodeId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["NodeId"] as? String {
                self.nodeId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var nodeOperateResultList: [PausePhysicalNodeResponseBody.NodeOperateResultList]?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nodeOperateResultList != nil {
            var tmp : [Any] = []
            for k in self.nodeOperateResultList! {
                tmp.append(k.toMap())
            }
            map["NodeOperateResultList"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NodeOperateResultList"] as? [Any?] {
            var tmp : [PausePhysicalNodeResponseBody.NodeOperateResultList] = []
            for v in value {
                if v != nil {
                    var model = PausePhysicalNodeResponseBody.NodeOperateResultList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.nodeOperateResultList = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class PausePhysicalNodeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PausePhysicalNodeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PausePhysicalNodeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PublishDataServiceApiRequest : Tea.TeaModel {
    public var apiId: Int64?

    public var opTenantId: Int64?

    public var projectId: Int32?

    public var versionId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        if self.versionId != nil {
            map["VersionId"] = self.versionId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? Int64 {
            self.apiId = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
        if let value = dict["VersionId"] as? String {
            self.versionId = value
        }
    }
}

public class PublishDataServiceApiResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class PublishDataServiceApiResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PublishDataServiceApiResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PublishDataServiceApiResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class PublishObjectListRequest : Tea.TeaModel {
    public class PublishCommand : Tea.TeaModel {
        public var comment: String?

        public var projectId: Int64?

        public var submitIdList: [Int64]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.comment != nil {
                map["Comment"] = self.comment!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            if self.submitIdList != nil {
                map["SubmitIdList"] = self.submitIdList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Comment"] as? String {
                self.comment = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
            if let value = dict["SubmitIdList"] as? [Int64] {
                self.submitIdList = value
            }
        }
    }
    public var opTenantId: Int64?

    public var publishCommand: PublishObjectListRequest.PublishCommand?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.publishCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.publishCommand != nil {
            map["PublishCommand"] = self.publishCommand?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["PublishCommand"] as? [String: Any?] {
            var model = PublishObjectListRequest.PublishCommand()
            model.fromMap(value)
            self.publishCommand = model
        }
    }
}

public class PublishObjectListShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var publishCommandShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.publishCommandShrink != nil {
            map["PublishCommand"] = self.publishCommandShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["PublishCommand"] as? String {
            self.publishCommandShrink = value
        }
    }
}

public class PublishObjectListResponseBody : Tea.TeaModel {
    public class PublishResult : Tea.TeaModel {
        public var submitIdList: [Int64]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.submitIdList != nil {
                map["SubmitIdList"] = self.submitIdList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SubmitIdList"] as? [Int64] {
                self.submitIdList = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var publishResult: PublishObjectListResponseBody.PublishResult?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.publishResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.publishResult != nil {
            map["PublishResult"] = self.publishResult?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["PublishResult"] as? [String: Any?] {
            var model = PublishObjectListResponseBody.PublishResult()
            model.fromMap(value)
            self.publishResult = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class PublishObjectListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: PublishObjectListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = PublishObjectListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemoveProjectMemberRequest : Tea.TeaModel {
    public class RemoveCommand : Tea.TeaModel {
        public var env: String?

        public var userIdList: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.env != nil {
                map["Env"] = self.env!
            }
            if self.userIdList != nil {
                map["UserIdList"] = self.userIdList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Env"] as? String {
                self.env = value
            }
            if let value = dict["UserIdList"] as? [String] {
                self.userIdList = value
            }
        }
    }
    public var id: Int64?

    public var opTenantId: Int64?

    public var removeCommand: RemoveProjectMemberRequest.RemoveCommand?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.removeCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.removeCommand != nil {
            map["RemoveCommand"] = self.removeCommand?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["RemoveCommand"] as? [String: Any?] {
            var model = RemoveProjectMemberRequest.RemoveCommand()
            model.fromMap(value)
            self.removeCommand = model
        }
    }
}

public class RemoveProjectMemberShrinkRequest : Tea.TeaModel {
    public var id: Int64?

    public var opTenantId: Int64?

    public var removeCommandShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.removeCommandShrink != nil {
            map["RemoveCommand"] = self.removeCommandShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["RemoveCommand"] as? String {
            self.removeCommandShrink = value
        }
    }
}

public class RemoveProjectMemberResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class RemoveProjectMemberResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemoveProjectMemberResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemoveProjectMemberResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemoveTenantMemberRequest : Tea.TeaModel {
    public class RemoveCommand : Tea.TeaModel {
        public var sourceId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.sourceId != nil {
                map["SourceId"] = self.sourceId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SourceId"] as? String {
                self.sourceId = value
            }
        }
    }
    public var opTenantId: Int64?

    public var removeCommand: RemoveTenantMemberRequest.RemoveCommand?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.removeCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.removeCommand != nil {
            map["RemoveCommand"] = self.removeCommand?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["RemoveCommand"] as? [String: Any?] {
            var model = RemoveTenantMemberRequest.RemoveCommand()
            model.fromMap(value)
            self.removeCommand = model
        }
    }
}

public class RemoveTenantMemberShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var removeCommandShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.removeCommandShrink != nil {
            map["RemoveCommand"] = self.removeCommandShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["RemoveCommand"] as? String {
            self.removeCommandShrink = value
        }
    }
}

public class RemoveTenantMemberResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class RemoveTenantMemberResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemoveTenantMemberResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemoveTenantMemberResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemoveUserGroupMemberRequest : Tea.TeaModel {
    public class RemoveCommand : Tea.TeaModel {
        public var userGroupId: String?

        public var userIdList: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.userGroupId != nil {
                map["UserGroupId"] = self.userGroupId!
            }
            if self.userIdList != nil {
                map["UserIdList"] = self.userIdList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["UserGroupId"] as? String {
                self.userGroupId = value
            }
            if let value = dict["UserIdList"] as? [String] {
                self.userIdList = value
            }
        }
    }
    public var opTenantId: Int64?

    public var removeCommand: RemoveUserGroupMemberRequest.RemoveCommand?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.removeCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.removeCommand != nil {
            map["RemoveCommand"] = self.removeCommand?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["RemoveCommand"] as? [String: Any?] {
            var model = RemoveUserGroupMemberRequest.RemoveCommand()
            model.fromMap(value)
            self.removeCommand = model
        }
    }
}

public class RemoveUserGroupMemberShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var removeCommandShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.removeCommandShrink != nil {
            map["RemoveCommand"] = self.removeCommandShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["RemoveCommand"] as? String {
            self.removeCommandShrink = value
        }
    }
}

public class RemoveUserGroupMemberResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class RemoveUserGroupMemberResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemoveUserGroupMemberResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemoveUserGroupMemberResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ReplaceProjectWhiteListsRequest : Tea.TeaModel {
    public class ReplaceCommand : Tea.TeaModel {
        public class WhiteLists : Tea.TeaModel {
            public var description_: String?

            public var ip: String?

            public var port: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.ip != nil {
                    map["Ip"] = self.ip!
                }
                if self.port != nil {
                    map["Port"] = self.port!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Ip"] as? String {
                    self.ip = value
                }
                if let value = dict["Port"] as? String {
                    self.port = value
                }
            }
        }
        public var whiteLists: [ReplaceProjectWhiteListsRequest.ReplaceCommand.WhiteLists]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.whiteLists != nil {
                var tmp : [Any] = []
                for k in self.whiteLists! {
                    tmp.append(k.toMap())
                }
                map["WhiteLists"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["WhiteLists"] as? [Any?] {
                var tmp : [ReplaceProjectWhiteListsRequest.ReplaceCommand.WhiteLists] = []
                for v in value {
                    if v != nil {
                        var model = ReplaceProjectWhiteListsRequest.ReplaceCommand.WhiteLists()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.whiteLists = tmp
            }
        }
    }
    public var id: Int64?

    public var opTenantId: Int64?

    public var replaceCommand: ReplaceProjectWhiteListsRequest.ReplaceCommand?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.replaceCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.replaceCommand != nil {
            map["ReplaceCommand"] = self.replaceCommand?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ReplaceCommand"] as? [String: Any?] {
            var model = ReplaceProjectWhiteListsRequest.ReplaceCommand()
            model.fromMap(value)
            self.replaceCommand = model
        }
    }
}

public class ReplaceProjectWhiteListsShrinkRequest : Tea.TeaModel {
    public var id: Int64?

    public var opTenantId: Int64?

    public var replaceCommandShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.replaceCommandShrink != nil {
            map["ReplaceCommand"] = self.replaceCommandShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ReplaceCommand"] as? String {
            self.replaceCommandShrink = value
        }
    }
}

public class ReplaceProjectWhiteListsResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ReplaceProjectWhiteListsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ReplaceProjectWhiteListsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ReplaceProjectWhiteListsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ResumePhysicalNodeRequest : Tea.TeaModel {
    public class ResumeCommand : Tea.TeaModel {
        public var nodeIdList: [String]?

        public var projectId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.nodeIdList != nil {
                map["NodeIdList"] = self.nodeIdList!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["NodeIdList"] as? [String] {
                self.nodeIdList = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
        }
    }
    public var env: String?

    public var opTenantId: Int64?

    public var resumeCommand: ResumePhysicalNodeRequest.ResumeCommand?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.resumeCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.resumeCommand != nil {
            map["ResumeCommand"] = self.resumeCommand?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ResumeCommand"] as? [String: Any?] {
            var model = ResumePhysicalNodeRequest.ResumeCommand()
            model.fromMap(value)
            self.resumeCommand = model
        }
    }
}

public class ResumePhysicalNodeShrinkRequest : Tea.TeaModel {
    public var env: String?

    public var opTenantId: Int64?

    public var resumeCommandShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.env != nil {
            map["Env"] = self.env!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.resumeCommandShrink != nil {
            map["ResumeCommand"] = self.resumeCommandShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Env"] as? String {
            self.env = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ResumeCommand"] as? String {
            self.resumeCommandShrink = value
        }
    }
}

public class ResumePhysicalNodeResponseBody : Tea.TeaModel {
    public class NodeOperateResultList : Tea.TeaModel {
        public var errorMessage: String?

        public var nodeId: String?

        public var status: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            if self.nodeId != nil {
                map["NodeId"] = self.nodeId!
            }
            if self.status != nil {
                map["Status"] = self.status!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorMessage"] as? String {
                self.errorMessage = value
            }
            if let value = dict["NodeId"] as? String {
                self.nodeId = value
            }
            if let value = dict["Status"] as? String {
                self.status = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var nodeOperateResultList: [ResumePhysicalNodeResponseBody.NodeOperateResultList]?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.nodeOperateResultList != nil {
            var tmp : [Any] = []
            for k in self.nodeOperateResultList! {
                tmp.append(k.toMap())
            }
            map["NodeOperateResultList"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["NodeOperateResultList"] as? [Any?] {
            var tmp : [ResumePhysicalNodeResponseBody.NodeOperateResultList] = []
            for v in value {
                if v != nil {
                    var model = ResumePhysicalNodeResponseBody.NodeOperateResultList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.nodeOperateResultList = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class ResumePhysicalNodeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ResumePhysicalNodeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ResumePhysicalNodeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RetryTransferOwnershipRequest : Tea.TeaModel {
    public class PrivilegeTransferRecord : Tea.TeaModel {
        public var id: Int64?

        public var newOwner: String?

        public var transferComment: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.newOwner != nil {
                map["NewOwner"] = self.newOwner!
            }
            if self.transferComment != nil {
                map["TransferComment"] = self.transferComment!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["NewOwner"] as? String {
                self.newOwner = value
            }
            if let value = dict["TransferComment"] as? String {
                self.transferComment = value
            }
        }
    }
    public var opTenantId: Int64?

    public var privilegeTransferRecord: RetryTransferOwnershipRequest.PrivilegeTransferRecord?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.privilegeTransferRecord?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.privilegeTransferRecord != nil {
            map["PrivilegeTransferRecord"] = self.privilegeTransferRecord?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["PrivilegeTransferRecord"] as? [String: Any?] {
            var model = RetryTransferOwnershipRequest.PrivilegeTransferRecord()
            model.fromMap(value)
            self.privilegeTransferRecord = model
        }
    }
}

public class RetryTransferOwnershipShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var privilegeTransferRecordShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.privilegeTransferRecordShrink != nil {
            map["PrivilegeTransferRecord"] = self.privilegeTransferRecordShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["PrivilegeTransferRecord"] as? String {
            self.privilegeTransferRecordShrink = value
        }
    }
}

public class RetryTransferOwnershipResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Int64?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Int64 {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class RetryTransferOwnershipResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RetryTransferOwnershipResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RetryTransferOwnershipResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RevokeDataServiceApiRequest : Tea.TeaModel {
    public class RevokeCommand : Tea.TeaModel {
        public var apiId: Int64?

        public var appId: Int32?

        public var reason: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiId != nil {
                map["ApiId"] = self.apiId!
            }
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.reason != nil {
                map["Reason"] = self.reason!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiId"] as? Int64 {
                self.apiId = value
            }
            if let value = dict["AppId"] as? Int32 {
                self.appId = value
            }
            if let value = dict["Reason"] as? String {
                self.reason = value
            }
        }
    }
    public var opTenantId: Int64?

    public var projectId: Int32?

    public var revokeCommand: RevokeDataServiceApiRequest.RevokeCommand?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.revokeCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        if self.revokeCommand != nil {
            map["RevokeCommand"] = self.revokeCommand?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
        if let value = dict["RevokeCommand"] as? [String: Any?] {
            var model = RevokeDataServiceApiRequest.RevokeCommand()
            model.fromMap(value)
            self.revokeCommand = model
        }
    }
}

public class RevokeDataServiceApiShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var projectId: Int32?

    public var revokeCommandShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        if self.revokeCommandShrink != nil {
            map["RevokeCommand"] = self.revokeCommandShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int32 {
            self.projectId = value
        }
        if let value = dict["RevokeCommand"] as? String {
            self.revokeCommandShrink = value
        }
    }
}

public class RevokeDataServiceApiResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class RevokeDataServiceApiResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RevokeDataServiceApiResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RevokeDataServiceApiResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RevokeResourcePermissionRequest : Tea.TeaModel {
    public class RevokeCommand : Tea.TeaModel {
        public class ResourceList : Tea.TeaModel {
            public var resourceId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.resourceId != nil {
                    map["ResourceId"] = self.resourceId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ResourceId"] as? String {
                    self.resourceId = value
                }
            }
        }
        public var operateList: [String]?

        public var reason: String?

        public var resourceList: [RevokeResourcePermissionRequest.RevokeCommand.ResourceList]?

        public var resourceType: String?

        public var userId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.operateList != nil {
                map["OperateList"] = self.operateList!
            }
            if self.reason != nil {
                map["Reason"] = self.reason!
            }
            if self.resourceList != nil {
                var tmp : [Any] = []
                for k in self.resourceList! {
                    tmp.append(k.toMap())
                }
                map["ResourceList"] = tmp
            }
            if self.resourceType != nil {
                map["ResourceType"] = self.resourceType!
            }
            if self.userId != nil {
                map["UserId"] = self.userId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["OperateList"] as? [String] {
                self.operateList = value
            }
            if let value = dict["Reason"] as? String {
                self.reason = value
            }
            if let value = dict["ResourceList"] as? [Any?] {
                var tmp : [RevokeResourcePermissionRequest.RevokeCommand.ResourceList] = []
                for v in value {
                    if v != nil {
                        var model = RevokeResourcePermissionRequest.RevokeCommand.ResourceList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.resourceList = tmp
            }
            if let value = dict["ResourceType"] as? String {
                self.resourceType = value
            }
            if let value = dict["UserId"] as? String {
                self.userId = value
            }
        }
    }
    public var opTenantId: Int64?

    public var revokeCommand: RevokeResourcePermissionRequest.RevokeCommand?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.revokeCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.revokeCommand != nil {
            map["RevokeCommand"] = self.revokeCommand?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["RevokeCommand"] as? [String: Any?] {
            var model = RevokeResourcePermissionRequest.RevokeCommand()
            model.fromMap(value)
            self.revokeCommand = model
        }
    }
}

public class RevokeResourcePermissionShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var revokeCommandShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.revokeCommandShrink != nil {
            map["RevokeCommand"] = self.revokeCommandShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["RevokeCommand"] as? String {
            self.revokeCommandShrink = value
        }
    }
}

public class RevokeResourcePermissionResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class RevokeResourcePermissionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RevokeResourcePermissionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RevokeResourcePermissionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class StopAdHocTaskRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var projectId: Int64?

    public var taskId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        if self.taskId != nil {
            map["TaskId"] = self.taskId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
        if let value = dict["TaskId"] as? String {
            self.taskId = value
        }
    }
}

public class StopAdHocTaskResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class StopAdHocTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: StopAdHocTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = StopAdHocTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SubmitBatchTaskRequest : Tea.TeaModel {
    public class SubmitCommand : Tea.TeaModel {
        public class CustomScheduleConfig : Tea.TeaModel {
            public var endTime: String?

            public var interval: Int32?

            public var intervalUnit: String?

            public var schedulePeriod: String?

            public var startTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endTime != nil {
                    map["EndTime"] = self.endTime!
                }
                if self.interval != nil {
                    map["Interval"] = self.interval!
                }
                if self.intervalUnit != nil {
                    map["IntervalUnit"] = self.intervalUnit!
                }
                if self.schedulePeriod != nil {
                    map["SchedulePeriod"] = self.schedulePeriod!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndTime"] as? String {
                    self.endTime = value
                }
                if let value = dict["Interval"] as? Int32 {
                    self.interval = value
                }
                if let value = dict["IntervalUnit"] as? String {
                    self.intervalUnit = value
                }
                if let value = dict["SchedulePeriod"] as? String {
                    self.schedulePeriod = value
                }
                if let value = dict["StartTime"] as? String {
                    self.startTime = value
                }
            }
        }
        public class ParamList : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public class SparkClientInfo : Tea.TeaModel {
            public var sparkClientVersion: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.sparkClientVersion != nil {
                    map["SparkClientVersion"] = self.sparkClientVersion!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["SparkClientVersion"] as? String {
                    self.sparkClientVersion = value
                }
            }
        }
        public class UpStreamList : Tea.TeaModel {
            public class DependPeriod : Tea.TeaModel {
                public var periodOffset: Int32?

                public var periodType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.periodOffset != nil {
                        map["PeriodOffset"] = self.periodOffset!
                    }
                    if self.periodType != nil {
                        map["PeriodType"] = self.periodType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["PeriodOffset"] as? Int32 {
                        self.periodOffset = value
                    }
                    if let value = dict["PeriodType"] as? String {
                        self.periodType = value
                    }
                }
            }
            public var dependPeriod: SubmitBatchTaskRequest.SubmitCommand.UpStreamList.DependPeriod?

            public var dependStrategy: String?

            public var fieldList: [String]?

            public var nodeType: String?

            public var periodDiff: Int32?

            public var sourceNodeEnabled: Bool?

            public var sourceNodeId: String?

            public var sourceNodeOutputName: String?

            public var sourceTableName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.dependPeriod?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.dependPeriod != nil {
                    map["DependPeriod"] = self.dependPeriod?.toMap()
                }
                if self.dependStrategy != nil {
                    map["DependStrategy"] = self.dependStrategy!
                }
                if self.fieldList != nil {
                    map["FieldList"] = self.fieldList!
                }
                if self.nodeType != nil {
                    map["NodeType"] = self.nodeType!
                }
                if self.periodDiff != nil {
                    map["PeriodDiff"] = self.periodDiff!
                }
                if self.sourceNodeEnabled != nil {
                    map["SourceNodeEnabled"] = self.sourceNodeEnabled!
                }
                if self.sourceNodeId != nil {
                    map["SourceNodeId"] = self.sourceNodeId!
                }
                if self.sourceNodeOutputName != nil {
                    map["SourceNodeOutputName"] = self.sourceNodeOutputName!
                }
                if self.sourceTableName != nil {
                    map["SourceTableName"] = self.sourceTableName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DependPeriod"] as? [String: Any?] {
                    var model = SubmitBatchTaskRequest.SubmitCommand.UpStreamList.DependPeriod()
                    model.fromMap(value)
                    self.dependPeriod = model
                }
                if let value = dict["DependStrategy"] as? String {
                    self.dependStrategy = value
                }
                if let value = dict["FieldList"] as? [String] {
                    self.fieldList = value
                }
                if let value = dict["NodeType"] as? String {
                    self.nodeType = value
                }
                if let value = dict["PeriodDiff"] as? Int32 {
                    self.periodDiff = value
                }
                if let value = dict["SourceNodeEnabled"] as? Bool {
                    self.sourceNodeEnabled = value
                }
                if let value = dict["SourceNodeId"] as? String {
                    self.sourceNodeId = value
                }
                if let value = dict["SourceNodeOutputName"] as? String {
                    self.sourceNodeOutputName = value
                }
                if let value = dict["SourceTableName"] as? String {
                    self.sourceTableName = value
                }
            }
        }
        public var code: String?

        public var comment: String?

        public var cronExpression: String?

        public var customScheduleConfig: SubmitBatchTaskRequest.SubmitCommand.CustomScheduleConfig?

        public var engine: String?

        public var fileId: Int64?

        public var name: String?

        public var nodeDescription: String?

        public var nodeOutputNameList: [String]?

        public var nodeStatus: Int32?

        public var paramList: [SubmitBatchTaskRequest.SubmitCommand.ParamList]?

        public var priority: Int32?

        public var projectId: Int64?

        public var pythonModuleList: [String]?

        public var schedulePeriod: String?

        public var sparkClientInfo: SubmitBatchTaskRequest.SubmitCommand.SparkClientInfo?

        public var upStreamList: [SubmitBatchTaskRequest.SubmitCommand.UpStreamList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.customScheduleConfig?.validate()
            try self.sparkClientInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.comment != nil {
                map["Comment"] = self.comment!
            }
            if self.cronExpression != nil {
                map["CronExpression"] = self.cronExpression!
            }
            if self.customScheduleConfig != nil {
                map["CustomScheduleConfig"] = self.customScheduleConfig?.toMap()
            }
            if self.engine != nil {
                map["Engine"] = self.engine!
            }
            if self.fileId != nil {
                map["FileId"] = self.fileId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.nodeDescription != nil {
                map["NodeDescription"] = self.nodeDescription!
            }
            if self.nodeOutputNameList != nil {
                map["NodeOutputNameList"] = self.nodeOutputNameList!
            }
            if self.nodeStatus != nil {
                map["NodeStatus"] = self.nodeStatus!
            }
            if self.paramList != nil {
                var tmp : [Any] = []
                for k in self.paramList! {
                    tmp.append(k.toMap())
                }
                map["ParamList"] = tmp
            }
            if self.priority != nil {
                map["Priority"] = self.priority!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            if self.pythonModuleList != nil {
                map["PythonModuleList"] = self.pythonModuleList!
            }
            if self.schedulePeriod != nil {
                map["SchedulePeriod"] = self.schedulePeriod!
            }
            if self.sparkClientInfo != nil {
                map["SparkClientInfo"] = self.sparkClientInfo?.toMap()
            }
            if self.upStreamList != nil {
                var tmp : [Any] = []
                for k in self.upStreamList! {
                    tmp.append(k.toMap())
                }
                map["UpStreamList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? String {
                self.code = value
            }
            if let value = dict["Comment"] as? String {
                self.comment = value
            }
            if let value = dict["CronExpression"] as? String {
                self.cronExpression = value
            }
            if let value = dict["CustomScheduleConfig"] as? [String: Any?] {
                var model = SubmitBatchTaskRequest.SubmitCommand.CustomScheduleConfig()
                model.fromMap(value)
                self.customScheduleConfig = model
            }
            if let value = dict["Engine"] as? String {
                self.engine = value
            }
            if let value = dict["FileId"] as? Int64 {
                self.fileId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NodeDescription"] as? String {
                self.nodeDescription = value
            }
            if let value = dict["NodeOutputNameList"] as? [String] {
                self.nodeOutputNameList = value
            }
            if let value = dict["NodeStatus"] as? Int32 {
                self.nodeStatus = value
            }
            if let value = dict["ParamList"] as? [Any?] {
                var tmp : [SubmitBatchTaskRequest.SubmitCommand.ParamList] = []
                for v in value {
                    if v != nil {
                        var model = SubmitBatchTaskRequest.SubmitCommand.ParamList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.paramList = tmp
            }
            if let value = dict["Priority"] as? Int32 {
                self.priority = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
            if let value = dict["PythonModuleList"] as? [String] {
                self.pythonModuleList = value
            }
            if let value = dict["SchedulePeriod"] as? String {
                self.schedulePeriod = value
            }
            if let value = dict["SparkClientInfo"] as? [String: Any?] {
                var model = SubmitBatchTaskRequest.SubmitCommand.SparkClientInfo()
                model.fromMap(value)
                self.sparkClientInfo = model
            }
            if let value = dict["UpStreamList"] as? [Any?] {
                var tmp : [SubmitBatchTaskRequest.SubmitCommand.UpStreamList] = []
                for v in value {
                    if v != nil {
                        var model = SubmitBatchTaskRequest.SubmitCommand.UpStreamList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.upStreamList = tmp
            }
        }
    }
    public var opTenantId: Int64?

    public var submitCommand: SubmitBatchTaskRequest.SubmitCommand?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.submitCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.submitCommand != nil {
            map["SubmitCommand"] = self.submitCommand?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["SubmitCommand"] as? [String: Any?] {
            var model = SubmitBatchTaskRequest.SubmitCommand()
            model.fromMap(value)
            self.submitCommand = model
        }
    }
}

public class SubmitBatchTaskShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var submitCommandShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.submitCommandShrink != nil {
            map["SubmitCommand"] = self.submitCommandShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["SubmitCommand"] as? String {
            self.submitCommandShrink = value
        }
    }
}

public class SubmitBatchTaskResponseBody : Tea.TeaModel {
    public class SubmitResult : Tea.TeaModel {
        public var nodeId: String?

        public var submitId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.nodeId != nil {
                map["NodeId"] = self.nodeId!
            }
            if self.submitId != nil {
                map["SubmitId"] = self.submitId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["NodeId"] as? String {
                self.nodeId = value
            }
            if let value = dict["SubmitId"] as? Int64 {
                self.submitId = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var submitResult: SubmitBatchTaskResponseBody.SubmitResult?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.submitResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.submitResult != nil {
            map["SubmitResult"] = self.submitResult?.toMap()
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SubmitResult"] as? [String: Any?] {
            var model = SubmitBatchTaskResponseBody.SubmitResult()
            model.fromMap(value)
            self.submitResult = model
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class SubmitBatchTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SubmitBatchTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SubmitBatchTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class TransferOwnershipForAllObjectRequest : Tea.TeaModel {
    public class PrivilegeTransferRecord : Tea.TeaModel {
        public var newOwner: String?

        public var oldOwner: String?

        public var transferComment: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.newOwner != nil {
                map["NewOwner"] = self.newOwner!
            }
            if self.oldOwner != nil {
                map["OldOwner"] = self.oldOwner!
            }
            if self.transferComment != nil {
                map["TransferComment"] = self.transferComment!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["NewOwner"] as? String {
                self.newOwner = value
            }
            if let value = dict["OldOwner"] as? String {
                self.oldOwner = value
            }
            if let value = dict["TransferComment"] as? String {
                self.transferComment = value
            }
        }
    }
    public var opTenantId: Int64?

    public var privilegeTransferRecord: TransferOwnershipForAllObjectRequest.PrivilegeTransferRecord?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.privilegeTransferRecord?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.privilegeTransferRecord != nil {
            map["PrivilegeTransferRecord"] = self.privilegeTransferRecord?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["PrivilegeTransferRecord"] as? [String: Any?] {
            var model = TransferOwnershipForAllObjectRequest.PrivilegeTransferRecord()
            model.fromMap(value)
            self.privilegeTransferRecord = model
        }
    }
}

public class TransferOwnershipForAllObjectShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var privilegeTransferRecordShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.privilegeTransferRecordShrink != nil {
            map["PrivilegeTransferRecord"] = self.privilegeTransferRecordShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["PrivilegeTransferRecord"] as? String {
            self.privilegeTransferRecordShrink = value
        }
    }
}

public class TransferOwnershipForAllObjectResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Int64?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Int64 {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class TransferOwnershipForAllObjectResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TransferOwnershipForAllObjectResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = TransferOwnershipForAllObjectResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateAdHocFileRequest : Tea.TeaModel {
    public class UpdateCommand : Tea.TeaModel {
        public var content: String?

        public var fileId: Int64?

        public var projectId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.content != nil {
                map["Content"] = self.content!
            }
            if self.fileId != nil {
                map["FileId"] = self.fileId!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Content"] as? String {
                self.content = value
            }
            if let value = dict["FileId"] as? Int64 {
                self.fileId = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
        }
    }
    public var opTenantId: Int64?

    public var updateCommand: UpdateAdHocFileRequest.UpdateCommand?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.updateCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommand != nil {
            map["UpdateCommand"] = self.updateCommand?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? [String: Any?] {
            var model = UpdateAdHocFileRequest.UpdateCommand()
            model.fromMap(value)
            self.updateCommand = model
        }
    }
}

public class UpdateAdHocFileShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var updateCommandShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommandShrink != nil {
            map["UpdateCommand"] = self.updateCommandShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? String {
            self.updateCommandShrink = value
        }
    }
}

public class UpdateAdHocFileResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateAdHocFileResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateAdHocFileResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateAdHocFileResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateBatchTaskRequest : Tea.TeaModel {
    public class UpdateCommand : Tea.TeaModel {
        public class CustomScheduleConfig : Tea.TeaModel {
            public var endTime: String?

            public var interval: Int32?

            public var intervalUnit: String?

            public var schedulePeriod: String?

            public var startTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.endTime != nil {
                    map["EndTime"] = self.endTime!
                }
                if self.interval != nil {
                    map["Interval"] = self.interval!
                }
                if self.intervalUnit != nil {
                    map["IntervalUnit"] = self.intervalUnit!
                }
                if self.schedulePeriod != nil {
                    map["SchedulePeriod"] = self.schedulePeriod!
                }
                if self.startTime != nil {
                    map["StartTime"] = self.startTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EndTime"] as? String {
                    self.endTime = value
                }
                if let value = dict["Interval"] as? Int32 {
                    self.interval = value
                }
                if let value = dict["IntervalUnit"] as? String {
                    self.intervalUnit = value
                }
                if let value = dict["SchedulePeriod"] as? String {
                    self.schedulePeriod = value
                }
                if let value = dict["StartTime"] as? String {
                    self.startTime = value
                }
            }
        }
        public class ParamList : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public class SparkClientInfo : Tea.TeaModel {
            public var sparkClientVersion: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.sparkClientVersion != nil {
                    map["SparkClientVersion"] = self.sparkClientVersion!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["SparkClientVersion"] as? String {
                    self.sparkClientVersion = value
                }
            }
        }
        public class UpStreamList : Tea.TeaModel {
            public class DependPeriod : Tea.TeaModel {
                public var periodOffset: Int32?

                public var periodType: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.periodOffset != nil {
                        map["PeriodOffset"] = self.periodOffset!
                    }
                    if self.periodType != nil {
                        map["PeriodType"] = self.periodType!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["PeriodOffset"] as? Int32 {
                        self.periodOffset = value
                    }
                    if let value = dict["PeriodType"] as? String {
                        self.periodType = value
                    }
                }
            }
            public var dependPeriod: UpdateBatchTaskRequest.UpdateCommand.UpStreamList.DependPeriod?

            public var dependStrategy: String?

            public var fieldList: [String]?

            public var nodeType: String?

            public var periodDiff: Int32?

            public var sourceNodeEnabled: Bool?

            public var sourceNodeId: String?

            public var sourceNodeOutputName: String?

            public var sourceTableName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.dependPeriod?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.dependPeriod != nil {
                    map["DependPeriod"] = self.dependPeriod?.toMap()
                }
                if self.dependStrategy != nil {
                    map["DependStrategy"] = self.dependStrategy!
                }
                if self.fieldList != nil {
                    map["FieldList"] = self.fieldList!
                }
                if self.nodeType != nil {
                    map["NodeType"] = self.nodeType!
                }
                if self.periodDiff != nil {
                    map["PeriodDiff"] = self.periodDiff!
                }
                if self.sourceNodeEnabled != nil {
                    map["SourceNodeEnabled"] = self.sourceNodeEnabled!
                }
                if self.sourceNodeId != nil {
                    map["SourceNodeId"] = self.sourceNodeId!
                }
                if self.sourceNodeOutputName != nil {
                    map["SourceNodeOutputName"] = self.sourceNodeOutputName!
                }
                if self.sourceTableName != nil {
                    map["SourceTableName"] = self.sourceTableName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DependPeriod"] as? [String: Any?] {
                    var model = UpdateBatchTaskRequest.UpdateCommand.UpStreamList.DependPeriod()
                    model.fromMap(value)
                    self.dependPeriod = model
                }
                if let value = dict["DependStrategy"] as? String {
                    self.dependStrategy = value
                }
                if let value = dict["FieldList"] as? [String] {
                    self.fieldList = value
                }
                if let value = dict["NodeType"] as? String {
                    self.nodeType = value
                }
                if let value = dict["PeriodDiff"] as? Int32 {
                    self.periodDiff = value
                }
                if let value = dict["SourceNodeEnabled"] as? Bool {
                    self.sourceNodeEnabled = value
                }
                if let value = dict["SourceNodeId"] as? String {
                    self.sourceNodeId = value
                }
                if let value = dict["SourceNodeOutputName"] as? String {
                    self.sourceNodeOutputName = value
                }
                if let value = dict["SourceTableName"] as? String {
                    self.sourceTableName = value
                }
            }
        }
        public var code: String?

        public var cronExpression: String?

        public var customScheduleConfig: UpdateBatchTaskRequest.UpdateCommand.CustomScheduleConfig?

        public var dataSourceCatalog: String?

        public var dataSourceId: String?

        public var dataSourceSchema: String?

        public var engine: String?

        public var fileId: Int64?

        public var name: String?

        public var nodeDescription: String?

        public var nodeOutputNameList: [String]?

        public var nodeStatus: Int32?

        public var paramList: [UpdateBatchTaskRequest.UpdateCommand.ParamList]?

        public var priority: Int32?

        public var projectId: Int64?

        public var pythonModuleList: [String]?

        public var schedulePeriod: String?

        public var sparkClientInfo: UpdateBatchTaskRequest.UpdateCommand.SparkClientInfo?

        public var taskType: Int32?

        public var upStreamList: [UpdateBatchTaskRequest.UpdateCommand.UpStreamList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.customScheduleConfig?.validate()
            try self.sparkClientInfo?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.code != nil {
                map["Code"] = self.code!
            }
            if self.cronExpression != nil {
                map["CronExpression"] = self.cronExpression!
            }
            if self.customScheduleConfig != nil {
                map["CustomScheduleConfig"] = self.customScheduleConfig?.toMap()
            }
            if self.dataSourceCatalog != nil {
                map["DataSourceCatalog"] = self.dataSourceCatalog!
            }
            if self.dataSourceId != nil {
                map["DataSourceId"] = self.dataSourceId!
            }
            if self.dataSourceSchema != nil {
                map["DataSourceSchema"] = self.dataSourceSchema!
            }
            if self.engine != nil {
                map["Engine"] = self.engine!
            }
            if self.fileId != nil {
                map["FileId"] = self.fileId!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.nodeDescription != nil {
                map["NodeDescription"] = self.nodeDescription!
            }
            if self.nodeOutputNameList != nil {
                map["NodeOutputNameList"] = self.nodeOutputNameList!
            }
            if self.nodeStatus != nil {
                map["NodeStatus"] = self.nodeStatus!
            }
            if self.paramList != nil {
                var tmp : [Any] = []
                for k in self.paramList! {
                    tmp.append(k.toMap())
                }
                map["ParamList"] = tmp
            }
            if self.priority != nil {
                map["Priority"] = self.priority!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            if self.pythonModuleList != nil {
                map["PythonModuleList"] = self.pythonModuleList!
            }
            if self.schedulePeriod != nil {
                map["SchedulePeriod"] = self.schedulePeriod!
            }
            if self.sparkClientInfo != nil {
                map["SparkClientInfo"] = self.sparkClientInfo?.toMap()
            }
            if self.taskType != nil {
                map["TaskType"] = self.taskType!
            }
            if self.upStreamList != nil {
                var tmp : [Any] = []
                for k in self.upStreamList! {
                    tmp.append(k.toMap())
                }
                map["UpStreamList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Code"] as? String {
                self.code = value
            }
            if let value = dict["CronExpression"] as? String {
                self.cronExpression = value
            }
            if let value = dict["CustomScheduleConfig"] as? [String: Any?] {
                var model = UpdateBatchTaskRequest.UpdateCommand.CustomScheduleConfig()
                model.fromMap(value)
                self.customScheduleConfig = model
            }
            if let value = dict["DataSourceCatalog"] as? String {
                self.dataSourceCatalog = value
            }
            if let value = dict["DataSourceId"] as? String {
                self.dataSourceId = value
            }
            if let value = dict["DataSourceSchema"] as? String {
                self.dataSourceSchema = value
            }
            if let value = dict["Engine"] as? String {
                self.engine = value
            }
            if let value = dict["FileId"] as? Int64 {
                self.fileId = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["NodeDescription"] as? String {
                self.nodeDescription = value
            }
            if let value = dict["NodeOutputNameList"] as? [String] {
                self.nodeOutputNameList = value
            }
            if let value = dict["NodeStatus"] as? Int32 {
                self.nodeStatus = value
            }
            if let value = dict["ParamList"] as? [Any?] {
                var tmp : [UpdateBatchTaskRequest.UpdateCommand.ParamList] = []
                for v in value {
                    if v != nil {
                        var model = UpdateBatchTaskRequest.UpdateCommand.ParamList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.paramList = tmp
            }
            if let value = dict["Priority"] as? Int32 {
                self.priority = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
            if let value = dict["PythonModuleList"] as? [String] {
                self.pythonModuleList = value
            }
            if let value = dict["SchedulePeriod"] as? String {
                self.schedulePeriod = value
            }
            if let value = dict["SparkClientInfo"] as? [String: Any?] {
                var model = UpdateBatchTaskRequest.UpdateCommand.SparkClientInfo()
                model.fromMap(value)
                self.sparkClientInfo = model
            }
            if let value = dict["TaskType"] as? Int32 {
                self.taskType = value
            }
            if let value = dict["UpStreamList"] as? [Any?] {
                var tmp : [UpdateBatchTaskRequest.UpdateCommand.UpStreamList] = []
                for v in value {
                    if v != nil {
                        var model = UpdateBatchTaskRequest.UpdateCommand.UpStreamList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.upStreamList = tmp
            }
        }
    }
    public var opTenantId: Int64?

    public var updateCommand: UpdateBatchTaskRequest.UpdateCommand?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.updateCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommand != nil {
            map["UpdateCommand"] = self.updateCommand?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? [String: Any?] {
            var model = UpdateBatchTaskRequest.UpdateCommand()
            model.fromMap(value)
            self.updateCommand = model
        }
    }
}

public class UpdateBatchTaskShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var updateCommandShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommandShrink != nil {
            map["UpdateCommand"] = self.updateCommandShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? String {
            self.updateCommandShrink = value
        }
    }
}

public class UpdateBatchTaskResponseBody : Tea.TeaModel {
    public class UpdateResult : Tea.TeaModel {
        public var fileId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fileId != nil {
                map["FileId"] = self.fileId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FileId"] as? Int64 {
                self.fileId = value
            }
        }
    }
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public var updateResult: UpdateBatchTaskResponseBody.UpdateResult?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.updateResult?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        if self.updateResult != nil {
            map["UpdateResult"] = self.updateResult?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
        if let value = dict["UpdateResult"] as? [String: Any?] {
            var model = UpdateBatchTaskResponseBody.UpdateResult()
            model.fromMap(value)
            self.updateResult = model
        }
    }
}

public class UpdateBatchTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateBatchTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateBatchTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateBatchTaskUdfLineagesRequest : Tea.TeaModel {
    public class UpdateCommand : Tea.TeaModel {
        public class LineageGroupList : Tea.TeaModel {
            public class InputLineageList : Tea.TeaModel {
                public var columnList: [String]?

                public var env: String?

                public var fullTable: Bool?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.columnList != nil {
                        map["ColumnList"] = self.columnList!
                    }
                    if self.env != nil {
                        map["Env"] = self.env!
                    }
                    if self.fullTable != nil {
                        map["FullTable"] = self.fullTable!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ColumnList"] as? [String] {
                        self.columnList = value
                    }
                    if let value = dict["Env"] as? String {
                        self.env = value
                    }
                    if let value = dict["FullTable"] as? Bool {
                        self.fullTable = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public class OutputLineageList : Tea.TeaModel {
                public var columnList: [String]?

                public var env: String?

                public var fullTable: Bool?

                public var name: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.columnList != nil {
                        map["ColumnList"] = self.columnList!
                    }
                    if self.env != nil {
                        map["Env"] = self.env!
                    }
                    if self.fullTable != nil {
                        map["FullTable"] = self.fullTable!
                    }
                    if self.name != nil {
                        map["Name"] = self.name!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["ColumnList"] as? [String] {
                        self.columnList = value
                    }
                    if let value = dict["Env"] as? String {
                        self.env = value
                    }
                    if let value = dict["FullTable"] as? Bool {
                        self.fullTable = value
                    }
                    if let value = dict["Name"] as? String {
                        self.name = value
                    }
                }
            }
            public var inputLineageList: [UpdateBatchTaskUdfLineagesRequest.UpdateCommand.LineageGroupList.InputLineageList]?

            public var outputLineageList: [UpdateBatchTaskUdfLineagesRequest.UpdateCommand.LineageGroupList.OutputLineageList]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.inputLineageList != nil {
                    var tmp : [Any] = []
                    for k in self.inputLineageList! {
                        tmp.append(k.toMap())
                    }
                    map["InputLineageList"] = tmp
                }
                if self.outputLineageList != nil {
                    var tmp : [Any] = []
                    for k in self.outputLineageList! {
                        tmp.append(k.toMap())
                    }
                    map["OutputLineageList"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InputLineageList"] as? [Any?] {
                    var tmp : [UpdateBatchTaskUdfLineagesRequest.UpdateCommand.LineageGroupList.InputLineageList] = []
                    for v in value {
                        if v != nil {
                            var model = UpdateBatchTaskUdfLineagesRequest.UpdateCommand.LineageGroupList.InputLineageList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.inputLineageList = tmp
                }
                if let value = dict["OutputLineageList"] as? [Any?] {
                    var tmp : [UpdateBatchTaskUdfLineagesRequest.UpdateCommand.LineageGroupList.OutputLineageList] = []
                    for v in value {
                        if v != nil {
                            var model = UpdateBatchTaskUdfLineagesRequest.UpdateCommand.LineageGroupList.OutputLineageList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.outputLineageList = tmp
                }
            }
        }
        public var fileId: Int64?

        public var lineageGroupList: [UpdateBatchTaskUdfLineagesRequest.UpdateCommand.LineageGroupList]?

        public var projectId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.fileId != nil {
                map["FileId"] = self.fileId!
            }
            if self.lineageGroupList != nil {
                var tmp : [Any] = []
                for k in self.lineageGroupList! {
                    tmp.append(k.toMap())
                }
                map["LineageGroupList"] = tmp
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FileId"] as? Int64 {
                self.fileId = value
            }
            if let value = dict["LineageGroupList"] as? [Any?] {
                var tmp : [UpdateBatchTaskUdfLineagesRequest.UpdateCommand.LineageGroupList] = []
                for v in value {
                    if v != nil {
                        var model = UpdateBatchTaskUdfLineagesRequest.UpdateCommand.LineageGroupList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.lineageGroupList = tmp
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
        }
    }
    public var opTenantId: Int64?

    public var updateCommand: UpdateBatchTaskUdfLineagesRequest.UpdateCommand?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.updateCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommand != nil {
            map["UpdateCommand"] = self.updateCommand?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? [String: Any?] {
            var model = UpdateBatchTaskUdfLineagesRequest.UpdateCommand()
            model.fromMap(value)
            self.updateCommand = model
        }
    }
}

public class UpdateBatchTaskUdfLineagesShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var updateCommandShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommandShrink != nil {
            map["UpdateCommand"] = self.updateCommandShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? String {
            self.updateCommandShrink = value
        }
    }
}

public class UpdateBatchTaskUdfLineagesResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateBatchTaskUdfLineagesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateBatchTaskUdfLineagesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateBatchTaskUdfLineagesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateBizEntityRequest : Tea.TeaModel {
    public class UpdateCommand : Tea.TeaModel {
        public class BizObject : Tea.TeaModel {
            public var description_: String?

            public var displayName: String?

            public var name: String?

            public var ownerUserId: String?

            public var parentId: Int64?

            public var refBizEntityIdList: [Int64]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.ownerUserId != nil {
                    map["OwnerUserId"] = self.ownerUserId!
                }
                if self.parentId != nil {
                    map["ParentId"] = self.parentId!
                }
                if self.refBizEntityIdList != nil {
                    map["RefBizEntityIdList"] = self.refBizEntityIdList!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["OwnerUserId"] as? String {
                    self.ownerUserId = value
                }
                if let value = dict["ParentId"] as? Int64 {
                    self.parentId = value
                }
                if let value = dict["RefBizEntityIdList"] as? [Int64] {
                    self.refBizEntityIdList = value
                }
            }
        }
        public class BizProcess : Tea.TeaModel {
            public var bizEventEntityIdList: [Int64]?

            public var description_: String?

            public var displayName: String?

            public var name: String?

            public var ownerUserId: String?

            public var preBizProcessIdList: [Int64]?

            public var refBizEntityIdList: [Int64]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bizEventEntityIdList != nil {
                    map["BizEventEntityIdList"] = self.bizEventEntityIdList!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.displayName != nil {
                    map["DisplayName"] = self.displayName!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.ownerUserId != nil {
                    map["OwnerUserId"] = self.ownerUserId!
                }
                if self.preBizProcessIdList != nil {
                    map["PreBizProcessIdList"] = self.preBizProcessIdList!
                }
                if self.refBizEntityIdList != nil {
                    map["RefBizEntityIdList"] = self.refBizEntityIdList!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BizEventEntityIdList"] as? [Int64] {
                    self.bizEventEntityIdList = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DisplayName"] as? String {
                    self.displayName = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["OwnerUserId"] as? String {
                    self.ownerUserId = value
                }
                if let value = dict["PreBizProcessIdList"] as? [Int64] {
                    self.preBizProcessIdList = value
                }
                if let value = dict["RefBizEntityIdList"] as? [Int64] {
                    self.refBizEntityIdList = value
                }
            }
        }
        public var bizObject: UpdateBizEntityRequest.UpdateCommand.BizObject?

        public var bizProcess: UpdateBizEntityRequest.UpdateCommand.BizProcess?

        public var bizUnitId: Int64?

        public var dataDomainId: Int64?

        public var id: Int64?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.bizObject?.validate()
            try self.bizProcess?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bizObject != nil {
                map["BizObject"] = self.bizObject?.toMap()
            }
            if self.bizProcess != nil {
                map["BizProcess"] = self.bizProcess?.toMap()
            }
            if self.bizUnitId != nil {
                map["BizUnitId"] = self.bizUnitId!
            }
            if self.dataDomainId != nil {
                map["DataDomainId"] = self.dataDomainId!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BizObject"] as? [String: Any?] {
                var model = UpdateBizEntityRequest.UpdateCommand.BizObject()
                model.fromMap(value)
                self.bizObject = model
            }
            if let value = dict["BizProcess"] as? [String: Any?] {
                var model = UpdateBizEntityRequest.UpdateCommand.BizProcess()
                model.fromMap(value)
                self.bizProcess = model
            }
            if let value = dict["BizUnitId"] as? Int64 {
                self.bizUnitId = value
            }
            if let value = dict["DataDomainId"] as? Int64 {
                self.dataDomainId = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var opTenantId: Int64?

    public var updateCommand: UpdateBizEntityRequest.UpdateCommand?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.updateCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommand != nil {
            map["UpdateCommand"] = self.updateCommand?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? [String: Any?] {
            var model = UpdateBizEntityRequest.UpdateCommand()
            model.fromMap(value)
            self.updateCommand = model
        }
    }
}

public class UpdateBizEntityShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var updateCommandShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommandShrink != nil {
            map["UpdateCommand"] = self.updateCommandShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? String {
            self.updateCommandShrink = value
        }
    }
}

public class UpdateBizEntityResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateBizEntityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateBizEntityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateBizEntityResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateBizUnitRequest : Tea.TeaModel {
    public class UpdateCommand : Tea.TeaModel {
        public class BizUnitAccountList : Tea.TeaModel {
            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public var bizUnitAccountList: [UpdateBizUnitRequest.UpdateCommand.BizUnitAccountList]?

        public var bizUnitId: Int64?

        public var description_: String?

        public var displayName: String?

        public var icon: String?

        public var name: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bizUnitAccountList != nil {
                var tmp : [Any] = []
                for k in self.bizUnitAccountList! {
                    tmp.append(k.toMap())
                }
                map["BizUnitAccountList"] = tmp
            }
            if self.bizUnitId != nil {
                map["BizUnitId"] = self.bizUnitId!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.icon != nil {
                map["Icon"] = self.icon!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BizUnitAccountList"] as? [Any?] {
                var tmp : [UpdateBizUnitRequest.UpdateCommand.BizUnitAccountList] = []
                for v in value {
                    if v != nil {
                        var model = UpdateBizUnitRequest.UpdateCommand.BizUnitAccountList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.bizUnitAccountList = tmp
            }
            if let value = dict["BizUnitId"] as? Int64 {
                self.bizUnitId = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["Icon"] as? String {
                self.icon = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
        }
    }
    public var opTenantId: Int64?

    public var updateCommand: UpdateBizUnitRequest.UpdateCommand?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.updateCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommand != nil {
            map["UpdateCommand"] = self.updateCommand?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? [String: Any?] {
            var model = UpdateBizUnitRequest.UpdateCommand()
            model.fromMap(value)
            self.updateCommand = model
        }
    }
}

public class UpdateBizUnitShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var updateCommandShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommandShrink != nil {
            map["UpdateCommand"] = self.updateCommandShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? String {
            self.updateCommandShrink = value
        }
    }
}

public class UpdateBizUnitResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateBizUnitResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateBizUnitResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateBizUnitResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateComputeSourceRequest : Tea.TeaModel {
    public class UpdateCommand : Tea.TeaModel {
        public class ConfigList : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var configList: [UpdateComputeSourceRequest.UpdateCommand.ConfigList]?

        public var description_: String?

        public var id: Int64?

        public var name: String?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.configList != nil {
                var tmp : [Any] = []
                for k in self.configList! {
                    tmp.append(k.toMap())
                }
                map["ConfigList"] = tmp
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConfigList"] as? [Any?] {
                var tmp : [UpdateComputeSourceRequest.UpdateCommand.ConfigList] = []
                for v in value {
                    if v != nil {
                        var model = UpdateComputeSourceRequest.UpdateCommand.ConfigList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.configList = tmp
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var opTenantId: Int64?

    public var updateCommand: UpdateComputeSourceRequest.UpdateCommand?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.updateCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommand != nil {
            map["UpdateCommand"] = self.updateCommand?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? [String: Any?] {
            var model = UpdateComputeSourceRequest.UpdateCommand()
            model.fromMap(value)
            self.updateCommand = model
        }
    }
}

public class UpdateComputeSourceShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var updateCommandShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommandShrink != nil {
            map["UpdateCommand"] = self.updateCommandShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? String {
            self.updateCommandShrink = value
        }
    }
}

public class UpdateComputeSourceResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateComputeSourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateComputeSourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateComputeSourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateDataDomainRequest : Tea.TeaModel {
    public class UpdateCommand : Tea.TeaModel {
        public var abbreviation: String?

        public var bizUnitId: Int64?

        public var dataDomainId: Int64?

        public var description_: String?

        public var displayName: String?

        public var name: String?

        public var parentId: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.abbreviation != nil {
                map["Abbreviation"] = self.abbreviation!
            }
            if self.bizUnitId != nil {
                map["BizUnitId"] = self.bizUnitId!
            }
            if self.dataDomainId != nil {
                map["DataDomainId"] = self.dataDomainId!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.displayName != nil {
                map["DisplayName"] = self.displayName!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.parentId != nil {
                map["ParentId"] = self.parentId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Abbreviation"] as? String {
                self.abbreviation = value
            }
            if let value = dict["BizUnitId"] as? Int64 {
                self.bizUnitId = value
            }
            if let value = dict["DataDomainId"] as? Int64 {
                self.dataDomainId = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["DisplayName"] as? String {
                self.displayName = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["ParentId"] as? Int64 {
                self.parentId = value
            }
        }
    }
    public var opTenantId: Int64?

    public var updateCommand: UpdateDataDomainRequest.UpdateCommand?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.updateCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommand != nil {
            map["UpdateCommand"] = self.updateCommand?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? [String: Any?] {
            var model = UpdateDataDomainRequest.UpdateCommand()
            model.fromMap(value)
            self.updateCommand = model
        }
    }
}

public class UpdateDataDomainShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var updateCommandShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommandShrink != nil {
            map["UpdateCommand"] = self.updateCommandShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? String {
            self.updateCommandShrink = value
        }
    }
}

public class UpdateDataDomainResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateDataDomainResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateDataDomainResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateDataDomainResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateDataSourceBasicInfoRequest : Tea.TeaModel {
    public class UpdateCommand : Tea.TeaModel {
        public var description_: String?

        public var id: Int64?

        public var name: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
        }
    }
    public var opTenantId: Int64?

    public var updateCommand: UpdateDataSourceBasicInfoRequest.UpdateCommand?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.updateCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommand != nil {
            map["UpdateCommand"] = self.updateCommand?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? [String: Any?] {
            var model = UpdateDataSourceBasicInfoRequest.UpdateCommand()
            model.fromMap(value)
            self.updateCommand = model
        }
    }
}

public class UpdateDataSourceBasicInfoShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var updateCommandShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommandShrink != nil {
            map["UpdateCommand"] = self.updateCommandShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? String {
            self.updateCommandShrink = value
        }
    }
}

public class UpdateDataSourceBasicInfoResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateDataSourceBasicInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateDataSourceBasicInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateDataSourceBasicInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateDataSourceConfigRequest : Tea.TeaModel {
    public class UpdateCommand : Tea.TeaModel {
        public class ConfigItemList : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var configItemList: [UpdateDataSourceConfigRequest.UpdateCommand.ConfigItemList]?

        public var id: Int64?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.configItemList != nil {
                var tmp : [Any] = []
                for k in self.configItemList! {
                    tmp.append(k.toMap())
                }
                map["ConfigItemList"] = tmp
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConfigItemList"] as? [Any?] {
                var tmp : [UpdateDataSourceConfigRequest.UpdateCommand.ConfigItemList] = []
                for v in value {
                    if v != nil {
                        var model = UpdateDataSourceConfigRequest.UpdateCommand.ConfigItemList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.configItemList = tmp
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
        }
    }
    public var opTenantId: Int64?

    public var updateCommand: UpdateDataSourceConfigRequest.UpdateCommand?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.updateCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommand != nil {
            map["UpdateCommand"] = self.updateCommand?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? [String: Any?] {
            var model = UpdateDataSourceConfigRequest.UpdateCommand()
            model.fromMap(value)
            self.updateCommand = model
        }
    }
}

public class UpdateDataSourceConfigShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var updateCommandShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommandShrink != nil {
            map["UpdateCommand"] = self.updateCommandShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? String {
            self.updateCommandShrink = value
        }
    }
}

public class UpdateDataSourceConfigResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateDataSourceConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateDataSourceConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateDataSourceConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateFileDirectoryRequest : Tea.TeaModel {
    public var directory: String?

    public var fileId: Int64?

    public var opTenantId: Int64?

    public var projectId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.directory != nil {
            map["Directory"] = self.directory!
        }
        if self.fileId != nil {
            map["FileId"] = self.fileId!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Directory"] as? String {
            self.directory = value
        }
        if let value = dict["FileId"] as? Int64 {
            self.fileId = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
    }
}

public class UpdateFileDirectoryResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateFileDirectoryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateFileDirectoryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateFileDirectoryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateFileNameRequest : Tea.TeaModel {
    public var fileId: Int64?

    public var name: String?

    public var opTenantId: Int64?

    public var projectId: Int64?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.fileId != nil {
            map["FileId"] = self.fileId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.projectId != nil {
            map["ProjectId"] = self.projectId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["FileId"] as? Int64 {
            self.fileId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["ProjectId"] as? Int64 {
            self.projectId = value
        }
    }
}

public class UpdateFileNameResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateFileNameResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateFileNameResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateFileNameResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateProjectMemberRequest : Tea.TeaModel {
    public class UpdateCommand : Tea.TeaModel {
        public class UserList : Tea.TeaModel {
            public var roleList: [Int32]?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.roleList != nil {
                    map["RoleList"] = self.roleList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["RoleList"] as? [Int32] {
                    self.roleList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public var env: String?

        public var userList: [UpdateProjectMemberRequest.UpdateCommand.UserList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.env != nil {
                map["Env"] = self.env!
            }
            if self.userList != nil {
                var tmp : [Any] = []
                for k in self.userList! {
                    tmp.append(k.toMap())
                }
                map["UserList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Env"] as? String {
                self.env = value
            }
            if let value = dict["UserList"] as? [Any?] {
                var tmp : [UpdateProjectMemberRequest.UpdateCommand.UserList] = []
                for v in value {
                    if v != nil {
                        var model = UpdateProjectMemberRequest.UpdateCommand.UserList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.userList = tmp
            }
        }
    }
    public var id: Int64?

    public var opTenantId: Int64?

    public var updateCommand: UpdateProjectMemberRequest.UpdateCommand?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.updateCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommand != nil {
            map["UpdateCommand"] = self.updateCommand?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? [String: Any?] {
            var model = UpdateProjectMemberRequest.UpdateCommand()
            model.fromMap(value)
            self.updateCommand = model
        }
    }
}

public class UpdateProjectMemberShrinkRequest : Tea.TeaModel {
    public var id: Int64?

    public var opTenantId: Int64?

    public var updateCommandShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.id != nil {
            map["Id"] = self.id!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommandShrink != nil {
            map["UpdateCommand"] = self.updateCommandShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Id"] as? Int64 {
            self.id = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? String {
            self.updateCommandShrink = value
        }
    }
}

public class UpdateProjectMemberResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateProjectMemberResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateProjectMemberResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateProjectMemberResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateResourceRequest : Tea.TeaModel {
    public class UpdateCommand : Tea.TeaModel {
        public var comment: String?

        public var computeEngineType: String?

        public var description_: String?

        public var id: Int64?

        public var name: String?

        public var projectId: Int64?

        public var storageAddress: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.comment != nil {
                map["Comment"] = self.comment!
            }
            if self.computeEngineType != nil {
                map["ComputeEngineType"] = self.computeEngineType!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            if self.storageAddress != nil {
                map["StorageAddress"] = self.storageAddress!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Comment"] as? String {
                self.comment = value
            }
            if let value = dict["ComputeEngineType"] as? String {
                self.computeEngineType = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
            if let value = dict["StorageAddress"] as? String {
                self.storageAddress = value
            }
        }
    }
    public var opTenantId: Int64?

    public var updateCommand: UpdateResourceRequest.UpdateCommand?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.updateCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommand != nil {
            map["UpdateCommand"] = self.updateCommand?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? [String: Any?] {
            var model = UpdateResourceRequest.UpdateCommand()
            model.fromMap(value)
            self.updateCommand = model
        }
    }
}

public class UpdateResourceShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var updateCommandShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommandShrink != nil {
            map["UpdateCommand"] = self.updateCommandShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? String {
            self.updateCommandShrink = value
        }
    }
}

public class UpdateResourceResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateResourceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateResourceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateResourceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateRowPermissionRequest : Tea.TeaModel {
    public class UpdateRowPermissionCommand : Tea.TeaModel {
        public class MappingColumns : Tea.TeaModel {
            public var columnDesc: String?

            public var columnName: String?

            public var columnType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.columnDesc != nil {
                    map["ColumnDesc"] = self.columnDesc!
                }
                if self.columnName != nil {
                    map["ColumnName"] = self.columnName!
                }
                if self.columnType != nil {
                    map["ColumnType"] = self.columnType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ColumnDesc"] as? String {
                    self.columnDesc = value
                }
                if let value = dict["ColumnName"] as? String {
                    self.columnName = value
                }
                if let value = dict["ColumnType"] as? String {
                    self.columnType = value
                }
            }
        }
        public class Rules : Tea.TeaModel {
            public class Expressions : Tea.TeaModel {
                public var mappingColumnName: String?

                public var operator_: String?

                public var subConditions: [Any]?

                public var type: String?

                public var values: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.mappingColumnName != nil {
                        map["MappingColumnName"] = self.mappingColumnName!
                    }
                    if self.operator_ != nil {
                        map["Operator"] = self.operator_!
                    }
                    if self.subConditions != nil {
                        map["SubConditions"] = self.subConditions!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    if self.values != nil {
                        map["Values"] = self.values!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["MappingColumnName"] as? String {
                        self.mappingColumnName = value
                    }
                    if let value = dict["Operator"] as? String {
                        self.operator_ = value
                    }
                    if let value = dict["SubConditions"] as? [Any] {
                        self.subConditions = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                    if let value = dict["Values"] as? [String] {
                        self.values = value
                    }
                }
            }
            public class UserMappingList : Tea.TeaModel {
                public class Accounts : Tea.TeaModel {
                    public var accountId: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.accountId != nil {
                            map["AccountId"] = self.accountId!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["AccountId"] as? String {
                            self.accountId = value
                        }
                    }
                }
                public var accountType: String?

                public var accounts: [UpdateRowPermissionRequest.UpdateRowPermissionCommand.Rules.UserMappingList.Accounts]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.accountType != nil {
                        map["AccountType"] = self.accountType!
                    }
                    if self.accounts != nil {
                        var tmp : [Any] = []
                        for k in self.accounts! {
                            tmp.append(k.toMap())
                        }
                        map["Accounts"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["AccountType"] as? String {
                        self.accountType = value
                    }
                    if let value = dict["Accounts"] as? [Any?] {
                        var tmp : [UpdateRowPermissionRequest.UpdateRowPermissionCommand.Rules.UserMappingList.Accounts] = []
                        for v in value {
                            if v != nil {
                                var model = UpdateRowPermissionRequest.UpdateRowPermissionCommand.Rules.UserMappingList.Accounts()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.accounts = tmp
                    }
                }
            }
            public var expressions: [UpdateRowPermissionRequest.UpdateRowPermissionCommand.Rules.Expressions]?

            public var isDelete: Bool?

            public var ruleName: String?

            public var scopeType: String?

            public var status: Int32?

            public var userMappingList: [UpdateRowPermissionRequest.UpdateRowPermissionCommand.Rules.UserMappingList]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.expressions != nil {
                    var tmp : [Any] = []
                    for k in self.expressions! {
                        tmp.append(k.toMap())
                    }
                    map["Expressions"] = tmp
                }
                if self.isDelete != nil {
                    map["IsDelete"] = self.isDelete!
                }
                if self.ruleName != nil {
                    map["RuleName"] = self.ruleName!
                }
                if self.scopeType != nil {
                    map["ScopeType"] = self.scopeType!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.userMappingList != nil {
                    var tmp : [Any] = []
                    for k in self.userMappingList! {
                        tmp.append(k.toMap())
                    }
                    map["UserMappingList"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Expressions"] as? [Any?] {
                    var tmp : [UpdateRowPermissionRequest.UpdateRowPermissionCommand.Rules.Expressions] = []
                    for v in value {
                        if v != nil {
                            var model = UpdateRowPermissionRequest.UpdateRowPermissionCommand.Rules.Expressions()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.expressions = tmp
                }
                if let value = dict["IsDelete"] as? Bool {
                    self.isDelete = value
                }
                if let value = dict["RuleName"] as? String {
                    self.ruleName = value
                }
                if let value = dict["ScopeType"] as? String {
                    self.scopeType = value
                }
                if let value = dict["Status"] as? Int32 {
                    self.status = value
                }
                if let value = dict["UserMappingList"] as? [Any?] {
                    var tmp : [UpdateRowPermissionRequest.UpdateRowPermissionCommand.Rules.UserMappingList] = []
                    for v in value {
                        if v != nil {
                            var model = UpdateRowPermissionRequest.UpdateRowPermissionCommand.Rules.UserMappingList()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.userMappingList = tmp
                }
            }
        }
        public class Tables : Tea.TeaModel {
            public var columnName: String?

            public var mappingColumnName: String?

            public var resourceId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.columnName != nil {
                    map["ColumnName"] = self.columnName!
                }
                if self.mappingColumnName != nil {
                    map["MappingColumnName"] = self.mappingColumnName!
                }
                if self.resourceId != nil {
                    map["ResourceId"] = self.resourceId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ColumnName"] as? String {
                    self.columnName = value
                }
                if let value = dict["MappingColumnName"] as? String {
                    self.mappingColumnName = value
                }
                if let value = dict["ResourceId"] as? String {
                    self.resourceId = value
                }
            }
        }
        public var mappingColumns: [UpdateRowPermissionRequest.UpdateRowPermissionCommand.MappingColumns]?

        public var rowPermissionDesc: String?

        public var rowPermissionId: Int64?

        public var rowPermissionName: String?

        public var rules: [UpdateRowPermissionRequest.UpdateRowPermissionCommand.Rules]?

        public var tables: [UpdateRowPermissionRequest.UpdateRowPermissionCommand.Tables]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.mappingColumns != nil {
                var tmp : [Any] = []
                for k in self.mappingColumns! {
                    tmp.append(k.toMap())
                }
                map["MappingColumns"] = tmp
            }
            if self.rowPermissionDesc != nil {
                map["RowPermissionDesc"] = self.rowPermissionDesc!
            }
            if self.rowPermissionId != nil {
                map["RowPermissionId"] = self.rowPermissionId!
            }
            if self.rowPermissionName != nil {
                map["RowPermissionName"] = self.rowPermissionName!
            }
            if self.rules != nil {
                var tmp : [Any] = []
                for k in self.rules! {
                    tmp.append(k.toMap())
                }
                map["Rules"] = tmp
            }
            if self.tables != nil {
                var tmp : [Any] = []
                for k in self.tables! {
                    tmp.append(k.toMap())
                }
                map["Tables"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MappingColumns"] as? [Any?] {
                var tmp : [UpdateRowPermissionRequest.UpdateRowPermissionCommand.MappingColumns] = []
                for v in value {
                    if v != nil {
                        var model = UpdateRowPermissionRequest.UpdateRowPermissionCommand.MappingColumns()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.mappingColumns = tmp
            }
            if let value = dict["RowPermissionDesc"] as? String {
                self.rowPermissionDesc = value
            }
            if let value = dict["RowPermissionId"] as? Int64 {
                self.rowPermissionId = value
            }
            if let value = dict["RowPermissionName"] as? String {
                self.rowPermissionName = value
            }
            if let value = dict["Rules"] as? [Any?] {
                var tmp : [UpdateRowPermissionRequest.UpdateRowPermissionCommand.Rules] = []
                for v in value {
                    if v != nil {
                        var model = UpdateRowPermissionRequest.UpdateRowPermissionCommand.Rules()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.rules = tmp
            }
            if let value = dict["Tables"] as? [Any?] {
                var tmp : [UpdateRowPermissionRequest.UpdateRowPermissionCommand.Tables] = []
                for v in value {
                    if v != nil {
                        var model = UpdateRowPermissionRequest.UpdateRowPermissionCommand.Tables()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tables = tmp
            }
        }
    }
    public var opTenantId: Int64?

    public var updateRowPermissionCommand: UpdateRowPermissionRequest.UpdateRowPermissionCommand?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.updateRowPermissionCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateRowPermissionCommand != nil {
            map["UpdateRowPermissionCommand"] = self.updateRowPermissionCommand?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateRowPermissionCommand"] as? [String: Any?] {
            var model = UpdateRowPermissionRequest.UpdateRowPermissionCommand()
            model.fromMap(value)
            self.updateRowPermissionCommand = model
        }
    }
}

public class UpdateRowPermissionShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var updateRowPermissionCommandShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateRowPermissionCommandShrink != nil {
            map["UpdateRowPermissionCommand"] = self.updateRowPermissionCommandShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateRowPermissionCommand"] as? String {
            self.updateRowPermissionCommandShrink = value
        }
    }
}

public class UpdateRowPermissionResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateRowPermissionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateRowPermissionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateRowPermissionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateTenantComputeEngineRequest : Tea.TeaModel {
    public class UpdateCommand : Tea.TeaModel {
        public var clusterUrlList: [String]?

        public var type: String?

        public var version: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.clusterUrlList != nil {
                map["ClusterUrlList"] = self.clusterUrlList!
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            if self.version != nil {
                map["Version"] = self.version!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ClusterUrlList"] as? [String] {
                self.clusterUrlList = value
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
            if let value = dict["Version"] as? String {
                self.version = value
            }
        }
    }
    public var opTenantId: Int64?

    public var updateCommand: UpdateTenantComputeEngineRequest.UpdateCommand?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.updateCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommand != nil {
            map["UpdateCommand"] = self.updateCommand?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? [String: Any?] {
            var model = UpdateTenantComputeEngineRequest.UpdateCommand()
            model.fromMap(value)
            self.updateCommand = model
        }
    }
}

public class UpdateTenantComputeEngineShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var updateCommandShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommandShrink != nil {
            map["UpdateCommand"] = self.updateCommandShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? String {
            self.updateCommandShrink = value
        }
    }
}

public class UpdateTenantComputeEngineResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateTenantComputeEngineResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateTenantComputeEngineResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateTenantComputeEngineResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateTenantMemberRequest : Tea.TeaModel {
    public class UpdateCommand : Tea.TeaModel {
        public class MemberList : Tea.TeaModel {
            public var dingNumber: String?

            public var mail: String?

            public var mobilePhone: String?

            public var roleList: [String]?

            public var userId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.dingNumber != nil {
                    map["DingNumber"] = self.dingNumber!
                }
                if self.mail != nil {
                    map["Mail"] = self.mail!
                }
                if self.mobilePhone != nil {
                    map["MobilePhone"] = self.mobilePhone!
                }
                if self.roleList != nil {
                    map["RoleList"] = self.roleList!
                }
                if self.userId != nil {
                    map["UserId"] = self.userId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DingNumber"] as? String {
                    self.dingNumber = value
                }
                if let value = dict["Mail"] as? String {
                    self.mail = value
                }
                if let value = dict["MobilePhone"] as? String {
                    self.mobilePhone = value
                }
                if let value = dict["RoleList"] as? [String] {
                    self.roleList = value
                }
                if let value = dict["UserId"] as? String {
                    self.userId = value
                }
            }
        }
        public var memberList: [UpdateTenantMemberRequest.UpdateCommand.MemberList]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.memberList != nil {
                var tmp : [Any] = []
                for k in self.memberList! {
                    tmp.append(k.toMap())
                }
                map["MemberList"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MemberList"] as? [Any?] {
                var tmp : [UpdateTenantMemberRequest.UpdateCommand.MemberList] = []
                for v in value {
                    if v != nil {
                        var model = UpdateTenantMemberRequest.UpdateCommand.MemberList()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.memberList = tmp
            }
        }
    }
    public var opTenantId: Int64?

    public var updateCommand: UpdateTenantMemberRequest.UpdateCommand?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.updateCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommand != nil {
            map["UpdateCommand"] = self.updateCommand?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? [String: Any?] {
            var model = UpdateTenantMemberRequest.UpdateCommand()
            model.fromMap(value)
            self.updateCommand = model
        }
    }
}

public class UpdateTenantMemberShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var updateCommandShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommandShrink != nil {
            map["UpdateCommand"] = self.updateCommandShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? String {
            self.updateCommandShrink = value
        }
    }
}

public class UpdateTenantMemberResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateTenantMemberResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateTenantMemberResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateTenantMemberResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateUdfRequest : Tea.TeaModel {
    public class UpdateCommand : Tea.TeaModel {
        public var category: Int32?

        public var className: String?

        public var commandHelp: String?

        public var comment: String?

        public var description_: String?

        public var id: Int64?

        public var projectId: Int64?

        public var refResourceIdList: [Int64]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.category != nil {
                map["Category"] = self.category!
            }
            if self.className != nil {
                map["ClassName"] = self.className!
            }
            if self.commandHelp != nil {
                map["CommandHelp"] = self.commandHelp!
            }
            if self.comment != nil {
                map["Comment"] = self.comment!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.projectId != nil {
                map["ProjectId"] = self.projectId!
            }
            if self.refResourceIdList != nil {
                map["RefResourceIdList"] = self.refResourceIdList!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Category"] as? Int32 {
                self.category = value
            }
            if let value = dict["ClassName"] as? String {
                self.className = value
            }
            if let value = dict["CommandHelp"] as? String {
                self.commandHelp = value
            }
            if let value = dict["Comment"] as? String {
                self.comment = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Id"] as? Int64 {
                self.id = value
            }
            if let value = dict["ProjectId"] as? Int64 {
                self.projectId = value
            }
            if let value = dict["RefResourceIdList"] as? [Int64] {
                self.refResourceIdList = value
            }
        }
    }
    public var opTenantId: Int64?

    public var updateCommand: UpdateUdfRequest.UpdateCommand?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.updateCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommand != nil {
            map["UpdateCommand"] = self.updateCommand?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? [String: Any?] {
            var model = UpdateUdfRequest.UpdateCommand()
            model.fromMap(value)
            self.updateCommand = model
        }
    }
}

public class UpdateUdfShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var updateCommandShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommandShrink != nil {
            map["UpdateCommand"] = self.updateCommandShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? String {
            self.updateCommandShrink = value
        }
    }
}

public class UpdateUdfResponseBody : Tea.TeaModel {
    public var code: String?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateUdfResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateUdfResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateUdfResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateUserGroupRequest : Tea.TeaModel {
    public class UpdateCommand : Tea.TeaModel {
        public var adminUserIdList: [String]?

        public var description_: String?

        public var id: String?

        public var name: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.adminUserIdList != nil {
                map["AdminUserIdList"] = self.adminUserIdList!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.id != nil {
                map["Id"] = self.id!
            }
            if self.name != nil {
                map["Name"] = self.name!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AdminUserIdList"] as? [String] {
                self.adminUserIdList = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["Id"] as? String {
                self.id = value
            }
            if let value = dict["Name"] as? String {
                self.name = value
            }
        }
    }
    public var opTenantId: Int64?

    public var updateCommand: UpdateUserGroupRequest.UpdateCommand?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.updateCommand?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommand != nil {
            map["UpdateCommand"] = self.updateCommand?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? [String: Any?] {
            var model = UpdateUserGroupRequest.UpdateCommand()
            model.fromMap(value)
            self.updateCommand = model
        }
    }
}

public class UpdateUserGroupShrinkRequest : Tea.TeaModel {
    public var opTenantId: Int64?

    public var updateCommandShrink: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.updateCommandShrink != nil {
            map["UpdateCommand"] = self.updateCommandShrink!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UpdateCommand"] as? String {
            self.updateCommandShrink = value
        }
    }
}

public class UpdateUserGroupResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateUserGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateUserGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateUserGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdateUserGroupSwitchRequest : Tea.TeaModel {
    public var active: Bool?

    public var opTenantId: Int64?

    public var userGroupId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.active != nil {
            map["Active"] = self.active!
        }
        if self.opTenantId != nil {
            map["OpTenantId"] = self.opTenantId!
        }
        if self.userGroupId != nil {
            map["UserGroupId"] = self.userGroupId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Active"] as? Bool {
            self.active = value
        }
        if let value = dict["OpTenantId"] as? Int64 {
            self.opTenantId = value
        }
        if let value = dict["UserGroupId"] as? String {
            self.userGroupId = value
        }
    }
}

public class UpdateUserGroupSwitchResponseBody : Tea.TeaModel {
    public var code: String?

    public var data: Bool?

    public var httpStatusCode: Int32?

    public var message: String?

    public var requestId: String?

    public var success: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.code != nil {
            map["Code"] = self.code!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.httpStatusCode != nil {
            map["HttpStatusCode"] = self.httpStatusCode!
        }
        if self.message != nil {
            map["Message"] = self.message!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Code"] as? String {
            self.code = value
        }
        if let value = dict["Data"] as? Bool {
            self.data = value
        }
        if let value = dict["HttpStatusCode"] as? Int32 {
            self.httpStatusCode = value
        }
        if let value = dict["Message"] as? String {
            self.message = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? Bool {
            self.success = value
        }
    }
}

public class UpdateUserGroupSwitchResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdateUserGroupSwitchResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdateUserGroupSwitchResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}
