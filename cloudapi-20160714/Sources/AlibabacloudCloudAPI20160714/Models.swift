import Foundation
import Tea
import TeaUtils
import AlibabacloudOpenApi
import AlibabaCloudOpenApiUtil
import AlibabacloudEndpointUtil

public class AbolishApiRequest : Tea.TeaModel {
    public var apiId: String?

    public var groupId: String?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class AbolishApiResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AbolishApiResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AbolishApiResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AbolishApiResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddAccessControlListEntryRequest : Tea.TeaModel {
    public var aclEntrys: String?

    public var aclId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aclEntrys != nil {
            map["AclEntrys"] = self.aclEntrys!
        }
        if self.aclId != nil {
            map["AclId"] = self.aclId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AclEntrys"] as? String {
            self.aclEntrys = value
        }
        if let value = dict["AclId"] as? String {
            self.aclId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class AddAccessControlListEntryResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddAccessControlListEntryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddAccessControlListEntryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddAccessControlListEntryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddIpControlPolicyItemRequest : Tea.TeaModel {
    public var appId: String?

    public var cidrIp: String?

    public var ipControlId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.cidrIp != nil {
            map["CidrIp"] = self.cidrIp!
        }
        if self.ipControlId != nil {
            map["IpControlId"] = self.ipControlId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["CidrIp"] as? String {
            self.cidrIp = value
        }
        if let value = dict["IpControlId"] as? String {
            self.ipControlId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class AddIpControlPolicyItemResponseBody : Tea.TeaModel {
    public var policyItemId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.policyItemId != nil {
            map["PolicyItemId"] = self.policyItemId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PolicyItemId"] as? String {
            self.policyItemId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddIpControlPolicyItemResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddIpControlPolicyItemResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddIpControlPolicyItemResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AddTrafficSpecialControlRequest : Tea.TeaModel {
    public var securityToken: String?

    public var specialKey: String?

    public var specialType: String?

    public var trafficControlId: String?

    public var trafficValue: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.specialKey != nil {
            map["SpecialKey"] = self.specialKey!
        }
        if self.specialType != nil {
            map["SpecialType"] = self.specialType!
        }
        if self.trafficControlId != nil {
            map["TrafficControlId"] = self.trafficControlId!
        }
        if self.trafficValue != nil {
            map["TrafficValue"] = self.trafficValue!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["SpecialKey"] as? String {
            self.specialKey = value
        }
        if let value = dict["SpecialType"] as? String {
            self.specialType = value
        }
        if let value = dict["TrafficControlId"] as? String {
            self.trafficControlId = value
        }
        if let value = dict["TrafficValue"] as? Int32 {
            self.trafficValue = value
        }
    }
}

public class AddTrafficSpecialControlResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AddTrafficSpecialControlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AddTrafficSpecialControlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AddTrafficSpecialControlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AssociateInstanceWithPrivateDNSRequest : Tea.TeaModel {
    public var instanceId: String?

    public var intranetDomains: [String]?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.intranetDomains != nil {
            map["IntranetDomains"] = self.intranetDomains!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["IntranetDomains"] as? [String] {
            self.intranetDomains = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class AssociateInstanceWithPrivateDNSShrinkRequest : Tea.TeaModel {
    public var instanceId: String?

    public var intranetDomainsShrink: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.intranetDomainsShrink != nil {
            map["IntranetDomains"] = self.intranetDomainsShrink!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["IntranetDomains"] as? String {
            self.intranetDomainsShrink = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class AssociateInstanceWithPrivateDNSResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AssociateInstanceWithPrivateDNSResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AssociateInstanceWithPrivateDNSResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AssociateInstanceWithPrivateDNSResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AttachApiProductRequest : Tea.TeaModel {
    public class Apis : Tea.TeaModel {
        public var apiId: String?

        public var stageName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiId != nil {
                map["ApiId"] = self.apiId!
            }
            if self.stageName != nil {
                map["StageName"] = self.stageName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiId"] as? String {
                self.apiId = value
            }
            if let value = dict["StageName"] as? String {
                self.stageName = value
            }
        }
    }
    public var apiProductId: String?

    public var apis: [AttachApiProductRequest.Apis]?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiProductId != nil {
            map["ApiProductId"] = self.apiProductId!
        }
        if self.apis != nil {
            var tmp : [Any] = []
            for k in self.apis! {
                tmp.append(k.toMap())
            }
            map["Apis"] = tmp
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiProductId"] as? String {
            self.apiProductId = value
        }
        if let value = dict["Apis"] as? [Any?] {
            var tmp : [AttachApiProductRequest.Apis] = []
            for v in value {
                if v != nil {
                    var model = AttachApiProductRequest.Apis()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.apis = tmp
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class AttachApiProductResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AttachApiProductResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AttachApiProductResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AttachApiProductResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AttachGroupPluginRequest : Tea.TeaModel {
    public var groupId: String?

    public var pluginId: String?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.pluginId != nil {
            map["PluginId"] = self.pluginId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["PluginId"] as? String {
            self.pluginId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class AttachGroupPluginResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AttachGroupPluginResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AttachGroupPluginResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AttachGroupPluginResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class AttachPluginRequest : Tea.TeaModel {
    public var apiId: String?

    public var apiIds: String?

    public var groupId: String?

    public var pluginId: String?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.apiIds != nil {
            map["ApiIds"] = self.apiIds!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.pluginId != nil {
            map["PluginId"] = self.pluginId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["ApiIds"] as? String {
            self.apiIds = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["PluginId"] as? String {
            self.pluginId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class AttachPluginResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class AttachPluginResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: AttachPluginResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = AttachPluginResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BatchAbolishApisRequest : Tea.TeaModel {
    public class Api : Tea.TeaModel {
        public var apiUid: String?

        public var groupId: String?

        public var stageId: String?

        public var stageName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiUid != nil {
                map["ApiUid"] = self.apiUid!
            }
            if self.groupId != nil {
                map["GroupId"] = self.groupId!
            }
            if self.stageId != nil {
                map["StageId"] = self.stageId!
            }
            if self.stageName != nil {
                map["StageName"] = self.stageName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiUid"] as? String {
                self.apiUid = value
            }
            if let value = dict["GroupId"] as? String {
                self.groupId = value
            }
            if let value = dict["StageId"] as? String {
                self.stageId = value
            }
            if let value = dict["StageName"] as? String {
                self.stageName = value
            }
        }
    }
    public var api: [BatchAbolishApisRequest.Api]?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.api != nil {
            var tmp : [Any] = []
            for k in self.api! {
                tmp.append(k.toMap())
            }
            map["Api"] = tmp
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Api"] as? [Any?] {
            var tmp : [BatchAbolishApisRequest.Api] = []
            for v in value {
                if v != nil {
                    var model = BatchAbolishApisRequest.Api()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.api = tmp
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class BatchAbolishApisResponseBody : Tea.TeaModel {
    public var operationId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.operationId != nil {
            map["OperationId"] = self.operationId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OperationId"] as? String {
            self.operationId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class BatchAbolishApisResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BatchAbolishApisResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BatchAbolishApisResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class BatchDeployApisRequest : Tea.TeaModel {
    public class Api : Tea.TeaModel {
        public var apiUid: String?

        public var groupId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiUid != nil {
                map["ApiUid"] = self.apiUid!
            }
            if self.groupId != nil {
                map["GroupId"] = self.groupId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiUid"] as? String {
                self.apiUid = value
            }
            if let value = dict["GroupId"] as? String {
                self.groupId = value
            }
        }
    }
    public var api: [BatchDeployApisRequest.Api]?

    public var description_: String?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.api != nil {
            var tmp : [Any] = []
            for k in self.api! {
                tmp.append(k.toMap())
            }
            map["Api"] = tmp
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Api"] as? [Any?] {
            var tmp : [BatchDeployApisRequest.Api] = []
            for v in value {
                if v != nil {
                    var model = BatchDeployApisRequest.Api()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.api = tmp
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class BatchDeployApisResponseBody : Tea.TeaModel {
    public var operationId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.operationId != nil {
            map["OperationId"] = self.operationId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OperationId"] as? String {
            self.operationId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class BatchDeployApisResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: BatchDeployApisResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = BatchDeployApisResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateAccessControlListRequest : Tea.TeaModel {
    public var aclName: String?

    public var addressIPVersion: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aclName != nil {
            map["AclName"] = self.aclName!
        }
        if self.addressIPVersion != nil {
            map["AddressIPVersion"] = self.addressIPVersion!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AclName"] as? String {
            self.aclName = value
        }
        if let value = dict["AddressIPVersion"] as? String {
            self.addressIPVersion = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class CreateAccessControlListResponseBody : Tea.TeaModel {
    public var aclId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aclId != nil {
            map["AclId"] = self.aclId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AclId"] as? String {
            self.aclId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateAccessControlListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateAccessControlListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateAccessControlListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateApiRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var allowSignatureMethod: String?

    public var apiName: String?

    public var appCodeAuthType: String?

    public var authType: String?

    public var backendEnable: Bool?

    public var backendId: String?

    public var constantParameters: String?

    public var description_: String?

    public var disableInternet: Bool?

    public var errorCodeSamples: String?

    public var failResultSample: String?

    public var forceNonceCheck: Bool?

    public var groupId: String?

    public var openIdConnectConfig: String?

    public var requestConfig: String?

    public var requestParameters: String?

    public var resultBodyModel: String?

    public var resultDescriptions: String?

    public var resultSample: String?

    public var resultType: String?

    public var securityToken: String?

    public var serviceConfig: String?

    public var serviceParameters: String?

    public var serviceParametersMap: String?

    public var systemParameters: String?

    public var tag: [CreateApiRequest.Tag]?

    public var visibility: String?

    public var webSocketApiType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.allowSignatureMethod != nil {
            map["AllowSignatureMethod"] = self.allowSignatureMethod!
        }
        if self.apiName != nil {
            map["ApiName"] = self.apiName!
        }
        if self.appCodeAuthType != nil {
            map["AppCodeAuthType"] = self.appCodeAuthType!
        }
        if self.authType != nil {
            map["AuthType"] = self.authType!
        }
        if self.backendEnable != nil {
            map["BackendEnable"] = self.backendEnable!
        }
        if self.backendId != nil {
            map["BackendId"] = self.backendId!
        }
        if self.constantParameters != nil {
            map["ConstantParameters"] = self.constantParameters!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.disableInternet != nil {
            map["DisableInternet"] = self.disableInternet!
        }
        if self.errorCodeSamples != nil {
            map["ErrorCodeSamples"] = self.errorCodeSamples!
        }
        if self.failResultSample != nil {
            map["FailResultSample"] = self.failResultSample!
        }
        if self.forceNonceCheck != nil {
            map["ForceNonceCheck"] = self.forceNonceCheck!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.openIdConnectConfig != nil {
            map["OpenIdConnectConfig"] = self.openIdConnectConfig!
        }
        if self.requestConfig != nil {
            map["RequestConfig"] = self.requestConfig!
        }
        if self.requestParameters != nil {
            map["RequestParameters"] = self.requestParameters!
        }
        if self.resultBodyModel != nil {
            map["ResultBodyModel"] = self.resultBodyModel!
        }
        if self.resultDescriptions != nil {
            map["ResultDescriptions"] = self.resultDescriptions!
        }
        if self.resultSample != nil {
            map["ResultSample"] = self.resultSample!
        }
        if self.resultType != nil {
            map["ResultType"] = self.resultType!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.serviceConfig != nil {
            map["ServiceConfig"] = self.serviceConfig!
        }
        if self.serviceParameters != nil {
            map["ServiceParameters"] = self.serviceParameters!
        }
        if self.serviceParametersMap != nil {
            map["ServiceParametersMap"] = self.serviceParametersMap!
        }
        if self.systemParameters != nil {
            map["SystemParameters"] = self.systemParameters!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        if self.visibility != nil {
            map["Visibility"] = self.visibility!
        }
        if self.webSocketApiType != nil {
            map["WebSocketApiType"] = self.webSocketApiType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AllowSignatureMethod"] as? String {
            self.allowSignatureMethod = value
        }
        if let value = dict["ApiName"] as? String {
            self.apiName = value
        }
        if let value = dict["AppCodeAuthType"] as? String {
            self.appCodeAuthType = value
        }
        if let value = dict["AuthType"] as? String {
            self.authType = value
        }
        if let value = dict["BackendEnable"] as? Bool {
            self.backendEnable = value
        }
        if let value = dict["BackendId"] as? String {
            self.backendId = value
        }
        if let value = dict["ConstantParameters"] as? String {
            self.constantParameters = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DisableInternet"] as? Bool {
            self.disableInternet = value
        }
        if let value = dict["ErrorCodeSamples"] as? String {
            self.errorCodeSamples = value
        }
        if let value = dict["FailResultSample"] as? String {
            self.failResultSample = value
        }
        if let value = dict["ForceNonceCheck"] as? Bool {
            self.forceNonceCheck = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["OpenIdConnectConfig"] as? String {
            self.openIdConnectConfig = value
        }
        if let value = dict["RequestConfig"] as? String {
            self.requestConfig = value
        }
        if let value = dict["RequestParameters"] as? String {
            self.requestParameters = value
        }
        if let value = dict["ResultBodyModel"] as? String {
            self.resultBodyModel = value
        }
        if let value = dict["ResultDescriptions"] as? String {
            self.resultDescriptions = value
        }
        if let value = dict["ResultSample"] as? String {
            self.resultSample = value
        }
        if let value = dict["ResultType"] as? String {
            self.resultType = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["ServiceConfig"] as? String {
            self.serviceConfig = value
        }
        if let value = dict["ServiceParameters"] as? String {
            self.serviceParameters = value
        }
        if let value = dict["ServiceParametersMap"] as? String {
            self.serviceParametersMap = value
        }
        if let value = dict["SystemParameters"] as? String {
            self.systemParameters = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [CreateApiRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = CreateApiRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
        if let value = dict["Visibility"] as? String {
            self.visibility = value
        }
        if let value = dict["WebSocketApiType"] as? String {
            self.webSocketApiType = value
        }
    }
}

public class CreateApiResponseBody : Tea.TeaModel {
    public var apiId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateApiResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateApiResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateApiResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateApiGroupRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var basePath: String?

    public var description_: String?

    public var groupName: String?

    public var instanceId: String?

    public var securityToken: String?

    public var tag: [CreateApiGroupRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.basePath != nil {
            map["BasePath"] = self.basePath!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BasePath"] as? String {
            self.basePath = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [CreateApiGroupRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = CreateApiGroupRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class CreateApiGroupResponseBody : Tea.TeaModel {
    public var basePath: String?

    public var description_: String?

    public var groupId: String?

    public var groupName: String?

    public var instanceId: String?

    public var instanceType: String?

    public var requestId: String?

    public var subDomain: String?

    public var tagStatus: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.basePath != nil {
            map["BasePath"] = self.basePath!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.instanceType != nil {
            map["InstanceType"] = self.instanceType!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.subDomain != nil {
            map["SubDomain"] = self.subDomain!
        }
        if self.tagStatus != nil {
            map["TagStatus"] = self.tagStatus!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BasePath"] as? String {
            self.basePath = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["InstanceType"] as? String {
            self.instanceType = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SubDomain"] as? String {
            self.subDomain = value
        }
        if let value = dict["TagStatus"] as? Bool {
            self.tagStatus = value
        }
    }
}

public class CreateApiGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateApiGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateApiGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateApiStageVariableRequest : Tea.TeaModel {
    public var groupId: String?

    public var securityToken: String?

    public var stageId: String?

    public var stageRouteModel: String?

    public var supportRoute: Bool?

    public var variableName: String?

    public var variableValue: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageId != nil {
            map["StageId"] = self.stageId!
        }
        if self.stageRouteModel != nil {
            map["StageRouteModel"] = self.stageRouteModel!
        }
        if self.supportRoute != nil {
            map["SupportRoute"] = self.supportRoute!
        }
        if self.variableName != nil {
            map["VariableName"] = self.variableName!
        }
        if self.variableValue != nil {
            map["VariableValue"] = self.variableValue!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageId"] as? String {
            self.stageId = value
        }
        if let value = dict["StageRouteModel"] as? String {
            self.stageRouteModel = value
        }
        if let value = dict["SupportRoute"] as? Bool {
            self.supportRoute = value
        }
        if let value = dict["VariableName"] as? String {
            self.variableName = value
        }
        if let value = dict["VariableValue"] as? String {
            self.variableValue = value
        }
    }
}

public class CreateApiStageVariableResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateApiStageVariableResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateApiStageVariableResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateApiStageVariableResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateAppRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var appCode: String?

    public var appKey: String?

    public var appName: String?

    public var appSecret: String?

    public var description_: String?

    public var extend: String?

    public var securityToken: String?

    public var tag: [CreateAppRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appCode != nil {
            map["AppCode"] = self.appCode!
        }
        if self.appKey != nil {
            map["AppKey"] = self.appKey!
        }
        if self.appName != nil {
            map["AppName"] = self.appName!
        }
        if self.appSecret != nil {
            map["AppSecret"] = self.appSecret!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.extend != nil {
            map["Extend"] = self.extend!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppCode"] as? String {
            self.appCode = value
        }
        if let value = dict["AppKey"] as? String {
            self.appKey = value
        }
        if let value = dict["AppName"] as? String {
            self.appName = value
        }
        if let value = dict["AppSecret"] as? String {
            self.appSecret = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Extend"] as? String {
            self.extend = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [CreateAppRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = CreateAppRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class CreateAppResponseBody : Tea.TeaModel {
    public var appId: Int64?

    public var requestId: String?

    public var tagStatus: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.tagStatus != nil {
            map["TagStatus"] = self.tagStatus!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? Int64 {
            self.appId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TagStatus"] as? Bool {
            self.tagStatus = value
        }
    }
}

public class CreateAppResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateAppResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateAppResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateAppCodeRequest : Tea.TeaModel {
    public var appCode: String?

    public var appId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appCode != nil {
            map["AppCode"] = self.appCode!
        }
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppCode"] as? String {
            self.appCode = value
        }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
    }
}

public class CreateAppCodeResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateAppCodeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateAppCodeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateAppCodeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateAppKeyRequest : Tea.TeaModel {
    public var appId: String?

    public var appKey: String?

    public var appSecret: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.appKey != nil {
            map["AppKey"] = self.appKey!
        }
        if self.appSecret != nil {
            map["AppSecret"] = self.appSecret!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["AppKey"] as? String {
            self.appKey = value
        }
        if let value = dict["AppSecret"] as? String {
            self.appSecret = value
        }
    }
}

public class CreateAppKeyResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateAppKeyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateAppKeyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateAppKeyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateBackendRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var backendName: String?

    public var backendType: String?

    public var createEventBridgeServiceLinkedRole: Bool?

    public var createSlr: Bool?

    public var description_: String?

    public var securityToken: String?

    public var tag: [CreateBackendRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.backendName != nil {
            map["BackendName"] = self.backendName!
        }
        if self.backendType != nil {
            map["BackendType"] = self.backendType!
        }
        if self.createEventBridgeServiceLinkedRole != nil {
            map["CreateEventBridgeServiceLinkedRole"] = self.createEventBridgeServiceLinkedRole!
        }
        if self.createSlr != nil {
            map["CreateSlr"] = self.createSlr!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BackendName"] as? String {
            self.backendName = value
        }
        if let value = dict["BackendType"] as? String {
            self.backendType = value
        }
        if let value = dict["CreateEventBridgeServiceLinkedRole"] as? Bool {
            self.createEventBridgeServiceLinkedRole = value
        }
        if let value = dict["CreateSlr"] as? Bool {
            self.createSlr = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [CreateBackendRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = CreateBackendRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class CreateBackendResponseBody : Tea.TeaModel {
    public var backendId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.backendId != nil {
            map["BackendId"] = self.backendId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BackendId"] as? String {
            self.backendId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateBackendResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateBackendResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateBackendResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateBackendModelRequest : Tea.TeaModel {
    public var backendId: String?

    public var backendModelData: String?

    public var backendType: String?

    public var description_: String?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.backendId != nil {
            map["BackendId"] = self.backendId!
        }
        if self.backendModelData != nil {
            map["BackendModelData"] = self.backendModelData!
        }
        if self.backendType != nil {
            map["BackendType"] = self.backendType!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BackendId"] as? String {
            self.backendId = value
        }
        if let value = dict["BackendModelData"] as? String {
            self.backendModelData = value
        }
        if let value = dict["BackendType"] as? String {
            self.backendType = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class CreateBackendModelResponseBody : Tea.TeaModel {
    public var backendModelId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.backendModelId != nil {
            map["BackendModelId"] = self.backendModelId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BackendModelId"] as? String {
            self.backendModelId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateBackendModelResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateBackendModelResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateBackendModelResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateDatasetRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var datasetName: String?

    public var datasetType: String?

    public var description_: String?

    public var securityToken: String?

    public var tag: [CreateDatasetRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetName != nil {
            map["DatasetName"] = self.datasetName!
        }
        if self.datasetType != nil {
            map["DatasetType"] = self.datasetType!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetName"] as? String {
            self.datasetName = value
        }
        if let value = dict["DatasetType"] as? String {
            self.datasetType = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [CreateDatasetRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = CreateDatasetRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class CreateDatasetResponseBody : Tea.TeaModel {
    public var datasetId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetId != nil {
            map["DatasetId"] = self.datasetId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetId"] as? String {
            self.datasetId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateDatasetResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateDatasetResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateDatasetResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateDatasetItemRequest : Tea.TeaModel {
    public var datasetId: String?

    public var description_: String?

    public var expiredTime: String?

    public var securityToken: String?

    public var value: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetId != nil {
            map["DatasetId"] = self.datasetId!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.expiredTime != nil {
            map["ExpiredTime"] = self.expiredTime!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.value != nil {
            map["Value"] = self.value!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetId"] as? String {
            self.datasetId = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["ExpiredTime"] as? String {
            self.expiredTime = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Value"] as? String {
            self.value = value
        }
    }
}

public class CreateDatasetItemResponseBody : Tea.TeaModel {
    public var datasetItemId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetItemId != nil {
            map["DatasetItemId"] = self.datasetItemId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetItemId"] as? String {
            self.datasetItemId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateDatasetItemResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateDatasetItemResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateDatasetItemResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateInstanceRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public class ZoneVSwitchSecurityGroup : Tea.TeaModel {
        public var cidrBlock: String?

        public var securityGroupId: String?

        public var vSwitchId: String?

        public var zoneId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cidrBlock != nil {
                map["CidrBlock"] = self.cidrBlock!
            }
            if self.securityGroupId != nil {
                map["SecurityGroupId"] = self.securityGroupId!
            }
            if self.vSwitchId != nil {
                map["VSwitchId"] = self.vSwitchId!
            }
            if self.zoneId != nil {
                map["ZoneId"] = self.zoneId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CidrBlock"] as? String {
                self.cidrBlock = value
            }
            if let value = dict["SecurityGroupId"] as? String {
                self.securityGroupId = value
            }
            if let value = dict["VSwitchId"] as? String {
                self.vSwitchId = value
            }
            if let value = dict["ZoneId"] as? String {
                self.zoneId = value
            }
        }
    }
    public var autoPay: Bool?

    public var chargeType: String?

    public var duration: Int32?

    public var httpsPolicy: String?

    public var instanceCidr: String?

    public var instanceName: String?

    public var instanceSpec: String?

    public var instanceType: String?

    public var pricingCycle: String?

    public var tag: [CreateInstanceRequest.Tag]?

    public var token: String?

    public var userVpcId: String?

    public var zoneId: String?

    public var zoneVSwitchSecurityGroup: [CreateInstanceRequest.ZoneVSwitchSecurityGroup]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.autoPay != nil {
            map["AutoPay"] = self.autoPay!
        }
        if self.chargeType != nil {
            map["ChargeType"] = self.chargeType!
        }
        if self.duration != nil {
            map["Duration"] = self.duration!
        }
        if self.httpsPolicy != nil {
            map["HttpsPolicy"] = self.httpsPolicy!
        }
        if self.instanceCidr != nil {
            map["InstanceCidr"] = self.instanceCidr!
        }
        if self.instanceName != nil {
            map["InstanceName"] = self.instanceName!
        }
        if self.instanceSpec != nil {
            map["InstanceSpec"] = self.instanceSpec!
        }
        if self.instanceType != nil {
            map["InstanceType"] = self.instanceType!
        }
        if self.pricingCycle != nil {
            map["PricingCycle"] = self.pricingCycle!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        if self.token != nil {
            map["Token"] = self.token!
        }
        if self.userVpcId != nil {
            map["UserVpcId"] = self.userVpcId!
        }
        if self.zoneId != nil {
            map["ZoneId"] = self.zoneId!
        }
        if self.zoneVSwitchSecurityGroup != nil {
            var tmp : [Any] = []
            for k in self.zoneVSwitchSecurityGroup! {
                tmp.append(k.toMap())
            }
            map["ZoneVSwitchSecurityGroup"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AutoPay"] as? Bool {
            self.autoPay = value
        }
        if let value = dict["ChargeType"] as? String {
            self.chargeType = value
        }
        if let value = dict["Duration"] as? Int32 {
            self.duration = value
        }
        if let value = dict["HttpsPolicy"] as? String {
            self.httpsPolicy = value
        }
        if let value = dict["InstanceCidr"] as? String {
            self.instanceCidr = value
        }
        if let value = dict["InstanceName"] as? String {
            self.instanceName = value
        }
        if let value = dict["InstanceSpec"] as? String {
            self.instanceSpec = value
        }
        if let value = dict["InstanceType"] as? String {
            self.instanceType = value
        }
        if let value = dict["PricingCycle"] as? String {
            self.pricingCycle = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [CreateInstanceRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = CreateInstanceRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
        if let value = dict["Token"] as? String {
            self.token = value
        }
        if let value = dict["UserVpcId"] as? String {
            self.userVpcId = value
        }
        if let value = dict["ZoneId"] as? String {
            self.zoneId = value
        }
        if let value = dict["ZoneVSwitchSecurityGroup"] as? [Any?] {
            var tmp : [CreateInstanceRequest.ZoneVSwitchSecurityGroup] = []
            for v in value {
                if v != nil {
                    var model = CreateInstanceRequest.ZoneVSwitchSecurityGroup()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.zoneVSwitchSecurityGroup = tmp
        }
    }
}

public class CreateInstanceResponseBody : Tea.TeaModel {
    public var instanceId: String?

    public var requestId: String?

    public var tagStatus: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.tagStatus != nil {
            map["TagStatus"] = self.tagStatus!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TagStatus"] as? Bool {
            self.tagStatus = value
        }
    }
}

public class CreateInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateIntranetDomainRequest : Tea.TeaModel {
    public var groupId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class CreateIntranetDomainResponseBody : Tea.TeaModel {
    public var domainName: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateIntranetDomainResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateIntranetDomainResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateIntranetDomainResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateIpControlRequest : Tea.TeaModel {
    public class IpControlPolicys : Tea.TeaModel {
        public var appId: String?

        public var cidrIp: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appId != nil {
                map["AppId"] = self.appId!
            }
            if self.cidrIp != nil {
                map["CidrIp"] = self.cidrIp!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppId"] as? String {
                self.appId = value
            }
            if let value = dict["CidrIp"] as? String {
                self.cidrIp = value
            }
        }
    }
    public var description_: String?

    public var ipControlName: String?

    public var ipControlPolicys: [CreateIpControlRequest.IpControlPolicys]?

    public var ipControlType: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.ipControlName != nil {
            map["IpControlName"] = self.ipControlName!
        }
        if self.ipControlPolicys != nil {
            var tmp : [Any] = []
            for k in self.ipControlPolicys! {
                tmp.append(k.toMap())
            }
            map["IpControlPolicys"] = tmp
        }
        if self.ipControlType != nil {
            map["IpControlType"] = self.ipControlType!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["IpControlName"] as? String {
            self.ipControlName = value
        }
        if let value = dict["IpControlPolicys"] as? [Any?] {
            var tmp : [CreateIpControlRequest.IpControlPolicys] = []
            for v in value {
                if v != nil {
                    var model = CreateIpControlRequest.IpControlPolicys()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.ipControlPolicys = tmp
        }
        if let value = dict["IpControlType"] as? String {
            self.ipControlType = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class CreateIpControlResponseBody : Tea.TeaModel {
    public var ipControlId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ipControlId != nil {
            map["IpControlId"] = self.ipControlId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IpControlId"] as? String {
            self.ipControlId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateIpControlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateIpControlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateIpControlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateLogConfigRequest : Tea.TeaModel {
    public var createSlr: Bool?

    public var logType: String?

    public var securityToken: String?

    public var slsLogStore: String?

    public var slsProject: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createSlr != nil {
            map["CreateSlr"] = self.createSlr!
        }
        if self.logType != nil {
            map["LogType"] = self.logType!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.slsLogStore != nil {
            map["SlsLogStore"] = self.slsLogStore!
        }
        if self.slsProject != nil {
            map["SlsProject"] = self.slsProject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreateSlr"] as? Bool {
            self.createSlr = value
        }
        if let value = dict["LogType"] as? String {
            self.logType = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["SlsLogStore"] as? String {
            self.slsLogStore = value
        }
        if let value = dict["SlsProject"] as? String {
            self.slsProject = value
        }
    }
}

public class CreateLogConfigResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateLogConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateLogConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateLogConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateModelRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var description_: String?

    public var groupId: String?

    public var modelName: String?

    public var schema: String?

    public var tag: [CreateModelRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.modelName != nil {
            map["ModelName"] = self.modelName!
        }
        if self.schema != nil {
            map["Schema"] = self.schema!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["ModelName"] as? String {
            self.modelName = value
        }
        if let value = dict["Schema"] as? String {
            self.schema = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [CreateModelRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = CreateModelRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class CreateModelResponseBody : Tea.TeaModel {
    public var createdTime: String?

    public var description_: String?

    public var groupId: String?

    public var modelId: String?

    public var modelName: String?

    public var modelRef: String?

    public var modifiedTime: String?

    public var regionId: String?

    public var requestId: String?

    public var schema: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createdTime != nil {
            map["CreatedTime"] = self.createdTime!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.modelId != nil {
            map["ModelId"] = self.modelId!
        }
        if self.modelName != nil {
            map["ModelName"] = self.modelName!
        }
        if self.modelRef != nil {
            map["ModelRef"] = self.modelRef!
        }
        if self.modifiedTime != nil {
            map["ModifiedTime"] = self.modifiedTime!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.schema != nil {
            map["Schema"] = self.schema!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreatedTime"] as? String {
            self.createdTime = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["ModelId"] as? String {
            self.modelId = value
        }
        if let value = dict["ModelName"] as? String {
            self.modelName = value
        }
        if let value = dict["ModelRef"] as? String {
            self.modelRef = value
        }
        if let value = dict["ModifiedTime"] as? String {
            self.modifiedTime = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Schema"] as? String {
            self.schema = value
        }
    }
}

public class CreateModelResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateModelResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateModelResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateMonitorGroupRequest : Tea.TeaModel {
    public var auth: String?

    public var groupId: String?

    public var rawMonitorGroupId: Int64?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.auth != nil {
            map["Auth"] = self.auth!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.rawMonitorGroupId != nil {
            map["RawMonitorGroupId"] = self.rawMonitorGroupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Auth"] as? String {
            self.auth = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["RawMonitorGroupId"] as? Int64 {
            self.rawMonitorGroupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class CreateMonitorGroupResponseBody : Tea.TeaModel {
    public var monitorGroupId: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.monitorGroupId != nil {
            map["MonitorGroupId"] = self.monitorGroupId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["MonitorGroupId"] as? Int64 {
            self.monitorGroupId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreateMonitorGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateMonitorGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateMonitorGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreatePluginRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var description_: String?

    public var pluginData: String?

    public var pluginName: String?

    public var pluginType: String?

    public var securityToken: String?

    public var tag: [CreatePluginRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.pluginData != nil {
            map["PluginData"] = self.pluginData!
        }
        if self.pluginName != nil {
            map["PluginName"] = self.pluginName!
        }
        if self.pluginType != nil {
            map["PluginType"] = self.pluginType!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["PluginData"] as? String {
            self.pluginData = value
        }
        if let value = dict["PluginName"] as? String {
            self.pluginName = value
        }
        if let value = dict["PluginType"] as? String {
            self.pluginType = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [CreatePluginRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = CreatePluginRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class CreatePluginResponseBody : Tea.TeaModel {
    public var pluginId: String?

    public var requestId: String?

    public var tagStatus: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pluginId != nil {
            map["PluginId"] = self.pluginId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.tagStatus != nil {
            map["TagStatus"] = self.tagStatus!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PluginId"] as? String {
            self.pluginId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TagStatus"] as? Bool {
            self.tagStatus = value
        }
    }
}

public class CreatePluginResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreatePluginResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreatePluginResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreatePrivateDNSRequest : Tea.TeaModel {
    public class Records : Tea.TeaModel {
        public var record: String?

        public var weight: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.record != nil {
                map["Record"] = self.record!
            }
            if self.weight != nil {
                map["Weight"] = self.weight!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Record"] as? String {
                self.record = value
            }
            if let value = dict["Weight"] as? Int32 {
                self.weight = value
            }
        }
    }
    public var intranetDomain: String?

    public var records: [CreatePrivateDNSRequest.Records]?

    public var securityToken: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.intranetDomain != nil {
            map["IntranetDomain"] = self.intranetDomain!
        }
        if self.records != nil {
            var tmp : [Any] = []
            for k in self.records! {
                tmp.append(k.toMap())
            }
            map["Records"] = tmp
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IntranetDomain"] as? String {
            self.intranetDomain = value
        }
        if let value = dict["Records"] as? [Any?] {
            var tmp : [CreatePrivateDNSRequest.Records] = []
            for v in value {
                if v != nil {
                    var model = CreatePrivateDNSRequest.Records()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.records = tmp
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class CreatePrivateDNSShrinkRequest : Tea.TeaModel {
    public var intranetDomain: String?

    public var recordsShrink: String?

    public var securityToken: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.intranetDomain != nil {
            map["IntranetDomain"] = self.intranetDomain!
        }
        if self.recordsShrink != nil {
            map["Records"] = self.recordsShrink!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IntranetDomain"] as? String {
            self.intranetDomain = value
        }
        if let value = dict["Records"] as? String {
            self.recordsShrink = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class CreatePrivateDNSResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class CreatePrivateDNSResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreatePrivateDNSResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreatePrivateDNSResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateSignatureRequest : Tea.TeaModel {
    public var securityToken: String?

    public var signatureKey: String?

    public var signatureName: String?

    public var signatureSecret: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.signatureKey != nil {
            map["SignatureKey"] = self.signatureKey!
        }
        if self.signatureName != nil {
            map["SignatureName"] = self.signatureName!
        }
        if self.signatureSecret != nil {
            map["SignatureSecret"] = self.signatureSecret!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["SignatureKey"] as? String {
            self.signatureKey = value
        }
        if let value = dict["SignatureName"] as? String {
            self.signatureName = value
        }
        if let value = dict["SignatureSecret"] as? String {
            self.signatureSecret = value
        }
    }
}

public class CreateSignatureResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var signatureId: String?

    public var signatureName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.signatureId != nil {
            map["SignatureId"] = self.signatureId!
        }
        if self.signatureName != nil {
            map["SignatureName"] = self.signatureName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SignatureId"] as? String {
            self.signatureId = value
        }
        if let value = dict["SignatureName"] as? String {
            self.signatureName = value
        }
    }
}

public class CreateSignatureResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateSignatureResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateSignatureResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class CreateTrafficControlRequest : Tea.TeaModel {
    public var apiDefault: Int32?

    public var appDefault: Int32?

    public var description_: String?

    public var securityToken: String?

    public var trafficControlName: String?

    public var trafficControlUnit: String?

    public var userDefault: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiDefault != nil {
            map["ApiDefault"] = self.apiDefault!
        }
        if self.appDefault != nil {
            map["AppDefault"] = self.appDefault!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.trafficControlName != nil {
            map["TrafficControlName"] = self.trafficControlName!
        }
        if self.trafficControlUnit != nil {
            map["TrafficControlUnit"] = self.trafficControlUnit!
        }
        if self.userDefault != nil {
            map["UserDefault"] = self.userDefault!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiDefault"] as? Int32 {
            self.apiDefault = value
        }
        if let value = dict["AppDefault"] as? Int32 {
            self.appDefault = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["TrafficControlName"] as? String {
            self.trafficControlName = value
        }
        if let value = dict["TrafficControlUnit"] as? String {
            self.trafficControlUnit = value
        }
        if let value = dict["UserDefault"] as? Int32 {
            self.userDefault = value
        }
    }
}

public class CreateTrafficControlResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var trafficControlId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.trafficControlId != nil {
            map["TrafficControlId"] = self.trafficControlId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TrafficControlId"] as? String {
            self.trafficControlId = value
        }
    }
}

public class CreateTrafficControlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: CreateTrafficControlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = CreateTrafficControlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteAccessControlListRequest : Tea.TeaModel {
    public var aclId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aclId != nil {
            map["AclId"] = self.aclId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AclId"] as? String {
            self.aclId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DeleteAccessControlListResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteAccessControlListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteAccessControlListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteAccessControlListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteAllTrafficSpecialControlRequest : Tea.TeaModel {
    public var securityToken: String?

    public var trafficControlId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.trafficControlId != nil {
            map["TrafficControlId"] = self.trafficControlId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["TrafficControlId"] as? String {
            self.trafficControlId = value
        }
    }
}

public class DeleteAllTrafficSpecialControlResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteAllTrafficSpecialControlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteAllTrafficSpecialControlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteAllTrafficSpecialControlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteApiRequest : Tea.TeaModel {
    public var apiId: String?

    public var groupId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DeleteApiResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteApiResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteApiResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteApiResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteApiGroupRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var groupId: String?

    public var securityToken: String?

    public var tag: [DeleteApiGroupRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [DeleteApiGroupRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = DeleteApiGroupRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class DeleteApiGroupResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteApiGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteApiGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteApiGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteApiProductRequest : Tea.TeaModel {
    public var apiProductId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiProductId != nil {
            map["ApiProductId"] = self.apiProductId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiProductId"] as? String {
            self.apiProductId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DeleteApiProductResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteApiProductResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteApiProductResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteApiProductResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteApiStageVariableRequest : Tea.TeaModel {
    public var groupId: String?

    public var securityToken: String?

    public var stageId: String?

    public var variableName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageId != nil {
            map["StageId"] = self.stageId!
        }
        if self.variableName != nil {
            map["VariableName"] = self.variableName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageId"] as? String {
            self.stageId = value
        }
        if let value = dict["VariableName"] as? String {
            self.variableName = value
        }
    }
}

public class DeleteApiStageVariableResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteApiStageVariableResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteApiStageVariableResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteApiStageVariableResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteAppRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var appId: Int64?

    public var securityToken: String?

    public var tag: [DeleteAppRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? Int64 {
            self.appId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [DeleteAppRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = DeleteAppRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class DeleteAppResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteAppResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteAppResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteAppResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteAppCodeRequest : Tea.TeaModel {
    public var appCode: String?

    public var appId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appCode != nil {
            map["AppCode"] = self.appCode!
        }
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppCode"] as? String {
            self.appCode = value
        }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
    }
}

public class DeleteAppCodeResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteAppCodeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteAppCodeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteAppCodeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteAppKeyRequest : Tea.TeaModel {
    public var appId: String?

    public var appKey: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.appKey != nil {
            map["AppKey"] = self.appKey!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["AppKey"] as? String {
            self.appKey = value
        }
    }
}

public class DeleteAppKeyResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteAppKeyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteAppKeyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteAppKeyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteBackendRequest : Tea.TeaModel {
    public var backendId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.backendId != nil {
            map["BackendId"] = self.backendId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BackendId"] as? String {
            self.backendId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DeleteBackendResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteBackendResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteBackendResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteBackendResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteBackendModelRequest : Tea.TeaModel {
    public var backendId: String?

    public var backendModelId: String?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.backendId != nil {
            map["BackendId"] = self.backendId!
        }
        if self.backendModelId != nil {
            map["BackendModelId"] = self.backendModelId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BackendId"] as? String {
            self.backendId = value
        }
        if let value = dict["BackendModelId"] as? String {
            self.backendModelId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class DeleteBackendModelResponseBody : Tea.TeaModel {
    public var operationId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.operationId != nil {
            map["OperationId"] = self.operationId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OperationId"] as? String {
            self.operationId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteBackendModelResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteBackendModelResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteBackendModelResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDatasetRequest : Tea.TeaModel {
    public var datasetId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetId != nil {
            map["DatasetId"] = self.datasetId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetId"] as? String {
            self.datasetId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DeleteDatasetResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteDatasetResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDatasetResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDatasetResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDatasetItemRequest : Tea.TeaModel {
    public var datasetId: String?

    public var datasetItemId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetId != nil {
            map["DatasetId"] = self.datasetId!
        }
        if self.datasetItemId != nil {
            map["DatasetItemId"] = self.datasetItemId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetId"] as? String {
            self.datasetId = value
        }
        if let value = dict["DatasetItemId"] as? String {
            self.datasetItemId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DeleteDatasetItemResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteDatasetItemResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDatasetItemResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDatasetItemResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDomainRequest : Tea.TeaModel {
    public var domainName: String?

    public var groupId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DeleteDomainResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteDomainResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDomainResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDomainResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteDomainCertificateRequest : Tea.TeaModel {
    public var certificateId: String?

    public var domainName: String?

    public var groupId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certificateId != nil {
            map["CertificateId"] = self.certificateId!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CertificateId"] as? String {
            self.certificateId = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DeleteDomainCertificateResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteDomainCertificateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteDomainCertificateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteDomainCertificateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteInstanceRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var instanceId: String?

    public var tag: [DeleteInstanceRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [DeleteInstanceRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = DeleteInstanceRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class DeleteInstanceResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteIpControlRequest : Tea.TeaModel {
    public var ipControlId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ipControlId != nil {
            map["IpControlId"] = self.ipControlId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IpControlId"] as? String {
            self.ipControlId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DeleteIpControlResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteIpControlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteIpControlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteIpControlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteLogConfigRequest : Tea.TeaModel {
    public var logType: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.logType != nil {
            map["LogType"] = self.logType!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["LogType"] as? String {
            self.logType = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DeleteLogConfigResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteLogConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteLogConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteLogConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteModelRequest : Tea.TeaModel {
    public var groupId: String?

    public var modelName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.modelName != nil {
            map["ModelName"] = self.modelName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["ModelName"] as? String {
            self.modelName = value
        }
    }
}

public class DeleteModelResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteModelResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteModelResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteModelResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteMonitorGroupRequest : Tea.TeaModel {
    public var groupId: String?

    public var rawMonitorGroupId: Int64?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.rawMonitorGroupId != nil {
            map["RawMonitorGroupId"] = self.rawMonitorGroupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["RawMonitorGroupId"] as? Int64 {
            self.rawMonitorGroupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DeleteMonitorGroupResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteMonitorGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteMonitorGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteMonitorGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeletePluginRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var pluginId: String?

    public var securityToken: String?

    public var tag: [DeletePluginRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pluginId != nil {
            map["PluginId"] = self.pluginId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PluginId"] as? String {
            self.pluginId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [DeletePluginRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = DeletePluginRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class DeletePluginResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeletePluginResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeletePluginResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeletePluginResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeletePrivateDNSRequest : Tea.TeaModel {
    public var force: Bool?

    public var intranetDomain: String?

    public var securityToken: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.force != nil {
            map["Force"] = self.force!
        }
        if self.intranetDomain != nil {
            map["IntranetDomain"] = self.intranetDomain!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Force"] as? Bool {
            self.force = value
        }
        if let value = dict["IntranetDomain"] as? String {
            self.intranetDomain = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class DeletePrivateDNSResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeletePrivateDNSResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeletePrivateDNSResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeletePrivateDNSResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteSignatureRequest : Tea.TeaModel {
    public var securityToken: String?

    public var signatureId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.signatureId != nil {
            map["SignatureId"] = self.signatureId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["SignatureId"] as? String {
            self.signatureId = value
        }
    }
}

public class DeleteSignatureResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteSignatureResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteSignatureResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteSignatureResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteTrafficControlRequest : Tea.TeaModel {
    public var securityToken: String?

    public var trafficControlId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.trafficControlId != nil {
            map["TrafficControlId"] = self.trafficControlId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["TrafficControlId"] as? String {
            self.trafficControlId = value
        }
    }
}

public class DeleteTrafficControlResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteTrafficControlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteTrafficControlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteTrafficControlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeleteTrafficSpecialControlRequest : Tea.TeaModel {
    public var securityToken: String?

    public var specialKey: String?

    public var specialType: String?

    public var trafficControlId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.specialKey != nil {
            map["SpecialKey"] = self.specialKey!
        }
        if self.specialType != nil {
            map["SpecialType"] = self.specialType!
        }
        if self.trafficControlId != nil {
            map["TrafficControlId"] = self.trafficControlId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["SpecialKey"] as? String {
            self.specialKey = value
        }
        if let value = dict["SpecialType"] as? String {
            self.specialType = value
        }
        if let value = dict["TrafficControlId"] as? String {
            self.trafficControlId = value
        }
    }
}

public class DeleteTrafficSpecialControlResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeleteTrafficSpecialControlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeleteTrafficSpecialControlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeleteTrafficSpecialControlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DeployApiRequest : Tea.TeaModel {
    public var apiId: String?

    public var description_: String?

    public var groupId: String?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class DeployApiResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DeployApiResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DeployApiResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DeployApiResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAbolishApiTaskRequest : Tea.TeaModel {
    public var operationUid: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.operationUid != nil {
            map["OperationUid"] = self.operationUid!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OperationUid"] as? String {
            self.operationUid = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeAbolishApiTaskResponseBody : Tea.TeaModel {
    public class ApiAbolishResults : Tea.TeaModel {
        public class ApiAbolishResult : Tea.TeaModel {
            public var abolishStatus: String?

            public var apiName: String?

            public var apiUid: String?

            public var errorMsg: String?

            public var groupId: String?

            public var groupName: String?

            public var stageId: String?

            public var stageName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.abolishStatus != nil {
                    map["AbolishStatus"] = self.abolishStatus!
                }
                if self.apiName != nil {
                    map["ApiName"] = self.apiName!
                }
                if self.apiUid != nil {
                    map["ApiUid"] = self.apiUid!
                }
                if self.errorMsg != nil {
                    map["ErrorMsg"] = self.errorMsg!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupName != nil {
                    map["GroupName"] = self.groupName!
                }
                if self.stageId != nil {
                    map["StageId"] = self.stageId!
                }
                if self.stageName != nil {
                    map["StageName"] = self.stageName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AbolishStatus"] as? String {
                    self.abolishStatus = value
                }
                if let value = dict["ApiName"] as? String {
                    self.apiName = value
                }
                if let value = dict["ApiUid"] as? String {
                    self.apiUid = value
                }
                if let value = dict["ErrorMsg"] as? String {
                    self.errorMsg = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["GroupName"] as? String {
                    self.groupName = value
                }
                if let value = dict["StageId"] as? String {
                    self.stageId = value
                }
                if let value = dict["StageName"] as? String {
                    self.stageName = value
                }
            }
        }
        public var apiAbolishResult: [DescribeAbolishApiTaskResponseBody.ApiAbolishResults.ApiAbolishResult]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiAbolishResult != nil {
                var tmp : [Any] = []
                for k in self.apiAbolishResult! {
                    tmp.append(k.toMap())
                }
                map["ApiAbolishResult"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiAbolishResult"] as? [Any?] {
                var tmp : [DescribeAbolishApiTaskResponseBody.ApiAbolishResults.ApiAbolishResult] = []
                for v in value {
                    if v != nil {
                        var model = DescribeAbolishApiTaskResponseBody.ApiAbolishResults.ApiAbolishResult()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.apiAbolishResult = tmp
            }
        }
    }
    public var apiAbolishResults: DescribeAbolishApiTaskResponseBody.ApiAbolishResults?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.apiAbolishResults?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiAbolishResults != nil {
            map["ApiAbolishResults"] = self.apiAbolishResults?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiAbolishResults"] as? [String: Any?] {
            var model = DescribeAbolishApiTaskResponseBody.ApiAbolishResults()
            model.fromMap(value)
            self.apiAbolishResults = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeAbolishApiTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAbolishApiTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAbolishApiTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAccessControlListAttributeRequest : Tea.TeaModel {
    public var aclId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aclId != nil {
            map["AclId"] = self.aclId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AclId"] as? String {
            self.aclId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeAccessControlListAttributeResponseBody : Tea.TeaModel {
    public class AclEntrys : Tea.TeaModel {
        public class AclEntry : Tea.TeaModel {
            public var aclEntryComment: String?

            public var aclEntryIp: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.aclEntryComment != nil {
                    map["AclEntryComment"] = self.aclEntryComment!
                }
                if self.aclEntryIp != nil {
                    map["AclEntryIp"] = self.aclEntryIp!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AclEntryComment"] as? String {
                    self.aclEntryComment = value
                }
                if let value = dict["AclEntryIp"] as? String {
                    self.aclEntryIp = value
                }
            }
        }
        public var aclEntry: [DescribeAccessControlListAttributeResponseBody.AclEntrys.AclEntry]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.aclEntry != nil {
                var tmp : [Any] = []
                for k in self.aclEntry! {
                    tmp.append(k.toMap())
                }
                map["AclEntry"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AclEntry"] as? [Any?] {
                var tmp : [DescribeAccessControlListAttributeResponseBody.AclEntrys.AclEntry] = []
                for v in value {
                    if v != nil {
                        var model = DescribeAccessControlListAttributeResponseBody.AclEntrys.AclEntry()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.aclEntry = tmp
            }
        }
    }
    public var aclEntrys: DescribeAccessControlListAttributeResponseBody.AclEntrys?

    public var aclId: String?

    public var aclName: String?

    public var addressIPVersion: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.aclEntrys?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aclEntrys != nil {
            map["AclEntrys"] = self.aclEntrys?.toMap()
        }
        if self.aclId != nil {
            map["AclId"] = self.aclId!
        }
        if self.aclName != nil {
            map["AclName"] = self.aclName!
        }
        if self.addressIPVersion != nil {
            map["AddressIPVersion"] = self.addressIPVersion!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AclEntrys"] as? [String: Any?] {
            var model = DescribeAccessControlListAttributeResponseBody.AclEntrys()
            model.fromMap(value)
            self.aclEntrys = model
        }
        if let value = dict["AclId"] as? String {
            self.aclId = value
        }
        if let value = dict["AclName"] as? String {
            self.aclName = value
        }
        if let value = dict["AddressIPVersion"] as? String {
            self.addressIPVersion = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeAccessControlListAttributeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAccessControlListAttributeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAccessControlListAttributeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAccessControlListsRequest : Tea.TeaModel {
    public var aclName: String?

    public var addressIPVersion: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aclName != nil {
            map["AclName"] = self.aclName!
        }
        if self.addressIPVersion != nil {
            map["AddressIPVersion"] = self.addressIPVersion!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AclName"] as? String {
            self.aclName = value
        }
        if let value = dict["AddressIPVersion"] as? String {
            self.addressIPVersion = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeAccessControlListsResponseBody : Tea.TeaModel {
    public class Acls : Tea.TeaModel {
        public class Acl : Tea.TeaModel {
            public var aclId: String?

            public var aclName: String?

            public var addressIPVersion: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.aclId != nil {
                    map["AclId"] = self.aclId!
                }
                if self.aclName != nil {
                    map["AclName"] = self.aclName!
                }
                if self.addressIPVersion != nil {
                    map["AddressIPVersion"] = self.addressIPVersion!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AclId"] as? String {
                    self.aclId = value
                }
                if let value = dict["AclName"] as? String {
                    self.aclName = value
                }
                if let value = dict["AddressIPVersion"] as? String {
                    self.addressIPVersion = value
                }
            }
        }
        public var acl: [DescribeAccessControlListsResponseBody.Acls.Acl]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.acl != nil {
                var tmp : [Any] = []
                for k in self.acl! {
                    tmp.append(k.toMap())
                }
                map["Acl"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Acl"] as? [Any?] {
                var tmp : [DescribeAccessControlListsResponseBody.Acls.Acl] = []
                for v in value {
                    if v != nil {
                        var model = DescribeAccessControlListsResponseBody.Acls.Acl()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.acl = tmp
            }
        }
    }
    public var acls: DescribeAccessControlListsResponseBody.Acls?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.acls?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.acls != nil {
            map["Acls"] = self.acls?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Acls"] as? [String: Any?] {
            var model = DescribeAccessControlListsResponseBody.Acls()
            model.fromMap(value)
            self.acls = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeAccessControlListsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAccessControlListsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAccessControlListsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApiRequest : Tea.TeaModel {
    public var apiId: String?

    public var groupId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeApiResponseBody : Tea.TeaModel {
    public class BackendConfig : Tea.TeaModel {
        public var backendId: String?

        public var backendName: String?

        public var backendType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.backendId != nil {
                map["BackendId"] = self.backendId!
            }
            if self.backendName != nil {
                map["BackendName"] = self.backendName!
            }
            if self.backendType != nil {
                map["BackendType"] = self.backendType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BackendId"] as? String {
                self.backendId = value
            }
            if let value = dict["BackendName"] as? String {
                self.backendName = value
            }
            if let value = dict["BackendType"] as? String {
                self.backendType = value
            }
        }
    }
    public class ConstantParameters : Tea.TeaModel {
        public class ConstantParameter : Tea.TeaModel {
            public var constantValue: String?

            public var description_: String?

            public var location: String?

            public var serviceParameterName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.constantValue != nil {
                    map["ConstantValue"] = self.constantValue!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.location != nil {
                    map["Location"] = self.location!
                }
                if self.serviceParameterName != nil {
                    map["ServiceParameterName"] = self.serviceParameterName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConstantValue"] as? String {
                    self.constantValue = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Location"] as? String {
                    self.location = value
                }
                if let value = dict["ServiceParameterName"] as? String {
                    self.serviceParameterName = value
                }
            }
        }
        public var constantParameter: [DescribeApiResponseBody.ConstantParameters.ConstantParameter]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.constantParameter != nil {
                var tmp : [Any] = []
                for k in self.constantParameter! {
                    tmp.append(k.toMap())
                }
                map["ConstantParameter"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConstantParameter"] as? [Any?] {
                var tmp : [DescribeApiResponseBody.ConstantParameters.ConstantParameter] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiResponseBody.ConstantParameters.ConstantParameter()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.constantParameter = tmp
            }
        }
    }
    public class CustomSystemParameters : Tea.TeaModel {
        public class CustomSystemParameter : Tea.TeaModel {
            public var demoValue: String?

            public var description_: String?

            public var location: String?

            public var parameterName: String?

            public var serviceParameterName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.demoValue != nil {
                    map["DemoValue"] = self.demoValue!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.location != nil {
                    map["Location"] = self.location!
                }
                if self.parameterName != nil {
                    map["ParameterName"] = self.parameterName!
                }
                if self.serviceParameterName != nil {
                    map["ServiceParameterName"] = self.serviceParameterName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DemoValue"] as? String {
                    self.demoValue = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Location"] as? String {
                    self.location = value
                }
                if let value = dict["ParameterName"] as? String {
                    self.parameterName = value
                }
                if let value = dict["ServiceParameterName"] as? String {
                    self.serviceParameterName = value
                }
            }
        }
        public var customSystemParameter: [DescribeApiResponseBody.CustomSystemParameters.CustomSystemParameter]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.customSystemParameter != nil {
                var tmp : [Any] = []
                for k in self.customSystemParameter! {
                    tmp.append(k.toMap())
                }
                map["CustomSystemParameter"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CustomSystemParameter"] as? [Any?] {
                var tmp : [DescribeApiResponseBody.CustomSystemParameters.CustomSystemParameter] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiResponseBody.CustomSystemParameters.CustomSystemParameter()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.customSystemParameter = tmp
            }
        }
    }
    public class DeployedInfos : Tea.TeaModel {
        public class DeployedInfo : Tea.TeaModel {
            public var deployedStatus: String?

            public var effectiveVersion: String?

            public var stageName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.deployedStatus != nil {
                    map["DeployedStatus"] = self.deployedStatus!
                }
                if self.effectiveVersion != nil {
                    map["EffectiveVersion"] = self.effectiveVersion!
                }
                if self.stageName != nil {
                    map["StageName"] = self.stageName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DeployedStatus"] as? String {
                    self.deployedStatus = value
                }
                if let value = dict["EffectiveVersion"] as? String {
                    self.effectiveVersion = value
                }
                if let value = dict["StageName"] as? String {
                    self.stageName = value
                }
            }
        }
        public var deployedInfo: [DescribeApiResponseBody.DeployedInfos.DeployedInfo]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.deployedInfo != nil {
                var tmp : [Any] = []
                for k in self.deployedInfo! {
                    tmp.append(k.toMap())
                }
                map["DeployedInfo"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DeployedInfo"] as? [Any?] {
                var tmp : [DescribeApiResponseBody.DeployedInfos.DeployedInfo] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiResponseBody.DeployedInfos.DeployedInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.deployedInfo = tmp
            }
        }
    }
    public class ErrorCodeSamples : Tea.TeaModel {
        public class ErrorCodeSample : Tea.TeaModel {
            public var code: String?

            public var description_: String?

            public var message: String?

            public var model: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["Code"] = self.code!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.message != nil {
                    map["Message"] = self.message!
                }
                if self.model != nil {
                    map["Model"] = self.model!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Code"] as? String {
                    self.code = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Message"] as? String {
                    self.message = value
                }
                if let value = dict["Model"] as? String {
                    self.model = value
                }
            }
        }
        public var errorCodeSample: [DescribeApiResponseBody.ErrorCodeSamples.ErrorCodeSample]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCodeSample != nil {
                var tmp : [Any] = []
                for k in self.errorCodeSample! {
                    tmp.append(k.toMap())
                }
                map["ErrorCodeSample"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCodeSample"] as? [Any?] {
                var tmp : [DescribeApiResponseBody.ErrorCodeSamples.ErrorCodeSample] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiResponseBody.ErrorCodeSamples.ErrorCodeSample()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.errorCodeSample = tmp
            }
        }
    }
    public class OpenIdConnectConfig : Tea.TeaModel {
        public var idTokenParamName: String?

        public var openIdApiType: String?

        public var publicKey: String?

        public var publicKeyId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.idTokenParamName != nil {
                map["IdTokenParamName"] = self.idTokenParamName!
            }
            if self.openIdApiType != nil {
                map["OpenIdApiType"] = self.openIdApiType!
            }
            if self.publicKey != nil {
                map["PublicKey"] = self.publicKey!
            }
            if self.publicKeyId != nil {
                map["PublicKeyId"] = self.publicKeyId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["IdTokenParamName"] as? String {
                self.idTokenParamName = value
            }
            if let value = dict["OpenIdApiType"] as? String {
                self.openIdApiType = value
            }
            if let value = dict["PublicKey"] as? String {
                self.publicKey = value
            }
            if let value = dict["PublicKeyId"] as? String {
                self.publicKeyId = value
            }
        }
    }
    public class RequestConfig : Tea.TeaModel {
        public var bodyFormat: String?

        public var bodyModel: String?

        public var escapePathParam: Bool?

        public var postBodyDescription: String?

        public var requestHttpMethod: String?

        public var requestMode: String?

        public var requestPath: String?

        public var requestProtocol: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bodyFormat != nil {
                map["BodyFormat"] = self.bodyFormat!
            }
            if self.bodyModel != nil {
                map["BodyModel"] = self.bodyModel!
            }
            if self.escapePathParam != nil {
                map["EscapePathParam"] = self.escapePathParam!
            }
            if self.postBodyDescription != nil {
                map["PostBodyDescription"] = self.postBodyDescription!
            }
            if self.requestHttpMethod != nil {
                map["RequestHttpMethod"] = self.requestHttpMethod!
            }
            if self.requestMode != nil {
                map["RequestMode"] = self.requestMode!
            }
            if self.requestPath != nil {
                map["RequestPath"] = self.requestPath!
            }
            if self.requestProtocol != nil {
                map["RequestProtocol"] = self.requestProtocol!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BodyFormat"] as? String {
                self.bodyFormat = value
            }
            if let value = dict["BodyModel"] as? String {
                self.bodyModel = value
            }
            if let value = dict["EscapePathParam"] as? Bool {
                self.escapePathParam = value
            }
            if let value = dict["PostBodyDescription"] as? String {
                self.postBodyDescription = value
            }
            if let value = dict["RequestHttpMethod"] as? String {
                self.requestHttpMethod = value
            }
            if let value = dict["RequestMode"] as? String {
                self.requestMode = value
            }
            if let value = dict["RequestPath"] as? String {
                self.requestPath = value
            }
            if let value = dict["RequestProtocol"] as? String {
                self.requestProtocol = value
            }
        }
    }
    public class RequestParameters : Tea.TeaModel {
        public class RequestParameter : Tea.TeaModel {
            public var apiParameterName: String?

            public var arrayItemsType: String?

            public var defaultValue: String?

            public var demoValue: String?

            public var description_: String?

            public var docOrder: Int32?

            public var docShow: String?

            public var enumValue: String?

            public var jsonScheme: String?

            public var location: String?

            public var maxLength: Int64?

            public var maxValue: Int64?

            public var minLength: Int64?

            public var minValue: Int64?

            public var parameterType: String?

            public var regularExpression: String?

            public var required_: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiParameterName != nil {
                    map["ApiParameterName"] = self.apiParameterName!
                }
                if self.arrayItemsType != nil {
                    map["ArrayItemsType"] = self.arrayItemsType!
                }
                if self.defaultValue != nil {
                    map["DefaultValue"] = self.defaultValue!
                }
                if self.demoValue != nil {
                    map["DemoValue"] = self.demoValue!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.docOrder != nil {
                    map["DocOrder"] = self.docOrder!
                }
                if self.docShow != nil {
                    map["DocShow"] = self.docShow!
                }
                if self.enumValue != nil {
                    map["EnumValue"] = self.enumValue!
                }
                if self.jsonScheme != nil {
                    map["JsonScheme"] = self.jsonScheme!
                }
                if self.location != nil {
                    map["Location"] = self.location!
                }
                if self.maxLength != nil {
                    map["MaxLength"] = self.maxLength!
                }
                if self.maxValue != nil {
                    map["MaxValue"] = self.maxValue!
                }
                if self.minLength != nil {
                    map["MinLength"] = self.minLength!
                }
                if self.minValue != nil {
                    map["MinValue"] = self.minValue!
                }
                if self.parameterType != nil {
                    map["ParameterType"] = self.parameterType!
                }
                if self.regularExpression != nil {
                    map["RegularExpression"] = self.regularExpression!
                }
                if self.required_ != nil {
                    map["Required"] = self.required_!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiParameterName"] as? String {
                    self.apiParameterName = value
                }
                if let value = dict["ArrayItemsType"] as? String {
                    self.arrayItemsType = value
                }
                if let value = dict["DefaultValue"] as? String {
                    self.defaultValue = value
                }
                if let value = dict["DemoValue"] as? String {
                    self.demoValue = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DocOrder"] as? Int32 {
                    self.docOrder = value
                }
                if let value = dict["DocShow"] as? String {
                    self.docShow = value
                }
                if let value = dict["EnumValue"] as? String {
                    self.enumValue = value
                }
                if let value = dict["JsonScheme"] as? String {
                    self.jsonScheme = value
                }
                if let value = dict["Location"] as? String {
                    self.location = value
                }
                if let value = dict["MaxLength"] as? Int64 {
                    self.maxLength = value
                }
                if let value = dict["MaxValue"] as? Int64 {
                    self.maxValue = value
                }
                if let value = dict["MinLength"] as? Int64 {
                    self.minLength = value
                }
                if let value = dict["MinValue"] as? Int64 {
                    self.minValue = value
                }
                if let value = dict["ParameterType"] as? String {
                    self.parameterType = value
                }
                if let value = dict["RegularExpression"] as? String {
                    self.regularExpression = value
                }
                if let value = dict["Required"] as? String {
                    self.required_ = value
                }
            }
        }
        public var requestParameter: [DescribeApiResponseBody.RequestParameters.RequestParameter]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.requestParameter != nil {
                var tmp : [Any] = []
                for k in self.requestParameter! {
                    tmp.append(k.toMap())
                }
                map["RequestParameter"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["RequestParameter"] as? [Any?] {
                var tmp : [DescribeApiResponseBody.RequestParameters.RequestParameter] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiResponseBody.RequestParameters.RequestParameter()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.requestParameter = tmp
            }
        }
    }
    public class ServiceConfig : Tea.TeaModel {
        public class EventBridgeConfig : Tea.TeaModel {
            public var eventBridgeRegionId: String?

            public var eventBus: String?

            public var eventSource: String?

            public var roleArn: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.eventBridgeRegionId != nil {
                    map["EventBridgeRegionId"] = self.eventBridgeRegionId!
                }
                if self.eventBus != nil {
                    map["EventBus"] = self.eventBus!
                }
                if self.eventSource != nil {
                    map["EventSource"] = self.eventSource!
                }
                if self.roleArn != nil {
                    map["RoleArn"] = self.roleArn!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EventBridgeRegionId"] as? String {
                    self.eventBridgeRegionId = value
                }
                if let value = dict["EventBus"] as? String {
                    self.eventBus = value
                }
                if let value = dict["EventSource"] as? String {
                    self.eventSource = value
                }
                if let value = dict["RoleArn"] as? String {
                    self.roleArn = value
                }
            }
        }
        public class FunctionComputeConfig : Tea.TeaModel {
            public var contentTypeCatagory: String?

            public var contentTypeValue: String?

            public var fcBaseUrl: String?

            public var fcType: String?

            public var fcVersion: String?

            public var functionName: String?

            public var method: String?

            public var onlyBusinessPath: Bool?

            public var path: String?

            public var qualifier: String?

            public var regionId: String?

            public var roleArn: String?

            public var serviceName: String?

            public var triggerName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.contentTypeCatagory != nil {
                    map["ContentTypeCatagory"] = self.contentTypeCatagory!
                }
                if self.contentTypeValue != nil {
                    map["ContentTypeValue"] = self.contentTypeValue!
                }
                if self.fcBaseUrl != nil {
                    map["FcBaseUrl"] = self.fcBaseUrl!
                }
                if self.fcType != nil {
                    map["FcType"] = self.fcType!
                }
                if self.fcVersion != nil {
                    map["FcVersion"] = self.fcVersion!
                }
                if self.functionName != nil {
                    map["FunctionName"] = self.functionName!
                }
                if self.method != nil {
                    map["Method"] = self.method!
                }
                if self.onlyBusinessPath != nil {
                    map["OnlyBusinessPath"] = self.onlyBusinessPath!
                }
                if self.path != nil {
                    map["Path"] = self.path!
                }
                if self.qualifier != nil {
                    map["Qualifier"] = self.qualifier!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.roleArn != nil {
                    map["RoleArn"] = self.roleArn!
                }
                if self.serviceName != nil {
                    map["ServiceName"] = self.serviceName!
                }
                if self.triggerName != nil {
                    map["TriggerName"] = self.triggerName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ContentTypeCatagory"] as? String {
                    self.contentTypeCatagory = value
                }
                if let value = dict["ContentTypeValue"] as? String {
                    self.contentTypeValue = value
                }
                if let value = dict["FcBaseUrl"] as? String {
                    self.fcBaseUrl = value
                }
                if let value = dict["FcType"] as? String {
                    self.fcType = value
                }
                if let value = dict["FcVersion"] as? String {
                    self.fcVersion = value
                }
                if let value = dict["FunctionName"] as? String {
                    self.functionName = value
                }
                if let value = dict["Method"] as? String {
                    self.method = value
                }
                if let value = dict["OnlyBusinessPath"] as? Bool {
                    self.onlyBusinessPath = value
                }
                if let value = dict["Path"] as? String {
                    self.path = value
                }
                if let value = dict["Qualifier"] as? String {
                    self.qualifier = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["RoleArn"] as? String {
                    self.roleArn = value
                }
                if let value = dict["ServiceName"] as? String {
                    self.serviceName = value
                }
                if let value = dict["TriggerName"] as? String {
                    self.triggerName = value
                }
            }
        }
        public class MockHeaders : Tea.TeaModel {
            public class MockHeader : Tea.TeaModel {
                public var headerName: String?

                public var headerValue: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.headerName != nil {
                        map["HeaderName"] = self.headerName!
                    }
                    if self.headerValue != nil {
                        map["HeaderValue"] = self.headerValue!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["HeaderName"] as? String {
                        self.headerName = value
                    }
                    if let value = dict["HeaderValue"] as? String {
                        self.headerValue = value
                    }
                }
            }
            public var mockHeader: [DescribeApiResponseBody.ServiceConfig.MockHeaders.MockHeader]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.mockHeader != nil {
                    var tmp : [Any] = []
                    for k in self.mockHeader! {
                        tmp.append(k.toMap())
                    }
                    map["MockHeader"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["MockHeader"] as? [Any?] {
                    var tmp : [DescribeApiResponseBody.ServiceConfig.MockHeaders.MockHeader] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeApiResponseBody.ServiceConfig.MockHeaders.MockHeader()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.mockHeader = tmp
                }
            }
        }
        public class OssConfig : Tea.TeaModel {
            public var action: String?

            public var bucketName: String?

            public var key: String?

            public var ossRegionId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.action != nil {
                    map["Action"] = self.action!
                }
                if self.bucketName != nil {
                    map["BucketName"] = self.bucketName!
                }
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.ossRegionId != nil {
                    map["OssRegionId"] = self.ossRegionId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Action"] as? String {
                    self.action = value
                }
                if let value = dict["BucketName"] as? String {
                    self.bucketName = value
                }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["OssRegionId"] as? String {
                    self.ossRegionId = value
                }
            }
        }
        public class VpcConfig : Tea.TeaModel {
            public var instanceId: String?

            public var name: String?

            public var port: Int32?

            public var vpcId: String?

            public var vpcScheme: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.port != nil {
                    map["Port"] = self.port!
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId!
                }
                if self.vpcScheme != nil {
                    map["VpcScheme"] = self.vpcScheme!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Port"] as? Int32 {
                    self.port = value
                }
                if let value = dict["VpcId"] as? String {
                    self.vpcId = value
                }
                if let value = dict["VpcScheme"] as? String {
                    self.vpcScheme = value
                }
            }
        }
        public var aoneAppName: String?

        public var contentTypeCatagory: String?

        public var contentTypeValue: String?

        public var eventBridgeConfig: DescribeApiResponseBody.ServiceConfig.EventBridgeConfig?

        public var functionComputeConfig: DescribeApiResponseBody.ServiceConfig.FunctionComputeConfig?

        public var mock: String?

        public var mockHeaders: DescribeApiResponseBody.ServiceConfig.MockHeaders?

        public var mockResult: String?

        public var mockStatusCode: Int32?

        public var ossConfig: DescribeApiResponseBody.ServiceConfig.OssConfig?

        public var serviceAddress: String?

        public var serviceHttpMethod: String?

        public var servicePath: String?

        public var serviceProtocol: String?

        public var serviceTimeout: Int32?

        public var serviceVpcEnable: String?

        public var vpcConfig: DescribeApiResponseBody.ServiceConfig.VpcConfig?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.eventBridgeConfig?.validate()
            try self.functionComputeConfig?.validate()
            try self.mockHeaders?.validate()
            try self.ossConfig?.validate()
            try self.vpcConfig?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.aoneAppName != nil {
                map["AoneAppName"] = self.aoneAppName!
            }
            if self.contentTypeCatagory != nil {
                map["ContentTypeCatagory"] = self.contentTypeCatagory!
            }
            if self.contentTypeValue != nil {
                map["ContentTypeValue"] = self.contentTypeValue!
            }
            if self.eventBridgeConfig != nil {
                map["EventBridgeConfig"] = self.eventBridgeConfig?.toMap()
            }
            if self.functionComputeConfig != nil {
                map["FunctionComputeConfig"] = self.functionComputeConfig?.toMap()
            }
            if self.mock != nil {
                map["Mock"] = self.mock!
            }
            if self.mockHeaders != nil {
                map["MockHeaders"] = self.mockHeaders?.toMap()
            }
            if self.mockResult != nil {
                map["MockResult"] = self.mockResult!
            }
            if self.mockStatusCode != nil {
                map["MockStatusCode"] = self.mockStatusCode!
            }
            if self.ossConfig != nil {
                map["OssConfig"] = self.ossConfig?.toMap()
            }
            if self.serviceAddress != nil {
                map["ServiceAddress"] = self.serviceAddress!
            }
            if self.serviceHttpMethod != nil {
                map["ServiceHttpMethod"] = self.serviceHttpMethod!
            }
            if self.servicePath != nil {
                map["ServicePath"] = self.servicePath!
            }
            if self.serviceProtocol != nil {
                map["ServiceProtocol"] = self.serviceProtocol!
            }
            if self.serviceTimeout != nil {
                map["ServiceTimeout"] = self.serviceTimeout!
            }
            if self.serviceVpcEnable != nil {
                map["ServiceVpcEnable"] = self.serviceVpcEnable!
            }
            if self.vpcConfig != nil {
                map["VpcConfig"] = self.vpcConfig?.toMap()
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AoneAppName"] as? String {
                self.aoneAppName = value
            }
            if let value = dict["ContentTypeCatagory"] as? String {
                self.contentTypeCatagory = value
            }
            if let value = dict["ContentTypeValue"] as? String {
                self.contentTypeValue = value
            }
            if let value = dict["EventBridgeConfig"] as? [String: Any?] {
                var model = DescribeApiResponseBody.ServiceConfig.EventBridgeConfig()
                model.fromMap(value)
                self.eventBridgeConfig = model
            }
            if let value = dict["FunctionComputeConfig"] as? [String: Any?] {
                var model = DescribeApiResponseBody.ServiceConfig.FunctionComputeConfig()
                model.fromMap(value)
                self.functionComputeConfig = model
            }
            if let value = dict["Mock"] as? String {
                self.mock = value
            }
            if let value = dict["MockHeaders"] as? [String: Any?] {
                var model = DescribeApiResponseBody.ServiceConfig.MockHeaders()
                model.fromMap(value)
                self.mockHeaders = model
            }
            if let value = dict["MockResult"] as? String {
                self.mockResult = value
            }
            if let value = dict["MockStatusCode"] as? Int32 {
                self.mockStatusCode = value
            }
            if let value = dict["OssConfig"] as? [String: Any?] {
                var model = DescribeApiResponseBody.ServiceConfig.OssConfig()
                model.fromMap(value)
                self.ossConfig = model
            }
            if let value = dict["ServiceAddress"] as? String {
                self.serviceAddress = value
            }
            if let value = dict["ServiceHttpMethod"] as? String {
                self.serviceHttpMethod = value
            }
            if let value = dict["ServicePath"] as? String {
                self.servicePath = value
            }
            if let value = dict["ServiceProtocol"] as? String {
                self.serviceProtocol = value
            }
            if let value = dict["ServiceTimeout"] as? Int32 {
                self.serviceTimeout = value
            }
            if let value = dict["ServiceVpcEnable"] as? String {
                self.serviceVpcEnable = value
            }
            if let value = dict["VpcConfig"] as? [String: Any?] {
                var model = DescribeApiResponseBody.ServiceConfig.VpcConfig()
                model.fromMap(value)
                self.vpcConfig = model
            }
        }
    }
    public class ServiceParameters : Tea.TeaModel {
        public class ServiceParameter : Tea.TeaModel {
            public var location: String?

            public var parameterType: String?

            public var serviceParameterName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.location != nil {
                    map["Location"] = self.location!
                }
                if self.parameterType != nil {
                    map["ParameterType"] = self.parameterType!
                }
                if self.serviceParameterName != nil {
                    map["ServiceParameterName"] = self.serviceParameterName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Location"] as? String {
                    self.location = value
                }
                if let value = dict["ParameterType"] as? String {
                    self.parameterType = value
                }
                if let value = dict["ServiceParameterName"] as? String {
                    self.serviceParameterName = value
                }
            }
        }
        public var serviceParameter: [DescribeApiResponseBody.ServiceParameters.ServiceParameter]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.serviceParameter != nil {
                var tmp : [Any] = []
                for k in self.serviceParameter! {
                    tmp.append(k.toMap())
                }
                map["ServiceParameter"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ServiceParameter"] as? [Any?] {
                var tmp : [DescribeApiResponseBody.ServiceParameters.ServiceParameter] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiResponseBody.ServiceParameters.ServiceParameter()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.serviceParameter = tmp
            }
        }
    }
    public class ServiceParametersMap : Tea.TeaModel {
        public class ServiceParameterMap : Tea.TeaModel {
            public var requestParameterName: String?

            public var serviceParameterName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.requestParameterName != nil {
                    map["RequestParameterName"] = self.requestParameterName!
                }
                if self.serviceParameterName != nil {
                    map["ServiceParameterName"] = self.serviceParameterName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["RequestParameterName"] as? String {
                    self.requestParameterName = value
                }
                if let value = dict["ServiceParameterName"] as? String {
                    self.serviceParameterName = value
                }
            }
        }
        public var serviceParameterMap: [DescribeApiResponseBody.ServiceParametersMap.ServiceParameterMap]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.serviceParameterMap != nil {
                var tmp : [Any] = []
                for k in self.serviceParameterMap! {
                    tmp.append(k.toMap())
                }
                map["ServiceParameterMap"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ServiceParameterMap"] as? [Any?] {
                var tmp : [DescribeApiResponseBody.ServiceParametersMap.ServiceParameterMap] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiResponseBody.ServiceParametersMap.ServiceParameterMap()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.serviceParameterMap = tmp
            }
        }
    }
    public class SystemParameters : Tea.TeaModel {
        public class SystemParameter : Tea.TeaModel {
            public var demoValue: String?

            public var description_: String?

            public var location: String?

            public var parameterName: String?

            public var serviceParameterName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.demoValue != nil {
                    map["DemoValue"] = self.demoValue!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.location != nil {
                    map["Location"] = self.location!
                }
                if self.parameterName != nil {
                    map["ParameterName"] = self.parameterName!
                }
                if self.serviceParameterName != nil {
                    map["ServiceParameterName"] = self.serviceParameterName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DemoValue"] as? String {
                    self.demoValue = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Location"] as? String {
                    self.location = value
                }
                if let value = dict["ParameterName"] as? String {
                    self.parameterName = value
                }
                if let value = dict["ServiceParameterName"] as? String {
                    self.serviceParameterName = value
                }
            }
        }
        public var systemParameter: [DescribeApiResponseBody.SystemParameters.SystemParameter]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.systemParameter != nil {
                var tmp : [Any] = []
                for k in self.systemParameter! {
                    tmp.append(k.toMap())
                }
                map["SystemParameter"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SystemParameter"] as? [Any?] {
                var tmp : [DescribeApiResponseBody.SystemParameters.SystemParameter] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiResponseBody.SystemParameters.SystemParameter()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.systemParameter = tmp
            }
        }
    }
    public class TagList : Tea.TeaModel {
        public class Tag : Tea.TeaModel {
            public var tagKey: String?

            public var tagValue: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.tagKey != nil {
                    map["TagKey"] = self.tagKey!
                }
                if self.tagValue != nil {
                    map["TagValue"] = self.tagValue!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["TagKey"] as? String {
                    self.tagKey = value
                }
                if let value = dict["TagValue"] as? String {
                    self.tagValue = value
                }
            }
        }
        public var tag: [DescribeApiResponseBody.TagList.Tag]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tag != nil {
                var tmp : [Any] = []
                for k in self.tag! {
                    tmp.append(k.toMap())
                }
                map["Tag"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Tag"] as? [Any?] {
                var tmp : [DescribeApiResponseBody.TagList.Tag] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiResponseBody.TagList.Tag()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tag = tmp
            }
        }
    }
    public var allowSignatureMethod: String?

    public var apiId: String?

    public var apiName: String?

    public var appCodeAuthType: String?

    public var authType: String?

    public var backendConfig: DescribeApiResponseBody.BackendConfig?

    public var backendEnable: Bool?

    public var constantParameters: DescribeApiResponseBody.ConstantParameters?

    public var createdTime: String?

    public var customSystemParameters: DescribeApiResponseBody.CustomSystemParameters?

    public var deployedInfos: DescribeApiResponseBody.DeployedInfos?

    public var description_: String?

    public var disableInternet: Bool?

    public var errorCodeSamples: DescribeApiResponseBody.ErrorCodeSamples?

    public var failResultSample: String?

    public var forceNonceCheck: Bool?

    public var groupId: String?

    public var groupName: String?

    public var mock: String?

    public var mockResult: String?

    public var modifiedTime: String?

    public var openIdConnectConfig: DescribeApiResponseBody.OpenIdConnectConfig?

    public var regionId: String?

    public var requestConfig: DescribeApiResponseBody.RequestConfig?

    public var requestId: String?

    public var requestParameters: DescribeApiResponseBody.RequestParameters?

    public var resultBodyModel: String?

    public var resultSample: String?

    public var resultType: String?

    public var serviceConfig: DescribeApiResponseBody.ServiceConfig?

    public var serviceParameters: DescribeApiResponseBody.ServiceParameters?

    public var serviceParametersMap: DescribeApiResponseBody.ServiceParametersMap?

    public var systemParameters: DescribeApiResponseBody.SystemParameters?

    public var tagList: DescribeApiResponseBody.TagList?

    public var visibility: String?

    public var webSocketApiType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.backendConfig?.validate()
        try self.constantParameters?.validate()
        try self.customSystemParameters?.validate()
        try self.deployedInfos?.validate()
        try self.errorCodeSamples?.validate()
        try self.openIdConnectConfig?.validate()
        try self.requestConfig?.validate()
        try self.requestParameters?.validate()
        try self.serviceConfig?.validate()
        try self.serviceParameters?.validate()
        try self.serviceParametersMap?.validate()
        try self.systemParameters?.validate()
        try self.tagList?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.allowSignatureMethod != nil {
            map["AllowSignatureMethod"] = self.allowSignatureMethod!
        }
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.apiName != nil {
            map["ApiName"] = self.apiName!
        }
        if self.appCodeAuthType != nil {
            map["AppCodeAuthType"] = self.appCodeAuthType!
        }
        if self.authType != nil {
            map["AuthType"] = self.authType!
        }
        if self.backendConfig != nil {
            map["BackendConfig"] = self.backendConfig?.toMap()
        }
        if self.backendEnable != nil {
            map["BackendEnable"] = self.backendEnable!
        }
        if self.constantParameters != nil {
            map["ConstantParameters"] = self.constantParameters?.toMap()
        }
        if self.createdTime != nil {
            map["CreatedTime"] = self.createdTime!
        }
        if self.customSystemParameters != nil {
            map["CustomSystemParameters"] = self.customSystemParameters?.toMap()
        }
        if self.deployedInfos != nil {
            map["DeployedInfos"] = self.deployedInfos?.toMap()
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.disableInternet != nil {
            map["DisableInternet"] = self.disableInternet!
        }
        if self.errorCodeSamples != nil {
            map["ErrorCodeSamples"] = self.errorCodeSamples?.toMap()
        }
        if self.failResultSample != nil {
            map["FailResultSample"] = self.failResultSample!
        }
        if self.forceNonceCheck != nil {
            map["ForceNonceCheck"] = self.forceNonceCheck!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.mock != nil {
            map["Mock"] = self.mock!
        }
        if self.mockResult != nil {
            map["MockResult"] = self.mockResult!
        }
        if self.modifiedTime != nil {
            map["ModifiedTime"] = self.modifiedTime!
        }
        if self.openIdConnectConfig != nil {
            map["OpenIdConnectConfig"] = self.openIdConnectConfig?.toMap()
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.requestConfig != nil {
            map["RequestConfig"] = self.requestConfig?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.requestParameters != nil {
            map["RequestParameters"] = self.requestParameters?.toMap()
        }
        if self.resultBodyModel != nil {
            map["ResultBodyModel"] = self.resultBodyModel!
        }
        if self.resultSample != nil {
            map["ResultSample"] = self.resultSample!
        }
        if self.resultType != nil {
            map["ResultType"] = self.resultType!
        }
        if self.serviceConfig != nil {
            map["ServiceConfig"] = self.serviceConfig?.toMap()
        }
        if self.serviceParameters != nil {
            map["ServiceParameters"] = self.serviceParameters?.toMap()
        }
        if self.serviceParametersMap != nil {
            map["ServiceParametersMap"] = self.serviceParametersMap?.toMap()
        }
        if self.systemParameters != nil {
            map["SystemParameters"] = self.systemParameters?.toMap()
        }
        if self.tagList != nil {
            map["TagList"] = self.tagList?.toMap()
        }
        if self.visibility != nil {
            map["Visibility"] = self.visibility!
        }
        if self.webSocketApiType != nil {
            map["WebSocketApiType"] = self.webSocketApiType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AllowSignatureMethod"] as? String {
            self.allowSignatureMethod = value
        }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["ApiName"] as? String {
            self.apiName = value
        }
        if let value = dict["AppCodeAuthType"] as? String {
            self.appCodeAuthType = value
        }
        if let value = dict["AuthType"] as? String {
            self.authType = value
        }
        if let value = dict["BackendConfig"] as? [String: Any?] {
            var model = DescribeApiResponseBody.BackendConfig()
            model.fromMap(value)
            self.backendConfig = model
        }
        if let value = dict["BackendEnable"] as? Bool {
            self.backendEnable = value
        }
        if let value = dict["ConstantParameters"] as? [String: Any?] {
            var model = DescribeApiResponseBody.ConstantParameters()
            model.fromMap(value)
            self.constantParameters = model
        }
        if let value = dict["CreatedTime"] as? String {
            self.createdTime = value
        }
        if let value = dict["CustomSystemParameters"] as? [String: Any?] {
            var model = DescribeApiResponseBody.CustomSystemParameters()
            model.fromMap(value)
            self.customSystemParameters = model
        }
        if let value = dict["DeployedInfos"] as? [String: Any?] {
            var model = DescribeApiResponseBody.DeployedInfos()
            model.fromMap(value)
            self.deployedInfos = model
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DisableInternet"] as? Bool {
            self.disableInternet = value
        }
        if let value = dict["ErrorCodeSamples"] as? [String: Any?] {
            var model = DescribeApiResponseBody.ErrorCodeSamples()
            model.fromMap(value)
            self.errorCodeSamples = model
        }
        if let value = dict["FailResultSample"] as? String {
            self.failResultSample = value
        }
        if let value = dict["ForceNonceCheck"] as? Bool {
            self.forceNonceCheck = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["Mock"] as? String {
            self.mock = value
        }
        if let value = dict["MockResult"] as? String {
            self.mockResult = value
        }
        if let value = dict["ModifiedTime"] as? String {
            self.modifiedTime = value
        }
        if let value = dict["OpenIdConnectConfig"] as? [String: Any?] {
            var model = DescribeApiResponseBody.OpenIdConnectConfig()
            model.fromMap(value)
            self.openIdConnectConfig = model
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RequestConfig"] as? [String: Any?] {
            var model = DescribeApiResponseBody.RequestConfig()
            model.fromMap(value)
            self.requestConfig = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RequestParameters"] as? [String: Any?] {
            var model = DescribeApiResponseBody.RequestParameters()
            model.fromMap(value)
            self.requestParameters = model
        }
        if let value = dict["ResultBodyModel"] as? String {
            self.resultBodyModel = value
        }
        if let value = dict["ResultSample"] as? String {
            self.resultSample = value
        }
        if let value = dict["ResultType"] as? String {
            self.resultType = value
        }
        if let value = dict["ServiceConfig"] as? [String: Any?] {
            var model = DescribeApiResponseBody.ServiceConfig()
            model.fromMap(value)
            self.serviceConfig = model
        }
        if let value = dict["ServiceParameters"] as? [String: Any?] {
            var model = DescribeApiResponseBody.ServiceParameters()
            model.fromMap(value)
            self.serviceParameters = model
        }
        if let value = dict["ServiceParametersMap"] as? [String: Any?] {
            var model = DescribeApiResponseBody.ServiceParametersMap()
            model.fromMap(value)
            self.serviceParametersMap = model
        }
        if let value = dict["SystemParameters"] as? [String: Any?] {
            var model = DescribeApiResponseBody.SystemParameters()
            model.fromMap(value)
            self.systemParameters = model
        }
        if let value = dict["TagList"] as? [String: Any?] {
            var model = DescribeApiResponseBody.TagList()
            model.fromMap(value)
            self.tagList = model
        }
        if let value = dict["Visibility"] as? String {
            self.visibility = value
        }
        if let value = dict["WebSocketApiType"] as? String {
            self.webSocketApiType = value
        }
    }
}

public class DescribeApiResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApiResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApiResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApiDocRequest : Tea.TeaModel {
    public var apiId: String?

    public var groupId: String?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class DescribeApiDocResponseBody : Tea.TeaModel {
    public class ErrorCodeSamples : Tea.TeaModel {
        public class ErrorCodeSample : Tea.TeaModel {
            public var code: String?

            public var description_: String?

            public var message: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["Code"] = self.code!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.message != nil {
                    map["Message"] = self.message!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Code"] as? String {
                    self.code = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Message"] as? String {
                    self.message = value
                }
            }
        }
        public var errorCodeSample: [DescribeApiDocResponseBody.ErrorCodeSamples.ErrorCodeSample]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCodeSample != nil {
                var tmp : [Any] = []
                for k in self.errorCodeSample! {
                    tmp.append(k.toMap())
                }
                map["ErrorCodeSample"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCodeSample"] as? [Any?] {
                var tmp : [DescribeApiDocResponseBody.ErrorCodeSamples.ErrorCodeSample] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiDocResponseBody.ErrorCodeSamples.ErrorCodeSample()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.errorCodeSample = tmp
            }
        }
    }
    public class RequestConfig : Tea.TeaModel {
        public var bodyFormat: String?

        public var escapePathParam: Bool?

        public var postBodyDescription: String?

        public var requestHttpMethod: String?

        public var requestMode: String?

        public var requestPath: String?

        public var requestProtocol: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bodyFormat != nil {
                map["BodyFormat"] = self.bodyFormat!
            }
            if self.escapePathParam != nil {
                map["EscapePathParam"] = self.escapePathParam!
            }
            if self.postBodyDescription != nil {
                map["PostBodyDescription"] = self.postBodyDescription!
            }
            if self.requestHttpMethod != nil {
                map["RequestHttpMethod"] = self.requestHttpMethod!
            }
            if self.requestMode != nil {
                map["RequestMode"] = self.requestMode!
            }
            if self.requestPath != nil {
                map["RequestPath"] = self.requestPath!
            }
            if self.requestProtocol != nil {
                map["RequestProtocol"] = self.requestProtocol!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BodyFormat"] as? String {
                self.bodyFormat = value
            }
            if let value = dict["EscapePathParam"] as? Bool {
                self.escapePathParam = value
            }
            if let value = dict["PostBodyDescription"] as? String {
                self.postBodyDescription = value
            }
            if let value = dict["RequestHttpMethod"] as? String {
                self.requestHttpMethod = value
            }
            if let value = dict["RequestMode"] as? String {
                self.requestMode = value
            }
            if let value = dict["RequestPath"] as? String {
                self.requestPath = value
            }
            if let value = dict["RequestProtocol"] as? String {
                self.requestProtocol = value
            }
        }
    }
    public class RequestParameters : Tea.TeaModel {
        public class RequestParameter : Tea.TeaModel {
            public var apiParameterName: String?

            public var arrayItemsType: String?

            public var defaultValue: String?

            public var demoValue: String?

            public var description_: String?

            public var docOrder: Int32?

            public var docShow: String?

            public var enumValue: String?

            public var jsonScheme: String?

            public var location: String?

            public var maxLength: Int64?

            public var maxValue: Int64?

            public var minLength: Int64?

            public var minValue: Int64?

            public var parameterType: String?

            public var regularExpression: String?

            public var required_: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiParameterName != nil {
                    map["ApiParameterName"] = self.apiParameterName!
                }
                if self.arrayItemsType != nil {
                    map["ArrayItemsType"] = self.arrayItemsType!
                }
                if self.defaultValue != nil {
                    map["DefaultValue"] = self.defaultValue!
                }
                if self.demoValue != nil {
                    map["DemoValue"] = self.demoValue!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.docOrder != nil {
                    map["DocOrder"] = self.docOrder!
                }
                if self.docShow != nil {
                    map["DocShow"] = self.docShow!
                }
                if self.enumValue != nil {
                    map["EnumValue"] = self.enumValue!
                }
                if self.jsonScheme != nil {
                    map["JsonScheme"] = self.jsonScheme!
                }
                if self.location != nil {
                    map["Location"] = self.location!
                }
                if self.maxLength != nil {
                    map["MaxLength"] = self.maxLength!
                }
                if self.maxValue != nil {
                    map["MaxValue"] = self.maxValue!
                }
                if self.minLength != nil {
                    map["MinLength"] = self.minLength!
                }
                if self.minValue != nil {
                    map["MinValue"] = self.minValue!
                }
                if self.parameterType != nil {
                    map["ParameterType"] = self.parameterType!
                }
                if self.regularExpression != nil {
                    map["RegularExpression"] = self.regularExpression!
                }
                if self.required_ != nil {
                    map["Required"] = self.required_!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiParameterName"] as? String {
                    self.apiParameterName = value
                }
                if let value = dict["ArrayItemsType"] as? String {
                    self.arrayItemsType = value
                }
                if let value = dict["DefaultValue"] as? String {
                    self.defaultValue = value
                }
                if let value = dict["DemoValue"] as? String {
                    self.demoValue = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DocOrder"] as? Int32 {
                    self.docOrder = value
                }
                if let value = dict["DocShow"] as? String {
                    self.docShow = value
                }
                if let value = dict["EnumValue"] as? String {
                    self.enumValue = value
                }
                if let value = dict["JsonScheme"] as? String {
                    self.jsonScheme = value
                }
                if let value = dict["Location"] as? String {
                    self.location = value
                }
                if let value = dict["MaxLength"] as? Int64 {
                    self.maxLength = value
                }
                if let value = dict["MaxValue"] as? Int64 {
                    self.maxValue = value
                }
                if let value = dict["MinLength"] as? Int64 {
                    self.minLength = value
                }
                if let value = dict["MinValue"] as? Int64 {
                    self.minValue = value
                }
                if let value = dict["ParameterType"] as? String {
                    self.parameterType = value
                }
                if let value = dict["RegularExpression"] as? String {
                    self.regularExpression = value
                }
                if let value = dict["Required"] as? String {
                    self.required_ = value
                }
            }
        }
        public var requestParameter: [DescribeApiDocResponseBody.RequestParameters.RequestParameter]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.requestParameter != nil {
                var tmp : [Any] = []
                for k in self.requestParameter! {
                    tmp.append(k.toMap())
                }
                map["RequestParameter"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["RequestParameter"] as? [Any?] {
                var tmp : [DescribeApiDocResponseBody.RequestParameters.RequestParameter] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiDocResponseBody.RequestParameters.RequestParameter()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.requestParameter = tmp
            }
        }
    }
    public var apiId: String?

    public var apiName: String?

    public var authType: String?

    public var deployedTime: String?

    public var description_: String?

    public var disableInternet: Bool?

    public var errorCodeSamples: DescribeApiDocResponseBody.ErrorCodeSamples?

    public var failResultSample: String?

    public var forceNonceCheck: Bool?

    public var groupId: String?

    public var groupName: String?

    public var regionId: String?

    public var requestConfig: DescribeApiDocResponseBody.RequestConfig?

    public var requestId: String?

    public var requestParameters: DescribeApiDocResponseBody.RequestParameters?

    public var resultSample: String?

    public var resultType: String?

    public var stageName: String?

    public var visibility: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.errorCodeSamples?.validate()
        try self.requestConfig?.validate()
        try self.requestParameters?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.apiName != nil {
            map["ApiName"] = self.apiName!
        }
        if self.authType != nil {
            map["AuthType"] = self.authType!
        }
        if self.deployedTime != nil {
            map["DeployedTime"] = self.deployedTime!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.disableInternet != nil {
            map["DisableInternet"] = self.disableInternet!
        }
        if self.errorCodeSamples != nil {
            map["ErrorCodeSamples"] = self.errorCodeSamples?.toMap()
        }
        if self.failResultSample != nil {
            map["FailResultSample"] = self.failResultSample!
        }
        if self.forceNonceCheck != nil {
            map["ForceNonceCheck"] = self.forceNonceCheck!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.requestConfig != nil {
            map["RequestConfig"] = self.requestConfig?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.requestParameters != nil {
            map["RequestParameters"] = self.requestParameters?.toMap()
        }
        if self.resultSample != nil {
            map["ResultSample"] = self.resultSample!
        }
        if self.resultType != nil {
            map["ResultType"] = self.resultType!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        if self.visibility != nil {
            map["Visibility"] = self.visibility!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["ApiName"] as? String {
            self.apiName = value
        }
        if let value = dict["AuthType"] as? String {
            self.authType = value
        }
        if let value = dict["DeployedTime"] as? String {
            self.deployedTime = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DisableInternet"] as? Bool {
            self.disableInternet = value
        }
        if let value = dict["ErrorCodeSamples"] as? [String: Any?] {
            var model = DescribeApiDocResponseBody.ErrorCodeSamples()
            model.fromMap(value)
            self.errorCodeSamples = model
        }
        if let value = dict["FailResultSample"] as? String {
            self.failResultSample = value
        }
        if let value = dict["ForceNonceCheck"] as? Bool {
            self.forceNonceCheck = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RequestConfig"] as? [String: Any?] {
            var model = DescribeApiDocResponseBody.RequestConfig()
            model.fromMap(value)
            self.requestConfig = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RequestParameters"] as? [String: Any?] {
            var model = DescribeApiDocResponseBody.RequestParameters()
            model.fromMap(value)
            self.requestParameters = model
        }
        if let value = dict["ResultSample"] as? String {
            self.resultSample = value
        }
        if let value = dict["ResultType"] as? String {
            self.resultType = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
        if let value = dict["Visibility"] as? String {
            self.visibility = value
        }
    }
}

public class DescribeApiDocResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApiDocResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApiDocResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApiGroupRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var groupId: String?

    public var securityToken: String?

    public var tag: [DescribeApiGroupRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [DescribeApiGroupRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = DescribeApiGroupRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class DescribeApiGroupResponseBody : Tea.TeaModel {
    public class CustomDomains : Tea.TeaModel {
        public class DomainItem : Tea.TeaModel {
            public var bindStageAlias: String?

            public var bindStageName: String?

            public var certificateId: String?

            public var certificateName: String?

            public var certificateValidEnd: Int64?

            public var certificateValidStart: Int64?

            public var customDomainType: String?

            public var domainBindingStatus: String?

            public var domainCNAMEStatus: String?

            public var domainLegalStatus: String?

            public var domainName: String?

            public var domainRemark: String?

            public var domainWebSocketStatus: String?

            public var isHttpRedirectToHttps: Bool?

            public var wildcardDomainPatterns: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.bindStageAlias != nil {
                    map["BindStageAlias"] = self.bindStageAlias!
                }
                if self.bindStageName != nil {
                    map["BindStageName"] = self.bindStageName!
                }
                if self.certificateId != nil {
                    map["CertificateId"] = self.certificateId!
                }
                if self.certificateName != nil {
                    map["CertificateName"] = self.certificateName!
                }
                if self.certificateValidEnd != nil {
                    map["CertificateValidEnd"] = self.certificateValidEnd!
                }
                if self.certificateValidStart != nil {
                    map["CertificateValidStart"] = self.certificateValidStart!
                }
                if self.customDomainType != nil {
                    map["CustomDomainType"] = self.customDomainType!
                }
                if self.domainBindingStatus != nil {
                    map["DomainBindingStatus"] = self.domainBindingStatus!
                }
                if self.domainCNAMEStatus != nil {
                    map["DomainCNAMEStatus"] = self.domainCNAMEStatus!
                }
                if self.domainLegalStatus != nil {
                    map["DomainLegalStatus"] = self.domainLegalStatus!
                }
                if self.domainName != nil {
                    map["DomainName"] = self.domainName!
                }
                if self.domainRemark != nil {
                    map["DomainRemark"] = self.domainRemark!
                }
                if self.domainWebSocketStatus != nil {
                    map["DomainWebSocketStatus"] = self.domainWebSocketStatus!
                }
                if self.isHttpRedirectToHttps != nil {
                    map["IsHttpRedirectToHttps"] = self.isHttpRedirectToHttps!
                }
                if self.wildcardDomainPatterns != nil {
                    map["WildcardDomainPatterns"] = self.wildcardDomainPatterns!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BindStageAlias"] as? String {
                    self.bindStageAlias = value
                }
                if let value = dict["BindStageName"] as? String {
                    self.bindStageName = value
                }
                if let value = dict["CertificateId"] as? String {
                    self.certificateId = value
                }
                if let value = dict["CertificateName"] as? String {
                    self.certificateName = value
                }
                if let value = dict["CertificateValidEnd"] as? Int64 {
                    self.certificateValidEnd = value
                }
                if let value = dict["CertificateValidStart"] as? Int64 {
                    self.certificateValidStart = value
                }
                if let value = dict["CustomDomainType"] as? String {
                    self.customDomainType = value
                }
                if let value = dict["DomainBindingStatus"] as? String {
                    self.domainBindingStatus = value
                }
                if let value = dict["DomainCNAMEStatus"] as? String {
                    self.domainCNAMEStatus = value
                }
                if let value = dict["DomainLegalStatus"] as? String {
                    self.domainLegalStatus = value
                }
                if let value = dict["DomainName"] as? String {
                    self.domainName = value
                }
                if let value = dict["DomainRemark"] as? String {
                    self.domainRemark = value
                }
                if let value = dict["DomainWebSocketStatus"] as? String {
                    self.domainWebSocketStatus = value
                }
                if let value = dict["IsHttpRedirectToHttps"] as? Bool {
                    self.isHttpRedirectToHttps = value
                }
                if let value = dict["WildcardDomainPatterns"] as? String {
                    self.wildcardDomainPatterns = value
                }
            }
        }
        public var domainItem: [DescribeApiGroupResponseBody.CustomDomains.DomainItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.domainItem != nil {
                var tmp : [Any] = []
                for k in self.domainItem! {
                    tmp.append(k.toMap())
                }
                map["DomainItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DomainItem"] as? [Any?] {
                var tmp : [DescribeApiGroupResponseBody.CustomDomains.DomainItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiGroupResponseBody.CustomDomains.DomainItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.domainItem = tmp
            }
        }
    }
    public class StageItems : Tea.TeaModel {
        public class StageInfo : Tea.TeaModel {
            public var description_: String?

            public var stageId: String?

            public var stageName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.stageId != nil {
                    map["StageId"] = self.stageId!
                }
                if self.stageName != nil {
                    map["StageName"] = self.stageName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["StageId"] as? String {
                    self.stageId = value
                }
                if let value = dict["StageName"] as? String {
                    self.stageName = value
                }
            }
        }
        public var stageInfo: [DescribeApiGroupResponseBody.StageItems.StageInfo]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.stageInfo != nil {
                var tmp : [Any] = []
                for k in self.stageInfo! {
                    tmp.append(k.toMap())
                }
                map["StageInfo"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["StageInfo"] as? [Any?] {
                var tmp : [DescribeApiGroupResponseBody.StageItems.StageInfo] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiGroupResponseBody.StageItems.StageInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.stageInfo = tmp
            }
        }
    }
    public var basePath: String?

    public var billingStatus: String?

    public var cloudMarketCommodity: Bool?

    public var cmsMonitorGroup: String?

    public var compatibleFlags: String?

    public var createdTime: String?

    public var customAppCodeConfig: String?

    public var customDomains: DescribeApiGroupResponseBody.CustomDomains?

    public var customTraceConfig: String?

    public var customerConfigs: String?

    public var dedicatedInstanceType: String?

    public var defaultDomain: String?

    public var description_: String?

    public var disableInnerDomain: Bool?

    public var groupId: String?

    public var groupName: String?

    public var httpsPolicy: String?

    public var illegalStatus: String?

    public var instanceId: String?

    public var instanceType: String?

    public var ipv6Status: String?

    public var migrationError: String?

    public var migrationStatus: String?

    public var modifiedTime: String?

    public var passthroughHeaders: String?

    public var regionId: String?

    public var requestId: String?

    public var stageItems: DescribeApiGroupResponseBody.StageItems?

    public var status: String?

    public var subDomain: String?

    public var trafficLimit: Int32?

    public var userLogConfig: String?

    public var vpcDomain: String?

    public var vpcSlbIntranetDomain: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.customDomains?.validate()
        try self.stageItems?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.basePath != nil {
            map["BasePath"] = self.basePath!
        }
        if self.billingStatus != nil {
            map["BillingStatus"] = self.billingStatus!
        }
        if self.cloudMarketCommodity != nil {
            map["CloudMarketCommodity"] = self.cloudMarketCommodity!
        }
        if self.cmsMonitorGroup != nil {
            map["CmsMonitorGroup"] = self.cmsMonitorGroup!
        }
        if self.compatibleFlags != nil {
            map["CompatibleFlags"] = self.compatibleFlags!
        }
        if self.createdTime != nil {
            map["CreatedTime"] = self.createdTime!
        }
        if self.customAppCodeConfig != nil {
            map["CustomAppCodeConfig"] = self.customAppCodeConfig!
        }
        if self.customDomains != nil {
            map["CustomDomains"] = self.customDomains?.toMap()
        }
        if self.customTraceConfig != nil {
            map["CustomTraceConfig"] = self.customTraceConfig!
        }
        if self.customerConfigs != nil {
            map["CustomerConfigs"] = self.customerConfigs!
        }
        if self.dedicatedInstanceType != nil {
            map["DedicatedInstanceType"] = self.dedicatedInstanceType!
        }
        if self.defaultDomain != nil {
            map["DefaultDomain"] = self.defaultDomain!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.disableInnerDomain != nil {
            map["DisableInnerDomain"] = self.disableInnerDomain!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.httpsPolicy != nil {
            map["HttpsPolicy"] = self.httpsPolicy!
        }
        if self.illegalStatus != nil {
            map["IllegalStatus"] = self.illegalStatus!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.instanceType != nil {
            map["InstanceType"] = self.instanceType!
        }
        if self.ipv6Status != nil {
            map["Ipv6Status"] = self.ipv6Status!
        }
        if self.migrationError != nil {
            map["MigrationError"] = self.migrationError!
        }
        if self.migrationStatus != nil {
            map["MigrationStatus"] = self.migrationStatus!
        }
        if self.modifiedTime != nil {
            map["ModifiedTime"] = self.modifiedTime!
        }
        if self.passthroughHeaders != nil {
            map["PassthroughHeaders"] = self.passthroughHeaders!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.stageItems != nil {
            map["StageItems"] = self.stageItems?.toMap()
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.subDomain != nil {
            map["SubDomain"] = self.subDomain!
        }
        if self.trafficLimit != nil {
            map["TrafficLimit"] = self.trafficLimit!
        }
        if self.userLogConfig != nil {
            map["UserLogConfig"] = self.userLogConfig!
        }
        if self.vpcDomain != nil {
            map["VpcDomain"] = self.vpcDomain!
        }
        if self.vpcSlbIntranetDomain != nil {
            map["VpcSlbIntranetDomain"] = self.vpcSlbIntranetDomain!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BasePath"] as? String {
            self.basePath = value
        }
        if let value = dict["BillingStatus"] as? String {
            self.billingStatus = value
        }
        if let value = dict["CloudMarketCommodity"] as? Bool {
            self.cloudMarketCommodity = value
        }
        if let value = dict["CmsMonitorGroup"] as? String {
            self.cmsMonitorGroup = value
        }
        if let value = dict["CompatibleFlags"] as? String {
            self.compatibleFlags = value
        }
        if let value = dict["CreatedTime"] as? String {
            self.createdTime = value
        }
        if let value = dict["CustomAppCodeConfig"] as? String {
            self.customAppCodeConfig = value
        }
        if let value = dict["CustomDomains"] as? [String: Any?] {
            var model = DescribeApiGroupResponseBody.CustomDomains()
            model.fromMap(value)
            self.customDomains = model
        }
        if let value = dict["CustomTraceConfig"] as? String {
            self.customTraceConfig = value
        }
        if let value = dict["CustomerConfigs"] as? String {
            self.customerConfigs = value
        }
        if let value = dict["DedicatedInstanceType"] as? String {
            self.dedicatedInstanceType = value
        }
        if let value = dict["DefaultDomain"] as? String {
            self.defaultDomain = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DisableInnerDomain"] as? Bool {
            self.disableInnerDomain = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["HttpsPolicy"] as? String {
            self.httpsPolicy = value
        }
        if let value = dict["IllegalStatus"] as? String {
            self.illegalStatus = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["InstanceType"] as? String {
            self.instanceType = value
        }
        if let value = dict["Ipv6Status"] as? String {
            self.ipv6Status = value
        }
        if let value = dict["MigrationError"] as? String {
            self.migrationError = value
        }
        if let value = dict["MigrationStatus"] as? String {
            self.migrationStatus = value
        }
        if let value = dict["ModifiedTime"] as? String {
            self.modifiedTime = value
        }
        if let value = dict["PassthroughHeaders"] as? String {
            self.passthroughHeaders = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["StageItems"] as? [String: Any?] {
            var model = DescribeApiGroupResponseBody.StageItems()
            model.fromMap(value)
            self.stageItems = model
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["SubDomain"] as? String {
            self.subDomain = value
        }
        if let value = dict["TrafficLimit"] as? Int32 {
            self.trafficLimit = value
        }
        if let value = dict["UserLogConfig"] as? String {
            self.userLogConfig = value
        }
        if let value = dict["VpcDomain"] as? String {
            self.vpcDomain = value
        }
        if let value = dict["VpcSlbIntranetDomain"] as? String {
            self.vpcSlbIntranetDomain = value
        }
    }
}

public class DescribeApiGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApiGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApiGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApiGroupVpcWhitelistRequest : Tea.TeaModel {
    public var groupId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeApiGroupVpcWhitelistResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var vpcIds: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.vpcIds != nil {
            map["VpcIds"] = self.vpcIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["VpcIds"] as? String {
            self.vpcIds = value
        }
    }
}

public class DescribeApiGroupVpcWhitelistResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApiGroupVpcWhitelistResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApiGroupVpcWhitelistResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApiGroupsRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var basePath: String?

    public var enableTagAuth: Bool?

    public var groupId: String?

    public var groupName: String?

    public var instanceId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public var sort: String?

    public var tag: [DescribeApiGroupsRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.basePath != nil {
            map["BasePath"] = self.basePath!
        }
        if self.enableTagAuth != nil {
            map["EnableTagAuth"] = self.enableTagAuth!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.sort != nil {
            map["Sort"] = self.sort!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BasePath"] as? String {
            self.basePath = value
        }
        if let value = dict["EnableTagAuth"] as? Bool {
            self.enableTagAuth = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Sort"] as? String {
            self.sort = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [DescribeApiGroupsRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = DescribeApiGroupsRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class DescribeApiGroupsResponseBody : Tea.TeaModel {
    public class ApiGroupAttributes : Tea.TeaModel {
        public class ApiGroupAttribute : Tea.TeaModel {
            public class Tags : Tea.TeaModel {
                public class TagInfo : Tea.TeaModel {
                    public var key: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var tagInfo: [DescribeApiGroupsResponseBody.ApiGroupAttributes.ApiGroupAttribute.Tags.TagInfo]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.tagInfo != nil {
                        var tmp : [Any] = []
                        for k in self.tagInfo! {
                            tmp.append(k.toMap())
                        }
                        map["TagInfo"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["TagInfo"] as? [Any?] {
                        var tmp : [DescribeApiGroupsResponseBody.ApiGroupAttributes.ApiGroupAttribute.Tags.TagInfo] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeApiGroupsResponseBody.ApiGroupAttributes.ApiGroupAttribute.Tags.TagInfo()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.tagInfo = tmp
                    }
                }
            }
            public var basePath: String?

            public var billingStatus: String?

            public var createdTime: String?

            public var description_: String?

            public var groupId: String?

            public var groupName: String?

            public var httpsPolicy: String?

            public var illegalStatus: String?

            public var instanceId: String?

            public var instanceType: String?

            public var modifiedTime: String?

            public var regionId: String?

            public var subDomain: String?

            public var tags: DescribeApiGroupsResponseBody.ApiGroupAttributes.ApiGroupAttribute.Tags?

            public var trafficLimit: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.tags?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.basePath != nil {
                    map["BasePath"] = self.basePath!
                }
                if self.billingStatus != nil {
                    map["BillingStatus"] = self.billingStatus!
                }
                if self.createdTime != nil {
                    map["CreatedTime"] = self.createdTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupName != nil {
                    map["GroupName"] = self.groupName!
                }
                if self.httpsPolicy != nil {
                    map["HttpsPolicy"] = self.httpsPolicy!
                }
                if self.illegalStatus != nil {
                    map["IllegalStatus"] = self.illegalStatus!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.instanceType != nil {
                    map["InstanceType"] = self.instanceType!
                }
                if self.modifiedTime != nil {
                    map["ModifiedTime"] = self.modifiedTime!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.subDomain != nil {
                    map["SubDomain"] = self.subDomain!
                }
                if self.tags != nil {
                    map["Tags"] = self.tags?.toMap()
                }
                if self.trafficLimit != nil {
                    map["TrafficLimit"] = self.trafficLimit!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BasePath"] as? String {
                    self.basePath = value
                }
                if let value = dict["BillingStatus"] as? String {
                    self.billingStatus = value
                }
                if let value = dict["CreatedTime"] as? String {
                    self.createdTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["GroupName"] as? String {
                    self.groupName = value
                }
                if let value = dict["HttpsPolicy"] as? String {
                    self.httpsPolicy = value
                }
                if let value = dict["IllegalStatus"] as? String {
                    self.illegalStatus = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["InstanceType"] as? String {
                    self.instanceType = value
                }
                if let value = dict["ModifiedTime"] as? String {
                    self.modifiedTime = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["SubDomain"] as? String {
                    self.subDomain = value
                }
                if let value = dict["Tags"] as? [String: Any?] {
                    var model = DescribeApiGroupsResponseBody.ApiGroupAttributes.ApiGroupAttribute.Tags()
                    model.fromMap(value)
                    self.tags = model
                }
                if let value = dict["TrafficLimit"] as? Int32 {
                    self.trafficLimit = value
                }
            }
        }
        public var apiGroupAttribute: [DescribeApiGroupsResponseBody.ApiGroupAttributes.ApiGroupAttribute]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiGroupAttribute != nil {
                var tmp : [Any] = []
                for k in self.apiGroupAttribute! {
                    tmp.append(k.toMap())
                }
                map["ApiGroupAttribute"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiGroupAttribute"] as? [Any?] {
                var tmp : [DescribeApiGroupsResponseBody.ApiGroupAttributes.ApiGroupAttribute] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiGroupsResponseBody.ApiGroupAttributes.ApiGroupAttribute()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.apiGroupAttribute = tmp
            }
        }
    }
    public var apiGroupAttributes: DescribeApiGroupsResponseBody.ApiGroupAttributes?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.apiGroupAttributes?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiGroupAttributes != nil {
            map["ApiGroupAttributes"] = self.apiGroupAttributes?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiGroupAttributes"] as? [String: Any?] {
            var model = DescribeApiGroupsResponseBody.ApiGroupAttributes()
            model.fromMap(value)
            self.apiGroupAttributes = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeApiGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApiGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApiGroupsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApiHistoriesRequest : Tea.TeaModel {
    public var apiId: String?

    public var apiName: String?

    public var groupId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.apiName != nil {
            map["ApiName"] = self.apiName!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["ApiName"] as? String {
            self.apiName = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class DescribeApiHistoriesResponseBody : Tea.TeaModel {
    public class ApiHisItems : Tea.TeaModel {
        public class ApiHisItem : Tea.TeaModel {
            public var apiId: String?

            public var apiName: String?

            public var deployedTime: String?

            public var description_: String?

            public var groupId: String?

            public var groupName: String?

            public var historyVersion: String?

            public var regionId: String?

            public var stageName: String?

            public var status: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiId != nil {
                    map["ApiId"] = self.apiId!
                }
                if self.apiName != nil {
                    map["ApiName"] = self.apiName!
                }
                if self.deployedTime != nil {
                    map["DeployedTime"] = self.deployedTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupName != nil {
                    map["GroupName"] = self.groupName!
                }
                if self.historyVersion != nil {
                    map["HistoryVersion"] = self.historyVersion!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.stageName != nil {
                    map["StageName"] = self.stageName!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiId"] as? String {
                    self.apiId = value
                }
                if let value = dict["ApiName"] as? String {
                    self.apiName = value
                }
                if let value = dict["DeployedTime"] as? String {
                    self.deployedTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["GroupName"] as? String {
                    self.groupName = value
                }
                if let value = dict["HistoryVersion"] as? String {
                    self.historyVersion = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["StageName"] as? String {
                    self.stageName = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
            }
        }
        public var apiHisItem: [DescribeApiHistoriesResponseBody.ApiHisItems.ApiHisItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiHisItem != nil {
                var tmp : [Any] = []
                for k in self.apiHisItem! {
                    tmp.append(k.toMap())
                }
                map["ApiHisItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiHisItem"] as? [Any?] {
                var tmp : [DescribeApiHistoriesResponseBody.ApiHisItems.ApiHisItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiHistoriesResponseBody.ApiHisItems.ApiHisItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.apiHisItem = tmp
            }
        }
    }
    public var apiHisItems: DescribeApiHistoriesResponseBody.ApiHisItems?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.apiHisItems?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiHisItems != nil {
            map["ApiHisItems"] = self.apiHisItems?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiHisItems"] as? [String: Any?] {
            var model = DescribeApiHistoriesResponseBody.ApiHisItems()
            model.fromMap(value)
            self.apiHisItems = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeApiHistoriesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApiHistoriesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApiHistoriesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApiHistoryRequest : Tea.TeaModel {
    public var apiId: String?

    public var groupId: String?

    public var historyVersion: String?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.historyVersion != nil {
            map["HistoryVersion"] = self.historyVersion!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["HistoryVersion"] as? String {
            self.historyVersion = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class DescribeApiHistoryResponseBody : Tea.TeaModel {
    public class BackendConfig : Tea.TeaModel {
        public var backendId: String?

        public var backendName: String?

        public var backendType: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.backendId != nil {
                map["BackendId"] = self.backendId!
            }
            if self.backendName != nil {
                map["BackendName"] = self.backendName!
            }
            if self.backendType != nil {
                map["BackendType"] = self.backendType!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BackendId"] as? String {
                self.backendId = value
            }
            if let value = dict["BackendName"] as? String {
                self.backendName = value
            }
            if let value = dict["BackendType"] as? String {
                self.backendType = value
            }
        }
    }
    public class ConstantParameters : Tea.TeaModel {
        public class ConstantParameter : Tea.TeaModel {
            public var constantValue: String?

            public var description_: String?

            public var location: String?

            public var serviceParameterName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.constantValue != nil {
                    map["ConstantValue"] = self.constantValue!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.location != nil {
                    map["Location"] = self.location!
                }
                if self.serviceParameterName != nil {
                    map["ServiceParameterName"] = self.serviceParameterName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConstantValue"] as? String {
                    self.constantValue = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Location"] as? String {
                    self.location = value
                }
                if let value = dict["ServiceParameterName"] as? String {
                    self.serviceParameterName = value
                }
            }
        }
        public var constantParameter: [DescribeApiHistoryResponseBody.ConstantParameters.ConstantParameter]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.constantParameter != nil {
                var tmp : [Any] = []
                for k in self.constantParameter! {
                    tmp.append(k.toMap())
                }
                map["ConstantParameter"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConstantParameter"] as? [Any?] {
                var tmp : [DescribeApiHistoryResponseBody.ConstantParameters.ConstantParameter] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiHistoryResponseBody.ConstantParameters.ConstantParameter()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.constantParameter = tmp
            }
        }
    }
    public class CustomSystemParameters : Tea.TeaModel {
        public class CustomSystemParameter : Tea.TeaModel {
            public var demoValue: String?

            public var description_: String?

            public var location: String?

            public var parameterName: String?

            public var serviceParameterName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.demoValue != nil {
                    map["DemoValue"] = self.demoValue!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.location != nil {
                    map["Location"] = self.location!
                }
                if self.parameterName != nil {
                    map["ParameterName"] = self.parameterName!
                }
                if self.serviceParameterName != nil {
                    map["ServiceParameterName"] = self.serviceParameterName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DemoValue"] as? String {
                    self.demoValue = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Location"] as? String {
                    self.location = value
                }
                if let value = dict["ParameterName"] as? String {
                    self.parameterName = value
                }
                if let value = dict["ServiceParameterName"] as? String {
                    self.serviceParameterName = value
                }
            }
        }
        public var customSystemParameter: [DescribeApiHistoryResponseBody.CustomSystemParameters.CustomSystemParameter]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.customSystemParameter != nil {
                var tmp : [Any] = []
                for k in self.customSystemParameter! {
                    tmp.append(k.toMap())
                }
                map["CustomSystemParameter"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CustomSystemParameter"] as? [Any?] {
                var tmp : [DescribeApiHistoryResponseBody.CustomSystemParameters.CustomSystemParameter] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiHistoryResponseBody.CustomSystemParameters.CustomSystemParameter()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.customSystemParameter = tmp
            }
        }
    }
    public class ErrorCodeSamples : Tea.TeaModel {
        public class ErrorCodeSample : Tea.TeaModel {
            public var code: String?

            public var description_: String?

            public var message: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["Code"] = self.code!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.message != nil {
                    map["Message"] = self.message!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Code"] as? String {
                    self.code = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Message"] as? String {
                    self.message = value
                }
            }
        }
        public var errorCodeSample: [DescribeApiHistoryResponseBody.ErrorCodeSamples.ErrorCodeSample]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCodeSample != nil {
                var tmp : [Any] = []
                for k in self.errorCodeSample! {
                    tmp.append(k.toMap())
                }
                map["ErrorCodeSample"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCodeSample"] as? [Any?] {
                var tmp : [DescribeApiHistoryResponseBody.ErrorCodeSamples.ErrorCodeSample] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiHistoryResponseBody.ErrorCodeSamples.ErrorCodeSample()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.errorCodeSample = tmp
            }
        }
    }
    public class OpenIdConnectConfig : Tea.TeaModel {
        public var idTokenParamName: String?

        public var openIdApiType: String?

        public var publicKey: String?

        public var publicKeyId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.idTokenParamName != nil {
                map["IdTokenParamName"] = self.idTokenParamName!
            }
            if self.openIdApiType != nil {
                map["OpenIdApiType"] = self.openIdApiType!
            }
            if self.publicKey != nil {
                map["PublicKey"] = self.publicKey!
            }
            if self.publicKeyId != nil {
                map["PublicKeyId"] = self.publicKeyId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["IdTokenParamName"] as? String {
                self.idTokenParamName = value
            }
            if let value = dict["OpenIdApiType"] as? String {
                self.openIdApiType = value
            }
            if let value = dict["PublicKey"] as? String {
                self.publicKey = value
            }
            if let value = dict["PublicKeyId"] as? String {
                self.publicKeyId = value
            }
        }
    }
    public class RequestConfig : Tea.TeaModel {
        public var bodyFormat: String?

        public var bodyModel: String?

        public var escapePathParam: Bool?

        public var postBodyDescription: String?

        public var requestHttpMethod: String?

        public var requestMode: String?

        public var requestPath: String?

        public var requestProtocol: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bodyFormat != nil {
                map["BodyFormat"] = self.bodyFormat!
            }
            if self.bodyModel != nil {
                map["BodyModel"] = self.bodyModel!
            }
            if self.escapePathParam != nil {
                map["EscapePathParam"] = self.escapePathParam!
            }
            if self.postBodyDescription != nil {
                map["PostBodyDescription"] = self.postBodyDescription!
            }
            if self.requestHttpMethod != nil {
                map["RequestHttpMethod"] = self.requestHttpMethod!
            }
            if self.requestMode != nil {
                map["RequestMode"] = self.requestMode!
            }
            if self.requestPath != nil {
                map["RequestPath"] = self.requestPath!
            }
            if self.requestProtocol != nil {
                map["RequestProtocol"] = self.requestProtocol!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BodyFormat"] as? String {
                self.bodyFormat = value
            }
            if let value = dict["BodyModel"] as? String {
                self.bodyModel = value
            }
            if let value = dict["EscapePathParam"] as? Bool {
                self.escapePathParam = value
            }
            if let value = dict["PostBodyDescription"] as? String {
                self.postBodyDescription = value
            }
            if let value = dict["RequestHttpMethod"] as? String {
                self.requestHttpMethod = value
            }
            if let value = dict["RequestMode"] as? String {
                self.requestMode = value
            }
            if let value = dict["RequestPath"] as? String {
                self.requestPath = value
            }
            if let value = dict["RequestProtocol"] as? String {
                self.requestProtocol = value
            }
        }
    }
    public class RequestParameters : Tea.TeaModel {
        public class RequestParameter : Tea.TeaModel {
            public var apiParameterName: String?

            public var arrayItemsType: String?

            public var defaultValue: String?

            public var demoValue: String?

            public var description_: String?

            public var docOrder: Int32?

            public var docShow: String?

            public var enumValue: String?

            public var jsonScheme: String?

            public var location: String?

            public var maxLength: Int64?

            public var maxValue: Int64?

            public var minLength: Int64?

            public var minValue: Int64?

            public var parameterType: String?

            public var regularExpression: String?

            public var required_: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiParameterName != nil {
                    map["ApiParameterName"] = self.apiParameterName!
                }
                if self.arrayItemsType != nil {
                    map["ArrayItemsType"] = self.arrayItemsType!
                }
                if self.defaultValue != nil {
                    map["DefaultValue"] = self.defaultValue!
                }
                if self.demoValue != nil {
                    map["DemoValue"] = self.demoValue!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.docOrder != nil {
                    map["DocOrder"] = self.docOrder!
                }
                if self.docShow != nil {
                    map["DocShow"] = self.docShow!
                }
                if self.enumValue != nil {
                    map["EnumValue"] = self.enumValue!
                }
                if self.jsonScheme != nil {
                    map["JsonScheme"] = self.jsonScheme!
                }
                if self.location != nil {
                    map["Location"] = self.location!
                }
                if self.maxLength != nil {
                    map["MaxLength"] = self.maxLength!
                }
                if self.maxValue != nil {
                    map["MaxValue"] = self.maxValue!
                }
                if self.minLength != nil {
                    map["MinLength"] = self.minLength!
                }
                if self.minValue != nil {
                    map["MinValue"] = self.minValue!
                }
                if self.parameterType != nil {
                    map["ParameterType"] = self.parameterType!
                }
                if self.regularExpression != nil {
                    map["RegularExpression"] = self.regularExpression!
                }
                if self.required_ != nil {
                    map["Required"] = self.required_!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiParameterName"] as? String {
                    self.apiParameterName = value
                }
                if let value = dict["ArrayItemsType"] as? String {
                    self.arrayItemsType = value
                }
                if let value = dict["DefaultValue"] as? String {
                    self.defaultValue = value
                }
                if let value = dict["DemoValue"] as? String {
                    self.demoValue = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DocOrder"] as? Int32 {
                    self.docOrder = value
                }
                if let value = dict["DocShow"] as? String {
                    self.docShow = value
                }
                if let value = dict["EnumValue"] as? String {
                    self.enumValue = value
                }
                if let value = dict["JsonScheme"] as? String {
                    self.jsonScheme = value
                }
                if let value = dict["Location"] as? String {
                    self.location = value
                }
                if let value = dict["MaxLength"] as? Int64 {
                    self.maxLength = value
                }
                if let value = dict["MaxValue"] as? Int64 {
                    self.maxValue = value
                }
                if let value = dict["MinLength"] as? Int64 {
                    self.minLength = value
                }
                if let value = dict["MinValue"] as? Int64 {
                    self.minValue = value
                }
                if let value = dict["ParameterType"] as? String {
                    self.parameterType = value
                }
                if let value = dict["RegularExpression"] as? String {
                    self.regularExpression = value
                }
                if let value = dict["Required"] as? String {
                    self.required_ = value
                }
            }
        }
        public var requestParameter: [DescribeApiHistoryResponseBody.RequestParameters.RequestParameter]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.requestParameter != nil {
                var tmp : [Any] = []
                for k in self.requestParameter! {
                    tmp.append(k.toMap())
                }
                map["RequestParameter"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["RequestParameter"] as? [Any?] {
                var tmp : [DescribeApiHistoryResponseBody.RequestParameters.RequestParameter] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiHistoryResponseBody.RequestParameters.RequestParameter()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.requestParameter = tmp
            }
        }
    }
    public class ResultDescriptions : Tea.TeaModel {
        public class ResultDescription : Tea.TeaModel {
            public var description_: String?

            public var hasChild: Bool?

            public var id: String?

            public var key: String?

            public var mandatory: Bool?

            public var name: String?

            public var pid: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.hasChild != nil {
                    map["HasChild"] = self.hasChild!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.mandatory != nil {
                    map["Mandatory"] = self.mandatory!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.pid != nil {
                    map["Pid"] = self.pid!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["HasChild"] as? Bool {
                    self.hasChild = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Mandatory"] as? Bool {
                    self.mandatory = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Pid"] as? String {
                    self.pid = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var resultDescription: [DescribeApiHistoryResponseBody.ResultDescriptions.ResultDescription]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.resultDescription != nil {
                var tmp : [Any] = []
                for k in self.resultDescription! {
                    tmp.append(k.toMap())
                }
                map["ResultDescription"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ResultDescription"] as? [Any?] {
                var tmp : [DescribeApiHistoryResponseBody.ResultDescriptions.ResultDescription] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiHistoryResponseBody.ResultDescriptions.ResultDescription()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.resultDescription = tmp
            }
        }
    }
    public class ServiceConfig : Tea.TeaModel {
        public class EventBridgeConfig : Tea.TeaModel {
            public var eventBridgeRegionId: String?

            public var eventBus: String?

            public var eventSource: String?

            public var roleArn: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.eventBridgeRegionId != nil {
                    map["EventBridgeRegionId"] = self.eventBridgeRegionId!
                }
                if self.eventBus != nil {
                    map["EventBus"] = self.eventBus!
                }
                if self.eventSource != nil {
                    map["EventSource"] = self.eventSource!
                }
                if self.roleArn != nil {
                    map["RoleArn"] = self.roleArn!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["EventBridgeRegionId"] as? String {
                    self.eventBridgeRegionId = value
                }
                if let value = dict["EventBus"] as? String {
                    self.eventBus = value
                }
                if let value = dict["EventSource"] as? String {
                    self.eventSource = value
                }
                if let value = dict["RoleArn"] as? String {
                    self.roleArn = value
                }
            }
        }
        public class FunctionComputeConfig : Tea.TeaModel {
            public var contentTypeCatagory: String?

            public var contentTypeValue: String?

            public var fcBaseUrl: String?

            public var fcType: String?

            public var functionName: String?

            public var method: String?

            public var onlyBusinessPath: Bool?

            public var path: String?

            public var qualifier: String?

            public var regionId: String?

            public var roleArn: String?

            public var serviceName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.contentTypeCatagory != nil {
                    map["ContentTypeCatagory"] = self.contentTypeCatagory!
                }
                if self.contentTypeValue != nil {
                    map["ContentTypeValue"] = self.contentTypeValue!
                }
                if self.fcBaseUrl != nil {
                    map["FcBaseUrl"] = self.fcBaseUrl!
                }
                if self.fcType != nil {
                    map["FcType"] = self.fcType!
                }
                if self.functionName != nil {
                    map["FunctionName"] = self.functionName!
                }
                if self.method != nil {
                    map["Method"] = self.method!
                }
                if self.onlyBusinessPath != nil {
                    map["OnlyBusinessPath"] = self.onlyBusinessPath!
                }
                if self.path != nil {
                    map["Path"] = self.path!
                }
                if self.qualifier != nil {
                    map["Qualifier"] = self.qualifier!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.roleArn != nil {
                    map["RoleArn"] = self.roleArn!
                }
                if self.serviceName != nil {
                    map["ServiceName"] = self.serviceName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ContentTypeCatagory"] as? String {
                    self.contentTypeCatagory = value
                }
                if let value = dict["ContentTypeValue"] as? String {
                    self.contentTypeValue = value
                }
                if let value = dict["FcBaseUrl"] as? String {
                    self.fcBaseUrl = value
                }
                if let value = dict["FcType"] as? String {
                    self.fcType = value
                }
                if let value = dict["FunctionName"] as? String {
                    self.functionName = value
                }
                if let value = dict["Method"] as? String {
                    self.method = value
                }
                if let value = dict["OnlyBusinessPath"] as? Bool {
                    self.onlyBusinessPath = value
                }
                if let value = dict["Path"] as? String {
                    self.path = value
                }
                if let value = dict["Qualifier"] as? String {
                    self.qualifier = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["RoleArn"] as? String {
                    self.roleArn = value
                }
                if let value = dict["ServiceName"] as? String {
                    self.serviceName = value
                }
            }
        }
        public class MockHeaders : Tea.TeaModel {
            public class MockHeader : Tea.TeaModel {
                public var headerName: String?

                public var headerValue: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.headerName != nil {
                        map["HeaderName"] = self.headerName!
                    }
                    if self.headerValue != nil {
                        map["HeaderValue"] = self.headerValue!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["HeaderName"] as? String {
                        self.headerName = value
                    }
                    if let value = dict["HeaderValue"] as? String {
                        self.headerValue = value
                    }
                }
            }
            public var mockHeader: [DescribeApiHistoryResponseBody.ServiceConfig.MockHeaders.MockHeader]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.mockHeader != nil {
                    var tmp : [Any] = []
                    for k in self.mockHeader! {
                        tmp.append(k.toMap())
                    }
                    map["MockHeader"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["MockHeader"] as? [Any?] {
                    var tmp : [DescribeApiHistoryResponseBody.ServiceConfig.MockHeaders.MockHeader] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeApiHistoryResponseBody.ServiceConfig.MockHeaders.MockHeader()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.mockHeader = tmp
                }
            }
        }
        public class OssConfig : Tea.TeaModel {
            public var action: String?

            public var bucketName: String?

            public var key: String?

            public var ossRegionId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.action != nil {
                    map["Action"] = self.action!
                }
                if self.bucketName != nil {
                    map["BucketName"] = self.bucketName!
                }
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.ossRegionId != nil {
                    map["OssRegionId"] = self.ossRegionId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Action"] as? String {
                    self.action = value
                }
                if let value = dict["BucketName"] as? String {
                    self.bucketName = value
                }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["OssRegionId"] as? String {
                    self.ossRegionId = value
                }
            }
        }
        public class VpcConfig : Tea.TeaModel {
            public var instanceId: String?

            public var name: String?

            public var port: Int32?

            public var vpcId: String?

            public var vpcScheme: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.port != nil {
                    map["Port"] = self.port!
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId!
                }
                if self.vpcScheme != nil {
                    map["VpcScheme"] = self.vpcScheme!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Port"] as? Int32 {
                    self.port = value
                }
                if let value = dict["VpcId"] as? String {
                    self.vpcId = value
                }
                if let value = dict["VpcScheme"] as? String {
                    self.vpcScheme = value
                }
            }
        }
        public var contentTypeCatagory: String?

        public var contentTypeValue: String?

        public var eventBridgeConfig: DescribeApiHistoryResponseBody.ServiceConfig.EventBridgeConfig?

        public var functionComputeConfig: DescribeApiHistoryResponseBody.ServiceConfig.FunctionComputeConfig?

        public var mock: String?

        public var mockHeaders: DescribeApiHistoryResponseBody.ServiceConfig.MockHeaders?

        public var mockResult: String?

        public var mockStatusCode: Int32?

        public var ossConfig: DescribeApiHistoryResponseBody.ServiceConfig.OssConfig?

        public var serviceAddress: String?

        public var serviceHttpMethod: String?

        public var servicePath: String?

        public var serviceProtocol: String?

        public var serviceTimeout: Int32?

        public var serviceVpcEnable: String?

        public var vpcConfig: DescribeApiHistoryResponseBody.ServiceConfig.VpcConfig?

        public var vpcId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.eventBridgeConfig?.validate()
            try self.functionComputeConfig?.validate()
            try self.mockHeaders?.validate()
            try self.ossConfig?.validate()
            try self.vpcConfig?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.contentTypeCatagory != nil {
                map["ContentTypeCatagory"] = self.contentTypeCatagory!
            }
            if self.contentTypeValue != nil {
                map["ContentTypeValue"] = self.contentTypeValue!
            }
            if self.eventBridgeConfig != nil {
                map["EventBridgeConfig"] = self.eventBridgeConfig?.toMap()
            }
            if self.functionComputeConfig != nil {
                map["FunctionComputeConfig"] = self.functionComputeConfig?.toMap()
            }
            if self.mock != nil {
                map["Mock"] = self.mock!
            }
            if self.mockHeaders != nil {
                map["MockHeaders"] = self.mockHeaders?.toMap()
            }
            if self.mockResult != nil {
                map["MockResult"] = self.mockResult!
            }
            if self.mockStatusCode != nil {
                map["MockStatusCode"] = self.mockStatusCode!
            }
            if self.ossConfig != nil {
                map["OssConfig"] = self.ossConfig?.toMap()
            }
            if self.serviceAddress != nil {
                map["ServiceAddress"] = self.serviceAddress!
            }
            if self.serviceHttpMethod != nil {
                map["ServiceHttpMethod"] = self.serviceHttpMethod!
            }
            if self.servicePath != nil {
                map["ServicePath"] = self.servicePath!
            }
            if self.serviceProtocol != nil {
                map["ServiceProtocol"] = self.serviceProtocol!
            }
            if self.serviceTimeout != nil {
                map["ServiceTimeout"] = self.serviceTimeout!
            }
            if self.serviceVpcEnable != nil {
                map["ServiceVpcEnable"] = self.serviceVpcEnable!
            }
            if self.vpcConfig != nil {
                map["VpcConfig"] = self.vpcConfig?.toMap()
            }
            if self.vpcId != nil {
                map["VpcId"] = self.vpcId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ContentTypeCatagory"] as? String {
                self.contentTypeCatagory = value
            }
            if let value = dict["ContentTypeValue"] as? String {
                self.contentTypeValue = value
            }
            if let value = dict["EventBridgeConfig"] as? [String: Any?] {
                var model = DescribeApiHistoryResponseBody.ServiceConfig.EventBridgeConfig()
                model.fromMap(value)
                self.eventBridgeConfig = model
            }
            if let value = dict["FunctionComputeConfig"] as? [String: Any?] {
                var model = DescribeApiHistoryResponseBody.ServiceConfig.FunctionComputeConfig()
                model.fromMap(value)
                self.functionComputeConfig = model
            }
            if let value = dict["Mock"] as? String {
                self.mock = value
            }
            if let value = dict["MockHeaders"] as? [String: Any?] {
                var model = DescribeApiHistoryResponseBody.ServiceConfig.MockHeaders()
                model.fromMap(value)
                self.mockHeaders = model
            }
            if let value = dict["MockResult"] as? String {
                self.mockResult = value
            }
            if let value = dict["MockStatusCode"] as? Int32 {
                self.mockStatusCode = value
            }
            if let value = dict["OssConfig"] as? [String: Any?] {
                var model = DescribeApiHistoryResponseBody.ServiceConfig.OssConfig()
                model.fromMap(value)
                self.ossConfig = model
            }
            if let value = dict["ServiceAddress"] as? String {
                self.serviceAddress = value
            }
            if let value = dict["ServiceHttpMethod"] as? String {
                self.serviceHttpMethod = value
            }
            if let value = dict["ServicePath"] as? String {
                self.servicePath = value
            }
            if let value = dict["ServiceProtocol"] as? String {
                self.serviceProtocol = value
            }
            if let value = dict["ServiceTimeout"] as? Int32 {
                self.serviceTimeout = value
            }
            if let value = dict["ServiceVpcEnable"] as? String {
                self.serviceVpcEnable = value
            }
            if let value = dict["VpcConfig"] as? [String: Any?] {
                var model = DescribeApiHistoryResponseBody.ServiceConfig.VpcConfig()
                model.fromMap(value)
                self.vpcConfig = model
            }
            if let value = dict["VpcId"] as? String {
                self.vpcId = value
            }
        }
    }
    public class ServiceParameters : Tea.TeaModel {
        public class ServiceParameter : Tea.TeaModel {
            public var location: String?

            public var parameterType: String?

            public var serviceParameterName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.location != nil {
                    map["Location"] = self.location!
                }
                if self.parameterType != nil {
                    map["ParameterType"] = self.parameterType!
                }
                if self.serviceParameterName != nil {
                    map["ServiceParameterName"] = self.serviceParameterName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Location"] as? String {
                    self.location = value
                }
                if let value = dict["ParameterType"] as? String {
                    self.parameterType = value
                }
                if let value = dict["ServiceParameterName"] as? String {
                    self.serviceParameterName = value
                }
            }
        }
        public var serviceParameter: [DescribeApiHistoryResponseBody.ServiceParameters.ServiceParameter]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.serviceParameter != nil {
                var tmp : [Any] = []
                for k in self.serviceParameter! {
                    tmp.append(k.toMap())
                }
                map["ServiceParameter"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ServiceParameter"] as? [Any?] {
                var tmp : [DescribeApiHistoryResponseBody.ServiceParameters.ServiceParameter] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiHistoryResponseBody.ServiceParameters.ServiceParameter()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.serviceParameter = tmp
            }
        }
    }
    public class ServiceParametersMap : Tea.TeaModel {
        public class ServiceParameterMap : Tea.TeaModel {
            public var requestParameterName: String?

            public var serviceParameterName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.requestParameterName != nil {
                    map["RequestParameterName"] = self.requestParameterName!
                }
                if self.serviceParameterName != nil {
                    map["ServiceParameterName"] = self.serviceParameterName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["RequestParameterName"] as? String {
                    self.requestParameterName = value
                }
                if let value = dict["ServiceParameterName"] as? String {
                    self.serviceParameterName = value
                }
            }
        }
        public var serviceParameterMap: [DescribeApiHistoryResponseBody.ServiceParametersMap.ServiceParameterMap]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.serviceParameterMap != nil {
                var tmp : [Any] = []
                for k in self.serviceParameterMap! {
                    tmp.append(k.toMap())
                }
                map["ServiceParameterMap"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ServiceParameterMap"] as? [Any?] {
                var tmp : [DescribeApiHistoryResponseBody.ServiceParametersMap.ServiceParameterMap] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiHistoryResponseBody.ServiceParametersMap.ServiceParameterMap()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.serviceParameterMap = tmp
            }
        }
    }
    public class SystemParameters : Tea.TeaModel {
        public class SystemParameter : Tea.TeaModel {
            public var demoValue: String?

            public var description_: String?

            public var location: String?

            public var parameterName: String?

            public var serviceParameterName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.demoValue != nil {
                    map["DemoValue"] = self.demoValue!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.location != nil {
                    map["Location"] = self.location!
                }
                if self.parameterName != nil {
                    map["ParameterName"] = self.parameterName!
                }
                if self.serviceParameterName != nil {
                    map["ServiceParameterName"] = self.serviceParameterName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DemoValue"] as? String {
                    self.demoValue = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Location"] as? String {
                    self.location = value
                }
                if let value = dict["ParameterName"] as? String {
                    self.parameterName = value
                }
                if let value = dict["ServiceParameterName"] as? String {
                    self.serviceParameterName = value
                }
            }
        }
        public var systemParameter: [DescribeApiHistoryResponseBody.SystemParameters.SystemParameter]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.systemParameter != nil {
                var tmp : [Any] = []
                for k in self.systemParameter! {
                    tmp.append(k.toMap())
                }
                map["SystemParameter"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SystemParameter"] as? [Any?] {
                var tmp : [DescribeApiHistoryResponseBody.SystemParameters.SystemParameter] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiHistoryResponseBody.SystemParameters.SystemParameter()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.systemParameter = tmp
            }
        }
    }
    public var allowSignatureMethod: String?

    public var apiId: String?

    public var apiName: String?

    public var appCodeAuthType: String?

    public var authType: String?

    public var backendConfig: DescribeApiHistoryResponseBody.BackendConfig?

    public var backendEnable: Bool?

    public var constantParameters: DescribeApiHistoryResponseBody.ConstantParameters?

    public var customSystemParameters: DescribeApiHistoryResponseBody.CustomSystemParameters?

    public var deployedTime: String?

    public var description_: String?

    public var disableInternet: Bool?

    public var errorCodeSamples: DescribeApiHistoryResponseBody.ErrorCodeSamples?

    public var failResultSample: String?

    public var forceNonceCheck: Bool?

    public var groupId: String?

    public var groupName: String?

    public var historyVersion: String?

    public var openIdConnectConfig: DescribeApiHistoryResponseBody.OpenIdConnectConfig?

    public var regionId: String?

    public var requestConfig: DescribeApiHistoryResponseBody.RequestConfig?

    public var requestId: String?

    public var requestParameters: DescribeApiHistoryResponseBody.RequestParameters?

    public var resultBodyModel: String?

    public var resultDescriptions: DescribeApiHistoryResponseBody.ResultDescriptions?

    public var resultSample: String?

    public var resultType: String?

    public var serviceConfig: DescribeApiHistoryResponseBody.ServiceConfig?

    public var serviceParameters: DescribeApiHistoryResponseBody.ServiceParameters?

    public var serviceParametersMap: DescribeApiHistoryResponseBody.ServiceParametersMap?

    public var stageName: String?

    public var status: String?

    public var systemParameters: DescribeApiHistoryResponseBody.SystemParameters?

    public var visibility: String?

    public var webSocketApiType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.backendConfig?.validate()
        try self.constantParameters?.validate()
        try self.customSystemParameters?.validate()
        try self.errorCodeSamples?.validate()
        try self.openIdConnectConfig?.validate()
        try self.requestConfig?.validate()
        try self.requestParameters?.validate()
        try self.resultDescriptions?.validate()
        try self.serviceConfig?.validate()
        try self.serviceParameters?.validate()
        try self.serviceParametersMap?.validate()
        try self.systemParameters?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.allowSignatureMethod != nil {
            map["AllowSignatureMethod"] = self.allowSignatureMethod!
        }
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.apiName != nil {
            map["ApiName"] = self.apiName!
        }
        if self.appCodeAuthType != nil {
            map["AppCodeAuthType"] = self.appCodeAuthType!
        }
        if self.authType != nil {
            map["AuthType"] = self.authType!
        }
        if self.backendConfig != nil {
            map["BackendConfig"] = self.backendConfig?.toMap()
        }
        if self.backendEnable != nil {
            map["BackendEnable"] = self.backendEnable!
        }
        if self.constantParameters != nil {
            map["ConstantParameters"] = self.constantParameters?.toMap()
        }
        if self.customSystemParameters != nil {
            map["CustomSystemParameters"] = self.customSystemParameters?.toMap()
        }
        if self.deployedTime != nil {
            map["DeployedTime"] = self.deployedTime!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.disableInternet != nil {
            map["DisableInternet"] = self.disableInternet!
        }
        if self.errorCodeSamples != nil {
            map["ErrorCodeSamples"] = self.errorCodeSamples?.toMap()
        }
        if self.failResultSample != nil {
            map["FailResultSample"] = self.failResultSample!
        }
        if self.forceNonceCheck != nil {
            map["ForceNonceCheck"] = self.forceNonceCheck!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.historyVersion != nil {
            map["HistoryVersion"] = self.historyVersion!
        }
        if self.openIdConnectConfig != nil {
            map["OpenIdConnectConfig"] = self.openIdConnectConfig?.toMap()
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.requestConfig != nil {
            map["RequestConfig"] = self.requestConfig?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.requestParameters != nil {
            map["RequestParameters"] = self.requestParameters?.toMap()
        }
        if self.resultBodyModel != nil {
            map["ResultBodyModel"] = self.resultBodyModel!
        }
        if self.resultDescriptions != nil {
            map["ResultDescriptions"] = self.resultDescriptions?.toMap()
        }
        if self.resultSample != nil {
            map["ResultSample"] = self.resultSample!
        }
        if self.resultType != nil {
            map["ResultType"] = self.resultType!
        }
        if self.serviceConfig != nil {
            map["ServiceConfig"] = self.serviceConfig?.toMap()
        }
        if self.serviceParameters != nil {
            map["ServiceParameters"] = self.serviceParameters?.toMap()
        }
        if self.serviceParametersMap != nil {
            map["ServiceParametersMap"] = self.serviceParametersMap?.toMap()
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        if self.systemParameters != nil {
            map["SystemParameters"] = self.systemParameters?.toMap()
        }
        if self.visibility != nil {
            map["Visibility"] = self.visibility!
        }
        if self.webSocketApiType != nil {
            map["WebSocketApiType"] = self.webSocketApiType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AllowSignatureMethod"] as? String {
            self.allowSignatureMethod = value
        }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["ApiName"] as? String {
            self.apiName = value
        }
        if let value = dict["AppCodeAuthType"] as? String {
            self.appCodeAuthType = value
        }
        if let value = dict["AuthType"] as? String {
            self.authType = value
        }
        if let value = dict["BackendConfig"] as? [String: Any?] {
            var model = DescribeApiHistoryResponseBody.BackendConfig()
            model.fromMap(value)
            self.backendConfig = model
        }
        if let value = dict["BackendEnable"] as? Bool {
            self.backendEnable = value
        }
        if let value = dict["ConstantParameters"] as? [String: Any?] {
            var model = DescribeApiHistoryResponseBody.ConstantParameters()
            model.fromMap(value)
            self.constantParameters = model
        }
        if let value = dict["CustomSystemParameters"] as? [String: Any?] {
            var model = DescribeApiHistoryResponseBody.CustomSystemParameters()
            model.fromMap(value)
            self.customSystemParameters = model
        }
        if let value = dict["DeployedTime"] as? String {
            self.deployedTime = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DisableInternet"] as? Bool {
            self.disableInternet = value
        }
        if let value = dict["ErrorCodeSamples"] as? [String: Any?] {
            var model = DescribeApiHistoryResponseBody.ErrorCodeSamples()
            model.fromMap(value)
            self.errorCodeSamples = model
        }
        if let value = dict["FailResultSample"] as? String {
            self.failResultSample = value
        }
        if let value = dict["ForceNonceCheck"] as? Bool {
            self.forceNonceCheck = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["HistoryVersion"] as? String {
            self.historyVersion = value
        }
        if let value = dict["OpenIdConnectConfig"] as? [String: Any?] {
            var model = DescribeApiHistoryResponseBody.OpenIdConnectConfig()
            model.fromMap(value)
            self.openIdConnectConfig = model
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RequestConfig"] as? [String: Any?] {
            var model = DescribeApiHistoryResponseBody.RequestConfig()
            model.fromMap(value)
            self.requestConfig = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RequestParameters"] as? [String: Any?] {
            var model = DescribeApiHistoryResponseBody.RequestParameters()
            model.fromMap(value)
            self.requestParameters = model
        }
        if let value = dict["ResultBodyModel"] as? String {
            self.resultBodyModel = value
        }
        if let value = dict["ResultDescriptions"] as? [String: Any?] {
            var model = DescribeApiHistoryResponseBody.ResultDescriptions()
            model.fromMap(value)
            self.resultDescriptions = model
        }
        if let value = dict["ResultSample"] as? String {
            self.resultSample = value
        }
        if let value = dict["ResultType"] as? String {
            self.resultType = value
        }
        if let value = dict["ServiceConfig"] as? [String: Any?] {
            var model = DescribeApiHistoryResponseBody.ServiceConfig()
            model.fromMap(value)
            self.serviceConfig = model
        }
        if let value = dict["ServiceParameters"] as? [String: Any?] {
            var model = DescribeApiHistoryResponseBody.ServiceParameters()
            model.fromMap(value)
            self.serviceParameters = model
        }
        if let value = dict["ServiceParametersMap"] as? [String: Any?] {
            var model = DescribeApiHistoryResponseBody.ServiceParametersMap()
            model.fromMap(value)
            self.serviceParametersMap = model
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
        if let value = dict["SystemParameters"] as? [String: Any?] {
            var model = DescribeApiHistoryResponseBody.SystemParameters()
            model.fromMap(value)
            self.systemParameters = model
        }
        if let value = dict["Visibility"] as? String {
            self.visibility = value
        }
        if let value = dict["WebSocketApiType"] as? String {
            self.webSocketApiType = value
        }
    }
}

public class DescribeApiHistoryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApiHistoryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApiHistoryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApiIpControlsRequest : Tea.TeaModel {
    public var apiIds: String?

    public var groupId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiIds != nil {
            map["ApiIds"] = self.apiIds!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiIds"] as? String {
            self.apiIds = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class DescribeApiIpControlsResponseBody : Tea.TeaModel {
    public class ApiIpControls : Tea.TeaModel {
        public class ApiIpControlItem : Tea.TeaModel {
            public var apiId: String?

            public var apiName: String?

            public var boundTime: String?

            public var ipControlId: String?

            public var ipControlName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiId != nil {
                    map["ApiId"] = self.apiId!
                }
                if self.apiName != nil {
                    map["ApiName"] = self.apiName!
                }
                if self.boundTime != nil {
                    map["BoundTime"] = self.boundTime!
                }
                if self.ipControlId != nil {
                    map["IpControlId"] = self.ipControlId!
                }
                if self.ipControlName != nil {
                    map["IpControlName"] = self.ipControlName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiId"] as? String {
                    self.apiId = value
                }
                if let value = dict["ApiName"] as? String {
                    self.apiName = value
                }
                if let value = dict["BoundTime"] as? String {
                    self.boundTime = value
                }
                if let value = dict["IpControlId"] as? String {
                    self.ipControlId = value
                }
                if let value = dict["IpControlName"] as? String {
                    self.ipControlName = value
                }
            }
        }
        public var apiIpControlItem: [DescribeApiIpControlsResponseBody.ApiIpControls.ApiIpControlItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiIpControlItem != nil {
                var tmp : [Any] = []
                for k in self.apiIpControlItem! {
                    tmp.append(k.toMap())
                }
                map["ApiIpControlItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiIpControlItem"] as? [Any?] {
                var tmp : [DescribeApiIpControlsResponseBody.ApiIpControls.ApiIpControlItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiIpControlsResponseBody.ApiIpControls.ApiIpControlItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.apiIpControlItem = tmp
            }
        }
    }
    public var apiIpControls: DescribeApiIpControlsResponseBody.ApiIpControls?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.apiIpControls?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiIpControls != nil {
            map["ApiIpControls"] = self.apiIpControls?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiIpControls"] as? [String: Any?] {
            var model = DescribeApiIpControlsResponseBody.ApiIpControls()
            model.fromMap(value)
            self.apiIpControls = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeApiIpControlsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApiIpControlsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApiIpControlsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApiLatencyDataRequest : Tea.TeaModel {
    public var apiId: String?

    public var endTime: String?

    public var groupId: String?

    public var securityToken: String?

    public var stageName: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeApiLatencyDataResponseBody : Tea.TeaModel {
    public class CallLatencys : Tea.TeaModel {
        public class MonitorItem : Tea.TeaModel {
            public var itemTime: String?

            public var itemValue: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.itemTime != nil {
                    map["ItemTime"] = self.itemTime!
                }
                if self.itemValue != nil {
                    map["ItemValue"] = self.itemValue!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ItemTime"] as? String {
                    self.itemTime = value
                }
                if let value = dict["ItemValue"] as? String {
                    self.itemValue = value
                }
            }
        }
        public var monitorItem: [DescribeApiLatencyDataResponseBody.CallLatencys.MonitorItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.monitorItem != nil {
                var tmp : [Any] = []
                for k in self.monitorItem! {
                    tmp.append(k.toMap())
                }
                map["MonitorItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MonitorItem"] as? [Any?] {
                var tmp : [DescribeApiLatencyDataResponseBody.CallLatencys.MonitorItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiLatencyDataResponseBody.CallLatencys.MonitorItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.monitorItem = tmp
            }
        }
    }
    public var callLatencys: DescribeApiLatencyDataResponseBody.CallLatencys?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.callLatencys?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.callLatencys != nil {
            map["CallLatencys"] = self.callLatencys?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CallLatencys"] as? [String: Any?] {
            var model = DescribeApiLatencyDataResponseBody.CallLatencys()
            model.fromMap(value)
            self.callLatencys = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeApiLatencyDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApiLatencyDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApiLatencyDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApiMarketAttributesRequest : Tea.TeaModel {
    public var apiId: String?

    public var groupId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeApiMarketAttributesResponseBody : Tea.TeaModel {
    public var apiId: String?

    public var marketChargingMode: String?

    public var needCharging: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.marketChargingMode != nil {
            map["MarketChargingMode"] = self.marketChargingMode!
        }
        if self.needCharging != nil {
            map["NeedCharging"] = self.needCharging!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["MarketChargingMode"] as? String {
            self.marketChargingMode = value
        }
        if let value = dict["NeedCharging"] as? String {
            self.needCharging = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeApiMarketAttributesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApiMarketAttributesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApiMarketAttributesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApiProductApisRequest : Tea.TeaModel {
    public var apiProductId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiProductId != nil {
            map["ApiProductId"] = self.apiProductId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiProductId"] as? String {
            self.apiProductId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeApiProductApisResponseBody : Tea.TeaModel {
    public class ApiInfoList : Tea.TeaModel {
        public class ApiInfo : Tea.TeaModel {
            public var apiId: String?

            public var apiName: String?

            public var description_: String?

            public var groupId: String?

            public var groupName: String?

            public var method: String?

            public var path: String?

            public var regionId: String?

            public var stageName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiId != nil {
                    map["ApiId"] = self.apiId!
                }
                if self.apiName != nil {
                    map["ApiName"] = self.apiName!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupName != nil {
                    map["GroupName"] = self.groupName!
                }
                if self.method != nil {
                    map["Method"] = self.method!
                }
                if self.path != nil {
                    map["Path"] = self.path!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.stageName != nil {
                    map["StageName"] = self.stageName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiId"] as? String {
                    self.apiId = value
                }
                if let value = dict["ApiName"] as? String {
                    self.apiName = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["GroupName"] as? String {
                    self.groupName = value
                }
                if let value = dict["Method"] as? String {
                    self.method = value
                }
                if let value = dict["Path"] as? String {
                    self.path = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["StageName"] as? String {
                    self.stageName = value
                }
            }
        }
        public var apiInfo: [DescribeApiProductApisResponseBody.ApiInfoList.ApiInfo]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiInfo != nil {
                var tmp : [Any] = []
                for k in self.apiInfo! {
                    tmp.append(k.toMap())
                }
                map["ApiInfo"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiInfo"] as? [Any?] {
                var tmp : [DescribeApiProductApisResponseBody.ApiInfoList.ApiInfo] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiProductApisResponseBody.ApiInfoList.ApiInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.apiInfo = tmp
            }
        }
    }
    public var apiInfoList: DescribeApiProductApisResponseBody.ApiInfoList?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.apiInfoList?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiInfoList != nil {
            map["ApiInfoList"] = self.apiInfoList?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiInfoList"] as? [String: Any?] {
            var model = DescribeApiProductApisResponseBody.ApiInfoList()
            model.fromMap(value)
            self.apiInfoList = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeApiProductApisResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApiProductApisResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApiProductApisResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApiProductsByAppRequest : Tea.TeaModel {
    public var appId: Int64?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? Int64 {
            self.appId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeApiProductsByAppResponseBody : Tea.TeaModel {
    public class ApiProductInfoList : Tea.TeaModel {
        public class ApiProductInfo : Tea.TeaModel {
            public var apiProductId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiProductId != nil {
                    map["ApiProductId"] = self.apiProductId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiProductId"] as? String {
                    self.apiProductId = value
                }
            }
        }
        public var apiProductInfo: [DescribeApiProductsByAppResponseBody.ApiProductInfoList.ApiProductInfo]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiProductInfo != nil {
                var tmp : [Any] = []
                for k in self.apiProductInfo! {
                    tmp.append(k.toMap())
                }
                map["ApiProductInfo"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiProductInfo"] as? [Any?] {
                var tmp : [DescribeApiProductsByAppResponseBody.ApiProductInfoList.ApiProductInfo] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiProductsByAppResponseBody.ApiProductInfoList.ApiProductInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.apiProductInfo = tmp
            }
        }
    }
    public var apiProductInfoList: DescribeApiProductsByAppResponseBody.ApiProductInfoList?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.apiProductInfoList?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiProductInfoList != nil {
            map["ApiProductInfoList"] = self.apiProductInfoList?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiProductInfoList"] as? [String: Any?] {
            var model = DescribeApiProductsByAppResponseBody.ApiProductInfoList()
            model.fromMap(value)
            self.apiProductInfoList = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeApiProductsByAppResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApiProductsByAppResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApiProductsByAppResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApiQpsDataRequest : Tea.TeaModel {
    public var apiId: String?

    public var endTime: String?

    public var groupId: String?

    public var securityToken: String?

    public var stageName: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeApiQpsDataResponseBody : Tea.TeaModel {
    public class CallFails : Tea.TeaModel {
        public class MonitorItem : Tea.TeaModel {
            public var itemTime: String?

            public var itemValue: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.itemTime != nil {
                    map["ItemTime"] = self.itemTime!
                }
                if self.itemValue != nil {
                    map["ItemValue"] = self.itemValue!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ItemTime"] as? String {
                    self.itemTime = value
                }
                if let value = dict["ItemValue"] as? String {
                    self.itemValue = value
                }
            }
        }
        public var monitorItem: [DescribeApiQpsDataResponseBody.CallFails.MonitorItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.monitorItem != nil {
                var tmp : [Any] = []
                for k in self.monitorItem! {
                    tmp.append(k.toMap())
                }
                map["MonitorItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MonitorItem"] as? [Any?] {
                var tmp : [DescribeApiQpsDataResponseBody.CallFails.MonitorItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiQpsDataResponseBody.CallFails.MonitorItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.monitorItem = tmp
            }
        }
    }
    public class CallSuccesses : Tea.TeaModel {
        public class MonitorItem : Tea.TeaModel {
            public var itemTime: String?

            public var itemValue: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.itemTime != nil {
                    map["ItemTime"] = self.itemTime!
                }
                if self.itemValue != nil {
                    map["ItemValue"] = self.itemValue!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ItemTime"] as? String {
                    self.itemTime = value
                }
                if let value = dict["ItemValue"] as? String {
                    self.itemValue = value
                }
            }
        }
        public var monitorItem: [DescribeApiQpsDataResponseBody.CallSuccesses.MonitorItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.monitorItem != nil {
                var tmp : [Any] = []
                for k in self.monitorItem! {
                    tmp.append(k.toMap())
                }
                map["MonitorItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MonitorItem"] as? [Any?] {
                var tmp : [DescribeApiQpsDataResponseBody.CallSuccesses.MonitorItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiQpsDataResponseBody.CallSuccesses.MonitorItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.monitorItem = tmp
            }
        }
    }
    public var callFails: DescribeApiQpsDataResponseBody.CallFails?

    public var callSuccesses: DescribeApiQpsDataResponseBody.CallSuccesses?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.callFails?.validate()
        try self.callSuccesses?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.callFails != nil {
            map["CallFails"] = self.callFails?.toMap()
        }
        if self.callSuccesses != nil {
            map["CallSuccesses"] = self.callSuccesses?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CallFails"] as? [String: Any?] {
            var model = DescribeApiQpsDataResponseBody.CallFails()
            model.fromMap(value)
            self.callFails = model
        }
        if let value = dict["CallSuccesses"] as? [String: Any?] {
            var model = DescribeApiQpsDataResponseBody.CallSuccesses()
            model.fromMap(value)
            self.callSuccesses = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeApiQpsDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApiQpsDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApiQpsDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApiSignaturesRequest : Tea.TeaModel {
    public var apiIds: String?

    public var groupId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiIds != nil {
            map["ApiIds"] = self.apiIds!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiIds"] as? String {
            self.apiIds = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class DescribeApiSignaturesResponseBody : Tea.TeaModel {
    public class ApiSignatures : Tea.TeaModel {
        public class ApiSignatureItem : Tea.TeaModel {
            public var apiId: String?

            public var apiName: String?

            public var boundTime: String?

            public var signatureId: String?

            public var signatureName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiId != nil {
                    map["ApiId"] = self.apiId!
                }
                if self.apiName != nil {
                    map["ApiName"] = self.apiName!
                }
                if self.boundTime != nil {
                    map["BoundTime"] = self.boundTime!
                }
                if self.signatureId != nil {
                    map["SignatureId"] = self.signatureId!
                }
                if self.signatureName != nil {
                    map["SignatureName"] = self.signatureName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiId"] as? String {
                    self.apiId = value
                }
                if let value = dict["ApiName"] as? String {
                    self.apiName = value
                }
                if let value = dict["BoundTime"] as? String {
                    self.boundTime = value
                }
                if let value = dict["SignatureId"] as? String {
                    self.signatureId = value
                }
                if let value = dict["SignatureName"] as? String {
                    self.signatureName = value
                }
            }
        }
        public var apiSignatureItem: [DescribeApiSignaturesResponseBody.ApiSignatures.ApiSignatureItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiSignatureItem != nil {
                var tmp : [Any] = []
                for k in self.apiSignatureItem! {
                    tmp.append(k.toMap())
                }
                map["ApiSignatureItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiSignatureItem"] as? [Any?] {
                var tmp : [DescribeApiSignaturesResponseBody.ApiSignatures.ApiSignatureItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiSignaturesResponseBody.ApiSignatures.ApiSignatureItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.apiSignatureItem = tmp
            }
        }
    }
    public var apiSignatures: DescribeApiSignaturesResponseBody.ApiSignatures?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.apiSignatures?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiSignatures != nil {
            map["ApiSignatures"] = self.apiSignatures?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiSignatures"] as? [String: Any?] {
            var model = DescribeApiSignaturesResponseBody.ApiSignatures()
            model.fromMap(value)
            self.apiSignatures = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeApiSignaturesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApiSignaturesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApiSignaturesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApiTrafficControlsRequest : Tea.TeaModel {
    public var apiIds: String?

    public var groupId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiIds != nil {
            map["ApiIds"] = self.apiIds!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiIds"] as? String {
            self.apiIds = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class DescribeApiTrafficControlsResponseBody : Tea.TeaModel {
    public class ApiTrafficControls : Tea.TeaModel {
        public class ApiTrafficControlItem : Tea.TeaModel {
            public var apiId: String?

            public var apiName: String?

            public var boundTime: String?

            public var trafficControlId: String?

            public var trafficControlName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiId != nil {
                    map["ApiId"] = self.apiId!
                }
                if self.apiName != nil {
                    map["ApiName"] = self.apiName!
                }
                if self.boundTime != nil {
                    map["BoundTime"] = self.boundTime!
                }
                if self.trafficControlId != nil {
                    map["TrafficControlId"] = self.trafficControlId!
                }
                if self.trafficControlName != nil {
                    map["TrafficControlName"] = self.trafficControlName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiId"] as? String {
                    self.apiId = value
                }
                if let value = dict["ApiName"] as? String {
                    self.apiName = value
                }
                if let value = dict["BoundTime"] as? String {
                    self.boundTime = value
                }
                if let value = dict["TrafficControlId"] as? String {
                    self.trafficControlId = value
                }
                if let value = dict["TrafficControlName"] as? String {
                    self.trafficControlName = value
                }
            }
        }
        public var apiTrafficControlItem: [DescribeApiTrafficControlsResponseBody.ApiTrafficControls.ApiTrafficControlItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiTrafficControlItem != nil {
                var tmp : [Any] = []
                for k in self.apiTrafficControlItem! {
                    tmp.append(k.toMap())
                }
                map["ApiTrafficControlItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiTrafficControlItem"] as? [Any?] {
                var tmp : [DescribeApiTrafficControlsResponseBody.ApiTrafficControls.ApiTrafficControlItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiTrafficControlsResponseBody.ApiTrafficControls.ApiTrafficControlItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.apiTrafficControlItem = tmp
            }
        }
    }
    public var apiTrafficControls: DescribeApiTrafficControlsResponseBody.ApiTrafficControls?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.apiTrafficControls?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiTrafficControls != nil {
            map["ApiTrafficControls"] = self.apiTrafficControls?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiTrafficControls"] as? [String: Any?] {
            var model = DescribeApiTrafficControlsResponseBody.ApiTrafficControls()
            model.fromMap(value)
            self.apiTrafficControls = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeApiTrafficControlsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApiTrafficControlsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApiTrafficControlsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApiTrafficDataRequest : Tea.TeaModel {
    public var apiId: String?

    public var endTime: String?

    public var groupId: String?

    public var securityToken: String?

    public var stageName: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeApiTrafficDataResponseBody : Tea.TeaModel {
    public class CallDownloads : Tea.TeaModel {
        public class MonitorItem : Tea.TeaModel {
            public var itemTime: String?

            public var itemValue: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.itemTime != nil {
                    map["ItemTime"] = self.itemTime!
                }
                if self.itemValue != nil {
                    map["ItemValue"] = self.itemValue!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ItemTime"] as? String {
                    self.itemTime = value
                }
                if let value = dict["ItemValue"] as? String {
                    self.itemValue = value
                }
            }
        }
        public var monitorItem: [DescribeApiTrafficDataResponseBody.CallDownloads.MonitorItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.monitorItem != nil {
                var tmp : [Any] = []
                for k in self.monitorItem! {
                    tmp.append(k.toMap())
                }
                map["MonitorItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MonitorItem"] as? [Any?] {
                var tmp : [DescribeApiTrafficDataResponseBody.CallDownloads.MonitorItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiTrafficDataResponseBody.CallDownloads.MonitorItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.monitorItem = tmp
            }
        }
    }
    public class CallUploads : Tea.TeaModel {
        public class MonitorItem : Tea.TeaModel {
            public var itemTime: String?

            public var itemValue: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.itemTime != nil {
                    map["ItemTime"] = self.itemTime!
                }
                if self.itemValue != nil {
                    map["ItemValue"] = self.itemValue!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ItemTime"] as? String {
                    self.itemTime = value
                }
                if let value = dict["ItemValue"] as? String {
                    self.itemValue = value
                }
            }
        }
        public var monitorItem: [DescribeApiTrafficDataResponseBody.CallUploads.MonitorItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.monitorItem != nil {
                var tmp : [Any] = []
                for k in self.monitorItem! {
                    tmp.append(k.toMap())
                }
                map["MonitorItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MonitorItem"] as? [Any?] {
                var tmp : [DescribeApiTrafficDataResponseBody.CallUploads.MonitorItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApiTrafficDataResponseBody.CallUploads.MonitorItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.monitorItem = tmp
            }
        }
    }
    public var callDownloads: DescribeApiTrafficDataResponseBody.CallDownloads?

    public var callUploads: DescribeApiTrafficDataResponseBody.CallUploads?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.callDownloads?.validate()
        try self.callUploads?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.callDownloads != nil {
            map["CallDownloads"] = self.callDownloads?.toMap()
        }
        if self.callUploads != nil {
            map["CallUploads"] = self.callUploads?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CallDownloads"] as? [String: Any?] {
            var model = DescribeApiTrafficDataResponseBody.CallDownloads()
            model.fromMap(value)
            self.callDownloads = model
        }
        if let value = dict["CallUploads"] as? [String: Any?] {
            var model = DescribeApiTrafficDataResponseBody.CallUploads()
            model.fromMap(value)
            self.callUploads = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeApiTrafficDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApiTrafficDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApiTrafficDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApisRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var apiId: String?

    public var apiMethod: String?

    public var apiName: String?

    public var apiPath: String?

    public var catalogId: String?

    public var enableTagAuth: Bool?

    public var groupId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public var stageName: String?

    public var tag: [DescribeApisRequest.Tag]?

    public var unDeployed: Bool?

    public var visibility: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.apiMethod != nil {
            map["ApiMethod"] = self.apiMethod!
        }
        if self.apiName != nil {
            map["ApiName"] = self.apiName!
        }
        if self.apiPath != nil {
            map["ApiPath"] = self.apiPath!
        }
        if self.catalogId != nil {
            map["CatalogId"] = self.catalogId!
        }
        if self.enableTagAuth != nil {
            map["EnableTagAuth"] = self.enableTagAuth!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        if self.unDeployed != nil {
            map["UnDeployed"] = self.unDeployed!
        }
        if self.visibility != nil {
            map["Visibility"] = self.visibility!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["ApiMethod"] as? String {
            self.apiMethod = value
        }
        if let value = dict["ApiName"] as? String {
            self.apiName = value
        }
        if let value = dict["ApiPath"] as? String {
            self.apiPath = value
        }
        if let value = dict["CatalogId"] as? String {
            self.catalogId = value
        }
        if let value = dict["EnableTagAuth"] as? Bool {
            self.enableTagAuth = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [DescribeApisRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = DescribeApisRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
        if let value = dict["UnDeployed"] as? Bool {
            self.unDeployed = value
        }
        if let value = dict["Visibility"] as? String {
            self.visibility = value
        }
    }
}

public class DescribeApisResponseBody : Tea.TeaModel {
    public class ApiSummarys : Tea.TeaModel {
        public class ApiSummary : Tea.TeaModel {
            public class DeployedInfos : Tea.TeaModel {
                public class DeployedInfo : Tea.TeaModel {
                    public var deployedStatus: String?

                    public var effectiveVersion: String?

                    public var stageName: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.deployedStatus != nil {
                            map["DeployedStatus"] = self.deployedStatus!
                        }
                        if self.effectiveVersion != nil {
                            map["EffectiveVersion"] = self.effectiveVersion!
                        }
                        if self.stageName != nil {
                            map["StageName"] = self.stageName!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["DeployedStatus"] as? String {
                            self.deployedStatus = value
                        }
                        if let value = dict["EffectiveVersion"] as? String {
                            self.effectiveVersion = value
                        }
                        if let value = dict["StageName"] as? String {
                            self.stageName = value
                        }
                    }
                }
                public var deployedInfo: [DescribeApisResponseBody.ApiSummarys.ApiSummary.DeployedInfos.DeployedInfo]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.deployedInfo != nil {
                        var tmp : [Any] = []
                        for k in self.deployedInfo! {
                            tmp.append(k.toMap())
                        }
                        map["DeployedInfo"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["DeployedInfo"] as? [Any?] {
                        var tmp : [DescribeApisResponseBody.ApiSummarys.ApiSummary.DeployedInfos.DeployedInfo] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeApisResponseBody.ApiSummarys.ApiSummary.DeployedInfos.DeployedInfo()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.deployedInfo = tmp
                    }
                }
            }
            public class TagList : Tea.TeaModel {
                public class Tag : Tea.TeaModel {
                    public var tagKey: String?

                    public var tagValue: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.tagKey != nil {
                            map["TagKey"] = self.tagKey!
                        }
                        if self.tagValue != nil {
                            map["TagValue"] = self.tagValue!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["TagKey"] as? String {
                            self.tagKey = value
                        }
                        if let value = dict["TagValue"] as? String {
                            self.tagValue = value
                        }
                    }
                }
                public var tag: [DescribeApisResponseBody.ApiSummarys.ApiSummary.TagList.Tag]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.tag != nil {
                        var tmp : [Any] = []
                        for k in self.tag! {
                            tmp.append(k.toMap())
                        }
                        map["Tag"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["Tag"] as? [Any?] {
                        var tmp : [DescribeApisResponseBody.ApiSummarys.ApiSummary.TagList.Tag] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeApisResponseBody.ApiSummarys.ApiSummary.TagList.Tag()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.tag = tmp
                    }
                }
            }
            public var apiId: String?

            public var apiMethod: String?

            public var apiName: String?

            public var apiPath: String?

            public var createdTime: String?

            public var deployedInfos: DescribeApisResponseBody.ApiSummarys.ApiSummary.DeployedInfos?

            public var description_: String?

            public var groupId: String?

            public var groupName: String?

            public var modifiedTime: String?

            public var regionId: String?

            public var tagList: DescribeApisResponseBody.ApiSummarys.ApiSummary.TagList?

            public var visibility: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.deployedInfos?.validate()
                try self.tagList?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiId != nil {
                    map["ApiId"] = self.apiId!
                }
                if self.apiMethod != nil {
                    map["ApiMethod"] = self.apiMethod!
                }
                if self.apiName != nil {
                    map["ApiName"] = self.apiName!
                }
                if self.apiPath != nil {
                    map["ApiPath"] = self.apiPath!
                }
                if self.createdTime != nil {
                    map["CreatedTime"] = self.createdTime!
                }
                if self.deployedInfos != nil {
                    map["DeployedInfos"] = self.deployedInfos?.toMap()
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupName != nil {
                    map["GroupName"] = self.groupName!
                }
                if self.modifiedTime != nil {
                    map["ModifiedTime"] = self.modifiedTime!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.tagList != nil {
                    map["TagList"] = self.tagList?.toMap()
                }
                if self.visibility != nil {
                    map["Visibility"] = self.visibility!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiId"] as? String {
                    self.apiId = value
                }
                if let value = dict["ApiMethod"] as? String {
                    self.apiMethod = value
                }
                if let value = dict["ApiName"] as? String {
                    self.apiName = value
                }
                if let value = dict["ApiPath"] as? String {
                    self.apiPath = value
                }
                if let value = dict["CreatedTime"] as? String {
                    self.createdTime = value
                }
                if let value = dict["DeployedInfos"] as? [String: Any?] {
                    var model = DescribeApisResponseBody.ApiSummarys.ApiSummary.DeployedInfos()
                    model.fromMap(value)
                    self.deployedInfos = model
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["GroupName"] as? String {
                    self.groupName = value
                }
                if let value = dict["ModifiedTime"] as? String {
                    self.modifiedTime = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["TagList"] as? [String: Any?] {
                    var model = DescribeApisResponseBody.ApiSummarys.ApiSummary.TagList()
                    model.fromMap(value)
                    self.tagList = model
                }
                if let value = dict["Visibility"] as? String {
                    self.visibility = value
                }
            }
        }
        public var apiSummary: [DescribeApisResponseBody.ApiSummarys.ApiSummary]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiSummary != nil {
                var tmp : [Any] = []
                for k in self.apiSummary! {
                    tmp.append(k.toMap())
                }
                map["ApiSummary"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiSummary"] as? [Any?] {
                var tmp : [DescribeApisResponseBody.ApiSummarys.ApiSummary] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApisResponseBody.ApiSummarys.ApiSummary()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.apiSummary = tmp
            }
        }
    }
    public var apiSummarys: DescribeApisResponseBody.ApiSummarys?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.apiSummarys?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiSummarys != nil {
            map["ApiSummarys"] = self.apiSummarys?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiSummarys"] as? [String: Any?] {
            var model = DescribeApisResponseBody.ApiSummarys()
            model.fromMap(value)
            self.apiSummarys = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeApisResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApisResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApisResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApisByAppRequest : Tea.TeaModel {
    public var apiName: String?

    public var apiUid: String?

    public var appId: Int64?

    public var description_: String?

    public var method: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var path: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiName != nil {
            map["ApiName"] = self.apiName!
        }
        if self.apiUid != nil {
            map["ApiUid"] = self.apiUid!
        }
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.method != nil {
            map["Method"] = self.method!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.path != nil {
            map["Path"] = self.path!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiName"] as? String {
            self.apiName = value
        }
        if let value = dict["ApiUid"] as? String {
            self.apiUid = value
        }
        if let value = dict["AppId"] as? Int64 {
            self.appId = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Method"] as? String {
            self.method = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Path"] as? String {
            self.path = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeApisByAppResponseBody : Tea.TeaModel {
    public class AppApiRelationInfos : Tea.TeaModel {
        public class AppApiRelationInfo : Tea.TeaModel {
            public var apiId: String?

            public var apiName: String?

            public var authVaildTime: String?

            public var authorizationSource: String?

            public var createdTime: String?

            public var description_: String?

            public var groupId: String?

            public var groupName: String?

            public var method: String?

            public var operator_: String?

            public var path: String?

            public var regionId: String?

            public var stageAlias: String?

            public var stageName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiId != nil {
                    map["ApiId"] = self.apiId!
                }
                if self.apiName != nil {
                    map["ApiName"] = self.apiName!
                }
                if self.authVaildTime != nil {
                    map["AuthVaildTime"] = self.authVaildTime!
                }
                if self.authorizationSource != nil {
                    map["AuthorizationSource"] = self.authorizationSource!
                }
                if self.createdTime != nil {
                    map["CreatedTime"] = self.createdTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupName != nil {
                    map["GroupName"] = self.groupName!
                }
                if self.method != nil {
                    map["Method"] = self.method!
                }
                if self.operator_ != nil {
                    map["Operator"] = self.operator_!
                }
                if self.path != nil {
                    map["Path"] = self.path!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.stageAlias != nil {
                    map["StageAlias"] = self.stageAlias!
                }
                if self.stageName != nil {
                    map["StageName"] = self.stageName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiId"] as? String {
                    self.apiId = value
                }
                if let value = dict["ApiName"] as? String {
                    self.apiName = value
                }
                if let value = dict["AuthVaildTime"] as? String {
                    self.authVaildTime = value
                }
                if let value = dict["AuthorizationSource"] as? String {
                    self.authorizationSource = value
                }
                if let value = dict["CreatedTime"] as? String {
                    self.createdTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["GroupName"] as? String {
                    self.groupName = value
                }
                if let value = dict["Method"] as? String {
                    self.method = value
                }
                if let value = dict["Operator"] as? String {
                    self.operator_ = value
                }
                if let value = dict["Path"] as? String {
                    self.path = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["StageAlias"] as? String {
                    self.stageAlias = value
                }
                if let value = dict["StageName"] as? String {
                    self.stageName = value
                }
            }
        }
        public var appApiRelationInfo: [DescribeApisByAppResponseBody.AppApiRelationInfos.AppApiRelationInfo]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appApiRelationInfo != nil {
                var tmp : [Any] = []
                for k in self.appApiRelationInfo! {
                    tmp.append(k.toMap())
                }
                map["AppApiRelationInfo"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppApiRelationInfo"] as? [Any?] {
                var tmp : [DescribeApisByAppResponseBody.AppApiRelationInfos.AppApiRelationInfo] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApisByAppResponseBody.AppApiRelationInfos.AppApiRelationInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.appApiRelationInfo = tmp
            }
        }
    }
    public var appApiRelationInfos: DescribeApisByAppResponseBody.AppApiRelationInfos?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.appApiRelationInfos?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appApiRelationInfos != nil {
            map["AppApiRelationInfos"] = self.appApiRelationInfos?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppApiRelationInfos"] as? [String: Any?] {
            var model = DescribeApisByAppResponseBody.AppApiRelationInfos()
            model.fromMap(value)
            self.appApiRelationInfos = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeApisByAppResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApisByAppResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApisByAppResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApisByBackendRequest : Tea.TeaModel {
    public var backendId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.backendId != nil {
            map["BackendId"] = self.backendId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BackendId"] as? String {
            self.backendId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class DescribeApisByBackendResponseBody : Tea.TeaModel {
    public class ApiInfoList : Tea.TeaModel {
        public class ApiInfo : Tea.TeaModel {
            public var apiId: String?

            public var apiName: String?

            public var description_: String?

            public var groupId: String?

            public var groupName: String?

            public var method: String?

            public var path: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiId != nil {
                    map["ApiId"] = self.apiId!
                }
                if self.apiName != nil {
                    map["ApiName"] = self.apiName!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupName != nil {
                    map["GroupName"] = self.groupName!
                }
                if self.method != nil {
                    map["Method"] = self.method!
                }
                if self.path != nil {
                    map["Path"] = self.path!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiId"] as? String {
                    self.apiId = value
                }
                if let value = dict["ApiName"] as? String {
                    self.apiName = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["GroupName"] as? String {
                    self.groupName = value
                }
                if let value = dict["Method"] as? String {
                    self.method = value
                }
                if let value = dict["Path"] as? String {
                    self.path = value
                }
            }
        }
        public var apiInfo: [DescribeApisByBackendResponseBody.ApiInfoList.ApiInfo]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiInfo != nil {
                var tmp : [Any] = []
                for k in self.apiInfo! {
                    tmp.append(k.toMap())
                }
                map["ApiInfo"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiInfo"] as? [Any?] {
                var tmp : [DescribeApisByBackendResponseBody.ApiInfoList.ApiInfo] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApisByBackendResponseBody.ApiInfoList.ApiInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.apiInfo = tmp
            }
        }
    }
    public var apiInfoList: DescribeApisByBackendResponseBody.ApiInfoList?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.apiInfoList?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiInfoList != nil {
            map["ApiInfoList"] = self.apiInfoList?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiInfoList"] as? [String: Any?] {
            var model = DescribeApisByBackendResponseBody.ApiInfoList()
            model.fromMap(value)
            self.apiInfoList = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeApisByBackendResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApisByBackendResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApisByBackendResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApisByIpControlRequest : Tea.TeaModel {
    public var ipControlId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ipControlId != nil {
            map["IpControlId"] = self.ipControlId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IpControlId"] as? String {
            self.ipControlId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeApisByIpControlResponseBody : Tea.TeaModel {
    public class ApiInfos : Tea.TeaModel {
        public class ApiInfo : Tea.TeaModel {
            public var apiId: String?

            public var apiName: String?

            public var boundTime: String?

            public var description_: String?

            public var groupId: String?

            public var groupName: String?

            public var regionId: String?

            public var stageName: String?

            public var visibility: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiId != nil {
                    map["ApiId"] = self.apiId!
                }
                if self.apiName != nil {
                    map["ApiName"] = self.apiName!
                }
                if self.boundTime != nil {
                    map["BoundTime"] = self.boundTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupName != nil {
                    map["GroupName"] = self.groupName!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.stageName != nil {
                    map["StageName"] = self.stageName!
                }
                if self.visibility != nil {
                    map["Visibility"] = self.visibility!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiId"] as? String {
                    self.apiId = value
                }
                if let value = dict["ApiName"] as? String {
                    self.apiName = value
                }
                if let value = dict["BoundTime"] as? String {
                    self.boundTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["GroupName"] as? String {
                    self.groupName = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["StageName"] as? String {
                    self.stageName = value
                }
                if let value = dict["Visibility"] as? String {
                    self.visibility = value
                }
            }
        }
        public var apiInfo: [DescribeApisByIpControlResponseBody.ApiInfos.ApiInfo]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiInfo != nil {
                var tmp : [Any] = []
                for k in self.apiInfo! {
                    tmp.append(k.toMap())
                }
                map["ApiInfo"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiInfo"] as? [Any?] {
                var tmp : [DescribeApisByIpControlResponseBody.ApiInfos.ApiInfo] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApisByIpControlResponseBody.ApiInfos.ApiInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.apiInfo = tmp
            }
        }
    }
    public var apiInfos: DescribeApisByIpControlResponseBody.ApiInfos?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.apiInfos?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiInfos != nil {
            map["ApiInfos"] = self.apiInfos?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiInfos"] as? [String: Any?] {
            var model = DescribeApisByIpControlResponseBody.ApiInfos()
            model.fromMap(value)
            self.apiInfos = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeApisByIpControlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApisByIpControlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApisByIpControlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApisBySignatureRequest : Tea.TeaModel {
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public var signatureId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.signatureId != nil {
            map["SignatureId"] = self.signatureId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["SignatureId"] as? String {
            self.signatureId = value
        }
    }
}

public class DescribeApisBySignatureResponseBody : Tea.TeaModel {
    public class ApiInfos : Tea.TeaModel {
        public class ApiInfo : Tea.TeaModel {
            public var apiId: String?

            public var apiName: String?

            public var boundTime: String?

            public var description_: String?

            public var groupId: String?

            public var groupName: String?

            public var regionId: String?

            public var stageName: String?

            public var visibility: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiId != nil {
                    map["ApiId"] = self.apiId!
                }
                if self.apiName != nil {
                    map["ApiName"] = self.apiName!
                }
                if self.boundTime != nil {
                    map["BoundTime"] = self.boundTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupName != nil {
                    map["GroupName"] = self.groupName!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.stageName != nil {
                    map["StageName"] = self.stageName!
                }
                if self.visibility != nil {
                    map["Visibility"] = self.visibility!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiId"] as? String {
                    self.apiId = value
                }
                if let value = dict["ApiName"] as? String {
                    self.apiName = value
                }
                if let value = dict["BoundTime"] as? String {
                    self.boundTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["GroupName"] as? String {
                    self.groupName = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["StageName"] as? String {
                    self.stageName = value
                }
                if let value = dict["Visibility"] as? String {
                    self.visibility = value
                }
            }
        }
        public var apiInfo: [DescribeApisBySignatureResponseBody.ApiInfos.ApiInfo]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiInfo != nil {
                var tmp : [Any] = []
                for k in self.apiInfo! {
                    tmp.append(k.toMap())
                }
                map["ApiInfo"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiInfo"] as? [Any?] {
                var tmp : [DescribeApisBySignatureResponseBody.ApiInfos.ApiInfo] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApisBySignatureResponseBody.ApiInfos.ApiInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.apiInfo = tmp
            }
        }
    }
    public var apiInfos: DescribeApisBySignatureResponseBody.ApiInfos?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.apiInfos?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiInfos != nil {
            map["ApiInfos"] = self.apiInfos?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiInfos"] as? [String: Any?] {
            var model = DescribeApisBySignatureResponseBody.ApiInfos()
            model.fromMap(value)
            self.apiInfos = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeApisBySignatureResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApisBySignatureResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApisBySignatureResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApisByTrafficControlRequest : Tea.TeaModel {
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public var trafficControlId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.trafficControlId != nil {
            map["TrafficControlId"] = self.trafficControlId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["TrafficControlId"] as? String {
            self.trafficControlId = value
        }
    }
}

public class DescribeApisByTrafficControlResponseBody : Tea.TeaModel {
    public class ApiInfos : Tea.TeaModel {
        public class ApiInfo : Tea.TeaModel {
            public var apiId: String?

            public var apiName: String?

            public var boundTime: String?

            public var description_: String?

            public var groupId: String?

            public var groupName: String?

            public var regionId: String?

            public var stageName: String?

            public var visibility: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiId != nil {
                    map["ApiId"] = self.apiId!
                }
                if self.apiName != nil {
                    map["ApiName"] = self.apiName!
                }
                if self.boundTime != nil {
                    map["BoundTime"] = self.boundTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupName != nil {
                    map["GroupName"] = self.groupName!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.stageName != nil {
                    map["StageName"] = self.stageName!
                }
                if self.visibility != nil {
                    map["Visibility"] = self.visibility!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiId"] as? String {
                    self.apiId = value
                }
                if let value = dict["ApiName"] as? String {
                    self.apiName = value
                }
                if let value = dict["BoundTime"] as? String {
                    self.boundTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["GroupName"] as? String {
                    self.groupName = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["StageName"] as? String {
                    self.stageName = value
                }
                if let value = dict["Visibility"] as? String {
                    self.visibility = value
                }
            }
        }
        public var apiInfo: [DescribeApisByTrafficControlResponseBody.ApiInfos.ApiInfo]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiInfo != nil {
                var tmp : [Any] = []
                for k in self.apiInfo! {
                    tmp.append(k.toMap())
                }
                map["ApiInfo"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiInfo"] as? [Any?] {
                var tmp : [DescribeApisByTrafficControlResponseBody.ApiInfos.ApiInfo] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApisByTrafficControlResponseBody.ApiInfos.ApiInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.apiInfo = tmp
            }
        }
    }
    public var apiInfos: DescribeApisByTrafficControlResponseBody.ApiInfos?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.apiInfos?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiInfos != nil {
            map["ApiInfos"] = self.apiInfos?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiInfos"] as? [String: Any?] {
            var model = DescribeApisByTrafficControlResponseBody.ApiInfos()
            model.fromMap(value)
            self.apiInfos = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeApisByTrafficControlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApisByTrafficControlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApisByTrafficControlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApisByVpcAccessRequest : Tea.TeaModel {
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public var vpcName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.vpcName != nil {
            map["VpcName"] = self.vpcName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["VpcName"] as? String {
            self.vpcName = value
        }
    }
}

public class DescribeApisByVpcAccessResponseBody : Tea.TeaModel {
    public class ApiVpcAccessInfos : Tea.TeaModel {
        public class ApiVpcAccessInfo : Tea.TeaModel {
            public var apiId: String?

            public var apiName: String?

            public var description_: String?

            public var groupId: String?

            public var groupName: String?

            public var instanceId: String?

            public var method: String?

            public var path: String?

            public var port: Int32?

            public var regionId: String?

            public var stageId: String?

            public var stageName: String?

            public var vpcId: String?

            public var vpcName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiId != nil {
                    map["ApiId"] = self.apiId!
                }
                if self.apiName != nil {
                    map["ApiName"] = self.apiName!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupName != nil {
                    map["GroupName"] = self.groupName!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.method != nil {
                    map["Method"] = self.method!
                }
                if self.path != nil {
                    map["Path"] = self.path!
                }
                if self.port != nil {
                    map["Port"] = self.port!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.stageId != nil {
                    map["StageId"] = self.stageId!
                }
                if self.stageName != nil {
                    map["StageName"] = self.stageName!
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId!
                }
                if self.vpcName != nil {
                    map["VpcName"] = self.vpcName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiId"] as? String {
                    self.apiId = value
                }
                if let value = dict["ApiName"] as? String {
                    self.apiName = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["GroupName"] as? String {
                    self.groupName = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["Method"] as? String {
                    self.method = value
                }
                if let value = dict["Path"] as? String {
                    self.path = value
                }
                if let value = dict["Port"] as? Int32 {
                    self.port = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["StageId"] as? String {
                    self.stageId = value
                }
                if let value = dict["StageName"] as? String {
                    self.stageName = value
                }
                if let value = dict["VpcId"] as? String {
                    self.vpcId = value
                }
                if let value = dict["VpcName"] as? String {
                    self.vpcName = value
                }
            }
        }
        public var apiVpcAccessInfo: [DescribeApisByVpcAccessResponseBody.ApiVpcAccessInfos.ApiVpcAccessInfo]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiVpcAccessInfo != nil {
                var tmp : [Any] = []
                for k in self.apiVpcAccessInfo! {
                    tmp.append(k.toMap())
                }
                map["ApiVpcAccessInfo"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiVpcAccessInfo"] as? [Any?] {
                var tmp : [DescribeApisByVpcAccessResponseBody.ApiVpcAccessInfos.ApiVpcAccessInfo] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApisByVpcAccessResponseBody.ApiVpcAccessInfos.ApiVpcAccessInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.apiVpcAccessInfo = tmp
            }
        }
    }
    public var apiVpcAccessInfos: DescribeApisByVpcAccessResponseBody.ApiVpcAccessInfos?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.apiVpcAccessInfos?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiVpcAccessInfos != nil {
            map["ApiVpcAccessInfos"] = self.apiVpcAccessInfos?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiVpcAccessInfos"] as? [String: Any?] {
            var model = DescribeApisByVpcAccessResponseBody.ApiVpcAccessInfos()
            model.fromMap(value)
            self.apiVpcAccessInfos = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeApisByVpcAccessResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApisByVpcAccessResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApisByVpcAccessResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeApisWithStageNameIntegratedByAppRequest : Tea.TeaModel {
    public var apiName: String?

    public var apiUid: String?

    public var appId: Int64?

    public var description_: String?

    public var method: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var path: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiName != nil {
            map["ApiName"] = self.apiName!
        }
        if self.apiUid != nil {
            map["ApiUid"] = self.apiUid!
        }
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.method != nil {
            map["Method"] = self.method!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.path != nil {
            map["Path"] = self.path!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiName"] as? String {
            self.apiName = value
        }
        if let value = dict["ApiUid"] as? String {
            self.apiUid = value
        }
        if let value = dict["AppId"] as? Int64 {
            self.appId = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Method"] as? String {
            self.method = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Path"] as? String {
            self.path = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeApisWithStageNameIntegratedByAppResponseBody : Tea.TeaModel {
    public class AppApiRelationInfos : Tea.TeaModel {
        public class AppApiRelationInfo : Tea.TeaModel {
            public var apiId: String?

            public var apiName: String?

            public var authorizationSource: String?

            public var createdTime: String?

            public var description_: String?

            public var groupId: String?

            public var groupName: String?

            public var method: String?

            public var operator_: String?

            public var path: String?

            public var regionId: String?

            public var stageNameAndAuth: [String: String]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiId != nil {
                    map["ApiId"] = self.apiId!
                }
                if self.apiName != nil {
                    map["ApiName"] = self.apiName!
                }
                if self.authorizationSource != nil {
                    map["AuthorizationSource"] = self.authorizationSource!
                }
                if self.createdTime != nil {
                    map["CreatedTime"] = self.createdTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupName != nil {
                    map["GroupName"] = self.groupName!
                }
                if self.method != nil {
                    map["Method"] = self.method!
                }
                if self.operator_ != nil {
                    map["Operator"] = self.operator_!
                }
                if self.path != nil {
                    map["Path"] = self.path!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.stageNameAndAuth != nil {
                    map["StageNameAndAuth"] = self.stageNameAndAuth!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiId"] as? String {
                    self.apiId = value
                }
                if let value = dict["ApiName"] as? String {
                    self.apiName = value
                }
                if let value = dict["AuthorizationSource"] as? String {
                    self.authorizationSource = value
                }
                if let value = dict["CreatedTime"] as? String {
                    self.createdTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["GroupName"] as? String {
                    self.groupName = value
                }
                if let value = dict["Method"] as? String {
                    self.method = value
                }
                if let value = dict["Operator"] as? String {
                    self.operator_ = value
                }
                if let value = dict["Path"] as? String {
                    self.path = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["StageNameAndAuth"] as? [String: String] {
                    self.stageNameAndAuth = value
                }
            }
        }
        public var appApiRelationInfo: [DescribeApisWithStageNameIntegratedByAppResponseBody.AppApiRelationInfos.AppApiRelationInfo]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appApiRelationInfo != nil {
                var tmp : [Any] = []
                for k in self.appApiRelationInfo! {
                    tmp.append(k.toMap())
                }
                map["AppApiRelationInfo"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppApiRelationInfo"] as? [Any?] {
                var tmp : [DescribeApisWithStageNameIntegratedByAppResponseBody.AppApiRelationInfos.AppApiRelationInfo] = []
                for v in value {
                    if v != nil {
                        var model = DescribeApisWithStageNameIntegratedByAppResponseBody.AppApiRelationInfos.AppApiRelationInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.appApiRelationInfo = tmp
            }
        }
    }
    public var appApiRelationInfos: DescribeApisWithStageNameIntegratedByAppResponseBody.AppApiRelationInfos?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.appApiRelationInfos?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appApiRelationInfos != nil {
            map["AppApiRelationInfos"] = self.appApiRelationInfos?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppApiRelationInfos"] as? [String: Any?] {
            var model = DescribeApisWithStageNameIntegratedByAppResponseBody.AppApiRelationInfos()
            model.fromMap(value)
            self.appApiRelationInfos = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeApisWithStageNameIntegratedByAppResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeApisWithStageNameIntegratedByAppResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeApisWithStageNameIntegratedByAppResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAppRequest : Tea.TeaModel {
    public var appId: Int64?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? Int64 {
            self.appId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeAppResponseBody : Tea.TeaModel {
    public var appId: Int64?

    public var appName: String?

    public var createdTime: String?

    public var description_: String?

    public var disabled: Bool?

    public var extend: String?

    public var modifiedTime: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.appName != nil {
            map["AppName"] = self.appName!
        }
        if self.createdTime != nil {
            map["CreatedTime"] = self.createdTime!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.disabled != nil {
            map["Disabled"] = self.disabled!
        }
        if self.extend != nil {
            map["Extend"] = self.extend!
        }
        if self.modifiedTime != nil {
            map["ModifiedTime"] = self.modifiedTime!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? Int64 {
            self.appId = value
        }
        if let value = dict["AppName"] as? String {
            self.appName = value
        }
        if let value = dict["CreatedTime"] as? String {
            self.createdTime = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Disabled"] as? Bool {
            self.disabled = value
        }
        if let value = dict["Extend"] as? String {
            self.extend = value
        }
        if let value = dict["ModifiedTime"] as? String {
            self.modifiedTime = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeAppResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAppResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAppResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAppAttributesRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var appCode: String?

    public var appId: Int64?

    public var appKey: String?

    public var appName: String?

    public var enableTagAuth: Bool?

    public var extend: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public var sort: String?

    public var tag: [DescribeAppAttributesRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appCode != nil {
            map["AppCode"] = self.appCode!
        }
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.appKey != nil {
            map["AppKey"] = self.appKey!
        }
        if self.appName != nil {
            map["AppName"] = self.appName!
        }
        if self.enableTagAuth != nil {
            map["EnableTagAuth"] = self.enableTagAuth!
        }
        if self.extend != nil {
            map["Extend"] = self.extend!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.sort != nil {
            map["Sort"] = self.sort!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppCode"] as? String {
            self.appCode = value
        }
        if let value = dict["AppId"] as? Int64 {
            self.appId = value
        }
        if let value = dict["AppKey"] as? String {
            self.appKey = value
        }
        if let value = dict["AppName"] as? String {
            self.appName = value
        }
        if let value = dict["EnableTagAuth"] as? Bool {
            self.enableTagAuth = value
        }
        if let value = dict["Extend"] as? String {
            self.extend = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Sort"] as? String {
            self.sort = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [DescribeAppAttributesRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = DescribeAppAttributesRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class DescribeAppAttributesResponseBody : Tea.TeaModel {
    public class Apps : Tea.TeaModel {
        public class AppAttribute : Tea.TeaModel {
            public class Tags : Tea.TeaModel {
                public class TagInfo : Tea.TeaModel {
                    public var key: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var tagInfo: [DescribeAppAttributesResponseBody.Apps.AppAttribute.Tags.TagInfo]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.tagInfo != nil {
                        var tmp : [Any] = []
                        for k in self.tagInfo! {
                            tmp.append(k.toMap())
                        }
                        map["TagInfo"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["TagInfo"] as? [Any?] {
                        var tmp : [DescribeAppAttributesResponseBody.Apps.AppAttribute.Tags.TagInfo] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeAppAttributesResponseBody.Apps.AppAttribute.Tags.TagInfo()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.tagInfo = tmp
                    }
                }
            }
            public var appId: Int64?

            public var appName: String?

            public var createdTime: String?

            public var description_: String?

            public var disabled: Bool?

            public var extend: String?

            public var modifiedTime: String?

            public var tags: DescribeAppAttributesResponseBody.Apps.AppAttribute.Tags?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.tags?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appId != nil {
                    map["AppId"] = self.appId!
                }
                if self.appName != nil {
                    map["AppName"] = self.appName!
                }
                if self.createdTime != nil {
                    map["CreatedTime"] = self.createdTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.disabled != nil {
                    map["Disabled"] = self.disabled!
                }
                if self.extend != nil {
                    map["Extend"] = self.extend!
                }
                if self.modifiedTime != nil {
                    map["ModifiedTime"] = self.modifiedTime!
                }
                if self.tags != nil {
                    map["Tags"] = self.tags?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AppId"] as? Int64 {
                    self.appId = value
                }
                if let value = dict["AppName"] as? String {
                    self.appName = value
                }
                if let value = dict["CreatedTime"] as? String {
                    self.createdTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Disabled"] as? Bool {
                    self.disabled = value
                }
                if let value = dict["Extend"] as? String {
                    self.extend = value
                }
                if let value = dict["ModifiedTime"] as? String {
                    self.modifiedTime = value
                }
                if let value = dict["Tags"] as? [String: Any?] {
                    var model = DescribeAppAttributesResponseBody.Apps.AppAttribute.Tags()
                    model.fromMap(value)
                    self.tags = model
                }
            }
        }
        public var appAttribute: [DescribeAppAttributesResponseBody.Apps.AppAttribute]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appAttribute != nil {
                var tmp : [Any] = []
                for k in self.appAttribute! {
                    tmp.append(k.toMap())
                }
                map["AppAttribute"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppAttribute"] as? [Any?] {
                var tmp : [DescribeAppAttributesResponseBody.Apps.AppAttribute] = []
                for v in value {
                    if v != nil {
                        var model = DescribeAppAttributesResponseBody.Apps.AppAttribute()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.appAttribute = tmp
            }
        }
    }
    public var apps: DescribeAppAttributesResponseBody.Apps?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.apps?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apps != nil {
            map["Apps"] = self.apps?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Apps"] as? [String: Any?] {
            var model = DescribeAppAttributesResponseBody.Apps()
            model.fromMap(value)
            self.apps = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeAppAttributesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAppAttributesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAppAttributesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAppSecuritiesRequest : Tea.TeaModel {
    public var appId: Int64?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? Int64 {
            self.appId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeAppSecuritiesResponseBody : Tea.TeaModel {
    public class AppSecuritys : Tea.TeaModel {
        public class AppSecurity : Tea.TeaModel {
            public var appCode: String?

            public var appKey: String?

            public var appSecret: String?

            public var createdTime: String?

            public var modifiedTime: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appCode != nil {
                    map["AppCode"] = self.appCode!
                }
                if self.appKey != nil {
                    map["AppKey"] = self.appKey!
                }
                if self.appSecret != nil {
                    map["AppSecret"] = self.appSecret!
                }
                if self.createdTime != nil {
                    map["CreatedTime"] = self.createdTime!
                }
                if self.modifiedTime != nil {
                    map["ModifiedTime"] = self.modifiedTime!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AppCode"] as? String {
                    self.appCode = value
                }
                if let value = dict["AppKey"] as? String {
                    self.appKey = value
                }
                if let value = dict["AppSecret"] as? String {
                    self.appSecret = value
                }
                if let value = dict["CreatedTime"] as? String {
                    self.createdTime = value
                }
                if let value = dict["ModifiedTime"] as? String {
                    self.modifiedTime = value
                }
            }
        }
        public var appSecurity: [DescribeAppSecuritiesResponseBody.AppSecuritys.AppSecurity]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appSecurity != nil {
                var tmp : [Any] = []
                for k in self.appSecurity! {
                    tmp.append(k.toMap())
                }
                map["AppSecurity"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppSecurity"] as? [Any?] {
                var tmp : [DescribeAppSecuritiesResponseBody.AppSecuritys.AppSecurity] = []
                for v in value {
                    if v != nil {
                        var model = DescribeAppSecuritiesResponseBody.AppSecuritys.AppSecurity()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.appSecurity = tmp
            }
        }
    }
    public var appSecuritys: DescribeAppSecuritiesResponseBody.AppSecuritys?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.appSecuritys?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appSecuritys != nil {
            map["AppSecuritys"] = self.appSecuritys?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppSecuritys"] as? [String: Any?] {
            var model = DescribeAppSecuritiesResponseBody.AppSecuritys()
            model.fromMap(value)
            self.appSecuritys = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeAppSecuritiesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAppSecuritiesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAppSecuritiesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAppSecurityRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var appId: Int64?

    public var securityToken: String?

    public var tag: [DescribeAppSecurityRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? Int64 {
            self.appId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [DescribeAppSecurityRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = DescribeAppSecurityRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class DescribeAppSecurityResponseBody : Tea.TeaModel {
    public var appCode: String?

    public var appKey: String?

    public var appSecret: String?

    public var createdTime: String?

    public var modifiedTime: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appCode != nil {
            map["AppCode"] = self.appCode!
        }
        if self.appKey != nil {
            map["AppKey"] = self.appKey!
        }
        if self.appSecret != nil {
            map["AppSecret"] = self.appSecret!
        }
        if self.createdTime != nil {
            map["CreatedTime"] = self.createdTime!
        }
        if self.modifiedTime != nil {
            map["ModifiedTime"] = self.modifiedTime!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppCode"] as? String {
            self.appCode = value
        }
        if let value = dict["AppKey"] as? String {
            self.appKey = value
        }
        if let value = dict["AppSecret"] as? String {
            self.appSecret = value
        }
        if let value = dict["CreatedTime"] as? String {
            self.createdTime = value
        }
        if let value = dict["ModifiedTime"] as? String {
            self.modifiedTime = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeAppSecurityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAppSecurityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAppSecurityResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAppsRequest : Tea.TeaModel {
    public var appId: Int64?

    public var appOwner: Int64?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.appOwner != nil {
            map["AppOwner"] = self.appOwner!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? Int64 {
            self.appId = value
        }
        if let value = dict["AppOwner"] as? Int64 {
            self.appOwner = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeAppsResponseBody : Tea.TeaModel {
    public class Apps : Tea.TeaModel {
        public class AppItem : Tea.TeaModel {
            public var appId: Int64?

            public var appName: String?

            public var description_: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appId != nil {
                    map["AppId"] = self.appId!
                }
                if self.appName != nil {
                    map["AppName"] = self.appName!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AppId"] as? Int64 {
                    self.appId = value
                }
                if let value = dict["AppName"] as? String {
                    self.appName = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
            }
        }
        public var appItem: [DescribeAppsResponseBody.Apps.AppItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.appItem != nil {
                var tmp : [Any] = []
                for k in self.appItem! {
                    tmp.append(k.toMap())
                }
                map["AppItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AppItem"] as? [Any?] {
                var tmp : [DescribeAppsResponseBody.Apps.AppItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeAppsResponseBody.Apps.AppItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.appItem = tmp
            }
        }
    }
    public var apps: DescribeAppsResponseBody.Apps?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.apps?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apps != nil {
            map["Apps"] = self.apps?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Apps"] as? [String: Any?] {
            var model = DescribeAppsResponseBody.Apps()
            model.fromMap(value)
            self.apps = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeAppsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAppsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAppsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAppsByApiProductRequest : Tea.TeaModel {
    public var apiProductId: String?

    public var appName: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiProductId != nil {
            map["ApiProductId"] = self.apiProductId!
        }
        if self.appName != nil {
            map["AppName"] = self.appName!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiProductId"] as? String {
            self.apiProductId = value
        }
        if let value = dict["AppName"] as? String {
            self.appName = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeAppsByApiProductResponseBody : Tea.TeaModel {
    public class AuthorizedApps : Tea.TeaModel {
        public class AuthorizedApp : Tea.TeaModel {
            public var appId: Int64?

            public var appName: String?

            public var authValidTime: String?

            public var authorizedTime: String?

            public var description_: String?

            public var extend: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appId != nil {
                    map["AppId"] = self.appId!
                }
                if self.appName != nil {
                    map["AppName"] = self.appName!
                }
                if self.authValidTime != nil {
                    map["AuthValidTime"] = self.authValidTime!
                }
                if self.authorizedTime != nil {
                    map["AuthorizedTime"] = self.authorizedTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.extend != nil {
                    map["Extend"] = self.extend!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AppId"] as? Int64 {
                    self.appId = value
                }
                if let value = dict["AppName"] as? String {
                    self.appName = value
                }
                if let value = dict["AuthValidTime"] as? String {
                    self.authValidTime = value
                }
                if let value = dict["AuthorizedTime"] as? String {
                    self.authorizedTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Extend"] as? String {
                    self.extend = value
                }
            }
        }
        public var authorizedApp: [DescribeAppsByApiProductResponseBody.AuthorizedApps.AuthorizedApp]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.authorizedApp != nil {
                var tmp : [Any] = []
                for k in self.authorizedApp! {
                    tmp.append(k.toMap())
                }
                map["AuthorizedApp"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AuthorizedApp"] as? [Any?] {
                var tmp : [DescribeAppsByApiProductResponseBody.AuthorizedApps.AuthorizedApp] = []
                for v in value {
                    if v != nil {
                        var model = DescribeAppsByApiProductResponseBody.AuthorizedApps.AuthorizedApp()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.authorizedApp = tmp
            }
        }
    }
    public var authorizedApps: DescribeAppsByApiProductResponseBody.AuthorizedApps?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.authorizedApps?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.authorizedApps != nil {
            map["AuthorizedApps"] = self.authorizedApps?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuthorizedApps"] as? [String: Any?] {
            var model = DescribeAppsByApiProductResponseBody.AuthorizedApps()
            model.fromMap(value)
            self.authorizedApps = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeAppsByApiProductResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAppsByApiProductResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAppsByApiProductResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAuthorizedApisRequest : Tea.TeaModel {
    public var appId: Int64?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? Int64 {
            self.appId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeAuthorizedApisResponseBody : Tea.TeaModel {
    public class AuthorizedApis : Tea.TeaModel {
        public class AuthorizedApi : Tea.TeaModel {
            public var apiId: String?

            public var apiName: String?

            public var authVaildTime: String?

            public var authorizationSource: String?

            public var authorizedTime: String?

            public var description_: String?

            public var groupId: String?

            public var groupName: String?

            public var operator_: String?

            public var regionId: String?

            public var stageName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiId != nil {
                    map["ApiId"] = self.apiId!
                }
                if self.apiName != nil {
                    map["ApiName"] = self.apiName!
                }
                if self.authVaildTime != nil {
                    map["AuthVaildTime"] = self.authVaildTime!
                }
                if self.authorizationSource != nil {
                    map["AuthorizationSource"] = self.authorizationSource!
                }
                if self.authorizedTime != nil {
                    map["AuthorizedTime"] = self.authorizedTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupName != nil {
                    map["GroupName"] = self.groupName!
                }
                if self.operator_ != nil {
                    map["Operator"] = self.operator_!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.stageName != nil {
                    map["StageName"] = self.stageName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiId"] as? String {
                    self.apiId = value
                }
                if let value = dict["ApiName"] as? String {
                    self.apiName = value
                }
                if let value = dict["AuthVaildTime"] as? String {
                    self.authVaildTime = value
                }
                if let value = dict["AuthorizationSource"] as? String {
                    self.authorizationSource = value
                }
                if let value = dict["AuthorizedTime"] as? String {
                    self.authorizedTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["GroupName"] as? String {
                    self.groupName = value
                }
                if let value = dict["Operator"] as? String {
                    self.operator_ = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["StageName"] as? String {
                    self.stageName = value
                }
            }
        }
        public var authorizedApi: [DescribeAuthorizedApisResponseBody.AuthorizedApis.AuthorizedApi]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.authorizedApi != nil {
                var tmp : [Any] = []
                for k in self.authorizedApi! {
                    tmp.append(k.toMap())
                }
                map["AuthorizedApi"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AuthorizedApi"] as? [Any?] {
                var tmp : [DescribeAuthorizedApisResponseBody.AuthorizedApis.AuthorizedApi] = []
                for v in value {
                    if v != nil {
                        var model = DescribeAuthorizedApisResponseBody.AuthorizedApis.AuthorizedApi()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.authorizedApi = tmp
            }
        }
    }
    public var authorizedApis: DescribeAuthorizedApisResponseBody.AuthorizedApis?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.authorizedApis?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.authorizedApis != nil {
            map["AuthorizedApis"] = self.authorizedApis?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuthorizedApis"] as? [String: Any?] {
            var model = DescribeAuthorizedApisResponseBody.AuthorizedApis()
            model.fromMap(value)
            self.authorizedApis = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeAuthorizedApisResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAuthorizedApisResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAuthorizedApisResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeAuthorizedAppsRequest : Tea.TeaModel {
    public var apiId: String?

    public var appId: Int64?

    public var appName: String?

    public var appOwnerId: Int64?

    public var groupId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.appName != nil {
            map["AppName"] = self.appName!
        }
        if self.appOwnerId != nil {
            map["AppOwnerId"] = self.appOwnerId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["AppId"] as? Int64 {
            self.appId = value
        }
        if let value = dict["AppName"] as? String {
            self.appName = value
        }
        if let value = dict["AppOwnerId"] as? Int64 {
            self.appOwnerId = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class DescribeAuthorizedAppsResponseBody : Tea.TeaModel {
    public class AuthorizedApps : Tea.TeaModel {
        public class AuthorizedApp : Tea.TeaModel {
            public class Tag : Tea.TeaModel {
                public class TagInfo : Tea.TeaModel {
                    public var key: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var tagInfo: [DescribeAuthorizedAppsResponseBody.AuthorizedApps.AuthorizedApp.Tag.TagInfo]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.tagInfo != nil {
                        var tmp : [Any] = []
                        for k in self.tagInfo! {
                            tmp.append(k.toMap())
                        }
                        map["TagInfo"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["TagInfo"] as? [Any?] {
                        var tmp : [DescribeAuthorizedAppsResponseBody.AuthorizedApps.AuthorizedApp.Tag.TagInfo] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeAuthorizedAppsResponseBody.AuthorizedApps.AuthorizedApp.Tag.TagInfo()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.tagInfo = tmp
                    }
                }
            }
            public var appDescription: String?

            public var appId: Int64?

            public var appName: String?

            public var authVaildTime: String?

            public var authorizationSource: String?

            public var authorizedTime: String?

            public var description_: String?

            public var operator_: String?

            public var stageAlias: String?

            public var stageName: String?

            public var tag: DescribeAuthorizedAppsResponseBody.AuthorizedApps.AuthorizedApp.Tag?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.tag?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appDescription != nil {
                    map["AppDescription"] = self.appDescription!
                }
                if self.appId != nil {
                    map["AppId"] = self.appId!
                }
                if self.appName != nil {
                    map["AppName"] = self.appName!
                }
                if self.authVaildTime != nil {
                    map["AuthVaildTime"] = self.authVaildTime!
                }
                if self.authorizationSource != nil {
                    map["AuthorizationSource"] = self.authorizationSource!
                }
                if self.authorizedTime != nil {
                    map["AuthorizedTime"] = self.authorizedTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.operator_ != nil {
                    map["Operator"] = self.operator_!
                }
                if self.stageAlias != nil {
                    map["StageAlias"] = self.stageAlias!
                }
                if self.stageName != nil {
                    map["StageName"] = self.stageName!
                }
                if self.tag != nil {
                    map["Tag"] = self.tag?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AppDescription"] as? String {
                    self.appDescription = value
                }
                if let value = dict["AppId"] as? Int64 {
                    self.appId = value
                }
                if let value = dict["AppName"] as? String {
                    self.appName = value
                }
                if let value = dict["AuthVaildTime"] as? String {
                    self.authVaildTime = value
                }
                if let value = dict["AuthorizationSource"] as? String {
                    self.authorizationSource = value
                }
                if let value = dict["AuthorizedTime"] as? String {
                    self.authorizedTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Operator"] as? String {
                    self.operator_ = value
                }
                if let value = dict["StageAlias"] as? String {
                    self.stageAlias = value
                }
                if let value = dict["StageName"] as? String {
                    self.stageName = value
                }
                if let value = dict["Tag"] as? [String: Any?] {
                    var model = DescribeAuthorizedAppsResponseBody.AuthorizedApps.AuthorizedApp.Tag()
                    model.fromMap(value)
                    self.tag = model
                }
            }
        }
        public var authorizedApp: [DescribeAuthorizedAppsResponseBody.AuthorizedApps.AuthorizedApp]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.authorizedApp != nil {
                var tmp : [Any] = []
                for k in self.authorizedApp! {
                    tmp.append(k.toMap())
                }
                map["AuthorizedApp"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["AuthorizedApp"] as? [Any?] {
                var tmp : [DescribeAuthorizedAppsResponseBody.AuthorizedApps.AuthorizedApp] = []
                for v in value {
                    if v != nil {
                        var model = DescribeAuthorizedAppsResponseBody.AuthorizedApps.AuthorizedApp()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.authorizedApp = tmp
            }
        }
    }
    public var authorizedApps: DescribeAuthorizedAppsResponseBody.AuthorizedApps?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.authorizedApps?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.authorizedApps != nil {
            map["AuthorizedApps"] = self.authorizedApps?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuthorizedApps"] as? [String: Any?] {
            var model = DescribeAuthorizedAppsResponseBody.AuthorizedApps()
            model.fromMap(value)
            self.authorizedApps = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeAuthorizedAppsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeAuthorizedAppsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeAuthorizedAppsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeBackendInfoRequest : Tea.TeaModel {
    public var backendId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.backendId != nil {
            map["BackendId"] = self.backendId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BackendId"] as? String {
            self.backendId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeBackendInfoResponseBody : Tea.TeaModel {
    public class BackendInfo : Tea.TeaModel {
        public class BackendModels : Tea.TeaModel {
            public class BackendConfig : Tea.TeaModel {
                public class DiscoveryConfig : Tea.TeaModel {
                    public class NacosConfig : Tea.TeaModel {
                        public var accessKey: String?

                        public var authType: String?

                        public var clusters: String?

                        public var groupName: String?

                        public var namespace: String?

                        public var password: String?

                        public var secretKey: String?

                        public var serverAddress: String?

                        public var serviceName: String?

                        public var userName: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.accessKey != nil {
                                map["AccessKey"] = self.accessKey!
                            }
                            if self.authType != nil {
                                map["AuthType"] = self.authType!
                            }
                            if self.clusters != nil {
                                map["Clusters"] = self.clusters!
                            }
                            if self.groupName != nil {
                                map["GroupName"] = self.groupName!
                            }
                            if self.namespace != nil {
                                map["Namespace"] = self.namespace!
                            }
                            if self.password != nil {
                                map["Password"] = self.password!
                            }
                            if self.secretKey != nil {
                                map["SecretKey"] = self.secretKey!
                            }
                            if self.serverAddress != nil {
                                map["ServerAddress"] = self.serverAddress!
                            }
                            if self.serviceName != nil {
                                map["ServiceName"] = self.serviceName!
                            }
                            if self.userName != nil {
                                map["UserName"] = self.userName!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["AccessKey"] as? String {
                                self.accessKey = value
                            }
                            if let value = dict["AuthType"] as? String {
                                self.authType = value
                            }
                            if let value = dict["Clusters"] as? String {
                                self.clusters = value
                            }
                            if let value = dict["GroupName"] as? String {
                                self.groupName = value
                            }
                            if let value = dict["Namespace"] as? String {
                                self.namespace = value
                            }
                            if let value = dict["Password"] as? String {
                                self.password = value
                            }
                            if let value = dict["SecretKey"] as? String {
                                self.secretKey = value
                            }
                            if let value = dict["ServerAddress"] as? String {
                                self.serverAddress = value
                            }
                            if let value = dict["ServiceName"] as? String {
                                self.serviceName = value
                            }
                            if let value = dict["UserName"] as? String {
                                self.userName = value
                            }
                        }
                    }
                    public class ZookeeperConfig : Tea.TeaModel {
                        public var connectString: String?

                        public var namespace: String?

                        public var serviceName: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.connectString != nil {
                                map["ConnectString"] = self.connectString!
                            }
                            if self.namespace != nil {
                                map["Namespace"] = self.namespace!
                            }
                            if self.serviceName != nil {
                                map["ServiceName"] = self.serviceName!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["ConnectString"] as? String {
                                self.connectString = value
                            }
                            if let value = dict["Namespace"] as? String {
                                self.namespace = value
                            }
                            if let value = dict["ServiceName"] as? String {
                                self.serviceName = value
                            }
                        }
                    }
                    public var nacosConfig: DescribeBackendInfoResponseBody.BackendInfo.BackendModels.BackendConfig.DiscoveryConfig.NacosConfig?

                    public var rcType: String?

                    public var zookeeperConfig: DescribeBackendInfoResponseBody.BackendInfo.BackendModels.BackendConfig.DiscoveryConfig.ZookeeperConfig?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.nacosConfig?.validate()
                        try self.zookeeperConfig?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.nacosConfig != nil {
                            map["NacosConfig"] = self.nacosConfig?.toMap()
                        }
                        if self.rcType != nil {
                            map["RcType"] = self.rcType!
                        }
                        if self.zookeeperConfig != nil {
                            map["ZookeeperConfig"] = self.zookeeperConfig?.toMap()
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["NacosConfig"] as? [String: Any?] {
                            var model = DescribeBackendInfoResponseBody.BackendInfo.BackendModels.BackendConfig.DiscoveryConfig.NacosConfig()
                            model.fromMap(value)
                            self.nacosConfig = model
                        }
                        if let value = dict["RcType"] as? String {
                            self.rcType = value
                        }
                        if let value = dict["ZookeeperConfig"] as? [String: Any?] {
                            var model = DescribeBackendInfoResponseBody.BackendInfo.BackendModels.BackendConfig.DiscoveryConfig.ZookeeperConfig()
                            model.fromMap(value)
                            self.zookeeperConfig = model
                        }
                    }
                }
                public class EdasConfig : Tea.TeaModel {
                    public var edasAppId: String?

                    public var microserviceNamespace: String?

                    public var microserviceNamespaceId: String?

                    public var microserviceNamespaceName: String?

                    public var mseInstanceId: String?

                    public var registryType: String?

                    public var serviceName: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.edasAppId != nil {
                            map["EdasAppId"] = self.edasAppId!
                        }
                        if self.microserviceNamespace != nil {
                            map["MicroserviceNamespace"] = self.microserviceNamespace!
                        }
                        if self.microserviceNamespaceId != nil {
                            map["MicroserviceNamespaceId"] = self.microserviceNamespaceId!
                        }
                        if self.microserviceNamespaceName != nil {
                            map["MicroserviceNamespaceName"] = self.microserviceNamespaceName!
                        }
                        if self.mseInstanceId != nil {
                            map["MseInstanceId"] = self.mseInstanceId!
                        }
                        if self.registryType != nil {
                            map["RegistryType"] = self.registryType!
                        }
                        if self.serviceName != nil {
                            map["ServiceName"] = self.serviceName!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["EdasAppId"] as? String {
                            self.edasAppId = value
                        }
                        if let value = dict["MicroserviceNamespace"] as? String {
                            self.microserviceNamespace = value
                        }
                        if let value = dict["MicroserviceNamespaceId"] as? String {
                            self.microserviceNamespaceId = value
                        }
                        if let value = dict["MicroserviceNamespaceName"] as? String {
                            self.microserviceNamespaceName = value
                        }
                        if let value = dict["MseInstanceId"] as? String {
                            self.mseInstanceId = value
                        }
                        if let value = dict["RegistryType"] as? String {
                            self.registryType = value
                        }
                        if let value = dict["ServiceName"] as? String {
                            self.serviceName = value
                        }
                    }
                }
                public class EventBridgeConfig : Tea.TeaModel {
                    public var eventBridgeRegionId: String?

                    public var eventBus: String?

                    public var eventSource: String?

                    public var roleArn: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.eventBridgeRegionId != nil {
                            map["EventBridgeRegionId"] = self.eventBridgeRegionId!
                        }
                        if self.eventBus != nil {
                            map["EventBus"] = self.eventBus!
                        }
                        if self.eventSource != nil {
                            map["EventSource"] = self.eventSource!
                        }
                        if self.roleArn != nil {
                            map["RoleArn"] = self.roleArn!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["EventBridgeRegionId"] as? String {
                            self.eventBridgeRegionId = value
                        }
                        if let value = dict["EventBus"] as? String {
                            self.eventBus = value
                        }
                        if let value = dict["EventSource"] as? String {
                            self.eventSource = value
                        }
                        if let value = dict["RoleArn"] as? String {
                            self.roleArn = value
                        }
                    }
                }
                public class FunctionComputeConfig : Tea.TeaModel {
                    public var fcBaseUrl: String?

                    public var fcRegionId: String?

                    public var fcType: String?

                    public var functionName: String?

                    public var onlyBusinessPath: Bool?

                    public var qualifier: String?

                    public var roleArn: String?

                    public var serviceName: String?

                    public var triggerName: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.fcBaseUrl != nil {
                            map["FcBaseUrl"] = self.fcBaseUrl!
                        }
                        if self.fcRegionId != nil {
                            map["FcRegionId"] = self.fcRegionId!
                        }
                        if self.fcType != nil {
                            map["FcType"] = self.fcType!
                        }
                        if self.functionName != nil {
                            map["FunctionName"] = self.functionName!
                        }
                        if self.onlyBusinessPath != nil {
                            map["OnlyBusinessPath"] = self.onlyBusinessPath!
                        }
                        if self.qualifier != nil {
                            map["Qualifier"] = self.qualifier!
                        }
                        if self.roleArn != nil {
                            map["RoleArn"] = self.roleArn!
                        }
                        if self.serviceName != nil {
                            map["ServiceName"] = self.serviceName!
                        }
                        if self.triggerName != nil {
                            map["TriggerName"] = self.triggerName!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["FcBaseUrl"] as? String {
                            self.fcBaseUrl = value
                        }
                        if let value = dict["FcRegionId"] as? String {
                            self.fcRegionId = value
                        }
                        if let value = dict["FcType"] as? String {
                            self.fcType = value
                        }
                        if let value = dict["FunctionName"] as? String {
                            self.functionName = value
                        }
                        if let value = dict["OnlyBusinessPath"] as? Bool {
                            self.onlyBusinessPath = value
                        }
                        if let value = dict["Qualifier"] as? String {
                            self.qualifier = value
                        }
                        if let value = dict["RoleArn"] as? String {
                            self.roleArn = value
                        }
                        if let value = dict["ServiceName"] as? String {
                            self.serviceName = value
                        }
                        if let value = dict["TriggerName"] as? String {
                            self.triggerName = value
                        }
                    }
                }
                public class MockConfig : Tea.TeaModel {
                    public class MockHeaders : Tea.TeaModel {
                        public var headerName: String?

                        public var headerValue: String?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.headerName != nil {
                                map["HeaderName"] = self.headerName!
                            }
                            if self.headerValue != nil {
                                map["HeaderValue"] = self.headerValue!
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["HeaderName"] as? String {
                                self.headerName = value
                            }
                            if let value = dict["HeaderValue"] as? String {
                                self.headerValue = value
                            }
                        }
                    }
                    public var mockHeaders: [DescribeBackendInfoResponseBody.BackendInfo.BackendModels.BackendConfig.MockConfig.MockHeaders]?

                    public var mockResult: String?

                    public var mockStatusCode: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.mockHeaders != nil {
                            var tmp : [Any] = []
                            for k in self.mockHeaders! {
                                tmp.append(k.toMap())
                            }
                            map["MockHeaders"] = tmp
                        }
                        if self.mockResult != nil {
                            map["MockResult"] = self.mockResult!
                        }
                        if self.mockStatusCode != nil {
                            map["MockStatusCode"] = self.mockStatusCode!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["MockHeaders"] as? [Any?] {
                            var tmp : [DescribeBackendInfoResponseBody.BackendInfo.BackendModels.BackendConfig.MockConfig.MockHeaders] = []
                            for v in value {
                                if v != nil {
                                    var model = DescribeBackendInfoResponseBody.BackendInfo.BackendModels.BackendConfig.MockConfig.MockHeaders()
                                    if v != nil {
                                        model.fromMap(v as? [String: Any?])
                                    }
                                    tmp.append(model)
                                }
                            }
                            self.mockHeaders = tmp
                        }
                        if let value = dict["MockResult"] as? String {
                            self.mockResult = value
                        }
                        if let value = dict["MockStatusCode"] as? String {
                            self.mockStatusCode = value
                        }
                    }
                }
                public class OssConfig : Tea.TeaModel {
                    public var bucketName: String?

                    public var ossRegionId: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.bucketName != nil {
                            map["BucketName"] = self.bucketName!
                        }
                        if self.ossRegionId != nil {
                            map["OssRegionId"] = self.ossRegionId!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["BucketName"] as? String {
                            self.bucketName = value
                        }
                        if let value = dict["OssRegionId"] as? String {
                            self.ossRegionId = value
                        }
                    }
                }
                public class VpcConfig : Tea.TeaModel {
                    public var instanceId: String?

                    public var name: String?

                    public var port: Int64?

                    public var vpcAccessId: String?

                    public var vpcId: String?

                    public var vpcScheme: String?

                    public var vpcTargetHostName: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.instanceId != nil {
                            map["InstanceId"] = self.instanceId!
                        }
                        if self.name != nil {
                            map["Name"] = self.name!
                        }
                        if self.port != nil {
                            map["Port"] = self.port!
                        }
                        if self.vpcAccessId != nil {
                            map["VpcAccessId"] = self.vpcAccessId!
                        }
                        if self.vpcId != nil {
                            map["VpcId"] = self.vpcId!
                        }
                        if self.vpcScheme != nil {
                            map["VpcScheme"] = self.vpcScheme!
                        }
                        if self.vpcTargetHostName != nil {
                            map["VpcTargetHostName"] = self.vpcTargetHostName!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["InstanceId"] as? String {
                            self.instanceId = value
                        }
                        if let value = dict["Name"] as? String {
                            self.name = value
                        }
                        if let value = dict["Port"] as? Int64 {
                            self.port = value
                        }
                        if let value = dict["VpcAccessId"] as? String {
                            self.vpcAccessId = value
                        }
                        if let value = dict["VpcId"] as? String {
                            self.vpcId = value
                        }
                        if let value = dict["VpcScheme"] as? String {
                            self.vpcScheme = value
                        }
                        if let value = dict["VpcTargetHostName"] as? String {
                            self.vpcTargetHostName = value
                        }
                    }
                }
                public var discoveryConfig: DescribeBackendInfoResponseBody.BackendInfo.BackendModels.BackendConfig.DiscoveryConfig?

                public var edasConfig: DescribeBackendInfoResponseBody.BackendInfo.BackendModels.BackendConfig.EdasConfig?

                public var eventBridgeConfig: DescribeBackendInfoResponseBody.BackendInfo.BackendModels.BackendConfig.EventBridgeConfig?

                public var functionComputeConfig: DescribeBackendInfoResponseBody.BackendInfo.BackendModels.BackendConfig.FunctionComputeConfig?

                public var httpTargetHostName: String?

                public var mockConfig: DescribeBackendInfoResponseBody.BackendInfo.BackendModels.BackendConfig.MockConfig?

                public var ossConfig: DescribeBackendInfoResponseBody.BackendInfo.BackendModels.BackendConfig.OssConfig?

                public var serviceAddress: String?

                public var serviceTimeout: Int32?

                public var type: String?

                public var vpcConfig: DescribeBackendInfoResponseBody.BackendInfo.BackendModels.BackendConfig.VpcConfig?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                    try self.discoveryConfig?.validate()
                    try self.edasConfig?.validate()
                    try self.eventBridgeConfig?.validate()
                    try self.functionComputeConfig?.validate()
                    try self.mockConfig?.validate()
                    try self.ossConfig?.validate()
                    try self.vpcConfig?.validate()
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.discoveryConfig != nil {
                        map["DiscoveryConfig"] = self.discoveryConfig?.toMap()
                    }
                    if self.edasConfig != nil {
                        map["EdasConfig"] = self.edasConfig?.toMap()
                    }
                    if self.eventBridgeConfig != nil {
                        map["EventBridgeConfig"] = self.eventBridgeConfig?.toMap()
                    }
                    if self.functionComputeConfig != nil {
                        map["FunctionComputeConfig"] = self.functionComputeConfig?.toMap()
                    }
                    if self.httpTargetHostName != nil {
                        map["HttpTargetHostName"] = self.httpTargetHostName!
                    }
                    if self.mockConfig != nil {
                        map["MockConfig"] = self.mockConfig?.toMap()
                    }
                    if self.ossConfig != nil {
                        map["OssConfig"] = self.ossConfig?.toMap()
                    }
                    if self.serviceAddress != nil {
                        map["ServiceAddress"] = self.serviceAddress!
                    }
                    if self.serviceTimeout != nil {
                        map["ServiceTimeout"] = self.serviceTimeout!
                    }
                    if self.type != nil {
                        map["Type"] = self.type!
                    }
                    if self.vpcConfig != nil {
                        map["VpcConfig"] = self.vpcConfig?.toMap()
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["DiscoveryConfig"] as? [String: Any?] {
                        var model = DescribeBackendInfoResponseBody.BackendInfo.BackendModels.BackendConfig.DiscoveryConfig()
                        model.fromMap(value)
                        self.discoveryConfig = model
                    }
                    if let value = dict["EdasConfig"] as? [String: Any?] {
                        var model = DescribeBackendInfoResponseBody.BackendInfo.BackendModels.BackendConfig.EdasConfig()
                        model.fromMap(value)
                        self.edasConfig = model
                    }
                    if let value = dict["EventBridgeConfig"] as? [String: Any?] {
                        var model = DescribeBackendInfoResponseBody.BackendInfo.BackendModels.BackendConfig.EventBridgeConfig()
                        model.fromMap(value)
                        self.eventBridgeConfig = model
                    }
                    if let value = dict["FunctionComputeConfig"] as? [String: Any?] {
                        var model = DescribeBackendInfoResponseBody.BackendInfo.BackendModels.BackendConfig.FunctionComputeConfig()
                        model.fromMap(value)
                        self.functionComputeConfig = model
                    }
                    if let value = dict["HttpTargetHostName"] as? String {
                        self.httpTargetHostName = value
                    }
                    if let value = dict["MockConfig"] as? [String: Any?] {
                        var model = DescribeBackendInfoResponseBody.BackendInfo.BackendModels.BackendConfig.MockConfig()
                        model.fromMap(value)
                        self.mockConfig = model
                    }
                    if let value = dict["OssConfig"] as? [String: Any?] {
                        var model = DescribeBackendInfoResponseBody.BackendInfo.BackendModels.BackendConfig.OssConfig()
                        model.fromMap(value)
                        self.ossConfig = model
                    }
                    if let value = dict["ServiceAddress"] as? String {
                        self.serviceAddress = value
                    }
                    if let value = dict["ServiceTimeout"] as? Int32 {
                        self.serviceTimeout = value
                    }
                    if let value = dict["Type"] as? String {
                        self.type = value
                    }
                    if let value = dict["VpcConfig"] as? [String: Any?] {
                        var model = DescribeBackendInfoResponseBody.BackendInfo.BackendModels.BackendConfig.VpcConfig()
                        model.fromMap(value)
                        self.vpcConfig = model
                    }
                }
            }
            public var backendConfig: DescribeBackendInfoResponseBody.BackendInfo.BackendModels.BackendConfig?

            public var backendModelId: String?

            public var description_: String?

            public var gmtCreate: String?

            public var gmtModified: String?

            public var stageModeId: String?

            public var stageName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.backendConfig?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.backendConfig != nil {
                    map["BackendConfig"] = self.backendConfig?.toMap()
                }
                if self.backendModelId != nil {
                    map["BackendModelId"] = self.backendModelId!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.gmtCreate != nil {
                    map["GmtCreate"] = self.gmtCreate!
                }
                if self.gmtModified != nil {
                    map["GmtModified"] = self.gmtModified!
                }
                if self.stageModeId != nil {
                    map["StageModeId"] = self.stageModeId!
                }
                if self.stageName != nil {
                    map["StageName"] = self.stageName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BackendConfig"] as? [String: Any?] {
                    var model = DescribeBackendInfoResponseBody.BackendInfo.BackendModels.BackendConfig()
                    model.fromMap(value)
                    self.backendConfig = model
                }
                if let value = dict["BackendModelId"] as? String {
                    self.backendModelId = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["GmtCreate"] as? String {
                    self.gmtCreate = value
                }
                if let value = dict["GmtModified"] as? String {
                    self.gmtModified = value
                }
                if let value = dict["StageModeId"] as? String {
                    self.stageModeId = value
                }
                if let value = dict["StageName"] as? String {
                    self.stageName = value
                }
            }
        }
        public var backendId: String?

        public var backendModels: [DescribeBackendInfoResponseBody.BackendInfo.BackendModels]?

        public var backendName: String?

        public var backendType: String?

        public var createdTime: String?

        public var description_: String?

        public var modifiedTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.backendId != nil {
                map["BackendId"] = self.backendId!
            }
            if self.backendModels != nil {
                var tmp : [Any] = []
                for k in self.backendModels! {
                    tmp.append(k.toMap())
                }
                map["BackendModels"] = tmp
            }
            if self.backendName != nil {
                map["BackendName"] = self.backendName!
            }
            if self.backendType != nil {
                map["BackendType"] = self.backendType!
            }
            if self.createdTime != nil {
                map["CreatedTime"] = self.createdTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.modifiedTime != nil {
                map["ModifiedTime"] = self.modifiedTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BackendId"] as? String {
                self.backendId = value
            }
            if let value = dict["BackendModels"] as? [Any?] {
                var tmp : [DescribeBackendInfoResponseBody.BackendInfo.BackendModels] = []
                for v in value {
                    if v != nil {
                        var model = DescribeBackendInfoResponseBody.BackendInfo.BackendModels()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.backendModels = tmp
            }
            if let value = dict["BackendName"] as? String {
                self.backendName = value
            }
            if let value = dict["BackendType"] as? String {
                self.backendType = value
            }
            if let value = dict["CreatedTime"] as? String {
                self.createdTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["ModifiedTime"] as? String {
                self.modifiedTime = value
            }
        }
    }
    public var backendInfo: DescribeBackendInfoResponseBody.BackendInfo?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.backendInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.backendInfo != nil {
            map["BackendInfo"] = self.backendInfo?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BackendInfo"] as? [String: Any?] {
            var model = DescribeBackendInfoResponseBody.BackendInfo()
            model.fromMap(value)
            self.backendInfo = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeBackendInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeBackendInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeBackendInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeBackendListRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var backendName: String?

    public var backendType: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public var tag: [DescribeBackendListRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.backendName != nil {
            map["BackendName"] = self.backendName!
        }
        if self.backendType != nil {
            map["BackendType"] = self.backendType!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BackendName"] as? String {
            self.backendName = value
        }
        if let value = dict["BackendType"] as? String {
            self.backendType = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [DescribeBackendListRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = DescribeBackendListRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class DescribeBackendListResponseBody : Tea.TeaModel {
    public class BackendInfoList : Tea.TeaModel {
        public class Tags : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var backendId: String?

        public var backendName: String?

        public var backendType: String?

        public var createdTime: String?

        public var description_: String?

        public var modifiedTime: String?

        public var tags: [DescribeBackendListResponseBody.BackendInfoList.Tags]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.backendId != nil {
                map["BackendId"] = self.backendId!
            }
            if self.backendName != nil {
                map["BackendName"] = self.backendName!
            }
            if self.backendType != nil {
                map["BackendType"] = self.backendType!
            }
            if self.createdTime != nil {
                map["CreatedTime"] = self.createdTime!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.modifiedTime != nil {
                map["ModifiedTime"] = self.modifiedTime!
            }
            if self.tags != nil {
                var tmp : [Any] = []
                for k in self.tags! {
                    tmp.append(k.toMap())
                }
                map["Tags"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BackendId"] as? String {
                self.backendId = value
            }
            if let value = dict["BackendName"] as? String {
                self.backendName = value
            }
            if let value = dict["BackendType"] as? String {
                self.backendType = value
            }
            if let value = dict["CreatedTime"] as? String {
                self.createdTime = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["ModifiedTime"] as? String {
                self.modifiedTime = value
            }
            if let value = dict["Tags"] as? [Any?] {
                var tmp : [DescribeBackendListResponseBody.BackendInfoList.Tags] = []
                for v in value {
                    if v != nil {
                        var model = DescribeBackendListResponseBody.BackendInfoList.Tags()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tags = tmp
            }
        }
    }
    public var backendInfoList: [DescribeBackendListResponseBody.BackendInfoList]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.backendInfoList != nil {
            var tmp : [Any] = []
            for k in self.backendInfoList! {
                tmp.append(k.toMap())
            }
            map["BackendInfoList"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BackendInfoList"] as? [Any?] {
            var tmp : [DescribeBackendListResponseBody.BackendInfoList] = []
            for v in value {
                if v != nil {
                    var model = DescribeBackendListResponseBody.BackendInfoList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.backendInfoList = tmp
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeBackendListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeBackendListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeBackendListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDatasetInfoRequest : Tea.TeaModel {
    public var datasetId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetId != nil {
            map["DatasetId"] = self.datasetId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetId"] as? String {
            self.datasetId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeDatasetInfoResponseBody : Tea.TeaModel {
    public class DatasetInfo : Tea.TeaModel {
        public var createdTime: String?

        public var datasetId: String?

        public var datasetName: String?

        public var datasetType: String?

        public var description_: String?

        public var modifiedTime: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createdTime != nil {
                map["CreatedTime"] = self.createdTime!
            }
            if self.datasetId != nil {
                map["DatasetId"] = self.datasetId!
            }
            if self.datasetName != nil {
                map["DatasetName"] = self.datasetName!
            }
            if self.datasetType != nil {
                map["DatasetType"] = self.datasetType!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.modifiedTime != nil {
                map["ModifiedTime"] = self.modifiedTime!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreatedTime"] as? String {
                self.createdTime = value
            }
            if let value = dict["DatasetId"] as? String {
                self.datasetId = value
            }
            if let value = dict["DatasetName"] as? String {
                self.datasetName = value
            }
            if let value = dict["DatasetType"] as? String {
                self.datasetType = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["ModifiedTime"] as? String {
                self.modifiedTime = value
            }
        }
    }
    public var datasetInfo: DescribeDatasetInfoResponseBody.DatasetInfo?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.datasetInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetInfo != nil {
            map["DatasetInfo"] = self.datasetInfo?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetInfo"] as? [String: Any?] {
            var model = DescribeDatasetInfoResponseBody.DatasetInfo()
            model.fromMap(value)
            self.datasetInfo = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeDatasetInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDatasetInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDatasetInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDatasetItemInfoRequest : Tea.TeaModel {
    public var datasetId: String?

    public var datasetItemId: String?

    public var securityToken: String?

    public var value: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetId != nil {
            map["DatasetId"] = self.datasetId!
        }
        if self.datasetItemId != nil {
            map["DatasetItemId"] = self.datasetItemId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.value != nil {
            map["Value"] = self.value!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetId"] as? String {
            self.datasetId = value
        }
        if let value = dict["DatasetItemId"] as? String {
            self.datasetItemId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Value"] as? String {
            self.value = value
        }
    }
}

public class DescribeDatasetItemInfoResponseBody : Tea.TeaModel {
    public class DatasetItemInfo : Tea.TeaModel {
        public var createdTime: String?

        public var datasetId: String?

        public var datasetItemId: String?

        public var description_: String?

        public var expiredTime: String?

        public var modifiedTime: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createdTime != nil {
                map["CreatedTime"] = self.createdTime!
            }
            if self.datasetId != nil {
                map["DatasetId"] = self.datasetId!
            }
            if self.datasetItemId != nil {
                map["DatasetItemId"] = self.datasetItemId!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.expiredTime != nil {
                map["ExpiredTime"] = self.expiredTime!
            }
            if self.modifiedTime != nil {
                map["ModifiedTime"] = self.modifiedTime!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreatedTime"] as? String {
                self.createdTime = value
            }
            if let value = dict["DatasetId"] as? String {
                self.datasetId = value
            }
            if let value = dict["DatasetItemId"] as? String {
                self.datasetItemId = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["ExpiredTime"] as? String {
                self.expiredTime = value
            }
            if let value = dict["ModifiedTime"] as? String {
                self.modifiedTime = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var datasetItemInfo: DescribeDatasetItemInfoResponseBody.DatasetItemInfo?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.datasetItemInfo?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetItemInfo != nil {
            map["DatasetItemInfo"] = self.datasetItemInfo?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetItemInfo"] as? [String: Any?] {
            var model = DescribeDatasetItemInfoResponseBody.DatasetItemInfo()
            model.fromMap(value)
            self.datasetItemInfo = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeDatasetItemInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDatasetItemInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDatasetItemInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDatasetItemListRequest : Tea.TeaModel {
    public var datasetId: String?

    public var datasetItemIds: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetId != nil {
            map["DatasetId"] = self.datasetId!
        }
        if self.datasetItemIds != nil {
            map["DatasetItemIds"] = self.datasetItemIds!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetId"] as? String {
            self.datasetId = value
        }
        if let value = dict["DatasetItemIds"] as? String {
            self.datasetItemIds = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeDatasetItemListResponseBody : Tea.TeaModel {
    public class DatasetItemInfoList : Tea.TeaModel {
        public var createdTime: String?

        public var datasetId: String?

        public var datasetItemId: String?

        public var description_: String?

        public var expiredTime: String?

        public var modifiedTime: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createdTime != nil {
                map["CreatedTime"] = self.createdTime!
            }
            if self.datasetId != nil {
                map["DatasetId"] = self.datasetId!
            }
            if self.datasetItemId != nil {
                map["DatasetItemId"] = self.datasetItemId!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.expiredTime != nil {
                map["ExpiredTime"] = self.expiredTime!
            }
            if self.modifiedTime != nil {
                map["ModifiedTime"] = self.modifiedTime!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreatedTime"] as? String {
                self.createdTime = value
            }
            if let value = dict["DatasetId"] as? String {
                self.datasetId = value
            }
            if let value = dict["DatasetItemId"] as? String {
                self.datasetItemId = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["ExpiredTime"] as? String {
                self.expiredTime = value
            }
            if let value = dict["ModifiedTime"] as? String {
                self.modifiedTime = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var datasetItemInfoList: [DescribeDatasetItemListResponseBody.DatasetItemInfoList]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetItemInfoList != nil {
            var tmp : [Any] = []
            for k in self.datasetItemInfoList! {
                tmp.append(k.toMap())
            }
            map["DatasetItemInfoList"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetItemInfoList"] as? [Any?] {
            var tmp : [DescribeDatasetItemListResponseBody.DatasetItemInfoList] = []
            for v in value {
                if v != nil {
                    var model = DescribeDatasetItemListResponseBody.DatasetItemInfoList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.datasetItemInfoList = tmp
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeDatasetItemListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDatasetItemListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDatasetItemListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDatasetListRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var datasetIds: String?

    public var datasetName: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public var tag: [DescribeDatasetListRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetIds != nil {
            map["DatasetIds"] = self.datasetIds!
        }
        if self.datasetName != nil {
            map["DatasetName"] = self.datasetName!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetIds"] as? String {
            self.datasetIds = value
        }
        if let value = dict["DatasetName"] as? String {
            self.datasetName = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [DescribeDatasetListRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = DescribeDatasetListRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class DescribeDatasetListResponseBody : Tea.TeaModel {
    public class DatasetInfoList : Tea.TeaModel {
        public class Tags : Tea.TeaModel {
            public var key: String?

            public var value: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.value != nil {
                    map["Value"] = self.value!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Value"] as? String {
                    self.value = value
                }
            }
        }
        public var createdTime: String?

        public var datasetId: String?

        public var datasetName: String?

        public var datasetType: String?

        public var description_: String?

        public var modifiedTime: String?

        public var tags: [DescribeDatasetListResponseBody.DatasetInfoList.Tags]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.createdTime != nil {
                map["CreatedTime"] = self.createdTime!
            }
            if self.datasetId != nil {
                map["DatasetId"] = self.datasetId!
            }
            if self.datasetName != nil {
                map["DatasetName"] = self.datasetName!
            }
            if self.datasetType != nil {
                map["DatasetType"] = self.datasetType!
            }
            if self.description_ != nil {
                map["Description"] = self.description_!
            }
            if self.modifiedTime != nil {
                map["ModifiedTime"] = self.modifiedTime!
            }
            if self.tags != nil {
                var tmp : [Any] = []
                for k in self.tags! {
                    tmp.append(k.toMap())
                }
                map["Tags"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CreatedTime"] as? String {
                self.createdTime = value
            }
            if let value = dict["DatasetId"] as? String {
                self.datasetId = value
            }
            if let value = dict["DatasetName"] as? String {
                self.datasetName = value
            }
            if let value = dict["DatasetType"] as? String {
                self.datasetType = value
            }
            if let value = dict["Description"] as? String {
                self.description_ = value
            }
            if let value = dict["ModifiedTime"] as? String {
                self.modifiedTime = value
            }
            if let value = dict["Tags"] as? [Any?] {
                var tmp : [DescribeDatasetListResponseBody.DatasetInfoList.Tags] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDatasetListResponseBody.DatasetInfoList.Tags()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tags = tmp
            }
        }
    }
    public var datasetInfoList: [DescribeDatasetListResponseBody.DatasetInfoList]?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetInfoList != nil {
            var tmp : [Any] = []
            for k in self.datasetInfoList! {
                tmp.append(k.toMap())
            }
            map["DatasetInfoList"] = tmp
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetInfoList"] as? [Any?] {
            var tmp : [DescribeDatasetListResponseBody.DatasetInfoList] = []
            for v in value {
                if v != nil {
                    var model = DescribeDatasetListResponseBody.DatasetInfoList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.datasetInfoList = tmp
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeDatasetListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDatasetListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDatasetListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDeployApiTaskRequest : Tea.TeaModel {
    public var operationUid: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.operationUid != nil {
            map["OperationUid"] = self.operationUid!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OperationUid"] as? String {
            self.operationUid = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeDeployApiTaskResponseBody : Tea.TeaModel {
    public class DeployedResults : Tea.TeaModel {
        public class DeployedResult : Tea.TeaModel {
            public var apiUid: String?

            public var deployedStatus: String?

            public var errorMsg: String?

            public var groupId: String?

            public var stageName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiUid != nil {
                    map["ApiUid"] = self.apiUid!
                }
                if self.deployedStatus != nil {
                    map["DeployedStatus"] = self.deployedStatus!
                }
                if self.errorMsg != nil {
                    map["ErrorMsg"] = self.errorMsg!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.stageName != nil {
                    map["StageName"] = self.stageName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiUid"] as? String {
                    self.apiUid = value
                }
                if let value = dict["DeployedStatus"] as? String {
                    self.deployedStatus = value
                }
                if let value = dict["ErrorMsg"] as? String {
                    self.errorMsg = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["StageName"] as? String {
                    self.stageName = value
                }
            }
        }
        public var deployedResult: [DescribeDeployApiTaskResponseBody.DeployedResults.DeployedResult]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.deployedResult != nil {
                var tmp : [Any] = []
                for k in self.deployedResult! {
                    tmp.append(k.toMap())
                }
                map["DeployedResult"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DeployedResult"] as? [Any?] {
                var tmp : [DescribeDeployApiTaskResponseBody.DeployedResults.DeployedResult] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDeployApiTaskResponseBody.DeployedResults.DeployedResult()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.deployedResult = tmp
            }
        }
    }
    public var deployedResults: DescribeDeployApiTaskResponseBody.DeployedResults?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.deployedResults?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deployedResults != nil {
            map["DeployedResults"] = self.deployedResults?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeployedResults"] as? [String: Any?] {
            var model = DescribeDeployApiTaskResponseBody.DeployedResults()
            model.fromMap(value)
            self.deployedResults = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeDeployApiTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDeployApiTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDeployApiTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDeployedApiRequest : Tea.TeaModel {
    public var apiId: String?

    public var groupId: String?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class DescribeDeployedApiResponseBody : Tea.TeaModel {
    public class ConstantParameters : Tea.TeaModel {
        public class ConstantParameter : Tea.TeaModel {
            public var constantValue: String?

            public var description_: String?

            public var location: String?

            public var serviceParameterName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.constantValue != nil {
                    map["ConstantValue"] = self.constantValue!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.location != nil {
                    map["Location"] = self.location!
                }
                if self.serviceParameterName != nil {
                    map["ServiceParameterName"] = self.serviceParameterName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ConstantValue"] as? String {
                    self.constantValue = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Location"] as? String {
                    self.location = value
                }
                if let value = dict["ServiceParameterName"] as? String {
                    self.serviceParameterName = value
                }
            }
        }
        public var constantParameter: [DescribeDeployedApiResponseBody.ConstantParameters.ConstantParameter]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.constantParameter != nil {
                var tmp : [Any] = []
                for k in self.constantParameter! {
                    tmp.append(k.toMap())
                }
                map["ConstantParameter"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConstantParameter"] as? [Any?] {
                var tmp : [DescribeDeployedApiResponseBody.ConstantParameters.ConstantParameter] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDeployedApiResponseBody.ConstantParameters.ConstantParameter()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.constantParameter = tmp
            }
        }
    }
    public class CustomSystemParameters : Tea.TeaModel {
        public class CustomSystemParameter : Tea.TeaModel {
            public var demoValue: String?

            public var description_: String?

            public var location: String?

            public var parameterName: String?

            public var serviceParameterName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.demoValue != nil {
                    map["DemoValue"] = self.demoValue!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.location != nil {
                    map["Location"] = self.location!
                }
                if self.parameterName != nil {
                    map["ParameterName"] = self.parameterName!
                }
                if self.serviceParameterName != nil {
                    map["ServiceParameterName"] = self.serviceParameterName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DemoValue"] as? String {
                    self.demoValue = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Location"] as? String {
                    self.location = value
                }
                if let value = dict["ParameterName"] as? String {
                    self.parameterName = value
                }
                if let value = dict["ServiceParameterName"] as? String {
                    self.serviceParameterName = value
                }
            }
        }
        public var customSystemParameter: [DescribeDeployedApiResponseBody.CustomSystemParameters.CustomSystemParameter]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.customSystemParameter != nil {
                var tmp : [Any] = []
                for k in self.customSystemParameter! {
                    tmp.append(k.toMap())
                }
                map["CustomSystemParameter"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CustomSystemParameter"] as? [Any?] {
                var tmp : [DescribeDeployedApiResponseBody.CustomSystemParameters.CustomSystemParameter] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDeployedApiResponseBody.CustomSystemParameters.CustomSystemParameter()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.customSystemParameter = tmp
            }
        }
    }
    public class ErrorCodeSamples : Tea.TeaModel {
        public class ErrorCodeSample : Tea.TeaModel {
            public var code: String?

            public var description_: String?

            public var message: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.code != nil {
                    map["Code"] = self.code!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.message != nil {
                    map["Message"] = self.message!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Code"] as? String {
                    self.code = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Message"] as? String {
                    self.message = value
                }
            }
        }
        public var errorCodeSample: [DescribeDeployedApiResponseBody.ErrorCodeSamples.ErrorCodeSample]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorCodeSample != nil {
                var tmp : [Any] = []
                for k in self.errorCodeSample! {
                    tmp.append(k.toMap())
                }
                map["ErrorCodeSample"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorCodeSample"] as? [Any?] {
                var tmp : [DescribeDeployedApiResponseBody.ErrorCodeSamples.ErrorCodeSample] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDeployedApiResponseBody.ErrorCodeSamples.ErrorCodeSample()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.errorCodeSample = tmp
            }
        }
    }
    public class OpenIdConnectConfig : Tea.TeaModel {
        public var idTokenParamName: String?

        public var openIdApiType: String?

        public var publicKey: String?

        public var publicKeyId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.idTokenParamName != nil {
                map["IdTokenParamName"] = self.idTokenParamName!
            }
            if self.openIdApiType != nil {
                map["OpenIdApiType"] = self.openIdApiType!
            }
            if self.publicKey != nil {
                map["PublicKey"] = self.publicKey!
            }
            if self.publicKeyId != nil {
                map["PublicKeyId"] = self.publicKeyId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["IdTokenParamName"] as? String {
                self.idTokenParamName = value
            }
            if let value = dict["OpenIdApiType"] as? String {
                self.openIdApiType = value
            }
            if let value = dict["PublicKey"] as? String {
                self.publicKey = value
            }
            if let value = dict["PublicKeyId"] as? String {
                self.publicKeyId = value
            }
        }
    }
    public class RequestConfig : Tea.TeaModel {
        public var bodyFormat: String?

        public var bodyModel: String?

        public var postBodyDescription: String?

        public var requestHttpMethod: String?

        public var requestMode: String?

        public var requestPath: String?

        public var requestProtocol: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bodyFormat != nil {
                map["BodyFormat"] = self.bodyFormat!
            }
            if self.bodyModel != nil {
                map["BodyModel"] = self.bodyModel!
            }
            if self.postBodyDescription != nil {
                map["PostBodyDescription"] = self.postBodyDescription!
            }
            if self.requestHttpMethod != nil {
                map["RequestHttpMethod"] = self.requestHttpMethod!
            }
            if self.requestMode != nil {
                map["RequestMode"] = self.requestMode!
            }
            if self.requestPath != nil {
                map["RequestPath"] = self.requestPath!
            }
            if self.requestProtocol != nil {
                map["RequestProtocol"] = self.requestProtocol!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BodyFormat"] as? String {
                self.bodyFormat = value
            }
            if let value = dict["BodyModel"] as? String {
                self.bodyModel = value
            }
            if let value = dict["PostBodyDescription"] as? String {
                self.postBodyDescription = value
            }
            if let value = dict["RequestHttpMethod"] as? String {
                self.requestHttpMethod = value
            }
            if let value = dict["RequestMode"] as? String {
                self.requestMode = value
            }
            if let value = dict["RequestPath"] as? String {
                self.requestPath = value
            }
            if let value = dict["RequestProtocol"] as? String {
                self.requestProtocol = value
            }
        }
    }
    public class RequestParameters : Tea.TeaModel {
        public class RequestParameter : Tea.TeaModel {
            public var apiParameterName: String?

            public var arrayItemsType: String?

            public var defaultValue: String?

            public var demoValue: String?

            public var description_: String?

            public var docOrder: Int32?

            public var docShow: String?

            public var enumValue: String?

            public var jsonScheme: String?

            public var location: String?

            public var maxLength: Int64?

            public var maxValue: Int64?

            public var minLength: Int64?

            public var minValue: Int64?

            public var parameterType: String?

            public var regularExpression: String?

            public var required_: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiParameterName != nil {
                    map["ApiParameterName"] = self.apiParameterName!
                }
                if self.arrayItemsType != nil {
                    map["ArrayItemsType"] = self.arrayItemsType!
                }
                if self.defaultValue != nil {
                    map["DefaultValue"] = self.defaultValue!
                }
                if self.demoValue != nil {
                    map["DemoValue"] = self.demoValue!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.docOrder != nil {
                    map["DocOrder"] = self.docOrder!
                }
                if self.docShow != nil {
                    map["DocShow"] = self.docShow!
                }
                if self.enumValue != nil {
                    map["EnumValue"] = self.enumValue!
                }
                if self.jsonScheme != nil {
                    map["JsonScheme"] = self.jsonScheme!
                }
                if self.location != nil {
                    map["Location"] = self.location!
                }
                if self.maxLength != nil {
                    map["MaxLength"] = self.maxLength!
                }
                if self.maxValue != nil {
                    map["MaxValue"] = self.maxValue!
                }
                if self.minLength != nil {
                    map["MinLength"] = self.minLength!
                }
                if self.minValue != nil {
                    map["MinValue"] = self.minValue!
                }
                if self.parameterType != nil {
                    map["ParameterType"] = self.parameterType!
                }
                if self.regularExpression != nil {
                    map["RegularExpression"] = self.regularExpression!
                }
                if self.required_ != nil {
                    map["Required"] = self.required_!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiParameterName"] as? String {
                    self.apiParameterName = value
                }
                if let value = dict["ArrayItemsType"] as? String {
                    self.arrayItemsType = value
                }
                if let value = dict["DefaultValue"] as? String {
                    self.defaultValue = value
                }
                if let value = dict["DemoValue"] as? String {
                    self.demoValue = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DocOrder"] as? Int32 {
                    self.docOrder = value
                }
                if let value = dict["DocShow"] as? String {
                    self.docShow = value
                }
                if let value = dict["EnumValue"] as? String {
                    self.enumValue = value
                }
                if let value = dict["JsonScheme"] as? String {
                    self.jsonScheme = value
                }
                if let value = dict["Location"] as? String {
                    self.location = value
                }
                if let value = dict["MaxLength"] as? Int64 {
                    self.maxLength = value
                }
                if let value = dict["MaxValue"] as? Int64 {
                    self.maxValue = value
                }
                if let value = dict["MinLength"] as? Int64 {
                    self.minLength = value
                }
                if let value = dict["MinValue"] as? Int64 {
                    self.minValue = value
                }
                if let value = dict["ParameterType"] as? String {
                    self.parameterType = value
                }
                if let value = dict["RegularExpression"] as? String {
                    self.regularExpression = value
                }
                if let value = dict["Required"] as? String {
                    self.required_ = value
                }
            }
        }
        public var requestParameter: [DescribeDeployedApiResponseBody.RequestParameters.RequestParameter]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.requestParameter != nil {
                var tmp : [Any] = []
                for k in self.requestParameter! {
                    tmp.append(k.toMap())
                }
                map["RequestParameter"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["RequestParameter"] as? [Any?] {
                var tmp : [DescribeDeployedApiResponseBody.RequestParameters.RequestParameter] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDeployedApiResponseBody.RequestParameters.RequestParameter()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.requestParameter = tmp
            }
        }
    }
    public class ResultDescriptions : Tea.TeaModel {
        public class ResultDescription : Tea.TeaModel {
            public var description_: String?

            public var hasChild: Bool?

            public var id: String?

            public var key: String?

            public var mandatory: Bool?

            public var name: String?

            public var pid: String?

            public var type: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.hasChild != nil {
                    map["HasChild"] = self.hasChild!
                }
                if self.id != nil {
                    map["Id"] = self.id!
                }
                if self.key != nil {
                    map["Key"] = self.key!
                }
                if self.mandatory != nil {
                    map["Mandatory"] = self.mandatory!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.pid != nil {
                    map["Pid"] = self.pid!
                }
                if self.type != nil {
                    map["Type"] = self.type!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["HasChild"] as? Bool {
                    self.hasChild = value
                }
                if let value = dict["Id"] as? String {
                    self.id = value
                }
                if let value = dict["Key"] as? String {
                    self.key = value
                }
                if let value = dict["Mandatory"] as? Bool {
                    self.mandatory = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Pid"] as? String {
                    self.pid = value
                }
                if let value = dict["Type"] as? String {
                    self.type = value
                }
            }
        }
        public var resultDescription: [DescribeDeployedApiResponseBody.ResultDescriptions.ResultDescription]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.resultDescription != nil {
                var tmp : [Any] = []
                for k in self.resultDescription! {
                    tmp.append(k.toMap())
                }
                map["ResultDescription"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ResultDescription"] as? [Any?] {
                var tmp : [DescribeDeployedApiResponseBody.ResultDescriptions.ResultDescription] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDeployedApiResponseBody.ResultDescriptions.ResultDescription()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.resultDescription = tmp
            }
        }
    }
    public class ServiceConfig : Tea.TeaModel {
        public class FunctionComputeConfig : Tea.TeaModel {
            public var contentTypeCatagory: String?

            public var contentTypeValue: String?

            public var fcBaseUrl: String?

            public var fcType: String?

            public var functionName: String?

            public var method: String?

            public var onlyBusinessPath: Bool?

            public var path: String?

            public var qualifier: String?

            public var regionId: String?

            public var roleArn: String?

            public var serviceName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.contentTypeCatagory != nil {
                    map["ContentTypeCatagory"] = self.contentTypeCatagory!
                }
                if self.contentTypeValue != nil {
                    map["ContentTypeValue"] = self.contentTypeValue!
                }
                if self.fcBaseUrl != nil {
                    map["FcBaseUrl"] = self.fcBaseUrl!
                }
                if self.fcType != nil {
                    map["FcType"] = self.fcType!
                }
                if self.functionName != nil {
                    map["FunctionName"] = self.functionName!
                }
                if self.method != nil {
                    map["Method"] = self.method!
                }
                if self.onlyBusinessPath != nil {
                    map["OnlyBusinessPath"] = self.onlyBusinessPath!
                }
                if self.path != nil {
                    map["Path"] = self.path!
                }
                if self.qualifier != nil {
                    map["Qualifier"] = self.qualifier!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.roleArn != nil {
                    map["RoleArn"] = self.roleArn!
                }
                if self.serviceName != nil {
                    map["ServiceName"] = self.serviceName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ContentTypeCatagory"] as? String {
                    self.contentTypeCatagory = value
                }
                if let value = dict["ContentTypeValue"] as? String {
                    self.contentTypeValue = value
                }
                if let value = dict["FcBaseUrl"] as? String {
                    self.fcBaseUrl = value
                }
                if let value = dict["FcType"] as? String {
                    self.fcType = value
                }
                if let value = dict["FunctionName"] as? String {
                    self.functionName = value
                }
                if let value = dict["Method"] as? String {
                    self.method = value
                }
                if let value = dict["OnlyBusinessPath"] as? Bool {
                    self.onlyBusinessPath = value
                }
                if let value = dict["Path"] as? String {
                    self.path = value
                }
                if let value = dict["Qualifier"] as? String {
                    self.qualifier = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["RoleArn"] as? String {
                    self.roleArn = value
                }
                if let value = dict["ServiceName"] as? String {
                    self.serviceName = value
                }
            }
        }
        public class MockHeaders : Tea.TeaModel {
            public class MockHeader : Tea.TeaModel {
                public var headerName: String?

                public var headerValue: String?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.headerName != nil {
                        map["HeaderName"] = self.headerName!
                    }
                    if self.headerValue != nil {
                        map["HeaderValue"] = self.headerValue!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["HeaderName"] as? String {
                        self.headerName = value
                    }
                    if let value = dict["HeaderValue"] as? String {
                        self.headerValue = value
                    }
                }
            }
            public var mockHeader: [DescribeDeployedApiResponseBody.ServiceConfig.MockHeaders.MockHeader]?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.mockHeader != nil {
                    var tmp : [Any] = []
                    for k in self.mockHeader! {
                        tmp.append(k.toMap())
                    }
                    map["MockHeader"] = tmp
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["MockHeader"] as? [Any?] {
                    var tmp : [DescribeDeployedApiResponseBody.ServiceConfig.MockHeaders.MockHeader] = []
                    for v in value {
                        if v != nil {
                            var model = DescribeDeployedApiResponseBody.ServiceConfig.MockHeaders.MockHeader()
                            if v != nil {
                                model.fromMap(v as? [String: Any?])
                            }
                            tmp.append(model)
                        }
                    }
                    self.mockHeader = tmp
                }
            }
        }
        public class VpcConfig : Tea.TeaModel {
            public var instanceId: String?

            public var name: String?

            public var port: Int32?

            public var vpcId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.port != nil {
                    map["Port"] = self.port!
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Port"] as? Int32 {
                    self.port = value
                }
                if let value = dict["VpcId"] as? String {
                    self.vpcId = value
                }
            }
        }
        public var functionComputeConfig: DescribeDeployedApiResponseBody.ServiceConfig.FunctionComputeConfig?

        public var mock: String?

        public var mockHeaders: DescribeDeployedApiResponseBody.ServiceConfig.MockHeaders?

        public var mockResult: String?

        public var mockStatusCode: Int32?

        public var serviceAddress: String?

        public var serviceHttpMethod: String?

        public var servicePath: String?

        public var serviceProtocol: String?

        public var serviceTimeout: Int32?

        public var serviceVpcEnable: String?

        public var vpcConfig: DescribeDeployedApiResponseBody.ServiceConfig.VpcConfig?

        public var vpcId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
            try self.functionComputeConfig?.validate()
            try self.mockHeaders?.validate()
            try self.vpcConfig?.validate()
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.functionComputeConfig != nil {
                map["FunctionComputeConfig"] = self.functionComputeConfig?.toMap()
            }
            if self.mock != nil {
                map["Mock"] = self.mock!
            }
            if self.mockHeaders != nil {
                map["MockHeaders"] = self.mockHeaders?.toMap()
            }
            if self.mockResult != nil {
                map["MockResult"] = self.mockResult!
            }
            if self.mockStatusCode != nil {
                map["MockStatusCode"] = self.mockStatusCode!
            }
            if self.serviceAddress != nil {
                map["ServiceAddress"] = self.serviceAddress!
            }
            if self.serviceHttpMethod != nil {
                map["ServiceHttpMethod"] = self.serviceHttpMethod!
            }
            if self.servicePath != nil {
                map["ServicePath"] = self.servicePath!
            }
            if self.serviceProtocol != nil {
                map["ServiceProtocol"] = self.serviceProtocol!
            }
            if self.serviceTimeout != nil {
                map["ServiceTimeout"] = self.serviceTimeout!
            }
            if self.serviceVpcEnable != nil {
                map["ServiceVpcEnable"] = self.serviceVpcEnable!
            }
            if self.vpcConfig != nil {
                map["VpcConfig"] = self.vpcConfig?.toMap()
            }
            if self.vpcId != nil {
                map["VpcId"] = self.vpcId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FunctionComputeConfig"] as? [String: Any?] {
                var model = DescribeDeployedApiResponseBody.ServiceConfig.FunctionComputeConfig()
                model.fromMap(value)
                self.functionComputeConfig = model
            }
            if let value = dict["Mock"] as? String {
                self.mock = value
            }
            if let value = dict["MockHeaders"] as? [String: Any?] {
                var model = DescribeDeployedApiResponseBody.ServiceConfig.MockHeaders()
                model.fromMap(value)
                self.mockHeaders = model
            }
            if let value = dict["MockResult"] as? String {
                self.mockResult = value
            }
            if let value = dict["MockStatusCode"] as? Int32 {
                self.mockStatusCode = value
            }
            if let value = dict["ServiceAddress"] as? String {
                self.serviceAddress = value
            }
            if let value = dict["ServiceHttpMethod"] as? String {
                self.serviceHttpMethod = value
            }
            if let value = dict["ServicePath"] as? String {
                self.servicePath = value
            }
            if let value = dict["ServiceProtocol"] as? String {
                self.serviceProtocol = value
            }
            if let value = dict["ServiceTimeout"] as? Int32 {
                self.serviceTimeout = value
            }
            if let value = dict["ServiceVpcEnable"] as? String {
                self.serviceVpcEnable = value
            }
            if let value = dict["VpcConfig"] as? [String: Any?] {
                var model = DescribeDeployedApiResponseBody.ServiceConfig.VpcConfig()
                model.fromMap(value)
                self.vpcConfig = model
            }
            if let value = dict["VpcId"] as? String {
                self.vpcId = value
            }
        }
    }
    public class ServiceParameters : Tea.TeaModel {
        public class ServiceParameter : Tea.TeaModel {
            public var location: String?

            public var parameterType: String?

            public var serviceParameterName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.location != nil {
                    map["Location"] = self.location!
                }
                if self.parameterType != nil {
                    map["ParameterType"] = self.parameterType!
                }
                if self.serviceParameterName != nil {
                    map["ServiceParameterName"] = self.serviceParameterName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Location"] as? String {
                    self.location = value
                }
                if let value = dict["ParameterType"] as? String {
                    self.parameterType = value
                }
                if let value = dict["ServiceParameterName"] as? String {
                    self.serviceParameterName = value
                }
            }
        }
        public var serviceParameter: [DescribeDeployedApiResponseBody.ServiceParameters.ServiceParameter]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.serviceParameter != nil {
                var tmp : [Any] = []
                for k in self.serviceParameter! {
                    tmp.append(k.toMap())
                }
                map["ServiceParameter"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ServiceParameter"] as? [Any?] {
                var tmp : [DescribeDeployedApiResponseBody.ServiceParameters.ServiceParameter] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDeployedApiResponseBody.ServiceParameters.ServiceParameter()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.serviceParameter = tmp
            }
        }
    }
    public class ServiceParametersMap : Tea.TeaModel {
        public class ServiceParameterMap : Tea.TeaModel {
            public var requestParameterName: String?

            public var serviceParameterName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.requestParameterName != nil {
                    map["RequestParameterName"] = self.requestParameterName!
                }
                if self.serviceParameterName != nil {
                    map["ServiceParameterName"] = self.serviceParameterName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["RequestParameterName"] as? String {
                    self.requestParameterName = value
                }
                if let value = dict["ServiceParameterName"] as? String {
                    self.serviceParameterName = value
                }
            }
        }
        public var serviceParameterMap: [DescribeDeployedApiResponseBody.ServiceParametersMap.ServiceParameterMap]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.serviceParameterMap != nil {
                var tmp : [Any] = []
                for k in self.serviceParameterMap! {
                    tmp.append(k.toMap())
                }
                map["ServiceParameterMap"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ServiceParameterMap"] as? [Any?] {
                var tmp : [DescribeDeployedApiResponseBody.ServiceParametersMap.ServiceParameterMap] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDeployedApiResponseBody.ServiceParametersMap.ServiceParameterMap()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.serviceParameterMap = tmp
            }
        }
    }
    public class SystemParameters : Tea.TeaModel {
        public class SystemParameter : Tea.TeaModel {
            public var demoValue: String?

            public var description_: String?

            public var location: String?

            public var parameterName: String?

            public var serviceParameterName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.demoValue != nil {
                    map["DemoValue"] = self.demoValue!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.location != nil {
                    map["Location"] = self.location!
                }
                if self.parameterName != nil {
                    map["ParameterName"] = self.parameterName!
                }
                if self.serviceParameterName != nil {
                    map["ServiceParameterName"] = self.serviceParameterName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DemoValue"] as? String {
                    self.demoValue = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["Location"] as? String {
                    self.location = value
                }
                if let value = dict["ParameterName"] as? String {
                    self.parameterName = value
                }
                if let value = dict["ServiceParameterName"] as? String {
                    self.serviceParameterName = value
                }
            }
        }
        public var systemParameter: [DescribeDeployedApiResponseBody.SystemParameters.SystemParameter]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.systemParameter != nil {
                var tmp : [Any] = []
                for k in self.systemParameter! {
                    tmp.append(k.toMap())
                }
                map["SystemParameter"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SystemParameter"] as? [Any?] {
                var tmp : [DescribeDeployedApiResponseBody.SystemParameters.SystemParameter] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDeployedApiResponseBody.SystemParameters.SystemParameter()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.systemParameter = tmp
            }
        }
    }
    public var allowSignatureMethod: String?

    public var apiId: String?

    public var apiName: String?

    public var authType: String?

    public var constantParameters: DescribeDeployedApiResponseBody.ConstantParameters?

    public var customSystemParameters: DescribeDeployedApiResponseBody.CustomSystemParameters?

    public var deployedTime: String?

    public var description_: String?

    public var disableInternet: Bool?

    public var errorCodeSamples: DescribeDeployedApiResponseBody.ErrorCodeSamples?

    public var failResultSample: String?

    public var forceNonceCheck: Bool?

    public var groupId: String?

    public var groupName: String?

    public var openIdConnectConfig: DescribeDeployedApiResponseBody.OpenIdConnectConfig?

    public var regionId: String?

    public var requestConfig: DescribeDeployedApiResponseBody.RequestConfig?

    public var requestId: String?

    public var requestParameters: DescribeDeployedApiResponseBody.RequestParameters?

    public var resultBodyModel: String?

    public var resultDescriptions: DescribeDeployedApiResponseBody.ResultDescriptions?

    public var resultSample: String?

    public var resultType: String?

    public var serviceConfig: DescribeDeployedApiResponseBody.ServiceConfig?

    public var serviceParameters: DescribeDeployedApiResponseBody.ServiceParameters?

    public var serviceParametersMap: DescribeDeployedApiResponseBody.ServiceParametersMap?

    public var stageName: String?

    public var systemParameters: DescribeDeployedApiResponseBody.SystemParameters?

    public var visibility: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.constantParameters?.validate()
        try self.customSystemParameters?.validate()
        try self.errorCodeSamples?.validate()
        try self.openIdConnectConfig?.validate()
        try self.requestConfig?.validate()
        try self.requestParameters?.validate()
        try self.resultDescriptions?.validate()
        try self.serviceConfig?.validate()
        try self.serviceParameters?.validate()
        try self.serviceParametersMap?.validate()
        try self.systemParameters?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.allowSignatureMethod != nil {
            map["AllowSignatureMethod"] = self.allowSignatureMethod!
        }
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.apiName != nil {
            map["ApiName"] = self.apiName!
        }
        if self.authType != nil {
            map["AuthType"] = self.authType!
        }
        if self.constantParameters != nil {
            map["ConstantParameters"] = self.constantParameters?.toMap()
        }
        if self.customSystemParameters != nil {
            map["CustomSystemParameters"] = self.customSystemParameters?.toMap()
        }
        if self.deployedTime != nil {
            map["DeployedTime"] = self.deployedTime!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.disableInternet != nil {
            map["DisableInternet"] = self.disableInternet!
        }
        if self.errorCodeSamples != nil {
            map["ErrorCodeSamples"] = self.errorCodeSamples?.toMap()
        }
        if self.failResultSample != nil {
            map["FailResultSample"] = self.failResultSample!
        }
        if self.forceNonceCheck != nil {
            map["ForceNonceCheck"] = self.forceNonceCheck!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.openIdConnectConfig != nil {
            map["OpenIdConnectConfig"] = self.openIdConnectConfig?.toMap()
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.requestConfig != nil {
            map["RequestConfig"] = self.requestConfig?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.requestParameters != nil {
            map["RequestParameters"] = self.requestParameters?.toMap()
        }
        if self.resultBodyModel != nil {
            map["ResultBodyModel"] = self.resultBodyModel!
        }
        if self.resultDescriptions != nil {
            map["ResultDescriptions"] = self.resultDescriptions?.toMap()
        }
        if self.resultSample != nil {
            map["ResultSample"] = self.resultSample!
        }
        if self.resultType != nil {
            map["ResultType"] = self.resultType!
        }
        if self.serviceConfig != nil {
            map["ServiceConfig"] = self.serviceConfig?.toMap()
        }
        if self.serviceParameters != nil {
            map["ServiceParameters"] = self.serviceParameters?.toMap()
        }
        if self.serviceParametersMap != nil {
            map["ServiceParametersMap"] = self.serviceParametersMap?.toMap()
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        if self.systemParameters != nil {
            map["SystemParameters"] = self.systemParameters?.toMap()
        }
        if self.visibility != nil {
            map["Visibility"] = self.visibility!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AllowSignatureMethod"] as? String {
            self.allowSignatureMethod = value
        }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["ApiName"] as? String {
            self.apiName = value
        }
        if let value = dict["AuthType"] as? String {
            self.authType = value
        }
        if let value = dict["ConstantParameters"] as? [String: Any?] {
            var model = DescribeDeployedApiResponseBody.ConstantParameters()
            model.fromMap(value)
            self.constantParameters = model
        }
        if let value = dict["CustomSystemParameters"] as? [String: Any?] {
            var model = DescribeDeployedApiResponseBody.CustomSystemParameters()
            model.fromMap(value)
            self.customSystemParameters = model
        }
        if let value = dict["DeployedTime"] as? String {
            self.deployedTime = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DisableInternet"] as? Bool {
            self.disableInternet = value
        }
        if let value = dict["ErrorCodeSamples"] as? [String: Any?] {
            var model = DescribeDeployedApiResponseBody.ErrorCodeSamples()
            model.fromMap(value)
            self.errorCodeSamples = model
        }
        if let value = dict["FailResultSample"] as? String {
            self.failResultSample = value
        }
        if let value = dict["ForceNonceCheck"] as? Bool {
            self.forceNonceCheck = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["OpenIdConnectConfig"] as? [String: Any?] {
            var model = DescribeDeployedApiResponseBody.OpenIdConnectConfig()
            model.fromMap(value)
            self.openIdConnectConfig = model
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RequestConfig"] as? [String: Any?] {
            var model = DescribeDeployedApiResponseBody.RequestConfig()
            model.fromMap(value)
            self.requestConfig = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RequestParameters"] as? [String: Any?] {
            var model = DescribeDeployedApiResponseBody.RequestParameters()
            model.fromMap(value)
            self.requestParameters = model
        }
        if let value = dict["ResultBodyModel"] as? String {
            self.resultBodyModel = value
        }
        if let value = dict["ResultDescriptions"] as? [String: Any?] {
            var model = DescribeDeployedApiResponseBody.ResultDescriptions()
            model.fromMap(value)
            self.resultDescriptions = model
        }
        if let value = dict["ResultSample"] as? String {
            self.resultSample = value
        }
        if let value = dict["ResultType"] as? String {
            self.resultType = value
        }
        if let value = dict["ServiceConfig"] as? [String: Any?] {
            var model = DescribeDeployedApiResponseBody.ServiceConfig()
            model.fromMap(value)
            self.serviceConfig = model
        }
        if let value = dict["ServiceParameters"] as? [String: Any?] {
            var model = DescribeDeployedApiResponseBody.ServiceParameters()
            model.fromMap(value)
            self.serviceParameters = model
        }
        if let value = dict["ServiceParametersMap"] as? [String: Any?] {
            var model = DescribeDeployedApiResponseBody.ServiceParametersMap()
            model.fromMap(value)
            self.serviceParametersMap = model
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
        if let value = dict["SystemParameters"] as? [String: Any?] {
            var model = DescribeDeployedApiResponseBody.SystemParameters()
            model.fromMap(value)
            self.systemParameters = model
        }
        if let value = dict["Visibility"] as? String {
            self.visibility = value
        }
    }
}

public class DescribeDeployedApiResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDeployedApiResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDeployedApiResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDeployedApisRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var apiId: String?

    public var apiMethod: String?

    public var apiName: String?

    public var apiPath: String?

    public var enableTagAuth: Bool?

    public var groupId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public var stageName: String?

    public var tag: [DescribeDeployedApisRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.apiMethod != nil {
            map["ApiMethod"] = self.apiMethod!
        }
        if self.apiName != nil {
            map["ApiName"] = self.apiName!
        }
        if self.apiPath != nil {
            map["ApiPath"] = self.apiPath!
        }
        if self.enableTagAuth != nil {
            map["EnableTagAuth"] = self.enableTagAuth!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["ApiMethod"] as? String {
            self.apiMethod = value
        }
        if let value = dict["ApiName"] as? String {
            self.apiName = value
        }
        if let value = dict["ApiPath"] as? String {
            self.apiPath = value
        }
        if let value = dict["EnableTagAuth"] as? Bool {
            self.enableTagAuth = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [DescribeDeployedApisRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = DescribeDeployedApisRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class DescribeDeployedApisResponseBody : Tea.TeaModel {
    public class DeployedApis : Tea.TeaModel {
        public class DeployedApiItem : Tea.TeaModel {
            public var apiId: String?

            public var apiMethod: String?

            public var apiName: String?

            public var apiPath: String?

            public var deployedTime: String?

            public var description_: String?

            public var groupId: String?

            public var groupName: String?

            public var regionId: String?

            public var stageName: String?

            public var visibility: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiId != nil {
                    map["ApiId"] = self.apiId!
                }
                if self.apiMethod != nil {
                    map["ApiMethod"] = self.apiMethod!
                }
                if self.apiName != nil {
                    map["ApiName"] = self.apiName!
                }
                if self.apiPath != nil {
                    map["ApiPath"] = self.apiPath!
                }
                if self.deployedTime != nil {
                    map["DeployedTime"] = self.deployedTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupName != nil {
                    map["GroupName"] = self.groupName!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.stageName != nil {
                    map["StageName"] = self.stageName!
                }
                if self.visibility != nil {
                    map["Visibility"] = self.visibility!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiId"] as? String {
                    self.apiId = value
                }
                if let value = dict["ApiMethod"] as? String {
                    self.apiMethod = value
                }
                if let value = dict["ApiName"] as? String {
                    self.apiName = value
                }
                if let value = dict["ApiPath"] as? String {
                    self.apiPath = value
                }
                if let value = dict["DeployedTime"] as? String {
                    self.deployedTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["GroupName"] as? String {
                    self.groupName = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["StageName"] as? String {
                    self.stageName = value
                }
                if let value = dict["Visibility"] as? String {
                    self.visibility = value
                }
            }
        }
        public var deployedApiItem: [DescribeDeployedApisResponseBody.DeployedApis.DeployedApiItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.deployedApiItem != nil {
                var tmp : [Any] = []
                for k in self.deployedApiItem! {
                    tmp.append(k.toMap())
                }
                map["DeployedApiItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DeployedApiItem"] as? [Any?] {
                var tmp : [DescribeDeployedApisResponseBody.DeployedApis.DeployedApiItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeDeployedApisResponseBody.DeployedApis.DeployedApiItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.deployedApiItem = tmp
            }
        }
    }
    public var deployedApis: DescribeDeployedApisResponseBody.DeployedApis?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.deployedApis?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deployedApis != nil {
            map["DeployedApis"] = self.deployedApis?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeployedApis"] as? [String: Any?] {
            var model = DescribeDeployedApisResponseBody.DeployedApis()
            model.fromMap(value)
            self.deployedApis = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeDeployedApisResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDeployedApisResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDeployedApisResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeDomainRequest : Tea.TeaModel {
    public var domainName: String?

    public var groupId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeDomainResponseBody : Tea.TeaModel {
    public var certificateBody: String?

    public var certificateId: String?

    public var certificateName: String?

    public var certificatePrivateKey: String?

    public var certificateValidEnd: Int64?

    public var certificateValidStart: Int64?

    public var domainBindingStatus: String?

    public var domainCNAMEStatus: String?

    public var domainLegalStatus: String?

    public var domainName: String?

    public var domainRemark: String?

    public var domainWebSocketStatus: String?

    public var groupId: String?

    public var requestId: String?

    public var subDomain: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.certificateBody != nil {
            map["CertificateBody"] = self.certificateBody!
        }
        if self.certificateId != nil {
            map["CertificateId"] = self.certificateId!
        }
        if self.certificateName != nil {
            map["CertificateName"] = self.certificateName!
        }
        if self.certificatePrivateKey != nil {
            map["CertificatePrivateKey"] = self.certificatePrivateKey!
        }
        if self.certificateValidEnd != nil {
            map["CertificateValidEnd"] = self.certificateValidEnd!
        }
        if self.certificateValidStart != nil {
            map["CertificateValidStart"] = self.certificateValidStart!
        }
        if self.domainBindingStatus != nil {
            map["DomainBindingStatus"] = self.domainBindingStatus!
        }
        if self.domainCNAMEStatus != nil {
            map["DomainCNAMEStatus"] = self.domainCNAMEStatus!
        }
        if self.domainLegalStatus != nil {
            map["DomainLegalStatus"] = self.domainLegalStatus!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.domainRemark != nil {
            map["DomainRemark"] = self.domainRemark!
        }
        if self.domainWebSocketStatus != nil {
            map["DomainWebSocketStatus"] = self.domainWebSocketStatus!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.subDomain != nil {
            map["SubDomain"] = self.subDomain!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CertificateBody"] as? String {
            self.certificateBody = value
        }
        if let value = dict["CertificateId"] as? String {
            self.certificateId = value
        }
        if let value = dict["CertificateName"] as? String {
            self.certificateName = value
        }
        if let value = dict["CertificatePrivateKey"] as? String {
            self.certificatePrivateKey = value
        }
        if let value = dict["CertificateValidEnd"] as? Int64 {
            self.certificateValidEnd = value
        }
        if let value = dict["CertificateValidStart"] as? Int64 {
            self.certificateValidStart = value
        }
        if let value = dict["DomainBindingStatus"] as? String {
            self.domainBindingStatus = value
        }
        if let value = dict["DomainCNAMEStatus"] as? String {
            self.domainCNAMEStatus = value
        }
        if let value = dict["DomainLegalStatus"] as? String {
            self.domainLegalStatus = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["DomainRemark"] as? String {
            self.domainRemark = value
        }
        if let value = dict["DomainWebSocketStatus"] as? String {
            self.domainWebSocketStatus = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SubDomain"] as? String {
            self.subDomain = value
        }
    }
}

public class DescribeDomainResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeDomainResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeDomainResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeGroupLatencyRequest : Tea.TeaModel {
    public var endTime: String?

    public var groupId: String?

    public var securityToken: String?

    public var stageName: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeGroupLatencyResponseBody : Tea.TeaModel {
    public class LatencyPacket : Tea.TeaModel {
        public class MonitorItem : Tea.TeaModel {
            public var item: String?

            public var itemTime: String?

            public var itemValue: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.item != nil {
                    map["Item"] = self.item!
                }
                if self.itemTime != nil {
                    map["ItemTime"] = self.itemTime!
                }
                if self.itemValue != nil {
                    map["ItemValue"] = self.itemValue!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Item"] as? String {
                    self.item = value
                }
                if let value = dict["ItemTime"] as? String {
                    self.itemTime = value
                }
                if let value = dict["ItemValue"] as? String {
                    self.itemValue = value
                }
            }
        }
        public var monitorItem: [DescribeGroupLatencyResponseBody.LatencyPacket.MonitorItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.monitorItem != nil {
                var tmp : [Any] = []
                for k in self.monitorItem! {
                    tmp.append(k.toMap())
                }
                map["MonitorItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MonitorItem"] as? [Any?] {
                var tmp : [DescribeGroupLatencyResponseBody.LatencyPacket.MonitorItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeGroupLatencyResponseBody.LatencyPacket.MonitorItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.monitorItem = tmp
            }
        }
    }
    public var latencyPacket: DescribeGroupLatencyResponseBody.LatencyPacket?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.latencyPacket?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.latencyPacket != nil {
            map["LatencyPacket"] = self.latencyPacket?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["LatencyPacket"] as? [String: Any?] {
            var model = DescribeGroupLatencyResponseBody.LatencyPacket()
            model.fromMap(value)
            self.latencyPacket = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeGroupLatencyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeGroupLatencyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeGroupLatencyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeGroupQpsRequest : Tea.TeaModel {
    public var endTime: String?

    public var groupId: String?

    public var securityToken: String?

    public var stageName: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeGroupQpsResponseBody : Tea.TeaModel {
    public class GroupQps : Tea.TeaModel {
        public class MonitorItem : Tea.TeaModel {
            public var itemTime: String?

            public var itemValue: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.itemTime != nil {
                    map["ItemTime"] = self.itemTime!
                }
                if self.itemValue != nil {
                    map["ItemValue"] = self.itemValue!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ItemTime"] as? String {
                    self.itemTime = value
                }
                if let value = dict["ItemValue"] as? String {
                    self.itemValue = value
                }
            }
        }
        public var monitorItem: [DescribeGroupQpsResponseBody.GroupQps.MonitorItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.monitorItem != nil {
                var tmp : [Any] = []
                for k in self.monitorItem! {
                    tmp.append(k.toMap())
                }
                map["MonitorItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MonitorItem"] as? [Any?] {
                var tmp : [DescribeGroupQpsResponseBody.GroupQps.MonitorItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeGroupQpsResponseBody.GroupQps.MonitorItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.monitorItem = tmp
            }
        }
    }
    public var groupQps: DescribeGroupQpsResponseBody.GroupQps?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.groupQps?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupQps != nil {
            map["GroupQps"] = self.groupQps?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupQps"] as? [String: Any?] {
            var model = DescribeGroupQpsResponseBody.GroupQps()
            model.fromMap(value)
            self.groupQps = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeGroupQpsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeGroupQpsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeGroupQpsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeGroupTrafficRequest : Tea.TeaModel {
    public var endTime: String?

    public var groupId: String?

    public var securityToken: String?

    public var stageName: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeGroupTrafficResponseBody : Tea.TeaModel {
    public class TrafficPerSecond : Tea.TeaModel {
        public class MonitorItem : Tea.TeaModel {
            public var item: String?

            public var itemTime: String?

            public var itemValue: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.item != nil {
                    map["Item"] = self.item!
                }
                if self.itemTime != nil {
                    map["ItemTime"] = self.itemTime!
                }
                if self.itemValue != nil {
                    map["ItemValue"] = self.itemValue!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Item"] as? String {
                    self.item = value
                }
                if let value = dict["ItemTime"] as? String {
                    self.itemTime = value
                }
                if let value = dict["ItemValue"] as? String {
                    self.itemValue = value
                }
            }
        }
        public var monitorItem: [DescribeGroupTrafficResponseBody.TrafficPerSecond.MonitorItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.monitorItem != nil {
                var tmp : [Any] = []
                for k in self.monitorItem! {
                    tmp.append(k.toMap())
                }
                map["MonitorItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MonitorItem"] as? [Any?] {
                var tmp : [DescribeGroupTrafficResponseBody.TrafficPerSecond.MonitorItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeGroupTrafficResponseBody.TrafficPerSecond.MonitorItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.monitorItem = tmp
            }
        }
    }
    public var requestId: String?

    public var trafficPerSecond: DescribeGroupTrafficResponseBody.TrafficPerSecond?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.trafficPerSecond?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.trafficPerSecond != nil {
            map["TrafficPerSecond"] = self.trafficPerSecond?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TrafficPerSecond"] as? [String: Any?] {
            var model = DescribeGroupTrafficResponseBody.TrafficPerSecond()
            model.fromMap(value)
            self.trafficPerSecond = model
        }
    }
}

public class DescribeGroupTrafficResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeGroupTrafficResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeGroupTrafficResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeHistoryApisRequest : Tea.TeaModel {
    public var apiId: String?

    public var apiName: String?

    public var groupId: String?

    public var pageNumber: String?

    public var pageSize: String?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.apiName != nil {
            map["ApiName"] = self.apiName!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["ApiName"] as? String {
            self.apiName = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["PageNumber"] as? String {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? String {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class DescribeHistoryApisResponseBody : Tea.TeaModel {
    public class ApiHisItems : Tea.TeaModel {
        public class ApiHisItem : Tea.TeaModel {
            public var apiId: String?

            public var apiName: String?

            public var deployedTime: String?

            public var description_: String?

            public var groupId: String?

            public var groupName: String?

            public var historyVersion: String?

            public var regionId: String?

            public var stageAlias: String?

            public var stageName: String?

            public var status: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiId != nil {
                    map["ApiId"] = self.apiId!
                }
                if self.apiName != nil {
                    map["ApiName"] = self.apiName!
                }
                if self.deployedTime != nil {
                    map["DeployedTime"] = self.deployedTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupName != nil {
                    map["GroupName"] = self.groupName!
                }
                if self.historyVersion != nil {
                    map["HistoryVersion"] = self.historyVersion!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.stageAlias != nil {
                    map["StageAlias"] = self.stageAlias!
                }
                if self.stageName != nil {
                    map["StageName"] = self.stageName!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiId"] as? String {
                    self.apiId = value
                }
                if let value = dict["ApiName"] as? String {
                    self.apiName = value
                }
                if let value = dict["DeployedTime"] as? String {
                    self.deployedTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["GroupName"] as? String {
                    self.groupName = value
                }
                if let value = dict["HistoryVersion"] as? String {
                    self.historyVersion = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["StageAlias"] as? String {
                    self.stageAlias = value
                }
                if let value = dict["StageName"] as? String {
                    self.stageName = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
            }
        }
        public var apiHisItem: [DescribeHistoryApisResponseBody.ApiHisItems.ApiHisItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiHisItem != nil {
                var tmp : [Any] = []
                for k in self.apiHisItem! {
                    tmp.append(k.toMap())
                }
                map["ApiHisItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiHisItem"] as? [Any?] {
                var tmp : [DescribeHistoryApisResponseBody.ApiHisItems.ApiHisItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeHistoryApisResponseBody.ApiHisItems.ApiHisItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.apiHisItem = tmp
            }
        }
    }
    public var apiHisItems: DescribeHistoryApisResponseBody.ApiHisItems?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.apiHisItems?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiHisItems != nil {
            map["ApiHisItems"] = self.apiHisItems?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiHisItems"] as? [String: Any?] {
            var model = DescribeHistoryApisResponseBody.ApiHisItems()
            model.fromMap(value)
            self.apiHisItems = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeHistoryApisResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeHistoryApisResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeHistoryApisResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeImportOASTaskRequest : Tea.TeaModel {
    public var operationId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.operationId != nil {
            map["OperationId"] = self.operationId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OperationId"] as? String {
            self.operationId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeImportOASTaskResponseBody : Tea.TeaModel {
    public class ApiResults : Tea.TeaModel {
        public class ApiResult : Tea.TeaModel {
            public var apiId: String?

            public var apiName: String?

            public var description_: String?

            public var errorMessage: String?

            public var groupId: String?

            public var method: String?

            public var path: String?

            public var updateStatus: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiId != nil {
                    map["ApiId"] = self.apiId!
                }
                if self.apiName != nil {
                    map["ApiName"] = self.apiName!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.errorMessage != nil {
                    map["ErrorMessage"] = self.errorMessage!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.method != nil {
                    map["Method"] = self.method!
                }
                if self.path != nil {
                    map["Path"] = self.path!
                }
                if self.updateStatus != nil {
                    map["UpdateStatus"] = self.updateStatus!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiId"] as? String {
                    self.apiId = value
                }
                if let value = dict["ApiName"] as? String {
                    self.apiName = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["ErrorMessage"] as? String {
                    self.errorMessage = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["Method"] as? String {
                    self.method = value
                }
                if let value = dict["Path"] as? String {
                    self.path = value
                }
                if let value = dict["UpdateStatus"] as? String {
                    self.updateStatus = value
                }
            }
        }
        public var apiResult: [DescribeImportOASTaskResponseBody.ApiResults.ApiResult]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiResult != nil {
                var tmp : [Any] = []
                for k in self.apiResult! {
                    tmp.append(k.toMap())
                }
                map["ApiResult"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiResult"] as? [Any?] {
                var tmp : [DescribeImportOASTaskResponseBody.ApiResults.ApiResult] = []
                for v in value {
                    if v != nil {
                        var model = DescribeImportOASTaskResponseBody.ApiResults.ApiResult()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.apiResult = tmp
            }
        }
    }
    public class ModelResults : Tea.TeaModel {
        public class ModelResult : Tea.TeaModel {
            public var errorMessage: String?

            public var groupId: String?

            public var modelId: String?

            public var modelName: String?

            public var updateStatus: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.errorMessage != nil {
                    map["ErrorMessage"] = self.errorMessage!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.modelId != nil {
                    map["ModelId"] = self.modelId!
                }
                if self.modelName != nil {
                    map["ModelName"] = self.modelName!
                }
                if self.updateStatus != nil {
                    map["UpdateStatus"] = self.updateStatus!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ErrorMessage"] as? String {
                    self.errorMessage = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["ModelId"] as? String {
                    self.modelId = value
                }
                if let value = dict["ModelName"] as? String {
                    self.modelName = value
                }
                if let value = dict["UpdateStatus"] as? String {
                    self.updateStatus = value
                }
            }
        }
        public var modelResult: [DescribeImportOASTaskResponseBody.ModelResults.ModelResult]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.modelResult != nil {
                var tmp : [Any] = []
                for k in self.modelResult! {
                    tmp.append(k.toMap())
                }
                map["ModelResult"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ModelResult"] as? [Any?] {
                var tmp : [DescribeImportOASTaskResponseBody.ModelResults.ModelResult] = []
                for v in value {
                    if v != nil {
                        var model = DescribeImportOASTaskResponseBody.ModelResults.ModelResult()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.modelResult = tmp
            }
        }
    }
    public var apiResults: DescribeImportOASTaskResponseBody.ApiResults?

    public var modelResults: DescribeImportOASTaskResponseBody.ModelResults?

    public var requestId: String?

    public var taskStatus: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.apiResults?.validate()
        try self.modelResults?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiResults != nil {
            map["ApiResults"] = self.apiResults?.toMap()
        }
        if self.modelResults != nil {
            map["ModelResults"] = self.modelResults?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.taskStatus != nil {
            map["TaskStatus"] = self.taskStatus!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiResults"] as? [String: Any?] {
            var model = DescribeImportOASTaskResponseBody.ApiResults()
            model.fromMap(value)
            self.apiResults = model
        }
        if let value = dict["ModelResults"] as? [String: Any?] {
            var model = DescribeImportOASTaskResponseBody.ModelResults()
            model.fromMap(value)
            self.modelResults = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TaskStatus"] as? String {
            self.taskStatus = value
        }
    }
}

public class DescribeImportOASTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeImportOASTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeImportOASTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeInstanceClusterInfoRequest : Tea.TeaModel {
    public var instanceClusterName: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceClusterName != nil {
            map["InstanceClusterName"] = self.instanceClusterName!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceClusterName"] as? String {
            self.instanceClusterName = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeInstanceClusterInfoResponseBody : Tea.TeaModel {
    public class InstanceClusterAttribute : Tea.TeaModel {
        public var connectCidrBlocks: String?

        public var connectVpcId: String?

        public var egressIpv6Enable: Bool?

        public var httpsPolicies: String?

        public var IPV4AclId: String?

        public var IPV4AclName: String?

        public var IPV4AclStatus: String?

        public var IPV4AclType: String?

        public var IPV6AclId: String?

        public var IPV6AclName: String?

        public var IPV6AclStatus: String?

        public var IPV6AclType: String?

        public var internetEgressAddress: String?

        public var intranetEgressAddress: String?

        public var intranetSegments: String?

        public var supportIpv6: Bool?

        public var userVpcId: String?

        public var userVswitchId: String?

        public var vipTypeList: String?

        public var vpcIntranetEnable: Bool?

        public var vpcOwnerId: Int64?

        public var vpcSlbIntranetEnable: Bool?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.connectCidrBlocks != nil {
                map["ConnectCidrBlocks"] = self.connectCidrBlocks!
            }
            if self.connectVpcId != nil {
                map["ConnectVpcId"] = self.connectVpcId!
            }
            if self.egressIpv6Enable != nil {
                map["EgressIpv6Enable"] = self.egressIpv6Enable!
            }
            if self.httpsPolicies != nil {
                map["HttpsPolicies"] = self.httpsPolicies!
            }
            if self.IPV4AclId != nil {
                map["IPV4AclId"] = self.IPV4AclId!
            }
            if self.IPV4AclName != nil {
                map["IPV4AclName"] = self.IPV4AclName!
            }
            if self.IPV4AclStatus != nil {
                map["IPV4AclStatus"] = self.IPV4AclStatus!
            }
            if self.IPV4AclType != nil {
                map["IPV4AclType"] = self.IPV4AclType!
            }
            if self.IPV6AclId != nil {
                map["IPV6AclId"] = self.IPV6AclId!
            }
            if self.IPV6AclName != nil {
                map["IPV6AclName"] = self.IPV6AclName!
            }
            if self.IPV6AclStatus != nil {
                map["IPV6AclStatus"] = self.IPV6AclStatus!
            }
            if self.IPV6AclType != nil {
                map["IPV6AclType"] = self.IPV6AclType!
            }
            if self.internetEgressAddress != nil {
                map["InternetEgressAddress"] = self.internetEgressAddress!
            }
            if self.intranetEgressAddress != nil {
                map["IntranetEgressAddress"] = self.intranetEgressAddress!
            }
            if self.intranetSegments != nil {
                map["IntranetSegments"] = self.intranetSegments!
            }
            if self.supportIpv6 != nil {
                map["SupportIpv6"] = self.supportIpv6!
            }
            if self.userVpcId != nil {
                map["UserVpcId"] = self.userVpcId!
            }
            if self.userVswitchId != nil {
                map["UserVswitchId"] = self.userVswitchId!
            }
            if self.vipTypeList != nil {
                map["VipTypeList"] = self.vipTypeList!
            }
            if self.vpcIntranetEnable != nil {
                map["VpcIntranetEnable"] = self.vpcIntranetEnable!
            }
            if self.vpcOwnerId != nil {
                map["VpcOwnerId"] = self.vpcOwnerId!
            }
            if self.vpcSlbIntranetEnable != nil {
                map["VpcSlbIntranetEnable"] = self.vpcSlbIntranetEnable!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ConnectCidrBlocks"] as? String {
                self.connectCidrBlocks = value
            }
            if let value = dict["ConnectVpcId"] as? String {
                self.connectVpcId = value
            }
            if let value = dict["EgressIpv6Enable"] as? Bool {
                self.egressIpv6Enable = value
            }
            if let value = dict["HttpsPolicies"] as? String {
                self.httpsPolicies = value
            }
            if let value = dict["IPV4AclId"] as? String {
                self.IPV4AclId = value
            }
            if let value = dict["IPV4AclName"] as? String {
                self.IPV4AclName = value
            }
            if let value = dict["IPV4AclStatus"] as? String {
                self.IPV4AclStatus = value
            }
            if let value = dict["IPV4AclType"] as? String {
                self.IPV4AclType = value
            }
            if let value = dict["IPV6AclId"] as? String {
                self.IPV6AclId = value
            }
            if let value = dict["IPV6AclName"] as? String {
                self.IPV6AclName = value
            }
            if let value = dict["IPV6AclStatus"] as? String {
                self.IPV6AclStatus = value
            }
            if let value = dict["IPV6AclType"] as? String {
                self.IPV6AclType = value
            }
            if let value = dict["InternetEgressAddress"] as? String {
                self.internetEgressAddress = value
            }
            if let value = dict["IntranetEgressAddress"] as? String {
                self.intranetEgressAddress = value
            }
            if let value = dict["IntranetSegments"] as? String {
                self.intranetSegments = value
            }
            if let value = dict["SupportIpv6"] as? Bool {
                self.supportIpv6 = value
            }
            if let value = dict["UserVpcId"] as? String {
                self.userVpcId = value
            }
            if let value = dict["UserVswitchId"] as? String {
                self.userVswitchId = value
            }
            if let value = dict["VipTypeList"] as? String {
                self.vipTypeList = value
            }
            if let value = dict["VpcIntranetEnable"] as? Bool {
                self.vpcIntranetEnable = value
            }
            if let value = dict["VpcOwnerId"] as? Int64 {
                self.vpcOwnerId = value
            }
            if let value = dict["VpcSlbIntranetEnable"] as? Bool {
                self.vpcSlbIntranetEnable = value
            }
        }
    }
    public class InstanceList : Tea.TeaModel {
        public class Instance : Tea.TeaModel {
            public var errorMessage: String?

            public var instanceId: String?

            public var instanceName: String?

            public var status: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.errorMessage != nil {
                    map["ErrorMessage"] = self.errorMessage!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.instanceName != nil {
                    map["InstanceName"] = self.instanceName!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ErrorMessage"] as? String {
                    self.errorMessage = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["InstanceName"] as? String {
                    self.instanceName = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
            }
        }
        public var instance: [DescribeInstanceClusterInfoResponseBody.InstanceList.Instance]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.instance != nil {
                var tmp : [Any] = []
                for k in self.instance! {
                    tmp.append(k.toMap())
                }
                map["Instance"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Instance"] as? [Any?] {
                var tmp : [DescribeInstanceClusterInfoResponseBody.InstanceList.Instance] = []
                for v in value {
                    if v != nil {
                        var model = DescribeInstanceClusterInfoResponseBody.InstanceList.Instance()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.instance = tmp
            }
        }
    }
    public var createdTime: String?

    public var description_: String?

    public var instanceClusterAttribute: DescribeInstanceClusterInfoResponseBody.InstanceClusterAttribute?

    public var instanceClusterId: String?

    public var instanceClusterName: String?

    public var instanceClusterStatus: String?

    public var instanceClusterType: String?

    public var instanceClusterVersion: String?

    public var instanceList: DescribeInstanceClusterInfoResponseBody.InstanceList?

    public var modifiedTime: String?

    public var regionId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.instanceClusterAttribute?.validate()
        try self.instanceList?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.createdTime != nil {
            map["CreatedTime"] = self.createdTime!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.instanceClusterAttribute != nil {
            map["InstanceClusterAttribute"] = self.instanceClusterAttribute?.toMap()
        }
        if self.instanceClusterId != nil {
            map["InstanceClusterId"] = self.instanceClusterId!
        }
        if self.instanceClusterName != nil {
            map["InstanceClusterName"] = self.instanceClusterName!
        }
        if self.instanceClusterStatus != nil {
            map["InstanceClusterStatus"] = self.instanceClusterStatus!
        }
        if self.instanceClusterType != nil {
            map["InstanceClusterType"] = self.instanceClusterType!
        }
        if self.instanceClusterVersion != nil {
            map["InstanceClusterVersion"] = self.instanceClusterVersion!
        }
        if self.instanceList != nil {
            map["InstanceList"] = self.instanceList?.toMap()
        }
        if self.modifiedTime != nil {
            map["ModifiedTime"] = self.modifiedTime!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CreatedTime"] as? String {
            self.createdTime = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["InstanceClusterAttribute"] as? [String: Any?] {
            var model = DescribeInstanceClusterInfoResponseBody.InstanceClusterAttribute()
            model.fromMap(value)
            self.instanceClusterAttribute = model
        }
        if let value = dict["InstanceClusterId"] as? String {
            self.instanceClusterId = value
        }
        if let value = dict["InstanceClusterName"] as? String {
            self.instanceClusterName = value
        }
        if let value = dict["InstanceClusterStatus"] as? String {
            self.instanceClusterStatus = value
        }
        if let value = dict["InstanceClusterType"] as? String {
            self.instanceClusterType = value
        }
        if let value = dict["InstanceClusterVersion"] as? String {
            self.instanceClusterVersion = value
        }
        if let value = dict["InstanceList"] as? [String: Any?] {
            var model = DescribeInstanceClusterInfoResponseBody.InstanceList()
            model.fromMap(value)
            self.instanceList = model
        }
        if let value = dict["ModifiedTime"] as? String {
            self.modifiedTime = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeInstanceClusterInfoResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeInstanceClusterInfoResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeInstanceClusterInfoResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeInstanceClusterListRequest : Tea.TeaModel {
    public var instanceClusterId: String?

    public var instanceClusterName: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceClusterId != nil {
            map["InstanceClusterId"] = self.instanceClusterId!
        }
        if self.instanceClusterName != nil {
            map["InstanceClusterName"] = self.instanceClusterName!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceClusterId"] as? String {
            self.instanceClusterId = value
        }
        if let value = dict["InstanceClusterName"] as? String {
            self.instanceClusterName = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeInstanceClusterListResponseBody : Tea.TeaModel {
    public class InstanceClusters : Tea.TeaModel {
        public class InstanceCluster : Tea.TeaModel {
            public var createdTime: String?

            public var description_: String?

            public var instanceClusterId: String?

            public var instanceClusterName: String?

            public var instanceClusterStatus: String?

            public var instanceClusterType: String?

            public var modifiedTime: String?

            public var regionId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.createdTime != nil {
                    map["CreatedTime"] = self.createdTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.instanceClusterId != nil {
                    map["InstanceClusterId"] = self.instanceClusterId!
                }
                if self.instanceClusterName != nil {
                    map["InstanceClusterName"] = self.instanceClusterName!
                }
                if self.instanceClusterStatus != nil {
                    map["InstanceClusterStatus"] = self.instanceClusterStatus!
                }
                if self.instanceClusterType != nil {
                    map["InstanceClusterType"] = self.instanceClusterType!
                }
                if self.modifiedTime != nil {
                    map["ModifiedTime"] = self.modifiedTime!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CreatedTime"] as? String {
                    self.createdTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["InstanceClusterId"] as? String {
                    self.instanceClusterId = value
                }
                if let value = dict["InstanceClusterName"] as? String {
                    self.instanceClusterName = value
                }
                if let value = dict["InstanceClusterStatus"] as? String {
                    self.instanceClusterStatus = value
                }
                if let value = dict["InstanceClusterType"] as? String {
                    self.instanceClusterType = value
                }
                if let value = dict["ModifiedTime"] as? String {
                    self.modifiedTime = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
            }
        }
        public var instanceCluster: [DescribeInstanceClusterListResponseBody.InstanceClusters.InstanceCluster]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.instanceCluster != nil {
                var tmp : [Any] = []
                for k in self.instanceCluster! {
                    tmp.append(k.toMap())
                }
                map["InstanceCluster"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["InstanceCluster"] as? [Any?] {
                var tmp : [DescribeInstanceClusterListResponseBody.InstanceClusters.InstanceCluster] = []
                for v in value {
                    if v != nil {
                        var model = DescribeInstanceClusterListResponseBody.InstanceClusters.InstanceCluster()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.instanceCluster = tmp
            }
        }
    }
    public var instanceClusters: DescribeInstanceClusterListResponseBody.InstanceClusters?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.instanceClusters?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceClusters != nil {
            map["InstanceClusters"] = self.instanceClusters?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceClusters"] as? [String: Any?] {
            var model = DescribeInstanceClusterListResponseBody.InstanceClusters()
            model.fromMap(value)
            self.instanceClusters = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeInstanceClusterListResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeInstanceClusterListResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeInstanceClusterListResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeInstanceDropConnectionsRequest : Tea.TeaModel {
    public var endTime: String?

    public var instanceId: String?

    public var sbcName: String?

    public var securityToken: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.sbcName != nil {
            map["SbcName"] = self.sbcName!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["SbcName"] as? String {
            self.sbcName = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeInstanceDropConnectionsResponseBody : Tea.TeaModel {
    public class InstanceDropConnections : Tea.TeaModel {
        public class MonitorItem : Tea.TeaModel {
            public var itemTime: String?

            public var itemValue: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.itemTime != nil {
                    map["ItemTime"] = self.itemTime!
                }
                if self.itemValue != nil {
                    map["ItemValue"] = self.itemValue!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ItemTime"] as? String {
                    self.itemTime = value
                }
                if let value = dict["ItemValue"] as? String {
                    self.itemValue = value
                }
            }
        }
        public var monitorItem: [DescribeInstanceDropConnectionsResponseBody.InstanceDropConnections.MonitorItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.monitorItem != nil {
                var tmp : [Any] = []
                for k in self.monitorItem! {
                    tmp.append(k.toMap())
                }
                map["MonitorItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MonitorItem"] as? [Any?] {
                var tmp : [DescribeInstanceDropConnectionsResponseBody.InstanceDropConnections.MonitorItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeInstanceDropConnectionsResponseBody.InstanceDropConnections.MonitorItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.monitorItem = tmp
            }
        }
    }
    public var instanceDropConnections: DescribeInstanceDropConnectionsResponseBody.InstanceDropConnections?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.instanceDropConnections?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceDropConnections != nil {
            map["InstanceDropConnections"] = self.instanceDropConnections?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceDropConnections"] as? [String: Any?] {
            var model = DescribeInstanceDropConnectionsResponseBody.InstanceDropConnections()
            model.fromMap(value)
            self.instanceDropConnections = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeInstanceDropConnectionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeInstanceDropConnectionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeInstanceDropConnectionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeInstanceDropPacketRequest : Tea.TeaModel {
    public var endTime: String?

    public var instanceId: String?

    public var sbcName: String?

    public var securityToken: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.sbcName != nil {
            map["SbcName"] = self.sbcName!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["SbcName"] as? String {
            self.sbcName = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeInstanceDropPacketResponseBody : Tea.TeaModel {
    public class InstanceDropPacket : Tea.TeaModel {
        public class MonitorItem : Tea.TeaModel {
            public var item: String?

            public var itemTime: String?

            public var itemValue: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.item != nil {
                    map["Item"] = self.item!
                }
                if self.itemTime != nil {
                    map["ItemTime"] = self.itemTime!
                }
                if self.itemValue != nil {
                    map["ItemValue"] = self.itemValue!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Item"] as? String {
                    self.item = value
                }
                if let value = dict["ItemTime"] as? String {
                    self.itemTime = value
                }
                if let value = dict["ItemValue"] as? String {
                    self.itemValue = value
                }
            }
        }
        public var monitorItem: [DescribeInstanceDropPacketResponseBody.InstanceDropPacket.MonitorItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.monitorItem != nil {
                var tmp : [Any] = []
                for k in self.monitorItem! {
                    tmp.append(k.toMap())
                }
                map["MonitorItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MonitorItem"] as? [Any?] {
                var tmp : [DescribeInstanceDropPacketResponseBody.InstanceDropPacket.MonitorItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeInstanceDropPacketResponseBody.InstanceDropPacket.MonitorItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.monitorItem = tmp
            }
        }
    }
    public var instanceDropPacket: DescribeInstanceDropPacketResponseBody.InstanceDropPacket?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.instanceDropPacket?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceDropPacket != nil {
            map["InstanceDropPacket"] = self.instanceDropPacket?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceDropPacket"] as? [String: Any?] {
            var model = DescribeInstanceDropPacketResponseBody.InstanceDropPacket()
            model.fromMap(value)
            self.instanceDropPacket = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeInstanceDropPacketResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeInstanceDropPacketResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeInstanceDropPacketResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeInstanceHttpCodeRequest : Tea.TeaModel {
    public var endTime: String?

    public var instanceId: String?

    public var securityToken: String?

    public var stageName: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeInstanceHttpCodeResponseBody : Tea.TeaModel {
    public class InstanceHttpCode : Tea.TeaModel {
        public class MonitorItem : Tea.TeaModel {
            public var itemTime: String?

            public var itemValue: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.itemTime != nil {
                    map["ItemTime"] = self.itemTime!
                }
                if self.itemValue != nil {
                    map["ItemValue"] = self.itemValue!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ItemTime"] as? String {
                    self.itemTime = value
                }
                if let value = dict["ItemValue"] as? String {
                    self.itemValue = value
                }
            }
        }
        public var monitorItem: [DescribeInstanceHttpCodeResponseBody.InstanceHttpCode.MonitorItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.monitorItem != nil {
                var tmp : [Any] = []
                for k in self.monitorItem! {
                    tmp.append(k.toMap())
                }
                map["MonitorItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MonitorItem"] as? [Any?] {
                var tmp : [DescribeInstanceHttpCodeResponseBody.InstanceHttpCode.MonitorItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeInstanceHttpCodeResponseBody.InstanceHttpCode.MonitorItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.monitorItem = tmp
            }
        }
    }
    public var instanceHttpCode: DescribeInstanceHttpCodeResponseBody.InstanceHttpCode?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.instanceHttpCode?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceHttpCode != nil {
            map["InstanceHttpCode"] = self.instanceHttpCode?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceHttpCode"] as? [String: Any?] {
            var model = DescribeInstanceHttpCodeResponseBody.InstanceHttpCode()
            model.fromMap(value)
            self.instanceHttpCode = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeInstanceHttpCodeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeInstanceHttpCodeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeInstanceHttpCodeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeInstanceLatencyRequest : Tea.TeaModel {
    public var endTime: String?

    public var instanceId: String?

    public var securityToken: String?

    public var stageName: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeInstanceLatencyResponseBody : Tea.TeaModel {
    public class InstanceLatency : Tea.TeaModel {
        public class MonitorItem : Tea.TeaModel {
            public var item: String?

            public var itemTime: String?

            public var itemValue: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.item != nil {
                    map["Item"] = self.item!
                }
                if self.itemTime != nil {
                    map["ItemTime"] = self.itemTime!
                }
                if self.itemValue != nil {
                    map["ItemValue"] = self.itemValue!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Item"] as? String {
                    self.item = value
                }
                if let value = dict["ItemTime"] as? String {
                    self.itemTime = value
                }
                if let value = dict["ItemValue"] as? String {
                    self.itemValue = value
                }
            }
        }
        public var monitorItem: [DescribeInstanceLatencyResponseBody.InstanceLatency.MonitorItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.monitorItem != nil {
                var tmp : [Any] = []
                for k in self.monitorItem! {
                    tmp.append(k.toMap())
                }
                map["MonitorItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MonitorItem"] as? [Any?] {
                var tmp : [DescribeInstanceLatencyResponseBody.InstanceLatency.MonitorItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeInstanceLatencyResponseBody.InstanceLatency.MonitorItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.monitorItem = tmp
            }
        }
    }
    public var instanceLatency: DescribeInstanceLatencyResponseBody.InstanceLatency?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.instanceLatency?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceLatency != nil {
            map["InstanceLatency"] = self.instanceLatency?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceLatency"] as? [String: Any?] {
            var model = DescribeInstanceLatencyResponseBody.InstanceLatency()
            model.fromMap(value)
            self.instanceLatency = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeInstanceLatencyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeInstanceLatencyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeInstanceLatencyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeInstanceNewConnectionsRequest : Tea.TeaModel {
    public var endTime: String?

    public var instanceId: String?

    public var sbcName: String?

    public var securityToken: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.sbcName != nil {
            map["SbcName"] = self.sbcName!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["SbcName"] as? String {
            self.sbcName = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeInstanceNewConnectionsResponseBody : Tea.TeaModel {
    public class InstanceNewConnections : Tea.TeaModel {
        public class MonitorItem : Tea.TeaModel {
            public var itemTime: String?

            public var itemValue: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.itemTime != nil {
                    map["ItemTime"] = self.itemTime!
                }
                if self.itemValue != nil {
                    map["ItemValue"] = self.itemValue!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ItemTime"] as? String {
                    self.itemTime = value
                }
                if let value = dict["ItemValue"] as? String {
                    self.itemValue = value
                }
            }
        }
        public var monitorItem: [DescribeInstanceNewConnectionsResponseBody.InstanceNewConnections.MonitorItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.monitorItem != nil {
                var tmp : [Any] = []
                for k in self.monitorItem! {
                    tmp.append(k.toMap())
                }
                map["MonitorItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MonitorItem"] as? [Any?] {
                var tmp : [DescribeInstanceNewConnectionsResponseBody.InstanceNewConnections.MonitorItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeInstanceNewConnectionsResponseBody.InstanceNewConnections.MonitorItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.monitorItem = tmp
            }
        }
    }
    public var instanceNewConnections: DescribeInstanceNewConnectionsResponseBody.InstanceNewConnections?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.instanceNewConnections?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceNewConnections != nil {
            map["InstanceNewConnections"] = self.instanceNewConnections?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceNewConnections"] as? [String: Any?] {
            var model = DescribeInstanceNewConnectionsResponseBody.InstanceNewConnections()
            model.fromMap(value)
            self.instanceNewConnections = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeInstanceNewConnectionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeInstanceNewConnectionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeInstanceNewConnectionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeInstancePacketsRequest : Tea.TeaModel {
    public var endTime: String?

    public var instanceId: String?

    public var sbcName: String?

    public var securityToken: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.sbcName != nil {
            map["SbcName"] = self.sbcName!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["SbcName"] as? String {
            self.sbcName = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeInstancePacketsResponseBody : Tea.TeaModel {
    public class InstancePackets : Tea.TeaModel {
        public class MonitorItem : Tea.TeaModel {
            public var item: String?

            public var itemTime: String?

            public var itemValue: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.item != nil {
                    map["Item"] = self.item!
                }
                if self.itemTime != nil {
                    map["ItemTime"] = self.itemTime!
                }
                if self.itemValue != nil {
                    map["ItemValue"] = self.itemValue!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Item"] as? String {
                    self.item = value
                }
                if let value = dict["ItemTime"] as? String {
                    self.itemTime = value
                }
                if let value = dict["ItemValue"] as? String {
                    self.itemValue = value
                }
            }
        }
        public var monitorItem: [DescribeInstancePacketsResponseBody.InstancePackets.MonitorItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.monitorItem != nil {
                var tmp : [Any] = []
                for k in self.monitorItem! {
                    tmp.append(k.toMap())
                }
                map["MonitorItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MonitorItem"] as? [Any?] {
                var tmp : [DescribeInstancePacketsResponseBody.InstancePackets.MonitorItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeInstancePacketsResponseBody.InstancePackets.MonitorItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.monitorItem = tmp
            }
        }
    }
    public var instancePackets: DescribeInstancePacketsResponseBody.InstancePackets?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.instancePackets?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instancePackets != nil {
            map["InstancePackets"] = self.instancePackets?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstancePackets"] as? [String: Any?] {
            var model = DescribeInstancePacketsResponseBody.InstancePackets()
            model.fromMap(value)
            self.instancePackets = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeInstancePacketsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeInstancePacketsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeInstancePacketsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeInstanceQpsRequest : Tea.TeaModel {
    public var endTime: String?

    public var instanceId: String?

    public var securityToken: String?

    public var stageName: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeInstanceQpsResponseBody : Tea.TeaModel {
    public class InstanceQps : Tea.TeaModel {
        public class MonitorItem : Tea.TeaModel {
            public var itemTime: String?

            public var itemValue: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.itemTime != nil {
                    map["ItemTime"] = self.itemTime!
                }
                if self.itemValue != nil {
                    map["ItemValue"] = self.itemValue!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ItemTime"] as? String {
                    self.itemTime = value
                }
                if let value = dict["ItemValue"] as? String {
                    self.itemValue = value
                }
            }
        }
        public var monitorItem: [DescribeInstanceQpsResponseBody.InstanceQps.MonitorItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.monitorItem != nil {
                var tmp : [Any] = []
                for k in self.monitorItem! {
                    tmp.append(k.toMap())
                }
                map["MonitorItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MonitorItem"] as? [Any?] {
                var tmp : [DescribeInstanceQpsResponseBody.InstanceQps.MonitorItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeInstanceQpsResponseBody.InstanceQps.MonitorItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.monitorItem = tmp
            }
        }
    }
    public var instanceQps: DescribeInstanceQpsResponseBody.InstanceQps?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.instanceQps?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceQps != nil {
            map["InstanceQps"] = self.instanceQps?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceQps"] as? [String: Any?] {
            var model = DescribeInstanceQpsResponseBody.InstanceQps()
            model.fromMap(value)
            self.instanceQps = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeInstanceQpsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeInstanceQpsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeInstanceQpsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeInstanceSlbConnectRequest : Tea.TeaModel {
    public var endTime: String?

    public var instanceId: String?

    public var sbcName: String?

    public var securityToken: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.sbcName != nil {
            map["SbcName"] = self.sbcName!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["SbcName"] as? String {
            self.sbcName = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeInstanceSlbConnectResponseBody : Tea.TeaModel {
    public class InstanceSlbConnect : Tea.TeaModel {
        public class MonitorItem : Tea.TeaModel {
            public var item: String?

            public var itemTime: String?

            public var itemValue: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.item != nil {
                    map["Item"] = self.item!
                }
                if self.itemTime != nil {
                    map["ItemTime"] = self.itemTime!
                }
                if self.itemValue != nil {
                    map["ItemValue"] = self.itemValue!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Item"] as? String {
                    self.item = value
                }
                if let value = dict["ItemTime"] as? String {
                    self.itemTime = value
                }
                if let value = dict["ItemValue"] as? String {
                    self.itemValue = value
                }
            }
        }
        public var monitorItem: [DescribeInstanceSlbConnectResponseBody.InstanceSlbConnect.MonitorItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.monitorItem != nil {
                var tmp : [Any] = []
                for k in self.monitorItem! {
                    tmp.append(k.toMap())
                }
                map["MonitorItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MonitorItem"] as? [Any?] {
                var tmp : [DescribeInstanceSlbConnectResponseBody.InstanceSlbConnect.MonitorItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeInstanceSlbConnectResponseBody.InstanceSlbConnect.MonitorItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.monitorItem = tmp
            }
        }
    }
    public var instanceSlbConnect: DescribeInstanceSlbConnectResponseBody.InstanceSlbConnect?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.instanceSlbConnect?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceSlbConnect != nil {
            map["InstanceSlbConnect"] = self.instanceSlbConnect?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceSlbConnect"] as? [String: Any?] {
            var model = DescribeInstanceSlbConnectResponseBody.InstanceSlbConnect()
            model.fromMap(value)
            self.instanceSlbConnect = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeInstanceSlbConnectResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeInstanceSlbConnectResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeInstanceSlbConnectResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeInstanceTrafficRequest : Tea.TeaModel {
    public var endTime: String?

    public var instanceId: String?

    public var securityToken: String?

    public var stageName: String?

    public var startTime: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.endTime != nil {
            map["EndTime"] = self.endTime!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        if self.startTime != nil {
            map["StartTime"] = self.startTime!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EndTime"] as? String {
            self.endTime = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
        if let value = dict["StartTime"] as? String {
            self.startTime = value
        }
    }
}

public class DescribeInstanceTrafficResponseBody : Tea.TeaModel {
    public class InstanceTraffic : Tea.TeaModel {
        public class MonitorItem : Tea.TeaModel {
            public var item: String?

            public var itemTime: String?

            public var itemValue: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.item != nil {
                    map["Item"] = self.item!
                }
                if self.itemTime != nil {
                    map["ItemTime"] = self.itemTime!
                }
                if self.itemValue != nil {
                    map["ItemValue"] = self.itemValue!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Item"] as? String {
                    self.item = value
                }
                if let value = dict["ItemTime"] as? String {
                    self.itemTime = value
                }
                if let value = dict["ItemValue"] as? String {
                    self.itemValue = value
                }
            }
        }
        public var monitorItem: [DescribeInstanceTrafficResponseBody.InstanceTraffic.MonitorItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.monitorItem != nil {
                var tmp : [Any] = []
                for k in self.monitorItem! {
                    tmp.append(k.toMap())
                }
                map["MonitorItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["MonitorItem"] as? [Any?] {
                var tmp : [DescribeInstanceTrafficResponseBody.InstanceTraffic.MonitorItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeInstanceTrafficResponseBody.InstanceTraffic.MonitorItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.monitorItem = tmp
            }
        }
    }
    public var instanceTraffic: DescribeInstanceTrafficResponseBody.InstanceTraffic?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.instanceTraffic?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceTraffic != nil {
            map["InstanceTraffic"] = self.instanceTraffic?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceTraffic"] as? [String: Any?] {
            var model = DescribeInstanceTrafficResponseBody.InstanceTraffic()
            model.fromMap(value)
            self.instanceTraffic = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeInstanceTrafficResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeInstanceTrafficResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeInstanceTrafficResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeInstancesRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var enableTagAuthorization: Bool?

    public var instanceId: String?

    public var instanceType: String?

    public var language: String?

    public var securityToken: String?

    public var tag: [DescribeInstancesRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.enableTagAuthorization != nil {
            map["EnableTagAuthorization"] = self.enableTagAuthorization!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.instanceType != nil {
            map["InstanceType"] = self.instanceType!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["EnableTagAuthorization"] as? Bool {
            self.enableTagAuthorization = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["InstanceType"] as? String {
            self.instanceType = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [DescribeInstancesRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = DescribeInstancesRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class DescribeInstancesResponseBody : Tea.TeaModel {
    public class Instances : Tea.TeaModel {
        public class InstanceAttribute : Tea.TeaModel {
            public class InstanceSpecAttributes : Tea.TeaModel {
                public class SpecAttribute : Tea.TeaModel {
                    public var localName: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.localName != nil {
                            map["LocalName"] = self.localName!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["LocalName"] as? String {
                            self.localName = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var specAttribute: [DescribeInstancesResponseBody.Instances.InstanceAttribute.InstanceSpecAttributes.SpecAttribute]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.specAttribute != nil {
                        var tmp : [Any] = []
                        for k in self.specAttribute! {
                            tmp.append(k.toMap())
                        }
                        map["SpecAttribute"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["SpecAttribute"] as? [Any?] {
                        var tmp : [DescribeInstancesResponseBody.Instances.InstanceAttribute.InstanceSpecAttributes.SpecAttribute] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeInstancesResponseBody.Instances.InstanceAttribute.InstanceSpecAttributes.SpecAttribute()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.specAttribute = tmp
                    }
                }
            }
            public class NetworkInterfaceAttributes : Tea.TeaModel {
                public class NetworkInterfaceAttribute : Tea.TeaModel {
                    public var cidrBlock: String?

                    public var securityGroupId: String?

                    public var vswitchId: String?

                    public var zoneId: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.cidrBlock != nil {
                            map["CidrBlock"] = self.cidrBlock!
                        }
                        if self.securityGroupId != nil {
                            map["SecurityGroupId"] = self.securityGroupId!
                        }
                        if self.vswitchId != nil {
                            map["VswitchId"] = self.vswitchId!
                        }
                        if self.zoneId != nil {
                            map["ZoneId"] = self.zoneId!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["CidrBlock"] as? String {
                            self.cidrBlock = value
                        }
                        if let value = dict["SecurityGroupId"] as? String {
                            self.securityGroupId = value
                        }
                        if let value = dict["VswitchId"] as? String {
                            self.vswitchId = value
                        }
                        if let value = dict["ZoneId"] as? String {
                            self.zoneId = value
                        }
                    }
                }
                public var networkInterfaceAttribute: [DescribeInstancesResponseBody.Instances.InstanceAttribute.NetworkInterfaceAttributes.NetworkInterfaceAttribute]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.networkInterfaceAttribute != nil {
                        var tmp : [Any] = []
                        for k in self.networkInterfaceAttribute! {
                            tmp.append(k.toMap())
                        }
                        map["NetworkInterfaceAttribute"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["NetworkInterfaceAttribute"] as? [Any?] {
                        var tmp : [DescribeInstancesResponseBody.Instances.InstanceAttribute.NetworkInterfaceAttributes.NetworkInterfaceAttribute] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeInstancesResponseBody.Instances.InstanceAttribute.NetworkInterfaceAttributes.NetworkInterfaceAttribute()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.networkInterfaceAttribute = tmp
                    }
                }
            }
            public class PrivateDnsList : Tea.TeaModel {
                public var privateDns: [String]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.privateDns != nil {
                        map["PrivateDns"] = self.privateDns!
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["PrivateDns"] as? [String] {
                        self.privateDns = value
                    }
                }
            }
            public class Tags : Tea.TeaModel {
                public class TagInfo : Tea.TeaModel {
                    public var key: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var tagInfo: [DescribeInstancesResponseBody.Instances.InstanceAttribute.Tags.TagInfo]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.tagInfo != nil {
                        var tmp : [Any] = []
                        for k in self.tagInfo! {
                            tmp.append(k.toMap())
                        }
                        map["TagInfo"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["TagInfo"] as? [Any?] {
                        var tmp : [DescribeInstancesResponseBody.Instances.InstanceAttribute.Tags.TagInfo] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeInstancesResponseBody.Instances.InstanceAttribute.Tags.TagInfo()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.tagInfo = tmp
                    }
                }
            }
            public var aclId: String?

            public var aclName: String?

            public var aclStatus: String?

            public var aclType: String?

            public var classicEgressAddress: String?

            public var connectCidrBlocks: String?

            public var connectVpcId: String?

            public var createdTime: String?

            public var dedicatedInstanceType: String?

            public var egressIpv6Enable: Bool?

            public var expiredTime: String?

            public var httpsPolicies: String?

            public var IPV6AclId: String?

            public var IPV6AclName: String?

            public var IPV6AclStatus: String?

            public var IPV6AclType: String?

            public var instanceChargeType: String?

            public var instanceCidrBlock: String?

            public var instanceClusterId: String?

            public var instanceId: String?

            public var instanceName: String?

            public var instanceRpsLimit: Int32?

            public var instanceSpec: String?

            public var instanceSpecAttributes: DescribeInstancesResponseBody.Instances.InstanceAttribute.InstanceSpecAttributes?

            public var instanceType: String?

            public var internetEgressAddress: String?

            public var intranetSegments: String?

            public var maintainEndTime: String?

            public var maintainStartTime: String?

            public var networkInterfaceAttributes: DescribeInstancesResponseBody.Instances.InstanceAttribute.NetworkInterfaceAttributes?

            public var newVpcEgressAddress: String?

            public var privateDnsList: DescribeInstancesResponseBody.Instances.InstanceAttribute.PrivateDnsList?

            public var regionId: String?

            public var status: String?

            public var supportIpv6: Bool?

            public var tags: DescribeInstancesResponseBody.Instances.InstanceAttribute.Tags?

            public var userVpcId: String?

            public var userVswitchId: String?

            public var vpcEgressAddress: String?

            public var vpcIntranetEnable: Bool?

            public var vpcOwnerId: Int64?

            public var vpcSlbIntranetEnable: Bool?

            public var zoneId: String?

            public var zoneLocalName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.instanceSpecAttributes?.validate()
                try self.networkInterfaceAttributes?.validate()
                try self.privateDnsList?.validate()
                try self.tags?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.aclId != nil {
                    map["AclId"] = self.aclId!
                }
                if self.aclName != nil {
                    map["AclName"] = self.aclName!
                }
                if self.aclStatus != nil {
                    map["AclStatus"] = self.aclStatus!
                }
                if self.aclType != nil {
                    map["AclType"] = self.aclType!
                }
                if self.classicEgressAddress != nil {
                    map["ClassicEgressAddress"] = self.classicEgressAddress!
                }
                if self.connectCidrBlocks != nil {
                    map["ConnectCidrBlocks"] = self.connectCidrBlocks!
                }
                if self.connectVpcId != nil {
                    map["ConnectVpcId"] = self.connectVpcId!
                }
                if self.createdTime != nil {
                    map["CreatedTime"] = self.createdTime!
                }
                if self.dedicatedInstanceType != nil {
                    map["DedicatedInstanceType"] = self.dedicatedInstanceType!
                }
                if self.egressIpv6Enable != nil {
                    map["EgressIpv6Enable"] = self.egressIpv6Enable!
                }
                if self.expiredTime != nil {
                    map["ExpiredTime"] = self.expiredTime!
                }
                if self.httpsPolicies != nil {
                    map["HttpsPolicies"] = self.httpsPolicies!
                }
                if self.IPV6AclId != nil {
                    map["IPV6AclId"] = self.IPV6AclId!
                }
                if self.IPV6AclName != nil {
                    map["IPV6AclName"] = self.IPV6AclName!
                }
                if self.IPV6AclStatus != nil {
                    map["IPV6AclStatus"] = self.IPV6AclStatus!
                }
                if self.IPV6AclType != nil {
                    map["IPV6AclType"] = self.IPV6AclType!
                }
                if self.instanceChargeType != nil {
                    map["InstanceChargeType"] = self.instanceChargeType!
                }
                if self.instanceCidrBlock != nil {
                    map["InstanceCidrBlock"] = self.instanceCidrBlock!
                }
                if self.instanceClusterId != nil {
                    map["InstanceClusterId"] = self.instanceClusterId!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.instanceName != nil {
                    map["InstanceName"] = self.instanceName!
                }
                if self.instanceRpsLimit != nil {
                    map["InstanceRpsLimit"] = self.instanceRpsLimit!
                }
                if self.instanceSpec != nil {
                    map["InstanceSpec"] = self.instanceSpec!
                }
                if self.instanceSpecAttributes != nil {
                    map["InstanceSpecAttributes"] = self.instanceSpecAttributes?.toMap()
                }
                if self.instanceType != nil {
                    map["InstanceType"] = self.instanceType!
                }
                if self.internetEgressAddress != nil {
                    map["InternetEgressAddress"] = self.internetEgressAddress!
                }
                if self.intranetSegments != nil {
                    map["IntranetSegments"] = self.intranetSegments!
                }
                if self.maintainEndTime != nil {
                    map["MaintainEndTime"] = self.maintainEndTime!
                }
                if self.maintainStartTime != nil {
                    map["MaintainStartTime"] = self.maintainStartTime!
                }
                if self.networkInterfaceAttributes != nil {
                    map["NetworkInterfaceAttributes"] = self.networkInterfaceAttributes?.toMap()
                }
                if self.newVpcEgressAddress != nil {
                    map["NewVpcEgressAddress"] = self.newVpcEgressAddress!
                }
                if self.privateDnsList != nil {
                    map["PrivateDnsList"] = self.privateDnsList?.toMap()
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                if self.supportIpv6 != nil {
                    map["SupportIpv6"] = self.supportIpv6!
                }
                if self.tags != nil {
                    map["Tags"] = self.tags?.toMap()
                }
                if self.userVpcId != nil {
                    map["UserVpcId"] = self.userVpcId!
                }
                if self.userVswitchId != nil {
                    map["UserVswitchId"] = self.userVswitchId!
                }
                if self.vpcEgressAddress != nil {
                    map["VpcEgressAddress"] = self.vpcEgressAddress!
                }
                if self.vpcIntranetEnable != nil {
                    map["VpcIntranetEnable"] = self.vpcIntranetEnable!
                }
                if self.vpcOwnerId != nil {
                    map["VpcOwnerId"] = self.vpcOwnerId!
                }
                if self.vpcSlbIntranetEnable != nil {
                    map["VpcSlbIntranetEnable"] = self.vpcSlbIntranetEnable!
                }
                if self.zoneId != nil {
                    map["ZoneId"] = self.zoneId!
                }
                if self.zoneLocalName != nil {
                    map["ZoneLocalName"] = self.zoneLocalName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AclId"] as? String {
                    self.aclId = value
                }
                if let value = dict["AclName"] as? String {
                    self.aclName = value
                }
                if let value = dict["AclStatus"] as? String {
                    self.aclStatus = value
                }
                if let value = dict["AclType"] as? String {
                    self.aclType = value
                }
                if let value = dict["ClassicEgressAddress"] as? String {
                    self.classicEgressAddress = value
                }
                if let value = dict["ConnectCidrBlocks"] as? String {
                    self.connectCidrBlocks = value
                }
                if let value = dict["ConnectVpcId"] as? String {
                    self.connectVpcId = value
                }
                if let value = dict["CreatedTime"] as? String {
                    self.createdTime = value
                }
                if let value = dict["DedicatedInstanceType"] as? String {
                    self.dedicatedInstanceType = value
                }
                if let value = dict["EgressIpv6Enable"] as? Bool {
                    self.egressIpv6Enable = value
                }
                if let value = dict["ExpiredTime"] as? String {
                    self.expiredTime = value
                }
                if let value = dict["HttpsPolicies"] as? String {
                    self.httpsPolicies = value
                }
                if let value = dict["IPV6AclId"] as? String {
                    self.IPV6AclId = value
                }
                if let value = dict["IPV6AclName"] as? String {
                    self.IPV6AclName = value
                }
                if let value = dict["IPV6AclStatus"] as? String {
                    self.IPV6AclStatus = value
                }
                if let value = dict["IPV6AclType"] as? String {
                    self.IPV6AclType = value
                }
                if let value = dict["InstanceChargeType"] as? String {
                    self.instanceChargeType = value
                }
                if let value = dict["InstanceCidrBlock"] as? String {
                    self.instanceCidrBlock = value
                }
                if let value = dict["InstanceClusterId"] as? String {
                    self.instanceClusterId = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["InstanceName"] as? String {
                    self.instanceName = value
                }
                if let value = dict["InstanceRpsLimit"] as? Int32 {
                    self.instanceRpsLimit = value
                }
                if let value = dict["InstanceSpec"] as? String {
                    self.instanceSpec = value
                }
                if let value = dict["InstanceSpecAttributes"] as? [String: Any?] {
                    var model = DescribeInstancesResponseBody.Instances.InstanceAttribute.InstanceSpecAttributes()
                    model.fromMap(value)
                    self.instanceSpecAttributes = model
                }
                if let value = dict["InstanceType"] as? String {
                    self.instanceType = value
                }
                if let value = dict["InternetEgressAddress"] as? String {
                    self.internetEgressAddress = value
                }
                if let value = dict["IntranetSegments"] as? String {
                    self.intranetSegments = value
                }
                if let value = dict["MaintainEndTime"] as? String {
                    self.maintainEndTime = value
                }
                if let value = dict["MaintainStartTime"] as? String {
                    self.maintainStartTime = value
                }
                if let value = dict["NetworkInterfaceAttributes"] as? [String: Any?] {
                    var model = DescribeInstancesResponseBody.Instances.InstanceAttribute.NetworkInterfaceAttributes()
                    model.fromMap(value)
                    self.networkInterfaceAttributes = model
                }
                if let value = dict["NewVpcEgressAddress"] as? String {
                    self.newVpcEgressAddress = value
                }
                if let value = dict["PrivateDnsList"] as? [String: Any?] {
                    var model = DescribeInstancesResponseBody.Instances.InstanceAttribute.PrivateDnsList()
                    model.fromMap(value)
                    self.privateDnsList = model
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
                if let value = dict["SupportIpv6"] as? Bool {
                    self.supportIpv6 = value
                }
                if let value = dict["Tags"] as? [String: Any?] {
                    var model = DescribeInstancesResponseBody.Instances.InstanceAttribute.Tags()
                    model.fromMap(value)
                    self.tags = model
                }
                if let value = dict["UserVpcId"] as? String {
                    self.userVpcId = value
                }
                if let value = dict["UserVswitchId"] as? String {
                    self.userVswitchId = value
                }
                if let value = dict["VpcEgressAddress"] as? String {
                    self.vpcEgressAddress = value
                }
                if let value = dict["VpcIntranetEnable"] as? Bool {
                    self.vpcIntranetEnable = value
                }
                if let value = dict["VpcOwnerId"] as? Int64 {
                    self.vpcOwnerId = value
                }
                if let value = dict["VpcSlbIntranetEnable"] as? Bool {
                    self.vpcSlbIntranetEnable = value
                }
                if let value = dict["ZoneId"] as? String {
                    self.zoneId = value
                }
                if let value = dict["ZoneLocalName"] as? String {
                    self.zoneLocalName = value
                }
            }
        }
        public var instanceAttribute: [DescribeInstancesResponseBody.Instances.InstanceAttribute]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.instanceAttribute != nil {
                var tmp : [Any] = []
                for k in self.instanceAttribute! {
                    tmp.append(k.toMap())
                }
                map["InstanceAttribute"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["InstanceAttribute"] as? [Any?] {
                var tmp : [DescribeInstancesResponseBody.Instances.InstanceAttribute] = []
                for v in value {
                    if v != nil {
                        var model = DescribeInstancesResponseBody.Instances.InstanceAttribute()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.instanceAttribute = tmp
            }
        }
    }
    public var instances: DescribeInstancesResponseBody.Instances?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.instances?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instances != nil {
            map["Instances"] = self.instances?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Instances"] as? [String: Any?] {
            var model = DescribeInstancesResponseBody.Instances()
            model.fromMap(value)
            self.instances = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeInstancesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeInstancesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeInstancesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeIpControlPolicyItemsRequest : Tea.TeaModel {
    public var ipControlId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var policyItemId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ipControlId != nil {
            map["IpControlId"] = self.ipControlId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.policyItemId != nil {
            map["PolicyItemId"] = self.policyItemId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IpControlId"] as? String {
            self.ipControlId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["PolicyItemId"] as? String {
            self.policyItemId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeIpControlPolicyItemsResponseBody : Tea.TeaModel {
    public class IpControlPolicyItems : Tea.TeaModel {
        public class IpControlPolicyItem : Tea.TeaModel {
            public var appId: String?

            public var cidrIp: String?

            public var createTime: String?

            public var modifiedTime: String?

            public var policyItemId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.appId != nil {
                    map["AppId"] = self.appId!
                }
                if self.cidrIp != nil {
                    map["CidrIp"] = self.cidrIp!
                }
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.modifiedTime != nil {
                    map["ModifiedTime"] = self.modifiedTime!
                }
                if self.policyItemId != nil {
                    map["PolicyItemId"] = self.policyItemId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["AppId"] as? String {
                    self.appId = value
                }
                if let value = dict["CidrIp"] as? String {
                    self.cidrIp = value
                }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["ModifiedTime"] as? String {
                    self.modifiedTime = value
                }
                if let value = dict["PolicyItemId"] as? String {
                    self.policyItemId = value
                }
            }
        }
        public var ipControlPolicyItem: [DescribeIpControlPolicyItemsResponseBody.IpControlPolicyItems.IpControlPolicyItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ipControlPolicyItem != nil {
                var tmp : [Any] = []
                for k in self.ipControlPolicyItem! {
                    tmp.append(k.toMap())
                }
                map["IpControlPolicyItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["IpControlPolicyItem"] as? [Any?] {
                var tmp : [DescribeIpControlPolicyItemsResponseBody.IpControlPolicyItems.IpControlPolicyItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeIpControlPolicyItemsResponseBody.IpControlPolicyItems.IpControlPolicyItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.ipControlPolicyItem = tmp
            }
        }
    }
    public var ipControlPolicyItems: DescribeIpControlPolicyItemsResponseBody.IpControlPolicyItems?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.ipControlPolicyItems?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ipControlPolicyItems != nil {
            map["IpControlPolicyItems"] = self.ipControlPolicyItems?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IpControlPolicyItems"] as? [String: Any?] {
            var model = DescribeIpControlPolicyItemsResponseBody.IpControlPolicyItems()
            model.fromMap(value)
            self.ipControlPolicyItems = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeIpControlPolicyItemsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeIpControlPolicyItemsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeIpControlPolicyItemsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeIpControlsRequest : Tea.TeaModel {
    public var ipControlId: String?

    public var ipControlName: String?

    public var ipControlType: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ipControlId != nil {
            map["IpControlId"] = self.ipControlId!
        }
        if self.ipControlName != nil {
            map["IpControlName"] = self.ipControlName!
        }
        if self.ipControlType != nil {
            map["IpControlType"] = self.ipControlType!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IpControlId"] as? String {
            self.ipControlId = value
        }
        if let value = dict["IpControlName"] as? String {
            self.ipControlName = value
        }
        if let value = dict["IpControlType"] as? String {
            self.ipControlType = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeIpControlsResponseBody : Tea.TeaModel {
    public class IpControlInfos : Tea.TeaModel {
        public class IpControlInfo : Tea.TeaModel {
            public var createTime: String?

            public var description_: String?

            public var ipControlId: String?

            public var ipControlName: String?

            public var ipControlType: String?

            public var modifiedTime: String?

            public var regionId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.createTime != nil {
                    map["CreateTime"] = self.createTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.ipControlId != nil {
                    map["IpControlId"] = self.ipControlId!
                }
                if self.ipControlName != nil {
                    map["IpControlName"] = self.ipControlName!
                }
                if self.ipControlType != nil {
                    map["IpControlType"] = self.ipControlType!
                }
                if self.modifiedTime != nil {
                    map["ModifiedTime"] = self.modifiedTime!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CreateTime"] as? String {
                    self.createTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["IpControlId"] as? String {
                    self.ipControlId = value
                }
                if let value = dict["IpControlName"] as? String {
                    self.ipControlName = value
                }
                if let value = dict["IpControlType"] as? String {
                    self.ipControlType = value
                }
                if let value = dict["ModifiedTime"] as? String {
                    self.modifiedTime = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
            }
        }
        public var ipControlInfo: [DescribeIpControlsResponseBody.IpControlInfos.IpControlInfo]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.ipControlInfo != nil {
                var tmp : [Any] = []
                for k in self.ipControlInfo! {
                    tmp.append(k.toMap())
                }
                map["IpControlInfo"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["IpControlInfo"] as? [Any?] {
                var tmp : [DescribeIpControlsResponseBody.IpControlInfos.IpControlInfo] = []
                for v in value {
                    if v != nil {
                        var model = DescribeIpControlsResponseBody.IpControlInfos.IpControlInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.ipControlInfo = tmp
            }
        }
    }
    public var ipControlInfos: DescribeIpControlsResponseBody.IpControlInfos?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.ipControlInfos?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ipControlInfos != nil {
            map["IpControlInfos"] = self.ipControlInfos?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IpControlInfos"] as? [String: Any?] {
            var model = DescribeIpControlsResponseBody.IpControlInfos()
            model.fromMap(value)
            self.ipControlInfos = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeIpControlsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeIpControlsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeIpControlsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeLogConfigRequest : Tea.TeaModel {
    public var logType: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.logType != nil {
            map["LogType"] = self.logType!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["LogType"] as? String {
            self.logType = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeLogConfigResponseBody : Tea.TeaModel {
    public class LogInfos : Tea.TeaModel {
        public class LogInfo : Tea.TeaModel {
            public var logType: String?

            public var regionId: String?

            public var slsLogStore: String?

            public var slsProject: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.logType != nil {
                    map["LogType"] = self.logType!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.slsLogStore != nil {
                    map["SlsLogStore"] = self.slsLogStore!
                }
                if self.slsProject != nil {
                    map["SlsProject"] = self.slsProject!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["LogType"] as? String {
                    self.logType = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["SlsLogStore"] as? String {
                    self.slsLogStore = value
                }
                if let value = dict["SlsProject"] as? String {
                    self.slsProject = value
                }
            }
        }
        public var logInfo: [DescribeLogConfigResponseBody.LogInfos.LogInfo]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.logInfo != nil {
                var tmp : [Any] = []
                for k in self.logInfo! {
                    tmp.append(k.toMap())
                }
                map["LogInfo"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["LogInfo"] as? [Any?] {
                var tmp : [DescribeLogConfigResponseBody.LogInfos.LogInfo] = []
                for v in value {
                    if v != nil {
                        var model = DescribeLogConfigResponseBody.LogInfos.LogInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.logInfo = tmp
            }
        }
    }
    public var logInfos: DescribeLogConfigResponseBody.LogInfos?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.logInfos?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.logInfos != nil {
            map["LogInfos"] = self.logInfos?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["LogInfos"] as? [String: Any?] {
            var model = DescribeLogConfigResponseBody.LogInfos()
            model.fromMap(value)
            self.logInfos = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeLogConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeLogConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeLogConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeMarketRemainsQuotaRequest : Tea.TeaModel {
    public var domainName: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeMarketRemainsQuotaResponseBody : Tea.TeaModel {
    public var remainsQuota: Int64?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.remainsQuota != nil {
            map["RemainsQuota"] = self.remainsQuota!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RemainsQuota"] as? Int64 {
            self.remainsQuota = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeMarketRemainsQuotaResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeMarketRemainsQuotaResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeMarketRemainsQuotaResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeModelsRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var groupId: String?

    public var modelId: String?

    public var modelName: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var tag: [DescribeModelsRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.modelId != nil {
            map["ModelId"] = self.modelId!
        }
        if self.modelName != nil {
            map["ModelName"] = self.modelName!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["ModelId"] as? String {
            self.modelId = value
        }
        if let value = dict["ModelName"] as? String {
            self.modelName = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [DescribeModelsRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = DescribeModelsRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class DescribeModelsResponseBody : Tea.TeaModel {
    public class ModelDetails : Tea.TeaModel {
        public class ModelDetail : Tea.TeaModel {
            public class Tags : Tea.TeaModel {
                public class TagInfo : Tea.TeaModel {
                    public var key: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var tagInfo: [DescribeModelsResponseBody.ModelDetails.ModelDetail.Tags.TagInfo]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.tagInfo != nil {
                        var tmp : [Any] = []
                        for k in self.tagInfo! {
                            tmp.append(k.toMap())
                        }
                        map["TagInfo"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["TagInfo"] as? [Any?] {
                        var tmp : [DescribeModelsResponseBody.ModelDetails.ModelDetail.Tags.TagInfo] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeModelsResponseBody.ModelDetails.ModelDetail.Tags.TagInfo()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.tagInfo = tmp
                    }
                }
            }
            public var createdTime: String?

            public var description_: String?

            public var groupId: String?

            public var modelId: String?

            public var modelName: String?

            public var modelRef: String?

            public var modifiedTime: String?

            public var schema: String?

            public var tags: DescribeModelsResponseBody.ModelDetails.ModelDetail.Tags?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.tags?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.createdTime != nil {
                    map["CreatedTime"] = self.createdTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.modelId != nil {
                    map["ModelId"] = self.modelId!
                }
                if self.modelName != nil {
                    map["ModelName"] = self.modelName!
                }
                if self.modelRef != nil {
                    map["ModelRef"] = self.modelRef!
                }
                if self.modifiedTime != nil {
                    map["ModifiedTime"] = self.modifiedTime!
                }
                if self.schema != nil {
                    map["Schema"] = self.schema!
                }
                if self.tags != nil {
                    map["Tags"] = self.tags?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CreatedTime"] as? String {
                    self.createdTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["ModelId"] as? String {
                    self.modelId = value
                }
                if let value = dict["ModelName"] as? String {
                    self.modelName = value
                }
                if let value = dict["ModelRef"] as? String {
                    self.modelRef = value
                }
                if let value = dict["ModifiedTime"] as? String {
                    self.modifiedTime = value
                }
                if let value = dict["Schema"] as? String {
                    self.schema = value
                }
                if let value = dict["Tags"] as? [String: Any?] {
                    var model = DescribeModelsResponseBody.ModelDetails.ModelDetail.Tags()
                    model.fromMap(value)
                    self.tags = model
                }
            }
        }
        public var modelDetail: [DescribeModelsResponseBody.ModelDetails.ModelDetail]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.modelDetail != nil {
                var tmp : [Any] = []
                for k in self.modelDetail! {
                    tmp.append(k.toMap())
                }
                map["ModelDetail"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ModelDetail"] as? [Any?] {
                var tmp : [DescribeModelsResponseBody.ModelDetails.ModelDetail] = []
                for v in value {
                    if v != nil {
                        var model = DescribeModelsResponseBody.ModelDetails.ModelDetail()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.modelDetail = tmp
            }
        }
    }
    public var modelDetails: DescribeModelsResponseBody.ModelDetails?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.modelDetails?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.modelDetails != nil {
            map["ModelDetails"] = self.modelDetails?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ModelDetails"] as? [String: Any?] {
            var model = DescribeModelsResponseBody.ModelDetails()
            model.fromMap(value)
            self.modelDetails = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeModelsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeModelsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeModelsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePluginApisRequest : Tea.TeaModel {
    public var apiId: String?

    public var apiName: String?

    public var description_: String?

    public var groupId: String?

    public var method: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var path: String?

    public var pluginId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.apiName != nil {
            map["ApiName"] = self.apiName!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.method != nil {
            map["Method"] = self.method!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.path != nil {
            map["Path"] = self.path!
        }
        if self.pluginId != nil {
            map["PluginId"] = self.pluginId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["ApiName"] as? String {
            self.apiName = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Method"] as? String {
            self.method = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Path"] as? String {
            self.path = value
        }
        if let value = dict["PluginId"] as? String {
            self.pluginId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribePluginApisResponseBody : Tea.TeaModel {
    public class ApiSummarys : Tea.TeaModel {
        public class ApiPluginSummary : Tea.TeaModel {
            public var apiId: String?

            public var apiName: String?

            public var description_: String?

            public var groupId: String?

            public var groupName: String?

            public var method: String?

            public var path: String?

            public var regionId: String?

            public var stageAlias: String?

            public var stageName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiId != nil {
                    map["ApiId"] = self.apiId!
                }
                if self.apiName != nil {
                    map["ApiName"] = self.apiName!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupName != nil {
                    map["GroupName"] = self.groupName!
                }
                if self.method != nil {
                    map["Method"] = self.method!
                }
                if self.path != nil {
                    map["Path"] = self.path!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.stageAlias != nil {
                    map["StageAlias"] = self.stageAlias!
                }
                if self.stageName != nil {
                    map["StageName"] = self.stageName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiId"] as? String {
                    self.apiId = value
                }
                if let value = dict["ApiName"] as? String {
                    self.apiName = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["GroupName"] as? String {
                    self.groupName = value
                }
                if let value = dict["Method"] as? String {
                    self.method = value
                }
                if let value = dict["Path"] as? String {
                    self.path = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["StageAlias"] as? String {
                    self.stageAlias = value
                }
                if let value = dict["StageName"] as? String {
                    self.stageName = value
                }
            }
        }
        public var apiPluginSummary: [DescribePluginApisResponseBody.ApiSummarys.ApiPluginSummary]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiPluginSummary != nil {
                var tmp : [Any] = []
                for k in self.apiPluginSummary! {
                    tmp.append(k.toMap())
                }
                map["ApiPluginSummary"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiPluginSummary"] as? [Any?] {
                var tmp : [DescribePluginApisResponseBody.ApiSummarys.ApiPluginSummary] = []
                for v in value {
                    if v != nil {
                        var model = DescribePluginApisResponseBody.ApiSummarys.ApiPluginSummary()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.apiPluginSummary = tmp
            }
        }
    }
    public var apiSummarys: DescribePluginApisResponseBody.ApiSummarys?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.apiSummarys?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiSummarys != nil {
            map["ApiSummarys"] = self.apiSummarys?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiSummarys"] as? [String: Any?] {
            var model = DescribePluginApisResponseBody.ApiSummarys()
            model.fromMap(value)
            self.apiSummarys = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribePluginApisResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePluginApisResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePluginApisResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePluginGroupsRequest : Tea.TeaModel {
    public var description_: String?

    public var groupId: String?

    public var groupName: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var pluginId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.pluginId != nil {
            map["PluginId"] = self.pluginId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["PluginId"] as? String {
            self.pluginId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribePluginGroupsResponseBody : Tea.TeaModel {
    public class GroupSummarys : Tea.TeaModel {
        public class GroupPluginSummary : Tea.TeaModel {
            public var basePath: String?

            public var description_: String?

            public var groupId: String?

            public var groupName: String?

            public var regionId: String?

            public var stageAlias: String?

            public var stageName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.basePath != nil {
                    map["BasePath"] = self.basePath!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupName != nil {
                    map["GroupName"] = self.groupName!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.stageAlias != nil {
                    map["StageAlias"] = self.stageAlias!
                }
                if self.stageName != nil {
                    map["StageName"] = self.stageName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BasePath"] as? String {
                    self.basePath = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["GroupName"] as? String {
                    self.groupName = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["StageAlias"] as? String {
                    self.stageAlias = value
                }
                if let value = dict["StageName"] as? String {
                    self.stageName = value
                }
            }
        }
        public var groupPluginSummary: [DescribePluginGroupsResponseBody.GroupSummarys.GroupPluginSummary]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.groupPluginSummary != nil {
                var tmp : [Any] = []
                for k in self.groupPluginSummary! {
                    tmp.append(k.toMap())
                }
                map["GroupPluginSummary"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["GroupPluginSummary"] as? [Any?] {
                var tmp : [DescribePluginGroupsResponseBody.GroupSummarys.GroupPluginSummary] = []
                for v in value {
                    if v != nil {
                        var model = DescribePluginGroupsResponseBody.GroupSummarys.GroupPluginSummary()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.groupPluginSummary = tmp
            }
        }
    }
    public var groupSummarys: DescribePluginGroupsResponseBody.GroupSummarys?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.groupSummarys?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupSummarys != nil {
            map["GroupSummarys"] = self.groupSummarys?.toMap()
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupSummarys"] as? [String: Any?] {
            var model = DescribePluginGroupsResponseBody.GroupSummarys()
            model.fromMap(value)
            self.groupSummarys = model
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribePluginGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePluginGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePluginGroupsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePluginSchemasRequest : Tea.TeaModel {
    public var language: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribePluginSchemasResponseBody : Tea.TeaModel {
    public class PluginSchemas : Tea.TeaModel {
        public class PluginSchema : Tea.TeaModel {
            public var description_: String?

            public var documentId: String?

            public var name: String?

            public var supportClassic: Bool?

            public var title: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.documentId != nil {
                    map["DocumentId"] = self.documentId!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.supportClassic != nil {
                    map["SupportClassic"] = self.supportClassic!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DocumentId"] as? String {
                    self.documentId = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["SupportClassic"] as? Bool {
                    self.supportClassic = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
            }
        }
        public var pluginSchema: [DescribePluginSchemasResponseBody.PluginSchemas.PluginSchema]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.pluginSchema != nil {
                var tmp : [Any] = []
                for k in self.pluginSchema! {
                    tmp.append(k.toMap())
                }
                map["PluginSchema"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PluginSchema"] as? [Any?] {
                var tmp : [DescribePluginSchemasResponseBody.PluginSchemas.PluginSchema] = []
                for v in value {
                    if v != nil {
                        var model = DescribePluginSchemasResponseBody.PluginSchemas.PluginSchema()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.pluginSchema = tmp
            }
        }
    }
    public var pluginSchemas: DescribePluginSchemasResponseBody.PluginSchemas?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.pluginSchemas?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pluginSchemas != nil {
            map["PluginSchemas"] = self.pluginSchemas?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PluginSchemas"] as? [String: Any?] {
            var model = DescribePluginSchemasResponseBody.PluginSchemas()
            model.fromMap(value)
            self.pluginSchemas = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribePluginSchemasResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePluginSchemasResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePluginSchemasResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePluginTemplatesRequest : Tea.TeaModel {
    public var language: String?

    public var pluginName: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.pluginName != nil {
            map["PluginName"] = self.pluginName!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["PluginName"] as? String {
            self.pluginName = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribePluginTemplatesResponseBody : Tea.TeaModel {
    public class Templates : Tea.TeaModel {
        public class Template : Tea.TeaModel {
            public var description_: String?

            public var documentAnchor: String?

            public var documentId: String?

            public var sample: String?

            public var title: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.documentAnchor != nil {
                    map["DocumentAnchor"] = self.documentAnchor!
                }
                if self.documentId != nil {
                    map["DocumentId"] = self.documentId!
                }
                if self.sample != nil {
                    map["Sample"] = self.sample!
                }
                if self.title != nil {
                    map["Title"] = self.title!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["DocumentAnchor"] as? String {
                    self.documentAnchor = value
                }
                if let value = dict["DocumentId"] as? String {
                    self.documentId = value
                }
                if let value = dict["Sample"] as? String {
                    self.sample = value
                }
                if let value = dict["Title"] as? String {
                    self.title = value
                }
            }
        }
        public var template: [DescribePluginTemplatesResponseBody.Templates.Template]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.template != nil {
                var tmp : [Any] = []
                for k in self.template! {
                    tmp.append(k.toMap())
                }
                map["Template"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Template"] as? [Any?] {
                var tmp : [DescribePluginTemplatesResponseBody.Templates.Template] = []
                for v in value {
                    if v != nil {
                        var model = DescribePluginTemplatesResponseBody.Templates.Template()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.template = tmp
            }
        }
    }
    public var requestId: String?

    public var templates: DescribePluginTemplatesResponseBody.Templates?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.templates?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.templates != nil {
            map["Templates"] = self.templates?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Templates"] as? [String: Any?] {
            var model = DescribePluginTemplatesResponseBody.Templates()
            model.fromMap(value)
            self.templates = model
        }
    }
}

public class DescribePluginTemplatesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePluginTemplatesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePluginTemplatesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePluginsRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var pluginId: String?

    public var pluginName: String?

    public var pluginType: String?

    public var securityToken: String?

    public var tag: [DescribePluginsRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.pluginId != nil {
            map["PluginId"] = self.pluginId!
        }
        if self.pluginName != nil {
            map["PluginName"] = self.pluginName!
        }
        if self.pluginType != nil {
            map["PluginType"] = self.pluginType!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["PluginId"] as? String {
            self.pluginId = value
        }
        if let value = dict["PluginName"] as? String {
            self.pluginName = value
        }
        if let value = dict["PluginType"] as? String {
            self.pluginType = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [DescribePluginsRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = DescribePluginsRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class DescribePluginsResponseBody : Tea.TeaModel {
    public class Plugins : Tea.TeaModel {
        public class PluginAttribute : Tea.TeaModel {
            public class Tags : Tea.TeaModel {
                public class TagInfo : Tea.TeaModel {
                    public var key: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var tagInfo: [DescribePluginsResponseBody.Plugins.PluginAttribute.Tags.TagInfo]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.tagInfo != nil {
                        var tmp : [Any] = []
                        for k in self.tagInfo! {
                            tmp.append(k.toMap())
                        }
                        map["TagInfo"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["TagInfo"] as? [Any?] {
                        var tmp : [DescribePluginsResponseBody.Plugins.PluginAttribute.Tags.TagInfo] = []
                        for v in value {
                            if v != nil {
                                var model = DescribePluginsResponseBody.Plugins.PluginAttribute.Tags.TagInfo()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.tagInfo = tmp
                    }
                }
            }
            public var createdTime: String?

            public var description_: String?

            public var modifiedTime: String?

            public var pluginData: String?

            public var pluginId: String?

            public var pluginName: String?

            public var pluginType: String?

            public var regionId: String?

            public var tags: DescribePluginsResponseBody.Plugins.PluginAttribute.Tags?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.tags?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.createdTime != nil {
                    map["CreatedTime"] = self.createdTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.modifiedTime != nil {
                    map["ModifiedTime"] = self.modifiedTime!
                }
                if self.pluginData != nil {
                    map["PluginData"] = self.pluginData!
                }
                if self.pluginId != nil {
                    map["PluginId"] = self.pluginId!
                }
                if self.pluginName != nil {
                    map["PluginName"] = self.pluginName!
                }
                if self.pluginType != nil {
                    map["PluginType"] = self.pluginType!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.tags != nil {
                    map["Tags"] = self.tags?.toMap()
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CreatedTime"] as? String {
                    self.createdTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["ModifiedTime"] as? String {
                    self.modifiedTime = value
                }
                if let value = dict["PluginData"] as? String {
                    self.pluginData = value
                }
                if let value = dict["PluginId"] as? String {
                    self.pluginId = value
                }
                if let value = dict["PluginName"] as? String {
                    self.pluginName = value
                }
                if let value = dict["PluginType"] as? String {
                    self.pluginType = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["Tags"] as? [String: Any?] {
                    var model = DescribePluginsResponseBody.Plugins.PluginAttribute.Tags()
                    model.fromMap(value)
                    self.tags = model
                }
            }
        }
        public var pluginAttribute: [DescribePluginsResponseBody.Plugins.PluginAttribute]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.pluginAttribute != nil {
                var tmp : [Any] = []
                for k in self.pluginAttribute! {
                    tmp.append(k.toMap())
                }
                map["PluginAttribute"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PluginAttribute"] as? [Any?] {
                var tmp : [DescribePluginsResponseBody.Plugins.PluginAttribute] = []
                for v in value {
                    if v != nil {
                        var model = DescribePluginsResponseBody.Plugins.PluginAttribute()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.pluginAttribute = tmp
            }
        }
    }
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var plugins: DescribePluginsResponseBody.Plugins?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.plugins?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.plugins != nil {
            map["Plugins"] = self.plugins?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Plugins"] as? [String: Any?] {
            var model = DescribePluginsResponseBody.Plugins()
            model.fromMap(value)
            self.plugins = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribePluginsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePluginsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePluginsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePluginsByApiRequest : Tea.TeaModel {
    public var apiId: String?

    public var groupId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class DescribePluginsByApiResponseBody : Tea.TeaModel {
    public class Plugins : Tea.TeaModel {
        public class PluginAttribute : Tea.TeaModel {
            public var createdTime: String?

            public var description_: String?

            public var modifiedTime: String?

            public var pluginData: String?

            public var pluginId: String?

            public var pluginName: String?

            public var pluginType: String?

            public var regionId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.createdTime != nil {
                    map["CreatedTime"] = self.createdTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.modifiedTime != nil {
                    map["ModifiedTime"] = self.modifiedTime!
                }
                if self.pluginData != nil {
                    map["PluginData"] = self.pluginData!
                }
                if self.pluginId != nil {
                    map["PluginId"] = self.pluginId!
                }
                if self.pluginName != nil {
                    map["PluginName"] = self.pluginName!
                }
                if self.pluginType != nil {
                    map["PluginType"] = self.pluginType!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CreatedTime"] as? String {
                    self.createdTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["ModifiedTime"] as? String {
                    self.modifiedTime = value
                }
                if let value = dict["PluginData"] as? String {
                    self.pluginData = value
                }
                if let value = dict["PluginId"] as? String {
                    self.pluginId = value
                }
                if let value = dict["PluginName"] as? String {
                    self.pluginName = value
                }
                if let value = dict["PluginType"] as? String {
                    self.pluginType = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
            }
        }
        public var pluginAttribute: [DescribePluginsByApiResponseBody.Plugins.PluginAttribute]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.pluginAttribute != nil {
                var tmp : [Any] = []
                for k in self.pluginAttribute! {
                    tmp.append(k.toMap())
                }
                map["PluginAttribute"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PluginAttribute"] as? [Any?] {
                var tmp : [DescribePluginsByApiResponseBody.Plugins.PluginAttribute] = []
                for v in value {
                    if v != nil {
                        var model = DescribePluginsByApiResponseBody.Plugins.PluginAttribute()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.pluginAttribute = tmp
            }
        }
    }
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var plugins: DescribePluginsByApiResponseBody.Plugins?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.plugins?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.plugins != nil {
            map["Plugins"] = self.plugins?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Plugins"] as? [String: Any?] {
            var model = DescribePluginsByApiResponseBody.Plugins()
            model.fromMap(value)
            self.plugins = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribePluginsByApiResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePluginsByApiResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePluginsByApiResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePluginsByGroupRequest : Tea.TeaModel {
    public var groupId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class DescribePluginsByGroupResponseBody : Tea.TeaModel {
    public class Plugins : Tea.TeaModel {
        public class PluginAttribute : Tea.TeaModel {
            public var createdTime: String?

            public var description_: String?

            public var modifiedTime: String?

            public var pluginData: String?

            public var pluginId: String?

            public var pluginName: String?

            public var pluginType: String?

            public var regionId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.createdTime != nil {
                    map["CreatedTime"] = self.createdTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.modifiedTime != nil {
                    map["ModifiedTime"] = self.modifiedTime!
                }
                if self.pluginData != nil {
                    map["PluginData"] = self.pluginData!
                }
                if self.pluginId != nil {
                    map["PluginId"] = self.pluginId!
                }
                if self.pluginName != nil {
                    map["PluginName"] = self.pluginName!
                }
                if self.pluginType != nil {
                    map["PluginType"] = self.pluginType!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CreatedTime"] as? String {
                    self.createdTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["ModifiedTime"] as? String {
                    self.modifiedTime = value
                }
                if let value = dict["PluginData"] as? String {
                    self.pluginData = value
                }
                if let value = dict["PluginId"] as? String {
                    self.pluginId = value
                }
                if let value = dict["PluginName"] as? String {
                    self.pluginName = value
                }
                if let value = dict["PluginType"] as? String {
                    self.pluginType = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
            }
        }
        public var pluginAttribute: [DescribePluginsByGroupResponseBody.Plugins.PluginAttribute]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.pluginAttribute != nil {
                var tmp : [Any] = []
                for k in self.pluginAttribute! {
                    tmp.append(k.toMap())
                }
                map["PluginAttribute"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PluginAttribute"] as? [Any?] {
                var tmp : [DescribePluginsByGroupResponseBody.Plugins.PluginAttribute] = []
                for v in value {
                    if v != nil {
                        var model = DescribePluginsByGroupResponseBody.Plugins.PluginAttribute()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.pluginAttribute = tmp
            }
        }
    }
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var plugins: DescribePluginsByGroupResponseBody.Plugins?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.plugins?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.plugins != nil {
            map["Plugins"] = self.plugins?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Plugins"] as? [String: Any?] {
            var model = DescribePluginsByGroupResponseBody.Plugins()
            model.fromMap(value)
            self.plugins = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribePluginsByGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePluginsByGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePluginsByGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePurchasedApiGroupRequest : Tea.TeaModel {
    public var groupId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribePurchasedApiGroupResponseBody : Tea.TeaModel {
    public class Domains : Tea.TeaModel {
        public class DomainItem : Tea.TeaModel {
            public var domainName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.domainName != nil {
                    map["DomainName"] = self.domainName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DomainName"] as? String {
                    self.domainName = value
                }
            }
        }
        public var domainItem: [DescribePurchasedApiGroupResponseBody.Domains.DomainItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.domainItem != nil {
                var tmp : [Any] = []
                for k in self.domainItem! {
                    tmp.append(k.toMap())
                }
                map["DomainItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["DomainItem"] as? [Any?] {
                var tmp : [DescribePurchasedApiGroupResponseBody.Domains.DomainItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribePurchasedApiGroupResponseBody.Domains.DomainItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.domainItem = tmp
            }
        }
    }
    public var description_: String?

    public var domains: DescribePurchasedApiGroupResponseBody.Domains?

    public var groupId: String?

    public var groupName: String?

    public var purchasedTime: String?

    public var regionId: String?

    public var requestId: String?

    public var status: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.domains?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.domains != nil {
            map["Domains"] = self.domains?.toMap()
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.purchasedTime != nil {
            map["PurchasedTime"] = self.purchasedTime!
        }
        if self.regionId != nil {
            map["RegionId"] = self.regionId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.status != nil {
            map["Status"] = self.status!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Domains"] as? [String: Any?] {
            var model = DescribePurchasedApiGroupResponseBody.Domains()
            model.fromMap(value)
            self.domains = model
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["PurchasedTime"] as? String {
            self.purchasedTime = value
        }
        if let value = dict["RegionId"] as? String {
            self.regionId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Status"] as? String {
            self.status = value
        }
    }
}

public class DescribePurchasedApiGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePurchasedApiGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePurchasedApiGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePurchasedApiGroupsRequest : Tea.TeaModel {
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribePurchasedApiGroupsResponseBody : Tea.TeaModel {
    public class PurchasedApiGroupAttributes : Tea.TeaModel {
        public class PurchasedApiGroupAttribute : Tea.TeaModel {
            public var billingType: String?

            public var description_: String?

            public var expireTime: String?

            public var groupId: String?

            public var groupName: String?

            public var invokeTimesMax: Int64?

            public var invokeTimesNow: Int64?

            public var purchasedTime: String?

            public var regionId: String?

            public var status: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.billingType != nil {
                    map["BillingType"] = self.billingType!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.expireTime != nil {
                    map["ExpireTime"] = self.expireTime!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupName != nil {
                    map["GroupName"] = self.groupName!
                }
                if self.invokeTimesMax != nil {
                    map["InvokeTimesMax"] = self.invokeTimesMax!
                }
                if self.invokeTimesNow != nil {
                    map["InvokeTimesNow"] = self.invokeTimesNow!
                }
                if self.purchasedTime != nil {
                    map["PurchasedTime"] = self.purchasedTime!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.status != nil {
                    map["Status"] = self.status!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BillingType"] as? String {
                    self.billingType = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["ExpireTime"] as? String {
                    self.expireTime = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["GroupName"] as? String {
                    self.groupName = value
                }
                if let value = dict["InvokeTimesMax"] as? Int64 {
                    self.invokeTimesMax = value
                }
                if let value = dict["InvokeTimesNow"] as? Int64 {
                    self.invokeTimesNow = value
                }
                if let value = dict["PurchasedTime"] as? String {
                    self.purchasedTime = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["Status"] as? String {
                    self.status = value
                }
            }
        }
        public var purchasedApiGroupAttribute: [DescribePurchasedApiGroupsResponseBody.PurchasedApiGroupAttributes.PurchasedApiGroupAttribute]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.purchasedApiGroupAttribute != nil {
                var tmp : [Any] = []
                for k in self.purchasedApiGroupAttribute! {
                    tmp.append(k.toMap())
                }
                map["PurchasedApiGroupAttribute"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PurchasedApiGroupAttribute"] as? [Any?] {
                var tmp : [DescribePurchasedApiGroupsResponseBody.PurchasedApiGroupAttributes.PurchasedApiGroupAttribute] = []
                for v in value {
                    if v != nil {
                        var model = DescribePurchasedApiGroupsResponseBody.PurchasedApiGroupAttributes.PurchasedApiGroupAttribute()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.purchasedApiGroupAttribute = tmp
            }
        }
    }
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var purchasedApiGroupAttributes: DescribePurchasedApiGroupsResponseBody.PurchasedApiGroupAttributes?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.purchasedApiGroupAttributes?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.purchasedApiGroupAttributes != nil {
            map["PurchasedApiGroupAttributes"] = self.purchasedApiGroupAttributes?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["PurchasedApiGroupAttributes"] as? [String: Any?] {
            var model = DescribePurchasedApiGroupsResponseBody.PurchasedApiGroupAttributes()
            model.fromMap(value)
            self.purchasedApiGroupAttributes = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribePurchasedApiGroupsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePurchasedApiGroupsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePurchasedApiGroupsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribePurchasedApisRequest : Tea.TeaModel {
    public var apiId: String?

    public var apiName: String?

    public var groupId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public var stageName: String?

    public var visibility: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.apiName != nil {
            map["ApiName"] = self.apiName!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        if self.visibility != nil {
            map["Visibility"] = self.visibility!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["ApiName"] as? String {
            self.apiName = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
        if let value = dict["Visibility"] as? String {
            self.visibility = value
        }
    }
}

public class DescribePurchasedApisResponseBody : Tea.TeaModel {
    public class PurchasedApis : Tea.TeaModel {
        public class PurchasedApi : Tea.TeaModel {
            public var apiId: String?

            public var apiName: String?

            public var deployedTime: String?

            public var description_: String?

            public var groupId: String?

            public var groupName: String?

            public var modifiedTime: String?

            public var purchasedTime: String?

            public var regionId: String?

            public var stageName: String?

            public var visibility: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiId != nil {
                    map["ApiId"] = self.apiId!
                }
                if self.apiName != nil {
                    map["ApiName"] = self.apiName!
                }
                if self.deployedTime != nil {
                    map["DeployedTime"] = self.deployedTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupName != nil {
                    map["GroupName"] = self.groupName!
                }
                if self.modifiedTime != nil {
                    map["ModifiedTime"] = self.modifiedTime!
                }
                if self.purchasedTime != nil {
                    map["PurchasedTime"] = self.purchasedTime!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.stageName != nil {
                    map["StageName"] = self.stageName!
                }
                if self.visibility != nil {
                    map["Visibility"] = self.visibility!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiId"] as? String {
                    self.apiId = value
                }
                if let value = dict["ApiName"] as? String {
                    self.apiName = value
                }
                if let value = dict["DeployedTime"] as? String {
                    self.deployedTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["GroupName"] as? String {
                    self.groupName = value
                }
                if let value = dict["ModifiedTime"] as? String {
                    self.modifiedTime = value
                }
                if let value = dict["PurchasedTime"] as? String {
                    self.purchasedTime = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["StageName"] as? String {
                    self.stageName = value
                }
                if let value = dict["Visibility"] as? String {
                    self.visibility = value
                }
            }
        }
        public var purchasedApi: [DescribePurchasedApisResponseBody.PurchasedApis.PurchasedApi]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.purchasedApi != nil {
                var tmp : [Any] = []
                for k in self.purchasedApi! {
                    tmp.append(k.toMap())
                }
                map["PurchasedApi"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["PurchasedApi"] as? [Any?] {
                var tmp : [DescribePurchasedApisResponseBody.PurchasedApis.PurchasedApi] = []
                for v in value {
                    if v != nil {
                        var model = DescribePurchasedApisResponseBody.PurchasedApis.PurchasedApi()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.purchasedApi = tmp
            }
        }
    }
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var purchasedApis: DescribePurchasedApisResponseBody.PurchasedApis?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.purchasedApis?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.purchasedApis != nil {
            map["PurchasedApis"] = self.purchasedApis?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["PurchasedApis"] as? [String: Any?] {
            var model = DescribePurchasedApisResponseBody.PurchasedApis()
            model.fromMap(value)
            self.purchasedApis = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribePurchasedApisResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribePurchasedApisResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribePurchasedApisResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeRegionsRequest : Tea.TeaModel {
    public var language: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeRegionsResponseBody : Tea.TeaModel {
    public class Regions : Tea.TeaModel {
        public class Region : Tea.TeaModel {
            public var localName: String?

            public var regionEndpoint: String?

            public var regionId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.localName != nil {
                    map["LocalName"] = self.localName!
                }
                if self.regionEndpoint != nil {
                    map["RegionEndpoint"] = self.regionEndpoint!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["LocalName"] as? String {
                    self.localName = value
                }
                if let value = dict["RegionEndpoint"] as? String {
                    self.regionEndpoint = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
            }
        }
        public var region: [DescribeRegionsResponseBody.Regions.Region]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.region != nil {
                var tmp : [Any] = []
                for k in self.region! {
                    tmp.append(k.toMap())
                }
                map["Region"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Region"] as? [Any?] {
                var tmp : [DescribeRegionsResponseBody.Regions.Region] = []
                for v in value {
                    if v != nil {
                        var model = DescribeRegionsResponseBody.Regions.Region()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.region = tmp
            }
        }
    }
    public var regions: DescribeRegionsResponseBody.Regions?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.regions?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.regions != nil {
            map["Regions"] = self.regions?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Regions"] as? [String: Any?] {
            var model = DescribeRegionsResponseBody.Regions()
            model.fromMap(value)
            self.regions = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeRegionsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeRegionsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeRegionsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSignaturesRequest : Tea.TeaModel {
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public var signatureId: String?

    public var signatureName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.signatureId != nil {
            map["SignatureId"] = self.signatureId!
        }
        if self.signatureName != nil {
            map["SignatureName"] = self.signatureName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["SignatureId"] as? String {
            self.signatureId = value
        }
        if let value = dict["SignatureName"] as? String {
            self.signatureName = value
        }
    }
}

public class DescribeSignaturesResponseBody : Tea.TeaModel {
    public class SignatureInfos : Tea.TeaModel {
        public class SignatureInfo : Tea.TeaModel {
            public var createdTime: String?

            public var modifiedTime: String?

            public var regionId: String?

            public var signatureId: String?

            public var signatureKey: String?

            public var signatureName: String?

            public var signatureSecret: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.createdTime != nil {
                    map["CreatedTime"] = self.createdTime!
                }
                if self.modifiedTime != nil {
                    map["ModifiedTime"] = self.modifiedTime!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.signatureId != nil {
                    map["SignatureId"] = self.signatureId!
                }
                if self.signatureKey != nil {
                    map["SignatureKey"] = self.signatureKey!
                }
                if self.signatureName != nil {
                    map["SignatureName"] = self.signatureName!
                }
                if self.signatureSecret != nil {
                    map["SignatureSecret"] = self.signatureSecret!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CreatedTime"] as? String {
                    self.createdTime = value
                }
                if let value = dict["ModifiedTime"] as? String {
                    self.modifiedTime = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["SignatureId"] as? String {
                    self.signatureId = value
                }
                if let value = dict["SignatureKey"] as? String {
                    self.signatureKey = value
                }
                if let value = dict["SignatureName"] as? String {
                    self.signatureName = value
                }
                if let value = dict["SignatureSecret"] as? String {
                    self.signatureSecret = value
                }
            }
        }
        public var signatureInfo: [DescribeSignaturesResponseBody.SignatureInfos.SignatureInfo]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.signatureInfo != nil {
                var tmp : [Any] = []
                for k in self.signatureInfo! {
                    tmp.append(k.toMap())
                }
                map["SignatureInfo"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SignatureInfo"] as? [Any?] {
                var tmp : [DescribeSignaturesResponseBody.SignatureInfos.SignatureInfo] = []
                for v in value {
                    if v != nil {
                        var model = DescribeSignaturesResponseBody.SignatureInfos.SignatureInfo()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.signatureInfo = tmp
            }
        }
    }
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var signatureInfos: DescribeSignaturesResponseBody.SignatureInfos?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.signatureInfos?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.signatureInfos != nil {
            map["SignatureInfos"] = self.signatureInfos?.toMap()
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SignatureInfos"] as? [String: Any?] {
            var model = DescribeSignaturesResponseBody.SignatureInfos()
            model.fromMap(value)
            self.signatureInfos = model
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class DescribeSignaturesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSignaturesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSignaturesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSignaturesByApiRequest : Tea.TeaModel {
    public var apiId: String?

    public var groupId: String?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class DescribeSignaturesByApiResponseBody : Tea.TeaModel {
    public class Signatures : Tea.TeaModel {
        public class SignatureItem : Tea.TeaModel {
            public var boundTime: String?

            public var signatureId: String?

            public var signatureName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.boundTime != nil {
                    map["BoundTime"] = self.boundTime!
                }
                if self.signatureId != nil {
                    map["SignatureId"] = self.signatureId!
                }
                if self.signatureName != nil {
                    map["SignatureName"] = self.signatureName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BoundTime"] as? String {
                    self.boundTime = value
                }
                if let value = dict["SignatureId"] as? String {
                    self.signatureId = value
                }
                if let value = dict["SignatureName"] as? String {
                    self.signatureName = value
                }
            }
        }
        public var signatureItem: [DescribeSignaturesByApiResponseBody.Signatures.SignatureItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.signatureItem != nil {
                var tmp : [Any] = []
                for k in self.signatureItem! {
                    tmp.append(k.toMap())
                }
                map["SignatureItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SignatureItem"] as? [Any?] {
                var tmp : [DescribeSignaturesByApiResponseBody.Signatures.SignatureItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeSignaturesByApiResponseBody.Signatures.SignatureItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.signatureItem = tmp
            }
        }
    }
    public var requestId: String?

    public var signatures: DescribeSignaturesByApiResponseBody.Signatures?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.signatures?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.signatures != nil {
            map["Signatures"] = self.signatures?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Signatures"] as? [String: Any?] {
            var model = DescribeSignaturesByApiResponseBody.Signatures()
            model.fromMap(value)
            self.signatures = model
        }
    }
}

public class DescribeSignaturesByApiResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSignaturesByApiResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSignaturesByApiResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSummaryDataRequest : Tea.TeaModel {
    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeSummaryDataResponseBody : Tea.TeaModel {
    public var expireInstanceNum: Int32?

    public var region: String?

    public var requestId: String?

    public var usageApiNum: Int32?

    public var usageGroupNum: Int32?

    public var usageInstanceNum: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.expireInstanceNum != nil {
            map["ExpireInstanceNum"] = self.expireInstanceNum!
        }
        if self.region != nil {
            map["Region"] = self.region!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.usageApiNum != nil {
            map["UsageApiNum"] = self.usageApiNum!
        }
        if self.usageGroupNum != nil {
            map["UsageGroupNum"] = self.usageGroupNum!
        }
        if self.usageInstanceNum != nil {
            map["UsageInstanceNum"] = self.usageInstanceNum!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ExpireInstanceNum"] as? Int32 {
            self.expireInstanceNum = value
        }
        if let value = dict["Region"] as? String {
            self.region = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["UsageApiNum"] as? Int32 {
            self.usageApiNum = value
        }
        if let value = dict["UsageGroupNum"] as? Int32 {
            self.usageGroupNum = value
        }
        if let value = dict["UsageInstanceNum"] as? Int32 {
            self.usageInstanceNum = value
        }
    }
}

public class DescribeSummaryDataResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSummaryDataResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSummaryDataResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeSystemParametersRequest : Tea.TeaModel {
    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeSystemParametersResponseBody : Tea.TeaModel {
    public class SystemParams : Tea.TeaModel {
        public class SystemParamItem : Tea.TeaModel {
            public var demoValue: String?

            public var description_: String?

            public var paramName: String?

            public var paramType: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.demoValue != nil {
                    map["DemoValue"] = self.demoValue!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.paramName != nil {
                    map["ParamName"] = self.paramName!
                }
                if self.paramType != nil {
                    map["ParamType"] = self.paramType!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["DemoValue"] as? String {
                    self.demoValue = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["ParamName"] as? String {
                    self.paramName = value
                }
                if let value = dict["ParamType"] as? String {
                    self.paramType = value
                }
            }
        }
        public var systemParamItem: [DescribeSystemParametersResponseBody.SystemParams.SystemParamItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.systemParamItem != nil {
                var tmp : [Any] = []
                for k in self.systemParamItem! {
                    tmp.append(k.toMap())
                }
                map["SystemParamItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SystemParamItem"] as? [Any?] {
                var tmp : [DescribeSystemParametersResponseBody.SystemParams.SystemParamItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeSystemParametersResponseBody.SystemParams.SystemParamItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.systemParamItem = tmp
            }
        }
    }
    public var requestId: String?

    public var systemParams: DescribeSystemParametersResponseBody.SystemParams?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.systemParams?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.systemParams != nil {
            map["SystemParams"] = self.systemParams?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SystemParams"] as? [String: Any?] {
            var model = DescribeSystemParametersResponseBody.SystemParams()
            model.fromMap(value)
            self.systemParams = model
        }
    }
}

public class DescribeSystemParametersResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeSystemParametersResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeSystemParametersResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeTrafficControlsRequest : Tea.TeaModel {
    public var apiId: String?

    public var groupId: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public var stageName: String?

    public var trafficControlId: String?

    public var trafficControlName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        if self.trafficControlId != nil {
            map["TrafficControlId"] = self.trafficControlId!
        }
        if self.trafficControlName != nil {
            map["TrafficControlName"] = self.trafficControlName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
        if let value = dict["TrafficControlId"] as? String {
            self.trafficControlId = value
        }
        if let value = dict["TrafficControlName"] as? String {
            self.trafficControlName = value
        }
    }
}

public class DescribeTrafficControlsResponseBody : Tea.TeaModel {
    public class TrafficControls : Tea.TeaModel {
        public class TrafficControl : Tea.TeaModel {
            public class SpecialPolicies : Tea.TeaModel {
                public class SpecialPolicy : Tea.TeaModel {
                    public class Specials : Tea.TeaModel {
                        public class Special : Tea.TeaModel {
                            public var specialKey: String?

                            public var trafficValue: Int32?

                            public override init() {
                                super.init()
                            }

                            public init(_ dict: [String: Any]) {
                                super.init()
                                self.fromMap(dict)
                            }

                            public override func validate() throws -> Void {
                            }

                            public override func toMap() -> [String : Any] {
                                var map = super.toMap()
                                if self.specialKey != nil {
                                    map["SpecialKey"] = self.specialKey!
                                }
                                if self.trafficValue != nil {
                                    map["TrafficValue"] = self.trafficValue!
                                }
                                return map
                            }

                            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                                guard let dict else { return }
                                if let value = dict["SpecialKey"] as? String {
                                    self.specialKey = value
                                }
                                if let value = dict["TrafficValue"] as? Int32 {
                                    self.trafficValue = value
                                }
                            }
                        }
                        public var special: [DescribeTrafficControlsResponseBody.TrafficControls.TrafficControl.SpecialPolicies.SpecialPolicy.Specials.Special]?

                        public override init() {
                            super.init()
                        }

                        public init(_ dict: [String: Any]) {
                            super.init()
                            self.fromMap(dict)
                        }

                        public override func validate() throws -> Void {
                        }

                        public override func toMap() -> [String : Any] {
                            var map = super.toMap()
                            if self.special != nil {
                                var tmp : [Any] = []
                                for k in self.special! {
                                    tmp.append(k.toMap())
                                }
                                map["Special"] = tmp
                            }
                            return map
                        }

                        public override func fromMap(_ dict: [String: Any?]?) -> Void {
                            guard let dict else { return }
                            if let value = dict["Special"] as? [Any?] {
                                var tmp : [DescribeTrafficControlsResponseBody.TrafficControls.TrafficControl.SpecialPolicies.SpecialPolicy.Specials.Special] = []
                                for v in value {
                                    if v != nil {
                                        var model = DescribeTrafficControlsResponseBody.TrafficControls.TrafficControl.SpecialPolicies.SpecialPolicy.Specials.Special()
                                        if v != nil {
                                            model.fromMap(v as? [String: Any?])
                                        }
                                        tmp.append(model)
                                    }
                                }
                                self.special = tmp
                            }
                        }
                    }
                    public var specialType: String?

                    public var specials: DescribeTrafficControlsResponseBody.TrafficControls.TrafficControl.SpecialPolicies.SpecialPolicy.Specials?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                        try self.specials?.validate()
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.specialType != nil {
                            map["SpecialType"] = self.specialType!
                        }
                        if self.specials != nil {
                            map["Specials"] = self.specials?.toMap()
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["SpecialType"] as? String {
                            self.specialType = value
                        }
                        if let value = dict["Specials"] as? [String: Any?] {
                            var model = DescribeTrafficControlsResponseBody.TrafficControls.TrafficControl.SpecialPolicies.SpecialPolicy.Specials()
                            model.fromMap(value)
                            self.specials = model
                        }
                    }
                }
                public var specialPolicy: [DescribeTrafficControlsResponseBody.TrafficControls.TrafficControl.SpecialPolicies.SpecialPolicy]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.specialPolicy != nil {
                        var tmp : [Any] = []
                        for k in self.specialPolicy! {
                            tmp.append(k.toMap())
                        }
                        map["SpecialPolicy"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["SpecialPolicy"] as? [Any?] {
                        var tmp : [DescribeTrafficControlsResponseBody.TrafficControls.TrafficControl.SpecialPolicies.SpecialPolicy] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeTrafficControlsResponseBody.TrafficControls.TrafficControl.SpecialPolicies.SpecialPolicy()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.specialPolicy = tmp
                    }
                }
            }
            public var apiDefault: Int32?

            public var appDefault: Int32?

            public var createdTime: String?

            public var description_: String?

            public var modifiedTime: String?

            public var specialPolicies: DescribeTrafficControlsResponseBody.TrafficControls.TrafficControl.SpecialPolicies?

            public var trafficControlId: String?

            public var trafficControlName: String?

            public var trafficControlUnit: String?

            public var userDefault: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.specialPolicies?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiDefault != nil {
                    map["ApiDefault"] = self.apiDefault!
                }
                if self.appDefault != nil {
                    map["AppDefault"] = self.appDefault!
                }
                if self.createdTime != nil {
                    map["CreatedTime"] = self.createdTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.modifiedTime != nil {
                    map["ModifiedTime"] = self.modifiedTime!
                }
                if self.specialPolicies != nil {
                    map["SpecialPolicies"] = self.specialPolicies?.toMap()
                }
                if self.trafficControlId != nil {
                    map["TrafficControlId"] = self.trafficControlId!
                }
                if self.trafficControlName != nil {
                    map["TrafficControlName"] = self.trafficControlName!
                }
                if self.trafficControlUnit != nil {
                    map["TrafficControlUnit"] = self.trafficControlUnit!
                }
                if self.userDefault != nil {
                    map["UserDefault"] = self.userDefault!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiDefault"] as? Int32 {
                    self.apiDefault = value
                }
                if let value = dict["AppDefault"] as? Int32 {
                    self.appDefault = value
                }
                if let value = dict["CreatedTime"] as? String {
                    self.createdTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["ModifiedTime"] as? String {
                    self.modifiedTime = value
                }
                if let value = dict["SpecialPolicies"] as? [String: Any?] {
                    var model = DescribeTrafficControlsResponseBody.TrafficControls.TrafficControl.SpecialPolicies()
                    model.fromMap(value)
                    self.specialPolicies = model
                }
                if let value = dict["TrafficControlId"] as? String {
                    self.trafficControlId = value
                }
                if let value = dict["TrafficControlName"] as? String {
                    self.trafficControlName = value
                }
                if let value = dict["TrafficControlUnit"] as? String {
                    self.trafficControlUnit = value
                }
                if let value = dict["UserDefault"] as? Int32 {
                    self.userDefault = value
                }
            }
        }
        public var trafficControl: [DescribeTrafficControlsResponseBody.TrafficControls.TrafficControl]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.trafficControl != nil {
                var tmp : [Any] = []
                for k in self.trafficControl! {
                    tmp.append(k.toMap())
                }
                map["TrafficControl"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TrafficControl"] as? [Any?] {
                var tmp : [DescribeTrafficControlsResponseBody.TrafficControls.TrafficControl] = []
                for v in value {
                    if v != nil {
                        var model = DescribeTrafficControlsResponseBody.TrafficControls.TrafficControl()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.trafficControl = tmp
            }
        }
    }
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public var trafficControls: DescribeTrafficControlsResponseBody.TrafficControls?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.trafficControls?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        if self.trafficControls != nil {
            map["TrafficControls"] = self.trafficControls?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
        if let value = dict["TrafficControls"] as? [String: Any?] {
            var model = DescribeTrafficControlsResponseBody.TrafficControls()
            model.fromMap(value)
            self.trafficControls = model
        }
    }
}

public class DescribeTrafficControlsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeTrafficControlsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeTrafficControlsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeTrafficControlsByApiRequest : Tea.TeaModel {
    public var apiId: String?

    public var groupId: String?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class DescribeTrafficControlsByApiResponseBody : Tea.TeaModel {
    public class TrafficControlItems : Tea.TeaModel {
        public class TrafficControlItem : Tea.TeaModel {
            public var boundTime: String?

            public var trafficControlItemId: String?

            public var trafficControlItemName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.boundTime != nil {
                    map["BoundTime"] = self.boundTime!
                }
                if self.trafficControlItemId != nil {
                    map["TrafficControlItemId"] = self.trafficControlItemId!
                }
                if self.trafficControlItemName != nil {
                    map["TrafficControlItemName"] = self.trafficControlItemName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["BoundTime"] as? String {
                    self.boundTime = value
                }
                if let value = dict["TrafficControlItemId"] as? String {
                    self.trafficControlItemId = value
                }
                if let value = dict["TrafficControlItemName"] as? String {
                    self.trafficControlItemName = value
                }
            }
        }
        public var trafficControlItem: [DescribeTrafficControlsByApiResponseBody.TrafficControlItems.TrafficControlItem]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.trafficControlItem != nil {
                var tmp : [Any] = []
                for k in self.trafficControlItem! {
                    tmp.append(k.toMap())
                }
                map["TrafficControlItem"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TrafficControlItem"] as? [Any?] {
                var tmp : [DescribeTrafficControlsByApiResponseBody.TrafficControlItems.TrafficControlItem] = []
                for v in value {
                    if v != nil {
                        var model = DescribeTrafficControlsByApiResponseBody.TrafficControlItems.TrafficControlItem()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.trafficControlItem = tmp
            }
        }
    }
    public var requestId: String?

    public var trafficControlItems: DescribeTrafficControlsByApiResponseBody.TrafficControlItems?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.trafficControlItems?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.trafficControlItems != nil {
            map["TrafficControlItems"] = self.trafficControlItems?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TrafficControlItems"] as? [String: Any?] {
            var model = DescribeTrafficControlsByApiResponseBody.TrafficControlItems()
            model.fromMap(value)
            self.trafficControlItems = model
        }
    }
}

public class DescribeTrafficControlsByApiResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeTrafficControlsByApiResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeTrafficControlsByApiResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeUpdateBackendTaskRequest : Tea.TeaModel {
    public var operationUid: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.operationUid != nil {
            map["OperationUid"] = self.operationUid!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OperationUid"] as? String {
            self.operationUid = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeUpdateBackendTaskResponseBody : Tea.TeaModel {
    public class ApiUpdateBackendResults : Tea.TeaModel {
        public class ApiUpdateBackendResult : Tea.TeaModel {
            public var apiName: String?

            public var apiUid: String?

            public var backendId: String?

            public var errorMsg: String?

            public var groupId: String?

            public var groupName: String?

            public var stageId: String?

            public var stageName: String?

            public var updateStatus: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiName != nil {
                    map["ApiName"] = self.apiName!
                }
                if self.apiUid != nil {
                    map["ApiUid"] = self.apiUid!
                }
                if self.backendId != nil {
                    map["BackendId"] = self.backendId!
                }
                if self.errorMsg != nil {
                    map["ErrorMsg"] = self.errorMsg!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupName != nil {
                    map["GroupName"] = self.groupName!
                }
                if self.stageId != nil {
                    map["StageId"] = self.stageId!
                }
                if self.stageName != nil {
                    map["StageName"] = self.stageName!
                }
                if self.updateStatus != nil {
                    map["UpdateStatus"] = self.updateStatus!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiName"] as? String {
                    self.apiName = value
                }
                if let value = dict["ApiUid"] as? String {
                    self.apiUid = value
                }
                if let value = dict["BackendId"] as? String {
                    self.backendId = value
                }
                if let value = dict["ErrorMsg"] as? String {
                    self.errorMsg = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["GroupName"] as? String {
                    self.groupName = value
                }
                if let value = dict["StageId"] as? String {
                    self.stageId = value
                }
                if let value = dict["StageName"] as? String {
                    self.stageName = value
                }
                if let value = dict["UpdateStatus"] as? String {
                    self.updateStatus = value
                }
            }
        }
        public var apiUpdateBackendResult: [DescribeUpdateBackendTaskResponseBody.ApiUpdateBackendResults.ApiUpdateBackendResult]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiUpdateBackendResult != nil {
                var tmp : [Any] = []
                for k in self.apiUpdateBackendResult! {
                    tmp.append(k.toMap())
                }
                map["ApiUpdateBackendResult"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiUpdateBackendResult"] as? [Any?] {
                var tmp : [DescribeUpdateBackendTaskResponseBody.ApiUpdateBackendResults.ApiUpdateBackendResult] = []
                for v in value {
                    if v != nil {
                        var model = DescribeUpdateBackendTaskResponseBody.ApiUpdateBackendResults.ApiUpdateBackendResult()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.apiUpdateBackendResult = tmp
            }
        }
    }
    public var apiUpdateBackendResults: DescribeUpdateBackendTaskResponseBody.ApiUpdateBackendResults?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.apiUpdateBackendResults?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiUpdateBackendResults != nil {
            map["ApiUpdateBackendResults"] = self.apiUpdateBackendResults?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiUpdateBackendResults"] as? [String: Any?] {
            var model = DescribeUpdateBackendTaskResponseBody.ApiUpdateBackendResults()
            model.fromMap(value)
            self.apiUpdateBackendResults = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeUpdateBackendTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeUpdateBackendTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeUpdateBackendTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeUpdateVpcInfoTaskRequest : Tea.TeaModel {
    public var operationUid: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.operationUid != nil {
            map["OperationUid"] = self.operationUid!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OperationUid"] as? String {
            self.operationUid = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeUpdateVpcInfoTaskResponseBody : Tea.TeaModel {
    public class ApiUpdateVpcInfoResults : Tea.TeaModel {
        public class ApiUpdateVpcInfoResult : Tea.TeaModel {
            public var apiName: String?

            public var apiUid: String?

            public var errorMsg: String?

            public var groupId: String?

            public var groupName: String?

            public var stageId: String?

            public var stageName: String?

            public var updateStatus: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiName != nil {
                    map["ApiName"] = self.apiName!
                }
                if self.apiUid != nil {
                    map["ApiUid"] = self.apiUid!
                }
                if self.errorMsg != nil {
                    map["ErrorMsg"] = self.errorMsg!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupName != nil {
                    map["GroupName"] = self.groupName!
                }
                if self.stageId != nil {
                    map["StageId"] = self.stageId!
                }
                if self.stageName != nil {
                    map["StageName"] = self.stageName!
                }
                if self.updateStatus != nil {
                    map["UpdateStatus"] = self.updateStatus!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiName"] as? String {
                    self.apiName = value
                }
                if let value = dict["ApiUid"] as? String {
                    self.apiUid = value
                }
                if let value = dict["ErrorMsg"] as? String {
                    self.errorMsg = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["GroupName"] as? String {
                    self.groupName = value
                }
                if let value = dict["StageId"] as? String {
                    self.stageId = value
                }
                if let value = dict["StageName"] as? String {
                    self.stageName = value
                }
                if let value = dict["UpdateStatus"] as? String {
                    self.updateStatus = value
                }
            }
        }
        public var apiUpdateVpcInfoResult: [DescribeUpdateVpcInfoTaskResponseBody.ApiUpdateVpcInfoResults.ApiUpdateVpcInfoResult]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiUpdateVpcInfoResult != nil {
                var tmp : [Any] = []
                for k in self.apiUpdateVpcInfoResult! {
                    tmp.append(k.toMap())
                }
                map["ApiUpdateVpcInfoResult"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiUpdateVpcInfoResult"] as? [Any?] {
                var tmp : [DescribeUpdateVpcInfoTaskResponseBody.ApiUpdateVpcInfoResults.ApiUpdateVpcInfoResult] = []
                for v in value {
                    if v != nil {
                        var model = DescribeUpdateVpcInfoTaskResponseBody.ApiUpdateVpcInfoResults.ApiUpdateVpcInfoResult()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.apiUpdateVpcInfoResult = tmp
            }
        }
    }
    public var apiUpdateVpcInfoResults: DescribeUpdateVpcInfoTaskResponseBody.ApiUpdateVpcInfoResults?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.apiUpdateVpcInfoResults?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiUpdateVpcInfoResults != nil {
            map["ApiUpdateVpcInfoResults"] = self.apiUpdateVpcInfoResults?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiUpdateVpcInfoResults"] as? [String: Any?] {
            var model = DescribeUpdateVpcInfoTaskResponseBody.ApiUpdateVpcInfoResults()
            model.fromMap(value)
            self.apiUpdateVpcInfoResults = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DescribeUpdateVpcInfoTaskResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeUpdateVpcInfoTaskResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeUpdateVpcInfoTaskResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeVpcAccessesRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var accurateQuery: Bool?

    public var instanceId: String?

    public var name: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var port: String?

    public var securityToken: String?

    public var tag: [DescribeVpcAccessesRequest.Tag]?

    public var vpcAccessId: String?

    public var vpcId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.accurateQuery != nil {
            map["AccurateQuery"] = self.accurateQuery!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.port != nil {
            map["Port"] = self.port!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        if self.vpcAccessId != nil {
            map["VpcAccessId"] = self.vpcAccessId!
        }
        if self.vpcId != nil {
            map["VpcId"] = self.vpcId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AccurateQuery"] as? Bool {
            self.accurateQuery = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["Port"] as? String {
            self.port = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [DescribeVpcAccessesRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = DescribeVpcAccessesRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
        if let value = dict["VpcAccessId"] as? String {
            self.vpcAccessId = value
        }
        if let value = dict["VpcId"] as? String {
            self.vpcId = value
        }
    }
}

public class DescribeVpcAccessesResponseBody : Tea.TeaModel {
    public class VpcAccessAttributes : Tea.TeaModel {
        public class VpcAccessAttribute : Tea.TeaModel {
            public class Tags : Tea.TeaModel {
                public class TagInfo : Tea.TeaModel {
                    public var key: String?

                    public var value: String?

                    public override init() {
                        super.init()
                    }

                    public init(_ dict: [String: Any]) {
                        super.init()
                        self.fromMap(dict)
                    }

                    public override func validate() throws -> Void {
                    }

                    public override func toMap() -> [String : Any] {
                        var map = super.toMap()
                        if self.key != nil {
                            map["Key"] = self.key!
                        }
                        if self.value != nil {
                            map["Value"] = self.value!
                        }
                        return map
                    }

                    public override func fromMap(_ dict: [String: Any?]?) -> Void {
                        guard let dict else { return }
                        if let value = dict["Key"] as? String {
                            self.key = value
                        }
                        if let value = dict["Value"] as? String {
                            self.value = value
                        }
                    }
                }
                public var tagInfo: [DescribeVpcAccessesResponseBody.VpcAccessAttributes.VpcAccessAttribute.Tags.TagInfo]?

                public override init() {
                    super.init()
                }

                public init(_ dict: [String: Any]) {
                    super.init()
                    self.fromMap(dict)
                }

                public override func validate() throws -> Void {
                }

                public override func toMap() -> [String : Any] {
                    var map = super.toMap()
                    if self.tagInfo != nil {
                        var tmp : [Any] = []
                        for k in self.tagInfo! {
                            tmp.append(k.toMap())
                        }
                        map["TagInfo"] = tmp
                    }
                    return map
                }

                public override func fromMap(_ dict: [String: Any?]?) -> Void {
                    guard let dict else { return }
                    if let value = dict["TagInfo"] as? [Any?] {
                        var tmp : [DescribeVpcAccessesResponseBody.VpcAccessAttributes.VpcAccessAttribute.Tags.TagInfo] = []
                        for v in value {
                            if v != nil {
                                var model = DescribeVpcAccessesResponseBody.VpcAccessAttributes.VpcAccessAttribute.Tags.TagInfo()
                                if v != nil {
                                    model.fromMap(v as? [String: Any?])
                                }
                                tmp.append(model)
                            }
                        }
                        self.tagInfo = tmp
                    }
                }
            }
            public var createdTime: String?

            public var description_: String?

            public var instanceId: String?

            public var name: String?

            public var port: Int32?

            public var regionId: String?

            public var tags: DescribeVpcAccessesResponseBody.VpcAccessAttributes.VpcAccessAttribute.Tags?

            public var vpcAccessId: String?

            public var vpcId: String?

            public var vpcTargetHostName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
                try self.tags?.validate()
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.createdTime != nil {
                    map["CreatedTime"] = self.createdTime!
                }
                if self.description_ != nil {
                    map["Description"] = self.description_!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.name != nil {
                    map["Name"] = self.name!
                }
                if self.port != nil {
                    map["Port"] = self.port!
                }
                if self.regionId != nil {
                    map["RegionId"] = self.regionId!
                }
                if self.tags != nil {
                    map["Tags"] = self.tags?.toMap()
                }
                if self.vpcAccessId != nil {
                    map["VpcAccessId"] = self.vpcAccessId!
                }
                if self.vpcId != nil {
                    map["VpcId"] = self.vpcId!
                }
                if self.vpcTargetHostName != nil {
                    map["VpcTargetHostName"] = self.vpcTargetHostName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["CreatedTime"] as? String {
                    self.createdTime = value
                }
                if let value = dict["Description"] as? String {
                    self.description_ = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["Name"] as? String {
                    self.name = value
                }
                if let value = dict["Port"] as? Int32 {
                    self.port = value
                }
                if let value = dict["RegionId"] as? String {
                    self.regionId = value
                }
                if let value = dict["Tags"] as? [String: Any?] {
                    var model = DescribeVpcAccessesResponseBody.VpcAccessAttributes.VpcAccessAttribute.Tags()
                    model.fromMap(value)
                    self.tags = model
                }
                if let value = dict["VpcAccessId"] as? String {
                    self.vpcAccessId = value
                }
                if let value = dict["VpcId"] as? String {
                    self.vpcId = value
                }
                if let value = dict["VpcTargetHostName"] as? String {
                    self.vpcTargetHostName = value
                }
            }
        }
        public var vpcAccessAttribute: [DescribeVpcAccessesResponseBody.VpcAccessAttributes.VpcAccessAttribute]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.vpcAccessAttribute != nil {
                var tmp : [Any] = []
                for k in self.vpcAccessAttribute! {
                    tmp.append(k.toMap())
                }
                map["VpcAccessAttribute"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["VpcAccessAttribute"] as? [Any?] {
                var tmp : [DescribeVpcAccessesResponseBody.VpcAccessAttributes.VpcAccessAttribute] = []
                for v in value {
                    if v != nil {
                        var model = DescribeVpcAccessesResponseBody.VpcAccessAttributes.VpcAccessAttribute()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.vpcAccessAttribute = tmp
            }
        }
    }
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var requestId: String?

    public var totalCount: Int32?

    public var vpcAccessAttributes: DescribeVpcAccessesResponseBody.VpcAccessAttributes?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.vpcAccessAttributes?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        if self.vpcAccessAttributes != nil {
            map["VpcAccessAttributes"] = self.vpcAccessAttributes?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
        if let value = dict["VpcAccessAttributes"] as? [String: Any?] {
            var model = DescribeVpcAccessesResponseBody.VpcAccessAttributes()
            model.fromMap(value)
            self.vpcAccessAttributes = model
        }
    }
}

public class DescribeVpcAccessesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeVpcAccessesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeVpcAccessesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DescribeZonesRequest : Tea.TeaModel {
    public var language: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DescribeZonesResponseBody : Tea.TeaModel {
    public class Zones : Tea.TeaModel {
        public class Zone : Tea.TeaModel {
            public var localName: String?

            public var zoneId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.localName != nil {
                    map["LocalName"] = self.localName!
                }
                if self.zoneId != nil {
                    map["ZoneId"] = self.zoneId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["LocalName"] as? String {
                    self.localName = value
                }
                if let value = dict["ZoneId"] as? String {
                    self.zoneId = value
                }
            }
        }
        public var zone: [DescribeZonesResponseBody.Zones.Zone]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.zone != nil {
                var tmp : [Any] = []
                for k in self.zone! {
                    tmp.append(k.toMap())
                }
                map["Zone"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Zone"] as? [Any?] {
                var tmp : [DescribeZonesResponseBody.Zones.Zone] = []
                for v in value {
                    if v != nil {
                        var model = DescribeZonesResponseBody.Zones.Zone()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.zone = tmp
            }
        }
    }
    public var requestId: String?

    public var zones: DescribeZonesResponseBody.Zones?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.zones?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.zones != nil {
            map["Zones"] = self.zones?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Zones"] as? [String: Any?] {
            var model = DescribeZonesResponseBody.Zones()
            model.fromMap(value)
            self.zones = model
        }
    }
}

public class DescribeZonesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DescribeZonesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DescribeZonesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DetachApiProductRequest : Tea.TeaModel {
    public class Apis : Tea.TeaModel {
        public var apiId: String?

        public var stageName: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiId != nil {
                map["ApiId"] = self.apiId!
            }
            if self.stageName != nil {
                map["StageName"] = self.stageName!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiId"] as? String {
                self.apiId = value
            }
            if let value = dict["StageName"] as? String {
                self.stageName = value
            }
        }
    }
    public var apiProductId: String?

    public var apis: [DetachApiProductRequest.Apis]?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiProductId != nil {
            map["ApiProductId"] = self.apiProductId!
        }
        if self.apis != nil {
            var tmp : [Any] = []
            for k in self.apis! {
                tmp.append(k.toMap())
            }
            map["Apis"] = tmp
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiProductId"] as? String {
            self.apiProductId = value
        }
        if let value = dict["Apis"] as? [Any?] {
            var tmp : [DetachApiProductRequest.Apis] = []
            for v in value {
                if v != nil {
                    var model = DetachApiProductRequest.Apis()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.apis = tmp
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DetachApiProductResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DetachApiProductResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DetachApiProductResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DetachApiProductResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DetachGroupPluginRequest : Tea.TeaModel {
    public var groupId: String?

    public var pluginId: String?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.pluginId != nil {
            map["PluginId"] = self.pluginId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["PluginId"] as? String {
            self.pluginId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class DetachGroupPluginResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DetachGroupPluginResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DetachGroupPluginResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DetachGroupPluginResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DetachPluginRequest : Tea.TeaModel {
    public var apiId: String?

    public var groupId: String?

    public var pluginId: String?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.pluginId != nil {
            map["PluginId"] = self.pluginId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["PluginId"] as? String {
            self.pluginId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class DetachPluginResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DetachPluginResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DetachPluginResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DetachPluginResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DisableInstanceAccessControlRequest : Tea.TeaModel {
    public var aclId: String?

    public var addressIPVersion: String?

    public var instanceId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aclId != nil {
            map["AclId"] = self.aclId!
        }
        if self.addressIPVersion != nil {
            map["AddressIPVersion"] = self.addressIPVersion!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AclId"] as? String {
            self.aclId = value
        }
        if let value = dict["AddressIPVersion"] as? String {
            self.addressIPVersion = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DisableInstanceAccessControlResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DisableInstanceAccessControlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DisableInstanceAccessControlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DisableInstanceAccessControlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DissociateInstanceWithPrivateDNSRequest : Tea.TeaModel {
    public var instanceId: String?

    public var intranetDomains: [String]?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.intranetDomains != nil {
            map["IntranetDomains"] = self.intranetDomains!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["IntranetDomains"] as? [String] {
            self.intranetDomains = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DissociateInstanceWithPrivateDNSShrinkRequest : Tea.TeaModel {
    public var instanceId: String?

    public var intranetDomainsShrink: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.intranetDomainsShrink != nil {
            map["IntranetDomains"] = self.intranetDomainsShrink!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["IntranetDomains"] as? String {
            self.intranetDomainsShrink = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DissociateInstanceWithPrivateDNSResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class DissociateInstanceWithPrivateDNSResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DissociateInstanceWithPrivateDNSResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DissociateInstanceWithPrivateDNSResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class DryRunSwaggerRequest : Tea.TeaModel {
    public var data: String?

    public var dataFormat: String?

    public var globalCondition: [String: Any]?

    public var groupId: String?

    public var overwrite: Bool?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.dataFormat != nil {
            map["DataFormat"] = self.dataFormat!
        }
        if self.globalCondition != nil {
            map["GlobalCondition"] = self.globalCondition!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.overwrite != nil {
            map["Overwrite"] = self.overwrite!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["DataFormat"] as? String {
            self.dataFormat = value
        }
        if let value = dict["GlobalCondition"] as? [String: Any] {
            self.globalCondition = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Overwrite"] as? Bool {
            self.overwrite = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DryRunSwaggerShrinkRequest : Tea.TeaModel {
    public var data: String?

    public var dataFormat: String?

    public var globalConditionShrink: String?

    public var groupId: String?

    public var overwrite: Bool?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.dataFormat != nil {
            map["DataFormat"] = self.dataFormat!
        }
        if self.globalConditionShrink != nil {
            map["GlobalCondition"] = self.globalConditionShrink!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.overwrite != nil {
            map["Overwrite"] = self.overwrite!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["DataFormat"] as? String {
            self.dataFormat = value
        }
        if let value = dict["GlobalCondition"] as? String {
            self.globalConditionShrink = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Overwrite"] as? Bool {
            self.overwrite = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class DryRunSwaggerResponseBody : Tea.TeaModel {
    public class Failed : Tea.TeaModel {
        public class ApiImportSwaggerFailed : Tea.TeaModel {
            public var errorMsg: String?

            public var httpMethod: String?

            public var path: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.errorMsg != nil {
                    map["ErrorMsg"] = self.errorMsg!
                }
                if self.httpMethod != nil {
                    map["HttpMethod"] = self.httpMethod!
                }
                if self.path != nil {
                    map["Path"] = self.path!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ErrorMsg"] as? String {
                    self.errorMsg = value
                }
                if let value = dict["HttpMethod"] as? String {
                    self.httpMethod = value
                }
                if let value = dict["Path"] as? String {
                    self.path = value
                }
            }
        }
        public var apiImportSwaggerFailed: [DryRunSwaggerResponseBody.Failed.ApiImportSwaggerFailed]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiImportSwaggerFailed != nil {
                var tmp : [Any] = []
                for k in self.apiImportSwaggerFailed! {
                    tmp.append(k.toMap())
                }
                map["ApiImportSwaggerFailed"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiImportSwaggerFailed"] as? [Any?] {
                var tmp : [DryRunSwaggerResponseBody.Failed.ApiImportSwaggerFailed] = []
                for v in value {
                    if v != nil {
                        var model = DryRunSwaggerResponseBody.Failed.ApiImportSwaggerFailed()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.apiImportSwaggerFailed = tmp
            }
        }
    }
    public class ModelFailed : Tea.TeaModel {
        public class ApiImportModelFailed : Tea.TeaModel {
            public var errorMsg: String?

            public var groupId: String?

            public var modelName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.errorMsg != nil {
                    map["ErrorMsg"] = self.errorMsg!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.modelName != nil {
                    map["ModelName"] = self.modelName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ErrorMsg"] as? String {
                    self.errorMsg = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["ModelName"] as? String {
                    self.modelName = value
                }
            }
        }
        public var apiImportModelFailed: [DryRunSwaggerResponseBody.ModelFailed.ApiImportModelFailed]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiImportModelFailed != nil {
                var tmp : [Any] = []
                for k in self.apiImportModelFailed! {
                    tmp.append(k.toMap())
                }
                map["ApiImportModelFailed"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiImportModelFailed"] as? [Any?] {
                var tmp : [DryRunSwaggerResponseBody.ModelFailed.ApiImportModelFailed] = []
                for v in value {
                    if v != nil {
                        var model = DryRunSwaggerResponseBody.ModelFailed.ApiImportModelFailed()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.apiImportModelFailed = tmp
            }
        }
    }
    public class ModelSuccess : Tea.TeaModel {
        public class ApiImportModelSuccess : Tea.TeaModel {
            public var groupId: String?

            public var modelName: String?

            public var modelOperation: String?

            public var modelUid: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.modelName != nil {
                    map["ModelName"] = self.modelName!
                }
                if self.modelOperation != nil {
                    map["ModelOperation"] = self.modelOperation!
                }
                if self.modelUid != nil {
                    map["ModelUid"] = self.modelUid!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["ModelName"] as? String {
                    self.modelName = value
                }
                if let value = dict["ModelOperation"] as? String {
                    self.modelOperation = value
                }
                if let value = dict["ModelUid"] as? String {
                    self.modelUid = value
                }
            }
        }
        public var apiImportModelSuccess: [DryRunSwaggerResponseBody.ModelSuccess.ApiImportModelSuccess]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiImportModelSuccess != nil {
                var tmp : [Any] = []
                for k in self.apiImportModelSuccess! {
                    tmp.append(k.toMap())
                }
                map["ApiImportModelSuccess"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiImportModelSuccess"] as? [Any?] {
                var tmp : [DryRunSwaggerResponseBody.ModelSuccess.ApiImportModelSuccess] = []
                for v in value {
                    if v != nil {
                        var model = DryRunSwaggerResponseBody.ModelSuccess.ApiImportModelSuccess()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.apiImportModelSuccess = tmp
            }
        }
    }
    public class Success : Tea.TeaModel {
        public class ApiDryRunSwaggerSuccess : Tea.TeaModel {
            public var apiOperation: String?

            public var apiSwagger: String?

            public var apiUid: String?

            public var httpMethod: String?

            public var path: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiOperation != nil {
                    map["ApiOperation"] = self.apiOperation!
                }
                if self.apiSwagger != nil {
                    map["ApiSwagger"] = self.apiSwagger!
                }
                if self.apiUid != nil {
                    map["ApiUid"] = self.apiUid!
                }
                if self.httpMethod != nil {
                    map["HttpMethod"] = self.httpMethod!
                }
                if self.path != nil {
                    map["Path"] = self.path!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiOperation"] as? String {
                    self.apiOperation = value
                }
                if let value = dict["ApiSwagger"] as? String {
                    self.apiSwagger = value
                }
                if let value = dict["ApiUid"] as? String {
                    self.apiUid = value
                }
                if let value = dict["HttpMethod"] as? String {
                    self.httpMethod = value
                }
                if let value = dict["Path"] as? String {
                    self.path = value
                }
            }
        }
        public var apiDryRunSwaggerSuccess: [DryRunSwaggerResponseBody.Success.ApiDryRunSwaggerSuccess]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiDryRunSwaggerSuccess != nil {
                var tmp : [Any] = []
                for k in self.apiDryRunSwaggerSuccess! {
                    tmp.append(k.toMap())
                }
                map["ApiDryRunSwaggerSuccess"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiDryRunSwaggerSuccess"] as? [Any?] {
                var tmp : [DryRunSwaggerResponseBody.Success.ApiDryRunSwaggerSuccess] = []
                for v in value {
                    if v != nil {
                        var model = DryRunSwaggerResponseBody.Success.ApiDryRunSwaggerSuccess()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.apiDryRunSwaggerSuccess = tmp
            }
        }
    }
    public var failed: DryRunSwaggerResponseBody.Failed?

    public var globalCondition: String?

    public var modelFailed: DryRunSwaggerResponseBody.ModelFailed?

    public var modelSuccess: DryRunSwaggerResponseBody.ModelSuccess?

    public var requestId: String?

    public var success: DryRunSwaggerResponseBody.Success?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.failed?.validate()
        try self.modelFailed?.validate()
        try self.modelSuccess?.validate()
        try self.success?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.failed != nil {
            map["Failed"] = self.failed?.toMap()
        }
        if self.globalCondition != nil {
            map["GlobalCondition"] = self.globalCondition!
        }
        if self.modelFailed != nil {
            map["ModelFailed"] = self.modelFailed?.toMap()
        }
        if self.modelSuccess != nil {
            map["ModelSuccess"] = self.modelSuccess?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Failed"] as? [String: Any?] {
            var model = DryRunSwaggerResponseBody.Failed()
            model.fromMap(value)
            self.failed = model
        }
        if let value = dict["GlobalCondition"] as? String {
            self.globalCondition = value
        }
        if let value = dict["ModelFailed"] as? [String: Any?] {
            var model = DryRunSwaggerResponseBody.ModelFailed()
            model.fromMap(value)
            self.modelFailed = model
        }
        if let value = dict["ModelSuccess"] as? [String: Any?] {
            var model = DryRunSwaggerResponseBody.ModelSuccess()
            model.fromMap(value)
            self.modelSuccess = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? [String: Any?] {
            var model = DryRunSwaggerResponseBody.Success()
            model.fromMap(value)
            self.success = model
        }
    }
}

public class DryRunSwaggerResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: DryRunSwaggerResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = DryRunSwaggerResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class EnableInstanceAccessControlRequest : Tea.TeaModel {
    public var aclId: String?

    public var aclType: String?

    public var addressIPVersion: String?

    public var instanceId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aclId != nil {
            map["AclId"] = self.aclId!
        }
        if self.aclType != nil {
            map["AclType"] = self.aclType!
        }
        if self.addressIPVersion != nil {
            map["AddressIPVersion"] = self.addressIPVersion!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AclId"] as? String {
            self.aclId = value
        }
        if let value = dict["AclType"] as? String {
            self.aclType = value
        }
        if let value = dict["AddressIPVersion"] as? String {
            self.addressIPVersion = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class EnableInstanceAccessControlResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class EnableInstanceAccessControlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: EnableInstanceAccessControlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = EnableInstanceAccessControlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ExportOASRequest : Tea.TeaModel {
    public var apiIdList: [String]?

    public var dataFormat: String?

    public var groupId: String?

    public var oasVersion: String?

    public var pageNumber: Int32?

    public var securityToken: String?

    public var stageName: String?

    public var withXExtensions: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiIdList != nil {
            map["ApiIdList"] = self.apiIdList!
        }
        if self.dataFormat != nil {
            map["DataFormat"] = self.dataFormat!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.oasVersion != nil {
            map["OasVersion"] = self.oasVersion!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        if self.withXExtensions != nil {
            map["WithXExtensions"] = self.withXExtensions!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiIdList"] as? [String] {
            self.apiIdList = value
        }
        if let value = dict["DataFormat"] as? String {
            self.dataFormat = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["OasVersion"] as? String {
            self.oasVersion = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
        if let value = dict["WithXExtensions"] as? Bool {
            self.withXExtensions = value
        }
    }
}

public class ExportOASShrinkRequest : Tea.TeaModel {
    public var apiIdListShrink: String?

    public var dataFormat: String?

    public var groupId: String?

    public var oasVersion: String?

    public var pageNumber: Int32?

    public var securityToken: String?

    public var stageName: String?

    public var withXExtensions: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiIdListShrink != nil {
            map["ApiIdList"] = self.apiIdListShrink!
        }
        if self.dataFormat != nil {
            map["DataFormat"] = self.dataFormat!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.oasVersion != nil {
            map["OasVersion"] = self.oasVersion!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        if self.withXExtensions != nil {
            map["WithXExtensions"] = self.withXExtensions!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiIdList"] as? String {
            self.apiIdListShrink = value
        }
        if let value = dict["DataFormat"] as? String {
            self.dataFormat = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["OasVersion"] as? String {
            self.oasVersion = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
        if let value = dict["WithXExtensions"] as? Bool {
            self.withXExtensions = value
        }
    }
}

public class ExportOASResponseBody : Tea.TeaModel {
    public var data: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ExportOASResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ExportOASResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ExportOASResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ImportOASRequest : Tea.TeaModel {
    public var authType: String?

    public var backendName: String?

    public var data: String?

    public var groupId: String?

    public var ignoreWarning: Bool?

    public var OASVersion: String?

    public var overwrite: Bool?

    public var requestMode: String?

    public var securityToken: String?

    public var skipDryRun: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.authType != nil {
            map["AuthType"] = self.authType!
        }
        if self.backendName != nil {
            map["BackendName"] = self.backendName!
        }
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.ignoreWarning != nil {
            map["IgnoreWarning"] = self.ignoreWarning!
        }
        if self.OASVersion != nil {
            map["OASVersion"] = self.OASVersion!
        }
        if self.overwrite != nil {
            map["Overwrite"] = self.overwrite!
        }
        if self.requestMode != nil {
            map["RequestMode"] = self.requestMode!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.skipDryRun != nil {
            map["SkipDryRun"] = self.skipDryRun!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuthType"] as? String {
            self.authType = value
        }
        if let value = dict["BackendName"] as? String {
            self.backendName = value
        }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["IgnoreWarning"] as? Bool {
            self.ignoreWarning = value
        }
        if let value = dict["OASVersion"] as? String {
            self.OASVersion = value
        }
        if let value = dict["Overwrite"] as? Bool {
            self.overwrite = value
        }
        if let value = dict["RequestMode"] as? String {
            self.requestMode = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["SkipDryRun"] as? Bool {
            self.skipDryRun = value
        }
    }
}

public class ImportOASResponseBody : Tea.TeaModel {
    public class ErrorMessages : Tea.TeaModel {
        public var errorMessage: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.errorMessage != nil {
                map["ErrorMessage"] = self.errorMessage!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ErrorMessage"] as? [String] {
                self.errorMessage = value
            }
        }
    }
    public class FailedApis : Tea.TeaModel {
        public class FailedApi : Tea.TeaModel {
            public var errorMsg: String?

            public var httpMethod: String?

            public var path: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.errorMsg != nil {
                    map["ErrorMsg"] = self.errorMsg!
                }
                if self.httpMethod != nil {
                    map["HttpMethod"] = self.httpMethod!
                }
                if self.path != nil {
                    map["Path"] = self.path!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ErrorMsg"] as? String {
                    self.errorMsg = value
                }
                if let value = dict["HttpMethod"] as? String {
                    self.httpMethod = value
                }
                if let value = dict["Path"] as? String {
                    self.path = value
                }
            }
        }
        public var failedApi: [ImportOASResponseBody.FailedApis.FailedApi]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.failedApi != nil {
                var tmp : [Any] = []
                for k in self.failedApi! {
                    tmp.append(k.toMap())
                }
                map["FailedApi"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FailedApi"] as? [Any?] {
                var tmp : [ImportOASResponseBody.FailedApis.FailedApi] = []
                for v in value {
                    if v != nil {
                        var model = ImportOASResponseBody.FailedApis.FailedApi()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.failedApi = tmp
            }
        }
    }
    public class FailedModels : Tea.TeaModel {
        public class FailedModel : Tea.TeaModel {
            public var errorMsg: String?

            public var groupId: String?

            public var modelName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.errorMsg != nil {
                    map["ErrorMsg"] = self.errorMsg!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.modelName != nil {
                    map["ModelName"] = self.modelName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ErrorMsg"] as? String {
                    self.errorMsg = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["ModelName"] as? String {
                    self.modelName = value
                }
            }
        }
        public var failedModel: [ImportOASResponseBody.FailedModels.FailedModel]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.failedModel != nil {
                var tmp : [Any] = []
                for k in self.failedModel! {
                    tmp.append(k.toMap())
                }
                map["FailedModel"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["FailedModel"] as? [Any?] {
                var tmp : [ImportOASResponseBody.FailedModels.FailedModel] = []
                for v in value {
                    if v != nil {
                        var model = ImportOASResponseBody.FailedModels.FailedModel()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.failedModel = tmp
            }
        }
    }
    public class SuccessApis : Tea.TeaModel {
        public class SuccessApi : Tea.TeaModel {
            public var apiId: String?

            public var apiOperation: String?

            public var httpMethod: String?

            public var path: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiId != nil {
                    map["ApiId"] = self.apiId!
                }
                if self.apiOperation != nil {
                    map["ApiOperation"] = self.apiOperation!
                }
                if self.httpMethod != nil {
                    map["HttpMethod"] = self.httpMethod!
                }
                if self.path != nil {
                    map["Path"] = self.path!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiId"] as? String {
                    self.apiId = value
                }
                if let value = dict["ApiOperation"] as? String {
                    self.apiOperation = value
                }
                if let value = dict["HttpMethod"] as? String {
                    self.httpMethod = value
                }
                if let value = dict["Path"] as? String {
                    self.path = value
                }
            }
        }
        public var successApi: [ImportOASResponseBody.SuccessApis.SuccessApi]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.successApi != nil {
                var tmp : [Any] = []
                for k in self.successApi! {
                    tmp.append(k.toMap())
                }
                map["SuccessApi"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SuccessApi"] as? [Any?] {
                var tmp : [ImportOASResponseBody.SuccessApis.SuccessApi] = []
                for v in value {
                    if v != nil {
                        var model = ImportOASResponseBody.SuccessApis.SuccessApi()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.successApi = tmp
            }
        }
    }
    public class SuccessModels : Tea.TeaModel {
        public class SuccessModel : Tea.TeaModel {
            public var groupId: String?

            public var modelName: String?

            public var modelOperation: String?

            public var modelUid: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.modelName != nil {
                    map["ModelName"] = self.modelName!
                }
                if self.modelOperation != nil {
                    map["ModelOperation"] = self.modelOperation!
                }
                if self.modelUid != nil {
                    map["ModelUid"] = self.modelUid!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["ModelName"] as? String {
                    self.modelName = value
                }
                if let value = dict["ModelOperation"] as? String {
                    self.modelOperation = value
                }
                if let value = dict["ModelUid"] as? String {
                    self.modelUid = value
                }
            }
        }
        public var successModel: [ImportOASResponseBody.SuccessModels.SuccessModel]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.successModel != nil {
                var tmp : [Any] = []
                for k in self.successModel! {
                    tmp.append(k.toMap())
                }
                map["SuccessModel"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["SuccessModel"] as? [Any?] {
                var tmp : [ImportOASResponseBody.SuccessModels.SuccessModel] = []
                for v in value {
                    if v != nil {
                        var model = ImportOASResponseBody.SuccessModels.SuccessModel()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.successModel = tmp
            }
        }
    }
    public class WarningMessages : Tea.TeaModel {
        public var warningMessage: [String]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.warningMessage != nil {
                map["WarningMessage"] = self.warningMessage!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["WarningMessage"] as? [String] {
                self.warningMessage = value
            }
        }
    }
    public var errorMessages: ImportOASResponseBody.ErrorMessages?

    public var failedApis: ImportOASResponseBody.FailedApis?

    public var failedModels: ImportOASResponseBody.FailedModels?

    public var operationId: String?

    public var requestId: String?

    public var successApis: ImportOASResponseBody.SuccessApis?

    public var successModels: ImportOASResponseBody.SuccessModels?

    public var warningMessages: ImportOASResponseBody.WarningMessages?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.errorMessages?.validate()
        try self.failedApis?.validate()
        try self.failedModels?.validate()
        try self.successApis?.validate()
        try self.successModels?.validate()
        try self.warningMessages?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.errorMessages != nil {
            map["ErrorMessages"] = self.errorMessages?.toMap()
        }
        if self.failedApis != nil {
            map["FailedApis"] = self.failedApis?.toMap()
        }
        if self.failedModels != nil {
            map["FailedModels"] = self.failedModels?.toMap()
        }
        if self.operationId != nil {
            map["OperationId"] = self.operationId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.successApis != nil {
            map["SuccessApis"] = self.successApis?.toMap()
        }
        if self.successModels != nil {
            map["SuccessModels"] = self.successModels?.toMap()
        }
        if self.warningMessages != nil {
            map["WarningMessages"] = self.warningMessages?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ErrorMessages"] as? [String: Any?] {
            var model = ImportOASResponseBody.ErrorMessages()
            model.fromMap(value)
            self.errorMessages = model
        }
        if let value = dict["FailedApis"] as? [String: Any?] {
            var model = ImportOASResponseBody.FailedApis()
            model.fromMap(value)
            self.failedApis = model
        }
        if let value = dict["FailedModels"] as? [String: Any?] {
            var model = ImportOASResponseBody.FailedModels()
            model.fromMap(value)
            self.failedModels = model
        }
        if let value = dict["OperationId"] as? String {
            self.operationId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SuccessApis"] as? [String: Any?] {
            var model = ImportOASResponseBody.SuccessApis()
            model.fromMap(value)
            self.successApis = model
        }
        if let value = dict["SuccessModels"] as? [String: Any?] {
            var model = ImportOASResponseBody.SuccessModels()
            model.fromMap(value)
            self.successModels = model
        }
        if let value = dict["WarningMessages"] as? [String: Any?] {
            var model = ImportOASResponseBody.WarningMessages()
            model.fromMap(value)
            self.warningMessages = model
        }
    }
}

public class ImportOASResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ImportOASResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ImportOASResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ImportSwaggerRequest : Tea.TeaModel {
    public var data: String?

    public var dataFormat: String?

    public var dryRun: Bool?

    public var globalCondition: [String: Any]?

    public var groupId: String?

    public var overwrite: Bool?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.dataFormat != nil {
            map["DataFormat"] = self.dataFormat!
        }
        if self.dryRun != nil {
            map["DryRun"] = self.dryRun!
        }
        if self.globalCondition != nil {
            map["GlobalCondition"] = self.globalCondition!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.overwrite != nil {
            map["Overwrite"] = self.overwrite!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["DataFormat"] as? String {
            self.dataFormat = value
        }
        if let value = dict["DryRun"] as? Bool {
            self.dryRun = value
        }
        if let value = dict["GlobalCondition"] as? [String: Any] {
            self.globalCondition = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Overwrite"] as? Bool {
            self.overwrite = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class ImportSwaggerShrinkRequest : Tea.TeaModel {
    public var data: String?

    public var dataFormat: String?

    public var dryRun: Bool?

    public var globalConditionShrink: String?

    public var groupId: String?

    public var overwrite: Bool?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.data != nil {
            map["Data"] = self.data!
        }
        if self.dataFormat != nil {
            map["DataFormat"] = self.dataFormat!
        }
        if self.dryRun != nil {
            map["DryRun"] = self.dryRun!
        }
        if self.globalConditionShrink != nil {
            map["GlobalCondition"] = self.globalConditionShrink!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.overwrite != nil {
            map["Overwrite"] = self.overwrite!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Data"] as? String {
            self.data = value
        }
        if let value = dict["DataFormat"] as? String {
            self.dataFormat = value
        }
        if let value = dict["DryRun"] as? Bool {
            self.dryRun = value
        }
        if let value = dict["GlobalCondition"] as? String {
            self.globalConditionShrink = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Overwrite"] as? Bool {
            self.overwrite = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class ImportSwaggerResponseBody : Tea.TeaModel {
    public class Failed : Tea.TeaModel {
        public class ApiImportSwaggerFailed : Tea.TeaModel {
            public var errorMsg: String?

            public var httpMethod: String?

            public var path: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.errorMsg != nil {
                    map["ErrorMsg"] = self.errorMsg!
                }
                if self.httpMethod != nil {
                    map["HttpMethod"] = self.httpMethod!
                }
                if self.path != nil {
                    map["Path"] = self.path!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ErrorMsg"] as? String {
                    self.errorMsg = value
                }
                if let value = dict["HttpMethod"] as? String {
                    self.httpMethod = value
                }
                if let value = dict["Path"] as? String {
                    self.path = value
                }
            }
        }
        public var apiImportSwaggerFailed: [ImportSwaggerResponseBody.Failed.ApiImportSwaggerFailed]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiImportSwaggerFailed != nil {
                var tmp : [Any] = []
                for k in self.apiImportSwaggerFailed! {
                    tmp.append(k.toMap())
                }
                map["ApiImportSwaggerFailed"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiImportSwaggerFailed"] as? [Any?] {
                var tmp : [ImportSwaggerResponseBody.Failed.ApiImportSwaggerFailed] = []
                for v in value {
                    if v != nil {
                        var model = ImportSwaggerResponseBody.Failed.ApiImportSwaggerFailed()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.apiImportSwaggerFailed = tmp
            }
        }
    }
    public class ModelFailed : Tea.TeaModel {
        public class ApiImportModelFailed : Tea.TeaModel {
            public var errorMsg: String?

            public var groupId: String?

            public var modelName: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.errorMsg != nil {
                    map["ErrorMsg"] = self.errorMsg!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.modelName != nil {
                    map["ModelName"] = self.modelName!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ErrorMsg"] as? String {
                    self.errorMsg = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["ModelName"] as? String {
                    self.modelName = value
                }
            }
        }
        public var apiImportModelFailed: [ImportSwaggerResponseBody.ModelFailed.ApiImportModelFailed]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiImportModelFailed != nil {
                var tmp : [Any] = []
                for k in self.apiImportModelFailed! {
                    tmp.append(k.toMap())
                }
                map["ApiImportModelFailed"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiImportModelFailed"] as? [Any?] {
                var tmp : [ImportSwaggerResponseBody.ModelFailed.ApiImportModelFailed] = []
                for v in value {
                    if v != nil {
                        var model = ImportSwaggerResponseBody.ModelFailed.ApiImportModelFailed()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.apiImportModelFailed = tmp
            }
        }
    }
    public class ModelSuccess : Tea.TeaModel {
        public class ApiImportModelSuccess : Tea.TeaModel {
            public var groupId: String?

            public var modelName: String?

            public var modelOperation: String?

            public var modelUid: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.modelName != nil {
                    map["ModelName"] = self.modelName!
                }
                if self.modelOperation != nil {
                    map["ModelOperation"] = self.modelOperation!
                }
                if self.modelUid != nil {
                    map["ModelUid"] = self.modelUid!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["ModelName"] as? String {
                    self.modelName = value
                }
                if let value = dict["ModelOperation"] as? String {
                    self.modelOperation = value
                }
                if let value = dict["ModelUid"] as? String {
                    self.modelUid = value
                }
            }
        }
        public var apiImportModelSuccess: [ImportSwaggerResponseBody.ModelSuccess.ApiImportModelSuccess]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiImportModelSuccess != nil {
                var tmp : [Any] = []
                for k in self.apiImportModelSuccess! {
                    tmp.append(k.toMap())
                }
                map["ApiImportModelSuccess"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiImportModelSuccess"] as? [Any?] {
                var tmp : [ImportSwaggerResponseBody.ModelSuccess.ApiImportModelSuccess] = []
                for v in value {
                    if v != nil {
                        var model = ImportSwaggerResponseBody.ModelSuccess.ApiImportModelSuccess()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.apiImportModelSuccess = tmp
            }
        }
    }
    public class Success : Tea.TeaModel {
        public class ApiImportSwaggerSuccess : Tea.TeaModel {
            public var apiOperation: String?

            public var apiUid: String?

            public var httpMethod: String?

            public var path: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiOperation != nil {
                    map["ApiOperation"] = self.apiOperation!
                }
                if self.apiUid != nil {
                    map["ApiUid"] = self.apiUid!
                }
                if self.httpMethod != nil {
                    map["HttpMethod"] = self.httpMethod!
                }
                if self.path != nil {
                    map["Path"] = self.path!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiOperation"] as? String {
                    self.apiOperation = value
                }
                if let value = dict["ApiUid"] as? String {
                    self.apiUid = value
                }
                if let value = dict["HttpMethod"] as? String {
                    self.httpMethod = value
                }
                if let value = dict["Path"] as? String {
                    self.path = value
                }
            }
        }
        public var apiImportSwaggerSuccess: [ImportSwaggerResponseBody.Success.ApiImportSwaggerSuccess]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.apiImportSwaggerSuccess != nil {
                var tmp : [Any] = []
                for k in self.apiImportSwaggerSuccess! {
                    tmp.append(k.toMap())
                }
                map["ApiImportSwaggerSuccess"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["ApiImportSwaggerSuccess"] as? [Any?] {
                var tmp : [ImportSwaggerResponseBody.Success.ApiImportSwaggerSuccess] = []
                for v in value {
                    if v != nil {
                        var model = ImportSwaggerResponseBody.Success.ApiImportSwaggerSuccess()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.apiImportSwaggerSuccess = tmp
            }
        }
    }
    public var failed: ImportSwaggerResponseBody.Failed?

    public var modelFailed: ImportSwaggerResponseBody.ModelFailed?

    public var modelSuccess: ImportSwaggerResponseBody.ModelSuccess?

    public var requestId: String?

    public var success: ImportSwaggerResponseBody.Success?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.failed?.validate()
        try self.modelFailed?.validate()
        try self.modelSuccess?.validate()
        try self.success?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.failed != nil {
            map["Failed"] = self.failed?.toMap()
        }
        if self.modelFailed != nil {
            map["ModelFailed"] = self.modelFailed?.toMap()
        }
        if self.modelSuccess != nil {
            map["ModelSuccess"] = self.modelSuccess?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.success != nil {
            map["Success"] = self.success?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Failed"] as? [String: Any?] {
            var model = ImportSwaggerResponseBody.Failed()
            model.fromMap(value)
            self.failed = model
        }
        if let value = dict["ModelFailed"] as? [String: Any?] {
            var model = ImportSwaggerResponseBody.ModelFailed()
            model.fromMap(value)
            self.modelFailed = model
        }
        if let value = dict["ModelSuccess"] as? [String: Any?] {
            var model = ImportSwaggerResponseBody.ModelSuccess()
            model.fromMap(value)
            self.modelSuccess = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["Success"] as? [String: Any?] {
            var model = ImportSwaggerResponseBody.Success()
            model.fromMap(value)
            self.success = model
        }
    }
}

public class ImportSwaggerResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ImportSwaggerResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ImportSwaggerResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListPrivateDNSRequest : Tea.TeaModel {
    public var intranetDomain: String?

    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var securityToken: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.intranetDomain != nil {
            map["IntranetDomain"] = self.intranetDomain!
        }
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IntranetDomain"] as? String {
            self.intranetDomain = value
        }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class ListPrivateDNSResponseBody : Tea.TeaModel {
    public class PrivateDNSList : Tea.TeaModel {
        public class Records : Tea.TeaModel {
            public var record: String?

            public var weight: Int32?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.record != nil {
                    map["Record"] = self.record!
                }
                if self.weight != nil {
                    map["Weight"] = self.weight!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["Record"] as? String {
                    self.record = value
                }
                if let value = dict["Weight"] as? Int32 {
                    self.weight = value
                }
            }
        }
        public var bindInstances: [String]?

        public var createdTime: String?

        public var intranetDomain: String?

        public var records: [ListPrivateDNSResponseBody.PrivateDNSList.Records]?

        public var type: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.bindInstances != nil {
                map["BindInstances"] = self.bindInstances!
            }
            if self.createdTime != nil {
                map["CreatedTime"] = self.createdTime!
            }
            if self.intranetDomain != nil {
                map["IntranetDomain"] = self.intranetDomain!
            }
            if self.records != nil {
                var tmp : [Any] = []
                for k in self.records! {
                    tmp.append(k.toMap())
                }
                map["Records"] = tmp
            }
            if self.type != nil {
                map["Type"] = self.type!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["BindInstances"] as? [String] {
                self.bindInstances = value
            }
            if let value = dict["CreatedTime"] as? String {
                self.createdTime = value
            }
            if let value = dict["IntranetDomain"] as? String {
                self.intranetDomain = value
            }
            if let value = dict["Records"] as? [Any?] {
                var tmp : [ListPrivateDNSResponseBody.PrivateDNSList.Records] = []
                for v in value {
                    if v != nil {
                        var model = ListPrivateDNSResponseBody.PrivateDNSList.Records()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.records = tmp
            }
            if let value = dict["Type"] as? String {
                self.type = value
            }
        }
    }
    public var pageNumber: Int32?

    public var pageSize: Int32?

    public var privateDNSList: [ListPrivateDNSResponseBody.PrivateDNSList]?

    public var requestId: String?

    public var totalCount: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.pageNumber != nil {
            map["PageNumber"] = self.pageNumber!
        }
        if self.pageSize != nil {
            map["PageSize"] = self.pageSize!
        }
        if self.privateDNSList != nil {
            var tmp : [Any] = []
            for k in self.privateDNSList! {
                tmp.append(k.toMap())
            }
            map["PrivateDNSList"] = tmp
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.totalCount != nil {
            map["TotalCount"] = self.totalCount!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["PageNumber"] as? Int32 {
            self.pageNumber = value
        }
        if let value = dict["PageSize"] as? Int32 {
            self.pageSize = value
        }
        if let value = dict["PrivateDNSList"] as? [Any?] {
            var tmp : [ListPrivateDNSResponseBody.PrivateDNSList] = []
            for v in value {
                if v != nil {
                    var model = ListPrivateDNSResponseBody.PrivateDNSList()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.privateDNSList = tmp
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TotalCount"] as? Int32 {
            self.totalCount = value
        }
    }
}

public class ListPrivateDNSResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListPrivateDNSResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListPrivateDNSResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ListTagResourcesRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var nextToken: String?

    public var resourceId: [String]?

    public var resourceType: String?

    public var tag: [ListTagResourcesRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.resourceId != nil {
            map["ResourceId"] = self.resourceId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["ResourceId"] as? [String] {
            self.resourceId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [ListTagResourcesRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = ListTagResourcesRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class ListTagResourcesResponseBody : Tea.TeaModel {
    public class TagResources : Tea.TeaModel {
        public class TagResource : Tea.TeaModel {
            public var resourceId: String?

            public var resourceType: String?

            public var tagKey: String?

            public var tagValue: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.resourceId != nil {
                    map["ResourceId"] = self.resourceId!
                }
                if self.resourceType != nil {
                    map["ResourceType"] = self.resourceType!
                }
                if self.tagKey != nil {
                    map["TagKey"] = self.tagKey!
                }
                if self.tagValue != nil {
                    map["TagValue"] = self.tagValue!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ResourceId"] as? String {
                    self.resourceId = value
                }
                if let value = dict["ResourceType"] as? String {
                    self.resourceType = value
                }
                if let value = dict["TagKey"] as? String {
                    self.tagKey = value
                }
                if let value = dict["TagValue"] as? String {
                    self.tagValue = value
                }
            }
        }
        public var tagResource: [ListTagResourcesResponseBody.TagResources.TagResource]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.tagResource != nil {
                var tmp : [Any] = []
                for k in self.tagResource! {
                    tmp.append(k.toMap())
                }
                map["TagResource"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["TagResource"] as? [Any?] {
                var tmp : [ListTagResourcesResponseBody.TagResources.TagResource] = []
                for v in value {
                    if v != nil {
                        var model = ListTagResourcesResponseBody.TagResources.TagResource()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.tagResource = tmp
            }
        }
    }
    public var nextToken: String?

    public var requestId: String?

    public var tagResources: ListTagResourcesResponseBody.TagResources?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.tagResources?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.nextToken != nil {
            map["NextToken"] = self.nextToken!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.tagResources != nil {
            map["TagResources"] = self.tagResources?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["NextToken"] as? String {
            self.nextToken = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["TagResources"] as? [String: Any?] {
            var model = ListTagResourcesResponseBody.TagResources()
            model.fromMap(value)
            self.tagResources = model
        }
    }
}

public class ListTagResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ListTagResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ListTagResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyApiRequest : Tea.TeaModel {
    public var allowSignatureMethod: String?

    public var apiId: String?

    public var apiName: String?

    public var appCodeAuthType: String?

    public var authType: String?

    public var backendEnable: Bool?

    public var backendId: String?

    public var constantParameters: String?

    public var description_: String?

    public var disableInternet: Bool?

    public var errorCodeSamples: String?

    public var failResultSample: String?

    public var forceNonceCheck: Bool?

    public var groupId: String?

    public var openIdConnectConfig: String?

    public var requestConfig: String?

    public var requestParameters: String?

    public var resultBodyModel: String?

    public var resultDescriptions: String?

    public var resultSample: String?

    public var resultType: String?

    public var securityToken: String?

    public var serviceConfig: String?

    public var serviceParameters: String?

    public var serviceParametersMap: String?

    public var systemParameters: String?

    public var visibility: String?

    public var webSocketApiType: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.allowSignatureMethod != nil {
            map["AllowSignatureMethod"] = self.allowSignatureMethod!
        }
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.apiName != nil {
            map["ApiName"] = self.apiName!
        }
        if self.appCodeAuthType != nil {
            map["AppCodeAuthType"] = self.appCodeAuthType!
        }
        if self.authType != nil {
            map["AuthType"] = self.authType!
        }
        if self.backendEnable != nil {
            map["BackendEnable"] = self.backendEnable!
        }
        if self.backendId != nil {
            map["BackendId"] = self.backendId!
        }
        if self.constantParameters != nil {
            map["ConstantParameters"] = self.constantParameters!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.disableInternet != nil {
            map["DisableInternet"] = self.disableInternet!
        }
        if self.errorCodeSamples != nil {
            map["ErrorCodeSamples"] = self.errorCodeSamples!
        }
        if self.failResultSample != nil {
            map["FailResultSample"] = self.failResultSample!
        }
        if self.forceNonceCheck != nil {
            map["ForceNonceCheck"] = self.forceNonceCheck!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.openIdConnectConfig != nil {
            map["OpenIdConnectConfig"] = self.openIdConnectConfig!
        }
        if self.requestConfig != nil {
            map["RequestConfig"] = self.requestConfig!
        }
        if self.requestParameters != nil {
            map["RequestParameters"] = self.requestParameters!
        }
        if self.resultBodyModel != nil {
            map["ResultBodyModel"] = self.resultBodyModel!
        }
        if self.resultDescriptions != nil {
            map["ResultDescriptions"] = self.resultDescriptions!
        }
        if self.resultSample != nil {
            map["ResultSample"] = self.resultSample!
        }
        if self.resultType != nil {
            map["ResultType"] = self.resultType!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.serviceConfig != nil {
            map["ServiceConfig"] = self.serviceConfig!
        }
        if self.serviceParameters != nil {
            map["ServiceParameters"] = self.serviceParameters!
        }
        if self.serviceParametersMap != nil {
            map["ServiceParametersMap"] = self.serviceParametersMap!
        }
        if self.systemParameters != nil {
            map["SystemParameters"] = self.systemParameters!
        }
        if self.visibility != nil {
            map["Visibility"] = self.visibility!
        }
        if self.webSocketApiType != nil {
            map["WebSocketApiType"] = self.webSocketApiType!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AllowSignatureMethod"] as? String {
            self.allowSignatureMethod = value
        }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["ApiName"] as? String {
            self.apiName = value
        }
        if let value = dict["AppCodeAuthType"] as? String {
            self.appCodeAuthType = value
        }
        if let value = dict["AuthType"] as? String {
            self.authType = value
        }
        if let value = dict["BackendEnable"] as? Bool {
            self.backendEnable = value
        }
        if let value = dict["BackendId"] as? String {
            self.backendId = value
        }
        if let value = dict["ConstantParameters"] as? String {
            self.constantParameters = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DisableInternet"] as? Bool {
            self.disableInternet = value
        }
        if let value = dict["ErrorCodeSamples"] as? String {
            self.errorCodeSamples = value
        }
        if let value = dict["FailResultSample"] as? String {
            self.failResultSample = value
        }
        if let value = dict["ForceNonceCheck"] as? Bool {
            self.forceNonceCheck = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["OpenIdConnectConfig"] as? String {
            self.openIdConnectConfig = value
        }
        if let value = dict["RequestConfig"] as? String {
            self.requestConfig = value
        }
        if let value = dict["RequestParameters"] as? String {
            self.requestParameters = value
        }
        if let value = dict["ResultBodyModel"] as? String {
            self.resultBodyModel = value
        }
        if let value = dict["ResultDescriptions"] as? String {
            self.resultDescriptions = value
        }
        if let value = dict["ResultSample"] as? String {
            self.resultSample = value
        }
        if let value = dict["ResultType"] as? String {
            self.resultType = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["ServiceConfig"] as? String {
            self.serviceConfig = value
        }
        if let value = dict["ServiceParameters"] as? String {
            self.serviceParameters = value
        }
        if let value = dict["ServiceParametersMap"] as? String {
            self.serviceParametersMap = value
        }
        if let value = dict["SystemParameters"] as? String {
            self.systemParameters = value
        }
        if let value = dict["Visibility"] as? String {
            self.visibility = value
        }
        if let value = dict["WebSocketApiType"] as? String {
            self.webSocketApiType = value
        }
    }
}

public class ModifyApiResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyApiResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyApiResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyApiResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyApiConfigurationRequest : Tea.TeaModel {
    public var allowSignatureMethod: String?

    public var apiId: String?

    public var apiName: String?

    public var appCodeAuthType: String?

    public var authType: String?

    public var backendName: String?

    public var bodyFormat: String?

    public var bodyModel: String?

    public var contentTypeCategory: String?

    public var contentTypeValue: String?

    public var description_: String?

    public var disableInternet: Bool?

    public var errorCodeSamples: String?

    public var failResultSample: String?

    public var forceNonceCheck: Bool?

    public var functionComputeConfig: String?

    public var httpConfig: String?

    public var mockConfig: String?

    public var modelName: String?

    public var ossConfig: String?

    public var postBodyDescription: String?

    public var requestHttpMethod: String?

    public var requestMode: String?

    public var requestParameters: String?

    public var requestPath: String?

    public var requestProtocol: String?

    public var resultSample: String?

    public var resultType: String?

    public var securityToken: String?

    public var serviceParameters: String?

    public var serviceParametersMap: String?

    public var serviceProtocol: String?

    public var serviceTimeout: Int32?

    public var useBackendService: Bool?

    public var visibility: String?

    public var vpcConfig: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.allowSignatureMethod != nil {
            map["AllowSignatureMethod"] = self.allowSignatureMethod!
        }
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.apiName != nil {
            map["ApiName"] = self.apiName!
        }
        if self.appCodeAuthType != nil {
            map["AppCodeAuthType"] = self.appCodeAuthType!
        }
        if self.authType != nil {
            map["AuthType"] = self.authType!
        }
        if self.backendName != nil {
            map["BackendName"] = self.backendName!
        }
        if self.bodyFormat != nil {
            map["BodyFormat"] = self.bodyFormat!
        }
        if self.bodyModel != nil {
            map["BodyModel"] = self.bodyModel!
        }
        if self.contentTypeCategory != nil {
            map["ContentTypeCategory"] = self.contentTypeCategory!
        }
        if self.contentTypeValue != nil {
            map["ContentTypeValue"] = self.contentTypeValue!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.disableInternet != nil {
            map["DisableInternet"] = self.disableInternet!
        }
        if self.errorCodeSamples != nil {
            map["ErrorCodeSamples"] = self.errorCodeSamples!
        }
        if self.failResultSample != nil {
            map["FailResultSample"] = self.failResultSample!
        }
        if self.forceNonceCheck != nil {
            map["ForceNonceCheck"] = self.forceNonceCheck!
        }
        if self.functionComputeConfig != nil {
            map["FunctionComputeConfig"] = self.functionComputeConfig!
        }
        if self.httpConfig != nil {
            map["HttpConfig"] = self.httpConfig!
        }
        if self.mockConfig != nil {
            map["MockConfig"] = self.mockConfig!
        }
        if self.modelName != nil {
            map["ModelName"] = self.modelName!
        }
        if self.ossConfig != nil {
            map["OssConfig"] = self.ossConfig!
        }
        if self.postBodyDescription != nil {
            map["PostBodyDescription"] = self.postBodyDescription!
        }
        if self.requestHttpMethod != nil {
            map["RequestHttpMethod"] = self.requestHttpMethod!
        }
        if self.requestMode != nil {
            map["RequestMode"] = self.requestMode!
        }
        if self.requestParameters != nil {
            map["RequestParameters"] = self.requestParameters!
        }
        if self.requestPath != nil {
            map["RequestPath"] = self.requestPath!
        }
        if self.requestProtocol != nil {
            map["RequestProtocol"] = self.requestProtocol!
        }
        if self.resultSample != nil {
            map["ResultSample"] = self.resultSample!
        }
        if self.resultType != nil {
            map["ResultType"] = self.resultType!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.serviceParameters != nil {
            map["ServiceParameters"] = self.serviceParameters!
        }
        if self.serviceParametersMap != nil {
            map["ServiceParametersMap"] = self.serviceParametersMap!
        }
        if self.serviceProtocol != nil {
            map["ServiceProtocol"] = self.serviceProtocol!
        }
        if self.serviceTimeout != nil {
            map["ServiceTimeout"] = self.serviceTimeout!
        }
        if self.useBackendService != nil {
            map["UseBackendService"] = self.useBackendService!
        }
        if self.visibility != nil {
            map["Visibility"] = self.visibility!
        }
        if self.vpcConfig != nil {
            map["VpcConfig"] = self.vpcConfig!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AllowSignatureMethod"] as? String {
            self.allowSignatureMethod = value
        }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["ApiName"] as? String {
            self.apiName = value
        }
        if let value = dict["AppCodeAuthType"] as? String {
            self.appCodeAuthType = value
        }
        if let value = dict["AuthType"] as? String {
            self.authType = value
        }
        if let value = dict["BackendName"] as? String {
            self.backendName = value
        }
        if let value = dict["BodyFormat"] as? String {
            self.bodyFormat = value
        }
        if let value = dict["BodyModel"] as? String {
            self.bodyModel = value
        }
        if let value = dict["ContentTypeCategory"] as? String {
            self.contentTypeCategory = value
        }
        if let value = dict["ContentTypeValue"] as? String {
            self.contentTypeValue = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["DisableInternet"] as? Bool {
            self.disableInternet = value
        }
        if let value = dict["ErrorCodeSamples"] as? String {
            self.errorCodeSamples = value
        }
        if let value = dict["FailResultSample"] as? String {
            self.failResultSample = value
        }
        if let value = dict["ForceNonceCheck"] as? Bool {
            self.forceNonceCheck = value
        }
        if let value = dict["FunctionComputeConfig"] as? String {
            self.functionComputeConfig = value
        }
        if let value = dict["HttpConfig"] as? String {
            self.httpConfig = value
        }
        if let value = dict["MockConfig"] as? String {
            self.mockConfig = value
        }
        if let value = dict["ModelName"] as? String {
            self.modelName = value
        }
        if let value = dict["OssConfig"] as? String {
            self.ossConfig = value
        }
        if let value = dict["PostBodyDescription"] as? String {
            self.postBodyDescription = value
        }
        if let value = dict["RequestHttpMethod"] as? String {
            self.requestHttpMethod = value
        }
        if let value = dict["RequestMode"] as? String {
            self.requestMode = value
        }
        if let value = dict["RequestParameters"] as? String {
            self.requestParameters = value
        }
        if let value = dict["RequestPath"] as? String {
            self.requestPath = value
        }
        if let value = dict["RequestProtocol"] as? String {
            self.requestProtocol = value
        }
        if let value = dict["ResultSample"] as? String {
            self.resultSample = value
        }
        if let value = dict["ResultType"] as? String {
            self.resultType = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["ServiceParameters"] as? String {
            self.serviceParameters = value
        }
        if let value = dict["ServiceParametersMap"] as? String {
            self.serviceParametersMap = value
        }
        if let value = dict["ServiceProtocol"] as? String {
            self.serviceProtocol = value
        }
        if let value = dict["ServiceTimeout"] as? Int32 {
            self.serviceTimeout = value
        }
        if let value = dict["UseBackendService"] as? Bool {
            self.useBackendService = value
        }
        if let value = dict["Visibility"] as? String {
            self.visibility = value
        }
        if let value = dict["VpcConfig"] as? String {
            self.vpcConfig = value
        }
    }
}

public class ModifyApiConfigurationResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyApiConfigurationResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyApiConfigurationResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyApiConfigurationResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyApiGroupRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var basePath: String?

    public var compatibleFlags: String?

    public var customAppCodeConfig: String?

    public var customTraceConfig: String?

    public var customerConfigs: String?

    public var defaultDomain: String?

    public var description_: String?

    public var filterAppCodeForBackend: String?

    public var groupId: String?

    public var groupName: String?

    public var passthroughHeaders: String?

    public var rpcPattern: String?

    public var rpsLimitForServerless: String?

    public var securityToken: String?

    public var supportSSE: String?

    public var tag: [ModifyApiGroupRequest.Tag]?

    public var userLogConfig: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.basePath != nil {
            map["BasePath"] = self.basePath!
        }
        if self.compatibleFlags != nil {
            map["CompatibleFlags"] = self.compatibleFlags!
        }
        if self.customAppCodeConfig != nil {
            map["CustomAppCodeConfig"] = self.customAppCodeConfig!
        }
        if self.customTraceConfig != nil {
            map["CustomTraceConfig"] = self.customTraceConfig!
        }
        if self.customerConfigs != nil {
            map["CustomerConfigs"] = self.customerConfigs!
        }
        if self.defaultDomain != nil {
            map["DefaultDomain"] = self.defaultDomain!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.filterAppCodeForBackend != nil {
            map["FilterAppCodeForBackend"] = self.filterAppCodeForBackend!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.passthroughHeaders != nil {
            map["PassthroughHeaders"] = self.passthroughHeaders!
        }
        if self.rpcPattern != nil {
            map["RpcPattern"] = self.rpcPattern!
        }
        if self.rpsLimitForServerless != nil {
            map["RpsLimitForServerless"] = self.rpsLimitForServerless!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.supportSSE != nil {
            map["SupportSSE"] = self.supportSSE!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        if self.userLogConfig != nil {
            map["UserLogConfig"] = self.userLogConfig!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BasePath"] as? String {
            self.basePath = value
        }
        if let value = dict["CompatibleFlags"] as? String {
            self.compatibleFlags = value
        }
        if let value = dict["CustomAppCodeConfig"] as? String {
            self.customAppCodeConfig = value
        }
        if let value = dict["CustomTraceConfig"] as? String {
            self.customTraceConfig = value
        }
        if let value = dict["CustomerConfigs"] as? String {
            self.customerConfigs = value
        }
        if let value = dict["DefaultDomain"] as? String {
            self.defaultDomain = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["FilterAppCodeForBackend"] as? String {
            self.filterAppCodeForBackend = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["PassthroughHeaders"] as? String {
            self.passthroughHeaders = value
        }
        if let value = dict["RpcPattern"] as? String {
            self.rpcPattern = value
        }
        if let value = dict["RpsLimitForServerless"] as? String {
            self.rpsLimitForServerless = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["SupportSSE"] as? String {
            self.supportSSE = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [ModifyApiGroupRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = ModifyApiGroupRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
        if let value = dict["UserLogConfig"] as? String {
            self.userLogConfig = value
        }
    }
}

public class ModifyApiGroupResponseBody : Tea.TeaModel {
    public var basePath: String?

    public var description_: String?

    public var groupId: String?

    public var groupName: String?

    public var requestId: String?

    public var subDomain: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.basePath != nil {
            map["BasePath"] = self.basePath!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.groupName != nil {
            map["GroupName"] = self.groupName!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.subDomain != nil {
            map["SubDomain"] = self.subDomain!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BasePath"] as? String {
            self.basePath = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["GroupName"] as? String {
            self.groupName = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SubDomain"] as? String {
            self.subDomain = value
        }
    }
}

public class ModifyApiGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyApiGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyApiGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyApiGroupInstanceRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var groupId: String?

    public var remark: String?

    public var securityToken: String?

    public var tag: [ModifyApiGroupInstanceRequest.Tag]?

    public var targetInstanceId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.remark != nil {
            map["Remark"] = self.remark!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        if self.targetInstanceId != nil {
            map["TargetInstanceId"] = self.targetInstanceId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Remark"] as? String {
            self.remark = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [ModifyApiGroupInstanceRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = ModifyApiGroupInstanceRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
        if let value = dict["TargetInstanceId"] as? String {
            self.targetInstanceId = value
        }
    }
}

public class ModifyApiGroupInstanceResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyApiGroupInstanceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyApiGroupInstanceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyApiGroupInstanceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyApiGroupNetworkPolicyRequest : Tea.TeaModel {
    public var groupId: String?

    public var httpsPolicy: String?

    public var innerDomainEnable: Bool?

    public var internetEnable: Bool?

    public var internetIPV6Enable: Bool?

    public var securityToken: String?

    public var vpcIntranetEnable: Bool?

    public var vpcSlbIntranetEnable: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.httpsPolicy != nil {
            map["HttpsPolicy"] = self.httpsPolicy!
        }
        if self.innerDomainEnable != nil {
            map["InnerDomainEnable"] = self.innerDomainEnable!
        }
        if self.internetEnable != nil {
            map["InternetEnable"] = self.internetEnable!
        }
        if self.internetIPV6Enable != nil {
            map["InternetIPV6Enable"] = self.internetIPV6Enable!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.vpcIntranetEnable != nil {
            map["VpcIntranetEnable"] = self.vpcIntranetEnable!
        }
        if self.vpcSlbIntranetEnable != nil {
            map["VpcSlbIntranetEnable"] = self.vpcSlbIntranetEnable!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["HttpsPolicy"] as? String {
            self.httpsPolicy = value
        }
        if let value = dict["InnerDomainEnable"] as? Bool {
            self.innerDomainEnable = value
        }
        if let value = dict["InternetEnable"] as? Bool {
            self.internetEnable = value
        }
        if let value = dict["InternetIPV6Enable"] as? Bool {
            self.internetIPV6Enable = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["VpcIntranetEnable"] as? Bool {
            self.vpcIntranetEnable = value
        }
        if let value = dict["VpcSlbIntranetEnable"] as? Bool {
            self.vpcSlbIntranetEnable = value
        }
    }
}

public class ModifyApiGroupNetworkPolicyResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyApiGroupNetworkPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyApiGroupNetworkPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyApiGroupNetworkPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyApiGroupVpcWhitelistRequest : Tea.TeaModel {
    public var groupId: String?

    public var securityToken: String?

    public var vpcIds: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.vpcIds != nil {
            map["VpcIds"] = self.vpcIds!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["VpcIds"] as? String {
            self.vpcIds = value
        }
    }
}

public class ModifyApiGroupVpcWhitelistResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyApiGroupVpcWhitelistResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyApiGroupVpcWhitelistResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyApiGroupVpcWhitelistResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyAppRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var appId: Int64?

    public var appName: String?

    public var description_: String?

    public var disabled: Bool?

    public var extend: String?

    public var securityToken: String?

    public var tag: [ModifyAppRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.appName != nil {
            map["AppName"] = self.appName!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.disabled != nil {
            map["Disabled"] = self.disabled!
        }
        if self.extend != nil {
            map["Extend"] = self.extend!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? Int64 {
            self.appId = value
        }
        if let value = dict["AppName"] as? String {
            self.appName = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["Disabled"] as? Bool {
            self.disabled = value
        }
        if let value = dict["Extend"] as? String {
            self.extend = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [ModifyAppRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = ModifyAppRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class ModifyAppResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyAppResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyAppResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyAppResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyBackendRequest : Tea.TeaModel {
    public var backendId: String?

    public var backendName: String?

    public var backendType: String?

    public var description_: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.backendId != nil {
            map["BackendId"] = self.backendId!
        }
        if self.backendName != nil {
            map["BackendName"] = self.backendName!
        }
        if self.backendType != nil {
            map["BackendType"] = self.backendType!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BackendId"] as? String {
            self.backendId = value
        }
        if let value = dict["BackendName"] as? String {
            self.backendName = value
        }
        if let value = dict["BackendType"] as? String {
            self.backendType = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class ModifyBackendResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyBackendResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyBackendResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyBackendResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyBackendModelRequest : Tea.TeaModel {
    public var backendId: String?

    public var backendModelData: String?

    public var backendModelId: String?

    public var backendType: String?

    public var description_: String?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.backendId != nil {
            map["BackendId"] = self.backendId!
        }
        if self.backendModelData != nil {
            map["BackendModelData"] = self.backendModelData!
        }
        if self.backendModelId != nil {
            map["BackendModelId"] = self.backendModelId!
        }
        if self.backendType != nil {
            map["BackendType"] = self.backendType!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BackendId"] as? String {
            self.backendId = value
        }
        if let value = dict["BackendModelData"] as? String {
            self.backendModelData = value
        }
        if let value = dict["BackendModelId"] as? String {
            self.backendModelId = value
        }
        if let value = dict["BackendType"] as? String {
            self.backendType = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class ModifyBackendModelResponseBody : Tea.TeaModel {
    public var operationId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.operationId != nil {
            map["OperationId"] = self.operationId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OperationId"] as? String {
            self.operationId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyBackendModelResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyBackendModelResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyBackendModelResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyDatasetRequest : Tea.TeaModel {
    public var datasetId: String?

    public var datasetName: String?

    public var description_: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetId != nil {
            map["DatasetId"] = self.datasetId!
        }
        if self.datasetName != nil {
            map["DatasetName"] = self.datasetName!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetId"] as? String {
            self.datasetId = value
        }
        if let value = dict["DatasetName"] as? String {
            self.datasetName = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class ModifyDatasetResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyDatasetResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyDatasetResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyDatasetResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyDatasetItemRequest : Tea.TeaModel {
    public var datasetId: String?

    public var datasetItemId: String?

    public var description_: String?

    public var expiredTime: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.datasetId != nil {
            map["DatasetId"] = self.datasetId!
        }
        if self.datasetItemId != nil {
            map["DatasetItemId"] = self.datasetItemId!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.expiredTime != nil {
            map["ExpiredTime"] = self.expiredTime!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DatasetId"] as? String {
            self.datasetId = value
        }
        if let value = dict["DatasetItemId"] as? String {
            self.datasetItemId = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["ExpiredTime"] as? String {
            self.expiredTime = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class ModifyDatasetItemResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyDatasetItemResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyDatasetItemResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyDatasetItemResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyInstanceAttributeRequest : Tea.TeaModel {
    public class ToConnectVpcIpBlock : Tea.TeaModel {
        public var cidrBlock: String?

        public var customized: Bool?

        public var vswitchId: String?

        public var zoneId: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.cidrBlock != nil {
                map["CidrBlock"] = self.cidrBlock!
            }
            if self.customized != nil {
                map["Customized"] = self.customized!
            }
            if self.vswitchId != nil {
                map["VswitchId"] = self.vswitchId!
            }
            if self.zoneId != nil {
                map["ZoneId"] = self.zoneId!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["CidrBlock"] as? String {
                self.cidrBlock = value
            }
            if let value = dict["Customized"] as? Bool {
                self.customized = value
            }
            if let value = dict["VswitchId"] as? String {
                self.vswitchId = value
            }
            if let value = dict["ZoneId"] as? String {
                self.zoneId = value
            }
        }
    }
    public var deleteVpcIpBlock: String?

    public var egressIpv6Enable: String?

    public var httpsPolicy: String?

    public var IPV6Enabled: String?

    public var instanceId: String?

    public var instanceName: String?

    public var intranetSegments: String?

    public var maintainEndTime: String?

    public var maintainStartTime: String?

    public var toConnectVpcIpBlock: ModifyInstanceAttributeRequest.ToConnectVpcIpBlock?

    public var token: String?

    public var vpcSlbIntranetEnable: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.toConnectVpcIpBlock?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deleteVpcIpBlock != nil {
            map["DeleteVpcIpBlock"] = self.deleteVpcIpBlock!
        }
        if self.egressIpv6Enable != nil {
            map["EgressIpv6Enable"] = self.egressIpv6Enable!
        }
        if self.httpsPolicy != nil {
            map["HttpsPolicy"] = self.httpsPolicy!
        }
        if self.IPV6Enabled != nil {
            map["IPV6Enabled"] = self.IPV6Enabled!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.instanceName != nil {
            map["InstanceName"] = self.instanceName!
        }
        if self.intranetSegments != nil {
            map["IntranetSegments"] = self.intranetSegments!
        }
        if self.maintainEndTime != nil {
            map["MaintainEndTime"] = self.maintainEndTime!
        }
        if self.maintainStartTime != nil {
            map["MaintainStartTime"] = self.maintainStartTime!
        }
        if self.toConnectVpcIpBlock != nil {
            map["ToConnectVpcIpBlock"] = self.toConnectVpcIpBlock?.toMap()
        }
        if self.token != nil {
            map["Token"] = self.token!
        }
        if self.vpcSlbIntranetEnable != nil {
            map["VpcSlbIntranetEnable"] = self.vpcSlbIntranetEnable!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeleteVpcIpBlock"] as? String {
            self.deleteVpcIpBlock = value
        }
        if let value = dict["EgressIpv6Enable"] as? String {
            self.egressIpv6Enable = value
        }
        if let value = dict["HttpsPolicy"] as? String {
            self.httpsPolicy = value
        }
        if let value = dict["IPV6Enabled"] as? String {
            self.IPV6Enabled = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["InstanceName"] as? String {
            self.instanceName = value
        }
        if let value = dict["IntranetSegments"] as? String {
            self.intranetSegments = value
        }
        if let value = dict["MaintainEndTime"] as? String {
            self.maintainEndTime = value
        }
        if let value = dict["MaintainStartTime"] as? String {
            self.maintainStartTime = value
        }
        if let value = dict["ToConnectVpcIpBlock"] as? [String: Any?] {
            var model = ModifyInstanceAttributeRequest.ToConnectVpcIpBlock()
            model.fromMap(value)
            self.toConnectVpcIpBlock = model
        }
        if let value = dict["Token"] as? String {
            self.token = value
        }
        if let value = dict["VpcSlbIntranetEnable"] as? String {
            self.vpcSlbIntranetEnable = value
        }
    }
}

public class ModifyInstanceAttributeShrinkRequest : Tea.TeaModel {
    public var deleteVpcIpBlock: String?

    public var egressIpv6Enable: String?

    public var httpsPolicy: String?

    public var IPV6Enabled: String?

    public var instanceId: String?

    public var instanceName: String?

    public var intranetSegments: String?

    public var maintainEndTime: String?

    public var maintainStartTime: String?

    public var toConnectVpcIpBlockShrink: String?

    public var token: String?

    public var vpcSlbIntranetEnable: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deleteVpcIpBlock != nil {
            map["DeleteVpcIpBlock"] = self.deleteVpcIpBlock!
        }
        if self.egressIpv6Enable != nil {
            map["EgressIpv6Enable"] = self.egressIpv6Enable!
        }
        if self.httpsPolicy != nil {
            map["HttpsPolicy"] = self.httpsPolicy!
        }
        if self.IPV6Enabled != nil {
            map["IPV6Enabled"] = self.IPV6Enabled!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.instanceName != nil {
            map["InstanceName"] = self.instanceName!
        }
        if self.intranetSegments != nil {
            map["IntranetSegments"] = self.intranetSegments!
        }
        if self.maintainEndTime != nil {
            map["MaintainEndTime"] = self.maintainEndTime!
        }
        if self.maintainStartTime != nil {
            map["MaintainStartTime"] = self.maintainStartTime!
        }
        if self.toConnectVpcIpBlockShrink != nil {
            map["ToConnectVpcIpBlock"] = self.toConnectVpcIpBlockShrink!
        }
        if self.token != nil {
            map["Token"] = self.token!
        }
        if self.vpcSlbIntranetEnable != nil {
            map["VpcSlbIntranetEnable"] = self.vpcSlbIntranetEnable!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeleteVpcIpBlock"] as? String {
            self.deleteVpcIpBlock = value
        }
        if let value = dict["EgressIpv6Enable"] as? String {
            self.egressIpv6Enable = value
        }
        if let value = dict["HttpsPolicy"] as? String {
            self.httpsPolicy = value
        }
        if let value = dict["IPV6Enabled"] as? String {
            self.IPV6Enabled = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["InstanceName"] as? String {
            self.instanceName = value
        }
        if let value = dict["IntranetSegments"] as? String {
            self.intranetSegments = value
        }
        if let value = dict["MaintainEndTime"] as? String {
            self.maintainEndTime = value
        }
        if let value = dict["MaintainStartTime"] as? String {
            self.maintainStartTime = value
        }
        if let value = dict["ToConnectVpcIpBlock"] as? String {
            self.toConnectVpcIpBlockShrink = value
        }
        if let value = dict["Token"] as? String {
            self.token = value
        }
        if let value = dict["VpcSlbIntranetEnable"] as? String {
            self.vpcSlbIntranetEnable = value
        }
    }
}

public class ModifyInstanceAttributeResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyInstanceAttributeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyInstanceAttributeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyInstanceAttributeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyInstanceSpecRequest : Tea.TeaModel {
    public var autoPay: Bool?

    public var instanceId: String?

    public var instanceSpec: String?

    public var modifyAction: String?

    public var skipWaitSwitch: Bool?

    public var token: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.autoPay != nil {
            map["AutoPay"] = self.autoPay!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.instanceSpec != nil {
            map["InstanceSpec"] = self.instanceSpec!
        }
        if self.modifyAction != nil {
            map["ModifyAction"] = self.modifyAction!
        }
        if self.skipWaitSwitch != nil {
            map["SkipWaitSwitch"] = self.skipWaitSwitch!
        }
        if self.token != nil {
            map["Token"] = self.token!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AutoPay"] as? Bool {
            self.autoPay = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["InstanceSpec"] as? String {
            self.instanceSpec = value
        }
        if let value = dict["ModifyAction"] as? String {
            self.modifyAction = value
        }
        if let value = dict["SkipWaitSwitch"] as? Bool {
            self.skipWaitSwitch = value
        }
        if let value = dict["Token"] as? String {
            self.token = value
        }
    }
}

public class ModifyInstanceSpecResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyInstanceSpecResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyInstanceSpecResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyInstanceSpecResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyInstanceVpcAttributeForConsoleRequest : Tea.TeaModel {
    public var deleteVpcAccess: Bool?

    public var instanceId: String?

    public var token: String?

    public var vpcId: String?

    public var vpcOwnerId: Int64?

    public var vswitchId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.deleteVpcAccess != nil {
            map["DeleteVpcAccess"] = self.deleteVpcAccess!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.token != nil {
            map["Token"] = self.token!
        }
        if self.vpcId != nil {
            map["VpcId"] = self.vpcId!
        }
        if self.vpcOwnerId != nil {
            map["VpcOwnerId"] = self.vpcOwnerId!
        }
        if self.vswitchId != nil {
            map["VswitchId"] = self.vswitchId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DeleteVpcAccess"] as? Bool {
            self.deleteVpcAccess = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Token"] as? String {
            self.token = value
        }
        if let value = dict["VpcId"] as? String {
            self.vpcId = value
        }
        if let value = dict["VpcOwnerId"] as? Int64 {
            self.vpcOwnerId = value
        }
        if let value = dict["VswitchId"] as? String {
            self.vswitchId = value
        }
    }
}

public class ModifyInstanceVpcAttributeForConsoleResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyInstanceVpcAttributeForConsoleResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyInstanceVpcAttributeForConsoleResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyInstanceVpcAttributeForConsoleResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyIntranetDomainPolicyRequest : Tea.TeaModel {
    public var groupId: String?

    public var securityToken: String?

    public var vpcIntranetEnable: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.vpcIntranetEnable != nil {
            map["VpcIntranetEnable"] = self.vpcIntranetEnable!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["VpcIntranetEnable"] as? Bool {
            self.vpcIntranetEnable = value
        }
    }
}

public class ModifyIntranetDomainPolicyResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyIntranetDomainPolicyResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyIntranetDomainPolicyResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyIntranetDomainPolicyResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyIpControlRequest : Tea.TeaModel {
    public var description_: String?

    public var ipControlId: String?

    public var ipControlName: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.ipControlId != nil {
            map["IpControlId"] = self.ipControlId!
        }
        if self.ipControlName != nil {
            map["IpControlName"] = self.ipControlName!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["IpControlId"] as? String {
            self.ipControlId = value
        }
        if let value = dict["IpControlName"] as? String {
            self.ipControlName = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class ModifyIpControlResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyIpControlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyIpControlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyIpControlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyIpControlPolicyItemRequest : Tea.TeaModel {
    public var appId: String?

    public var cidrIp: String?

    public var ipControlId: String?

    public var policyItemId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.cidrIp != nil {
            map["CidrIp"] = self.cidrIp!
        }
        if self.ipControlId != nil {
            map["IpControlId"] = self.ipControlId!
        }
        if self.policyItemId != nil {
            map["PolicyItemId"] = self.policyItemId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? String {
            self.appId = value
        }
        if let value = dict["CidrIp"] as? String {
            self.cidrIp = value
        }
        if let value = dict["IpControlId"] as? String {
            self.ipControlId = value
        }
        if let value = dict["PolicyItemId"] as? String {
            self.policyItemId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class ModifyIpControlPolicyItemResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyIpControlPolicyItemResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyIpControlPolicyItemResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyIpControlPolicyItemResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyLogConfigRequest : Tea.TeaModel {
    public var logType: String?

    public var securityToken: String?

    public var slsLogStore: String?

    public var slsProject: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.logType != nil {
            map["LogType"] = self.logType!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.slsLogStore != nil {
            map["SlsLogStore"] = self.slsLogStore!
        }
        if self.slsProject != nil {
            map["SlsProject"] = self.slsProject!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["LogType"] as? String {
            self.logType = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["SlsLogStore"] as? String {
            self.slsLogStore = value
        }
        if let value = dict["SlsProject"] as? String {
            self.slsProject = value
        }
    }
}

public class ModifyLogConfigResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyLogConfigResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyLogConfigResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyLogConfigResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyModelRequest : Tea.TeaModel {
    public var description_: String?

    public var groupId: String?

    public var modelName: String?

    public var newModelName: String?

    public var schema: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.modelName != nil {
            map["ModelName"] = self.modelName!
        }
        if self.newModelName != nil {
            map["NewModelName"] = self.newModelName!
        }
        if self.schema != nil {
            map["Schema"] = self.schema!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["ModelName"] as? String {
            self.modelName = value
        }
        if let value = dict["NewModelName"] as? String {
            self.newModelName = value
        }
        if let value = dict["Schema"] as? String {
            self.schema = value
        }
    }
}

public class ModifyModelResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyModelResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyModelResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyModelResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyPluginRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var description_: String?

    public var pluginData: String?

    public var pluginId: String?

    public var pluginName: String?

    public var securityToken: String?

    public var tag: [ModifyPluginRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.pluginData != nil {
            map["PluginData"] = self.pluginData!
        }
        if self.pluginId != nil {
            map["PluginId"] = self.pluginId!
        }
        if self.pluginName != nil {
            map["PluginName"] = self.pluginName!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["PluginData"] as? String {
            self.pluginData = value
        }
        if let value = dict["PluginId"] as? String {
            self.pluginId = value
        }
        if let value = dict["PluginName"] as? String {
            self.pluginName = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [ModifyPluginRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = ModifyPluginRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class ModifyPluginResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyPluginResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyPluginResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyPluginResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifySignatureRequest : Tea.TeaModel {
    public var securityToken: String?

    public var signatureId: String?

    public var signatureKey: String?

    public var signatureName: String?

    public var signatureSecret: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.signatureId != nil {
            map["SignatureId"] = self.signatureId!
        }
        if self.signatureKey != nil {
            map["SignatureKey"] = self.signatureKey!
        }
        if self.signatureName != nil {
            map["SignatureName"] = self.signatureName!
        }
        if self.signatureSecret != nil {
            map["SignatureSecret"] = self.signatureSecret!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["SignatureId"] as? String {
            self.signatureId = value
        }
        if let value = dict["SignatureKey"] as? String {
            self.signatureKey = value
        }
        if let value = dict["SignatureName"] as? String {
            self.signatureName = value
        }
        if let value = dict["SignatureSecret"] as? String {
            self.signatureSecret = value
        }
    }
}

public class ModifySignatureResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var signatureId: String?

    public var signatureName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.signatureId != nil {
            map["SignatureId"] = self.signatureId!
        }
        if self.signatureName != nil {
            map["SignatureName"] = self.signatureName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SignatureId"] as? String {
            self.signatureId = value
        }
        if let value = dict["SignatureName"] as? String {
            self.signatureName = value
        }
    }
}

public class ModifySignatureResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifySignatureResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifySignatureResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyTrafficControlRequest : Tea.TeaModel {
    public var apiDefault: Int32?

    public var appDefault: Int32?

    public var description_: String?

    public var securityToken: String?

    public var trafficControlId: String?

    public var trafficControlName: String?

    public var trafficControlUnit: String?

    public var userDefault: Int32?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiDefault != nil {
            map["ApiDefault"] = self.apiDefault!
        }
        if self.appDefault != nil {
            map["AppDefault"] = self.appDefault!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.trafficControlId != nil {
            map["TrafficControlId"] = self.trafficControlId!
        }
        if self.trafficControlName != nil {
            map["TrafficControlName"] = self.trafficControlName!
        }
        if self.trafficControlUnit != nil {
            map["TrafficControlUnit"] = self.trafficControlUnit!
        }
        if self.userDefault != nil {
            map["UserDefault"] = self.userDefault!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiDefault"] as? Int32 {
            self.apiDefault = value
        }
        if let value = dict["AppDefault"] as? Int32 {
            self.appDefault = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["TrafficControlId"] as? String {
            self.trafficControlId = value
        }
        if let value = dict["TrafficControlName"] as? String {
            self.trafficControlName = value
        }
        if let value = dict["TrafficControlUnit"] as? String {
            self.trafficControlUnit = value
        }
        if let value = dict["UserDefault"] as? Int32 {
            self.userDefault = value
        }
    }
}

public class ModifyTrafficControlResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyTrafficControlResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyTrafficControlResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyTrafficControlResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ModifyVpcAccessAndUpdateApisRequest : Tea.TeaModel {
    public var instanceId: String?

    public var name: String?

    public var needBatchWork: Bool?

    public var port: Int32?

    public var refresh: Bool?

    public var securityToken: String?

    public var token: String?

    public var vpcId: String?

    public var vpcTargetHostName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.needBatchWork != nil {
            map["NeedBatchWork"] = self.needBatchWork!
        }
        if self.port != nil {
            map["Port"] = self.port!
        }
        if self.refresh != nil {
            map["Refresh"] = self.refresh!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.token != nil {
            map["Token"] = self.token!
        }
        if self.vpcId != nil {
            map["VpcId"] = self.vpcId!
        }
        if self.vpcTargetHostName != nil {
            map["VpcTargetHostName"] = self.vpcTargetHostName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["NeedBatchWork"] as? Bool {
            self.needBatchWork = value
        }
        if let value = dict["Port"] as? Int32 {
            self.port = value
        }
        if let value = dict["Refresh"] as? Bool {
            self.refresh = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Token"] as? String {
            self.token = value
        }
        if let value = dict["VpcId"] as? String {
            self.vpcId = value
        }
        if let value = dict["VpcTargetHostName"] as? String {
            self.vpcTargetHostName = value
        }
    }
}

public class ModifyVpcAccessAndUpdateApisResponseBody : Tea.TeaModel {
    public var operationId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.operationId != nil {
            map["OperationId"] = self.operationId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OperationId"] as? String {
            self.operationId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ModifyVpcAccessAndUpdateApisResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ModifyVpcAccessAndUpdateApisResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ModifyVpcAccessAndUpdateApisResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class OpenApiGatewayServiceResponseBody : Tea.TeaModel {
    public var orderId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.orderId != nil {
            map["OrderId"] = self.orderId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OrderId"] as? String {
            self.orderId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class OpenApiGatewayServiceResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: OpenApiGatewayServiceResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = OpenApiGatewayServiceResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class QueryRequestLogsRequest : Tea.TeaModel {
    public var requestLogId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestLogId != nil {
            map["RequestLogId"] = self.requestLogId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestLogId"] as? String {
            self.requestLogId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class QueryRequestLogsResponseBody : Tea.TeaModel {
    public class RequestLogs : Tea.TeaModel {
        public class RequestLog : Tea.TeaModel {
            public var apiId: String?

            public var apiName: String?

            public var appName: String?

            public var backendRequestEnd: Int64?

            public var backendRequestStart: Int64?

            public var backendResponseEnd: Int64?

            public var backendResponseStart: Int64?

            public var clientIp: String?

            public var clientNonce: String?

            public var consumerAppId: String?

            public var consumerAppKey: String?

            public var customTraceId: String?

            public var domain: String?

            public var errorCode: String?

            public var errorMessage: String?

            public var exception: String?

            public var frontRequestEnd: Int64?

            public var frontRequestStart: Int64?

            public var frontResponseEnd: Int64?

            public var frontResponseStart: Int64?

            public var groupId: String?

            public var groupName: String?

            public var httpMethod: String?

            public var httpPath: String?

            public var initialRequestId: String?

            public var instanceId: String?

            public var jwtClaims: String?

            public var region: String?

            public var requestBody: String?

            public var requestHeaders: String?

            public var requestId: String?

            public var requestProtocol: String?

            public var requestQueryString: String?

            public var requestSize: String?

            public var requestTime: String?

            public var responseBody: String?

            public var responseHeaders: String?

            public var responseSize: String?

            public var serviceLatency: String?

            public var stageId: String?

            public var stageName: String?

            public var statusCode: String?

            public var totalLatency: String?

            public var plugin: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiId != nil {
                    map["ApiId"] = self.apiId!
                }
                if self.apiName != nil {
                    map["ApiName"] = self.apiName!
                }
                if self.appName != nil {
                    map["AppName"] = self.appName!
                }
                if self.backendRequestEnd != nil {
                    map["BackendRequestEnd"] = self.backendRequestEnd!
                }
                if self.backendRequestStart != nil {
                    map["BackendRequestStart"] = self.backendRequestStart!
                }
                if self.backendResponseEnd != nil {
                    map["BackendResponseEnd"] = self.backendResponseEnd!
                }
                if self.backendResponseStart != nil {
                    map["BackendResponseStart"] = self.backendResponseStart!
                }
                if self.clientIp != nil {
                    map["ClientIp"] = self.clientIp!
                }
                if self.clientNonce != nil {
                    map["ClientNonce"] = self.clientNonce!
                }
                if self.consumerAppId != nil {
                    map["ConsumerAppId"] = self.consumerAppId!
                }
                if self.consumerAppKey != nil {
                    map["ConsumerAppKey"] = self.consumerAppKey!
                }
                if self.customTraceId != nil {
                    map["CustomTraceId"] = self.customTraceId!
                }
                if self.domain != nil {
                    map["Domain"] = self.domain!
                }
                if self.errorCode != nil {
                    map["ErrorCode"] = self.errorCode!
                }
                if self.errorMessage != nil {
                    map["ErrorMessage"] = self.errorMessage!
                }
                if self.exception != nil {
                    map["Exception"] = self.exception!
                }
                if self.frontRequestEnd != nil {
                    map["FrontRequestEnd"] = self.frontRequestEnd!
                }
                if self.frontRequestStart != nil {
                    map["FrontRequestStart"] = self.frontRequestStart!
                }
                if self.frontResponseEnd != nil {
                    map["FrontResponseEnd"] = self.frontResponseEnd!
                }
                if self.frontResponseStart != nil {
                    map["FrontResponseStart"] = self.frontResponseStart!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.groupName != nil {
                    map["GroupName"] = self.groupName!
                }
                if self.httpMethod != nil {
                    map["HttpMethod"] = self.httpMethod!
                }
                if self.httpPath != nil {
                    map["HttpPath"] = self.httpPath!
                }
                if self.initialRequestId != nil {
                    map["InitialRequestId"] = self.initialRequestId!
                }
                if self.instanceId != nil {
                    map["InstanceId"] = self.instanceId!
                }
                if self.jwtClaims != nil {
                    map["JwtClaims"] = self.jwtClaims!
                }
                if self.region != nil {
                    map["Region"] = self.region!
                }
                if self.requestBody != nil {
                    map["RequestBody"] = self.requestBody!
                }
                if self.requestHeaders != nil {
                    map["RequestHeaders"] = self.requestHeaders!
                }
                if self.requestId != nil {
                    map["RequestId"] = self.requestId!
                }
                if self.requestProtocol != nil {
                    map["RequestProtocol"] = self.requestProtocol!
                }
                if self.requestQueryString != nil {
                    map["RequestQueryString"] = self.requestQueryString!
                }
                if self.requestSize != nil {
                    map["RequestSize"] = self.requestSize!
                }
                if self.requestTime != nil {
                    map["RequestTime"] = self.requestTime!
                }
                if self.responseBody != nil {
                    map["ResponseBody"] = self.responseBody!
                }
                if self.responseHeaders != nil {
                    map["ResponseHeaders"] = self.responseHeaders!
                }
                if self.responseSize != nil {
                    map["ResponseSize"] = self.responseSize!
                }
                if self.serviceLatency != nil {
                    map["ServiceLatency"] = self.serviceLatency!
                }
                if self.stageId != nil {
                    map["StageId"] = self.stageId!
                }
                if self.stageName != nil {
                    map["StageName"] = self.stageName!
                }
                if self.statusCode != nil {
                    map["StatusCode"] = self.statusCode!
                }
                if self.totalLatency != nil {
                    map["TotalLatency"] = self.totalLatency!
                }
                if self.plugin != nil {
                    map["plugin"] = self.plugin!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiId"] as? String {
                    self.apiId = value
                }
                if let value = dict["ApiName"] as? String {
                    self.apiName = value
                }
                if let value = dict["AppName"] as? String {
                    self.appName = value
                }
                if let value = dict["BackendRequestEnd"] as? Int64 {
                    self.backendRequestEnd = value
                }
                if let value = dict["BackendRequestStart"] as? Int64 {
                    self.backendRequestStart = value
                }
                if let value = dict["BackendResponseEnd"] as? Int64 {
                    self.backendResponseEnd = value
                }
                if let value = dict["BackendResponseStart"] as? Int64 {
                    self.backendResponseStart = value
                }
                if let value = dict["ClientIp"] as? String {
                    self.clientIp = value
                }
                if let value = dict["ClientNonce"] as? String {
                    self.clientNonce = value
                }
                if let value = dict["ConsumerAppId"] as? String {
                    self.consumerAppId = value
                }
                if let value = dict["ConsumerAppKey"] as? String {
                    self.consumerAppKey = value
                }
                if let value = dict["CustomTraceId"] as? String {
                    self.customTraceId = value
                }
                if let value = dict["Domain"] as? String {
                    self.domain = value
                }
                if let value = dict["ErrorCode"] as? String {
                    self.errorCode = value
                }
                if let value = dict["ErrorMessage"] as? String {
                    self.errorMessage = value
                }
                if let value = dict["Exception"] as? String {
                    self.exception = value
                }
                if let value = dict["FrontRequestEnd"] as? Int64 {
                    self.frontRequestEnd = value
                }
                if let value = dict["FrontRequestStart"] as? Int64 {
                    self.frontRequestStart = value
                }
                if let value = dict["FrontResponseEnd"] as? Int64 {
                    self.frontResponseEnd = value
                }
                if let value = dict["FrontResponseStart"] as? Int64 {
                    self.frontResponseStart = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["GroupName"] as? String {
                    self.groupName = value
                }
                if let value = dict["HttpMethod"] as? String {
                    self.httpMethod = value
                }
                if let value = dict["HttpPath"] as? String {
                    self.httpPath = value
                }
                if let value = dict["InitialRequestId"] as? String {
                    self.initialRequestId = value
                }
                if let value = dict["InstanceId"] as? String {
                    self.instanceId = value
                }
                if let value = dict["JwtClaims"] as? String {
                    self.jwtClaims = value
                }
                if let value = dict["Region"] as? String {
                    self.region = value
                }
                if let value = dict["RequestBody"] as? String {
                    self.requestBody = value
                }
                if let value = dict["RequestHeaders"] as? String {
                    self.requestHeaders = value
                }
                if let value = dict["RequestId"] as? String {
                    self.requestId = value
                }
                if let value = dict["RequestProtocol"] as? String {
                    self.requestProtocol = value
                }
                if let value = dict["RequestQueryString"] as? String {
                    self.requestQueryString = value
                }
                if let value = dict["RequestSize"] as? String {
                    self.requestSize = value
                }
                if let value = dict["RequestTime"] as? String {
                    self.requestTime = value
                }
                if let value = dict["ResponseBody"] as? String {
                    self.responseBody = value
                }
                if let value = dict["ResponseHeaders"] as? String {
                    self.responseHeaders = value
                }
                if let value = dict["ResponseSize"] as? String {
                    self.responseSize = value
                }
                if let value = dict["ServiceLatency"] as? String {
                    self.serviceLatency = value
                }
                if let value = dict["StageId"] as? String {
                    self.stageId = value
                }
                if let value = dict["StageName"] as? String {
                    self.stageName = value
                }
                if let value = dict["StatusCode"] as? String {
                    self.statusCode = value
                }
                if let value = dict["TotalLatency"] as? String {
                    self.totalLatency = value
                }
                if let value = dict["plugin"] as? String {
                    self.plugin = value
                }
            }
        }
        public var requestLog: [QueryRequestLogsResponseBody.RequestLogs.RequestLog]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.requestLog != nil {
                var tmp : [Any] = []
                for k in self.requestLog! {
                    tmp.append(k.toMap())
                }
                map["RequestLog"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["RequestLog"] as? [Any?] {
                var tmp : [QueryRequestLogsResponseBody.RequestLogs.RequestLog] = []
                for v in value {
                    if v != nil {
                        var model = QueryRequestLogsResponseBody.RequestLogs.RequestLog()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.requestLog = tmp
            }
        }
    }
    public var requestId: String?

    public var requestLogs: QueryRequestLogsResponseBody.RequestLogs?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.requestLogs?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.requestLogs != nil {
            map["RequestLogs"] = self.requestLogs?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["RequestLogs"] as? [String: Any?] {
            var model = QueryRequestLogsResponseBody.RequestLogs()
            model.fromMap(value)
            self.requestLogs = model
        }
    }
}

public class QueryRequestLogsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: QueryRequestLogsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = QueryRequestLogsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ReactivateDomainRequest : Tea.TeaModel {
    public var domainName: String?

    public var groupId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class ReactivateDomainResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ReactivateDomainResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ReactivateDomainResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ReactivateDomainResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemoveAccessControlListEntryRequest : Tea.TeaModel {
    public var aclEntrys: String?

    public var aclId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aclEntrys != nil {
            map["AclEntrys"] = self.aclEntrys!
        }
        if self.aclId != nil {
            map["AclId"] = self.aclId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AclEntrys"] as? String {
            self.aclEntrys = value
        }
        if let value = dict["AclId"] as? String {
            self.aclId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class RemoveAccessControlListEntryResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RemoveAccessControlListEntryResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemoveAccessControlListEntryResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemoveAccessControlListEntryResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemoveApiProductsAuthoritiesRequest : Tea.TeaModel {
    public var apiProductIds: [String]?

    public var appId: Int64?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiProductIds != nil {
            map["ApiProductIds"] = self.apiProductIds!
        }
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiProductIds"] as? [String] {
            self.apiProductIds = value
        }
        if let value = dict["AppId"] as? Int64 {
            self.appId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class RemoveApiProductsAuthoritiesShrinkRequest : Tea.TeaModel {
    public var apiProductIdsShrink: String?

    public var appId: Int64?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiProductIdsShrink != nil {
            map["ApiProductIds"] = self.apiProductIdsShrink!
        }
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiProductIds"] as? String {
            self.apiProductIdsShrink = value
        }
        if let value = dict["AppId"] as? Int64 {
            self.appId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class RemoveApiProductsAuthoritiesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RemoveApiProductsAuthoritiesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemoveApiProductsAuthoritiesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemoveApiProductsAuthoritiesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemoveApisAuthoritiesRequest : Tea.TeaModel {
    public var apiIds: String?

    public var appId: Int64?

    public var description_: String?

    public var groupId: String?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiIds != nil {
            map["ApiIds"] = self.apiIds!
        }
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiIds"] as? String {
            self.apiIds = value
        }
        if let value = dict["AppId"] as? Int64 {
            self.appId = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class RemoveApisAuthoritiesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RemoveApisAuthoritiesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemoveApisAuthoritiesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemoveApisAuthoritiesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemoveAppsAuthoritiesRequest : Tea.TeaModel {
    public var apiId: String?

    public var appIds: String?

    public var groupId: String?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.appIds != nil {
            map["AppIds"] = self.appIds!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["AppIds"] as? String {
            self.appIds = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class RemoveAppsAuthoritiesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RemoveAppsAuthoritiesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemoveAppsAuthoritiesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemoveAppsAuthoritiesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemoveIpControlApisRequest : Tea.TeaModel {
    public var apiIds: String?

    public var groupId: String?

    public var ipControlId: String?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiIds != nil {
            map["ApiIds"] = self.apiIds!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.ipControlId != nil {
            map["IpControlId"] = self.ipControlId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiIds"] as? String {
            self.apiIds = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["IpControlId"] as? String {
            self.ipControlId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class RemoveIpControlApisResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RemoveIpControlApisResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemoveIpControlApisResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemoveIpControlApisResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemoveIpControlPolicyItemRequest : Tea.TeaModel {
    public var ipControlId: String?

    public var policyItemIds: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.ipControlId != nil {
            map["IpControlId"] = self.ipControlId!
        }
        if self.policyItemIds != nil {
            map["PolicyItemIds"] = self.policyItemIds!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IpControlId"] as? String {
            self.ipControlId = value
        }
        if let value = dict["PolicyItemIds"] as? String {
            self.policyItemIds = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class RemoveIpControlPolicyItemResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RemoveIpControlPolicyItemResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemoveIpControlPolicyItemResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemoveIpControlPolicyItemResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemoveSignatureApisRequest : Tea.TeaModel {
    public var apiIds: String?

    public var groupId: String?

    public var securityToken: String?

    public var signatureId: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiIds != nil {
            map["ApiIds"] = self.apiIds!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.signatureId != nil {
            map["SignatureId"] = self.signatureId!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiIds"] as? String {
            self.apiIds = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["SignatureId"] as? String {
            self.signatureId = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class RemoveSignatureApisResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RemoveSignatureApisResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemoveSignatureApisResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemoveSignatureApisResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemoveTrafficControlApisRequest : Tea.TeaModel {
    public var apiIds: String?

    public var groupId: String?

    public var securityToken: String?

    public var stageName: String?

    public var trafficControlId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiIds != nil {
            map["ApiIds"] = self.apiIds!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        if self.trafficControlId != nil {
            map["TrafficControlId"] = self.trafficControlId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiIds"] as? String {
            self.apiIds = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
        if let value = dict["TrafficControlId"] as? String {
            self.trafficControlId = value
        }
    }
}

public class RemoveTrafficControlApisResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RemoveTrafficControlApisResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemoveTrafficControlApisResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemoveTrafficControlApisResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemoveVpcAccessRequest : Tea.TeaModel {
    public var instanceId: String?

    public var needBatchWork: Bool?

    public var port: Int32?

    public var securityToken: String?

    public var vpcId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.needBatchWork != nil {
            map["NeedBatchWork"] = self.needBatchWork!
        }
        if self.port != nil {
            map["Port"] = self.port!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.vpcId != nil {
            map["VpcId"] = self.vpcId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["NeedBatchWork"] as? Bool {
            self.needBatchWork = value
        }
        if let value = dict["Port"] as? Int32 {
            self.port = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["VpcId"] as? String {
            self.vpcId = value
        }
    }
}

public class RemoveVpcAccessResponseBody : Tea.TeaModel {
    public class Apis : Tea.TeaModel {
        public class Api : Tea.TeaModel {
            public var apiId: String?

            public var groupId: String?

            public var stageId: String?

            public override init() {
                super.init()
            }

            public init(_ dict: [String: Any]) {
                super.init()
                self.fromMap(dict)
            }

            public override func validate() throws -> Void {
            }

            public override func toMap() -> [String : Any] {
                var map = super.toMap()
                if self.apiId != nil {
                    map["ApiId"] = self.apiId!
                }
                if self.groupId != nil {
                    map["GroupId"] = self.groupId!
                }
                if self.stageId != nil {
                    map["StageId"] = self.stageId!
                }
                return map
            }

            public override func fromMap(_ dict: [String: Any?]?) -> Void {
                guard let dict else { return }
                if let value = dict["ApiId"] as? String {
                    self.apiId = value
                }
                if let value = dict["GroupId"] as? String {
                    self.groupId = value
                }
                if let value = dict["StageId"] as? String {
                    self.stageId = value
                }
            }
        }
        public var api: [RemoveVpcAccessResponseBody.Apis.Api]?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.api != nil {
                var tmp : [Any] = []
                for k in self.api! {
                    tmp.append(k.toMap())
                }
                map["Api"] = tmp
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Api"] as? [Any?] {
                var tmp : [RemoveVpcAccessResponseBody.Apis.Api] = []
                for v in value {
                    if v != nil {
                        var model = RemoveVpcAccessResponseBody.Apis.Api()
                        if v != nil {
                            model.fromMap(v as? [String: Any?])
                        }
                        tmp.append(model)
                    }
                }
                self.api = tmp
            }
        }
    }
    public var apis: RemoveVpcAccessResponseBody.Apis?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.apis?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apis != nil {
            map["Apis"] = self.apis?.toMap()
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Apis"] as? [String: Any?] {
            var model = RemoveVpcAccessResponseBody.Apis()
            model.fromMap(value)
            self.apis = model
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RemoveVpcAccessResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemoveVpcAccessResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemoveVpcAccessResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class RemoveVpcAccessAndAbolishApisRequest : Tea.TeaModel {
    public var instanceId: String?

    public var needBatchWork: Bool?

    public var port: Int32?

    public var securityToken: String?

    public var vpcId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.needBatchWork != nil {
            map["NeedBatchWork"] = self.needBatchWork!
        }
        if self.port != nil {
            map["Port"] = self.port!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.vpcId != nil {
            map["VpcId"] = self.vpcId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["NeedBatchWork"] as? Bool {
            self.needBatchWork = value
        }
        if let value = dict["Port"] as? Int32 {
            self.port = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["VpcId"] as? String {
            self.vpcId = value
        }
    }
}

public class RemoveVpcAccessAndAbolishApisResponseBody : Tea.TeaModel {
    public var operationId: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.operationId != nil {
            map["OperationId"] = self.operationId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["OperationId"] as? String {
            self.operationId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class RemoveVpcAccessAndAbolishApisResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: RemoveVpcAccessAndAbolishApisResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = RemoveVpcAccessAndAbolishApisResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ResetAppCodeRequest : Tea.TeaModel {
    public var appCode: String?

    public var newAppCode: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appCode != nil {
            map["AppCode"] = self.appCode!
        }
        if self.newAppCode != nil {
            map["NewAppCode"] = self.newAppCode!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppCode"] as? String {
            self.appCode = value
        }
        if let value = dict["NewAppCode"] as? String {
            self.newAppCode = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class ResetAppCodeResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ResetAppCodeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ResetAppCodeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ResetAppCodeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ResetAppSecretRequest : Tea.TeaModel {
    public var appKey: String?

    public var newAppKey: String?

    public var newAppSecret: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appKey != nil {
            map["AppKey"] = self.appKey!
        }
        if self.newAppKey != nil {
            map["NewAppKey"] = self.newAppKey!
        }
        if self.newAppSecret != nil {
            map["NewAppSecret"] = self.newAppSecret!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppKey"] as? String {
            self.appKey = value
        }
        if let value = dict["NewAppKey"] as? String {
            self.newAppKey = value
        }
        if let value = dict["NewAppSecret"] as? String {
            self.newAppSecret = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class ResetAppSecretResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ResetAppSecretResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ResetAppSecretResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ResetAppSecretResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SdkGenerateByAppRequest : Tea.TeaModel {
    public var appId: Int64?

    public var language: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? Int64 {
            self.appId = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class SdkGenerateByAppResponseBody : Tea.TeaModel {
    public var downloadLink: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.downloadLink != nil {
            map["DownloadLink"] = self.downloadLink!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DownloadLink"] as? String {
            self.downloadLink = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SdkGenerateByAppResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SdkGenerateByAppResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SdkGenerateByAppResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SdkGenerateByAppForRegionRequest : Tea.TeaModel {
    public var appId: Int64?

    public var language: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AppId"] as? Int64 {
            self.appId = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class SdkGenerateByAppForRegionResponseBody : Tea.TeaModel {
    public var downloadLink: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.downloadLink != nil {
            map["DownloadLink"] = self.downloadLink!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DownloadLink"] as? String {
            self.downloadLink = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SdkGenerateByAppForRegionResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SdkGenerateByAppForRegionResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SdkGenerateByAppForRegionResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SdkGenerateByGroupRequest : Tea.TeaModel {
    public var groupId: String?

    public var language: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.language != nil {
            map["Language"] = self.language!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["Language"] as? String {
            self.language = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class SdkGenerateByGroupResponseBody : Tea.TeaModel {
    public var downloadLink: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.downloadLink != nil {
            map["DownloadLink"] = self.downloadLink!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DownloadLink"] as? String {
            self.downloadLink = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SdkGenerateByGroupResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SdkGenerateByGroupResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SdkGenerateByGroupResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetAccessControlListAttributeRequest : Tea.TeaModel {
    public var aclId: String?

    public var aclName: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.aclId != nil {
            map["AclId"] = self.aclId!
        }
        if self.aclName != nil {
            map["AclName"] = self.aclName!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AclId"] as? String {
            self.aclId = value
        }
        if let value = dict["AclName"] as? String {
            self.aclName = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class SetAccessControlListAttributeResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetAccessControlListAttributeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetAccessControlListAttributeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetAccessControlListAttributeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetApiProductsAuthoritiesRequest : Tea.TeaModel {
    public var apiProductIds: [String]?

    public var appId: Int64?

    public var authValidTime: String?

    public var description_: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiProductIds != nil {
            map["ApiProductIds"] = self.apiProductIds!
        }
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.authValidTime != nil {
            map["AuthValidTime"] = self.authValidTime!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiProductIds"] as? [String] {
            self.apiProductIds = value
        }
        if let value = dict["AppId"] as? Int64 {
            self.appId = value
        }
        if let value = dict["AuthValidTime"] as? String {
            self.authValidTime = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class SetApiProductsAuthoritiesShrinkRequest : Tea.TeaModel {
    public var apiProductIdsShrink: String?

    public var appId: Int64?

    public var authValidTime: String?

    public var description_: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiProductIdsShrink != nil {
            map["ApiProductIds"] = self.apiProductIdsShrink!
        }
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.authValidTime != nil {
            map["AuthValidTime"] = self.authValidTime!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiProductIds"] as? String {
            self.apiProductIdsShrink = value
        }
        if let value = dict["AppId"] as? Int64 {
            self.appId = value
        }
        if let value = dict["AuthValidTime"] as? String {
            self.authValidTime = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class SetApiProductsAuthoritiesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetApiProductsAuthoritiesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetApiProductsAuthoritiesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetApiProductsAuthoritiesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetApisAuthoritiesRequest : Tea.TeaModel {
    public var apiIds: String?

    public var appId: Int64?

    public var authValidTime: String?

    public var description_: String?

    public var groupId: String?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiIds != nil {
            map["ApiIds"] = self.apiIds!
        }
        if self.appId != nil {
            map["AppId"] = self.appId!
        }
        if self.authValidTime != nil {
            map["AuthValidTime"] = self.authValidTime!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiIds"] as? String {
            self.apiIds = value
        }
        if let value = dict["AppId"] as? Int64 {
            self.appId = value
        }
        if let value = dict["AuthValidTime"] as? String {
            self.authValidTime = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class SetApisAuthoritiesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetApisAuthoritiesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetApisAuthoritiesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetApisAuthoritiesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetAppsAuthToApiProductRequest : Tea.TeaModel {
    public var apiProductId: String?

    public var appIds: [Int64]?

    public var authValidTime: String?

    public var description_: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiProductId != nil {
            map["ApiProductId"] = self.apiProductId!
        }
        if self.appIds != nil {
            map["AppIds"] = self.appIds!
        }
        if self.authValidTime != nil {
            map["AuthValidTime"] = self.authValidTime!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiProductId"] as? String {
            self.apiProductId = value
        }
        if let value = dict["AppIds"] as? [Int64] {
            self.appIds = value
        }
        if let value = dict["AuthValidTime"] as? String {
            self.authValidTime = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class SetAppsAuthToApiProductResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetAppsAuthToApiProductResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetAppsAuthToApiProductResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetAppsAuthToApiProductResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetAppsAuthoritiesRequest : Tea.TeaModel {
    public var apiId: String?

    public var appIds: String?

    public var authValidTime: String?

    public var description_: String?

    public var groupId: String?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.appIds != nil {
            map["AppIds"] = self.appIds!
        }
        if self.authValidTime != nil {
            map["AuthValidTime"] = self.authValidTime!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["AppIds"] as? String {
            self.appIds = value
        }
        if let value = dict["AuthValidTime"] as? String {
            self.authValidTime = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class SetAppsAuthoritiesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetAppsAuthoritiesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetAppsAuthoritiesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetAppsAuthoritiesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetDomainRequest : Tea.TeaModel {
    public var bindStageName: String?

    public var customDomainType: String?

    public var domainName: String?

    public var groupId: String?

    public var isForce: Bool?

    public var isHttpRedirectToHttps: Bool?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.bindStageName != nil {
            map["BindStageName"] = self.bindStageName!
        }
        if self.customDomainType != nil {
            map["CustomDomainType"] = self.customDomainType!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.isForce != nil {
            map["IsForce"] = self.isForce!
        }
        if self.isHttpRedirectToHttps != nil {
            map["IsHttpRedirectToHttps"] = self.isHttpRedirectToHttps!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["BindStageName"] as? String {
            self.bindStageName = value
        }
        if let value = dict["CustomDomainType"] as? String {
            self.customDomainType = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["IsForce"] as? Bool {
            self.isForce = value
        }
        if let value = dict["IsHttpRedirectToHttps"] as? Bool {
            self.isHttpRedirectToHttps = value
        }
    }
}

public class SetDomainResponseBody : Tea.TeaModel {
    public var domainBindingStatus: String?

    public var domainLegalStatus: String?

    public var domainName: String?

    public var domainRemark: String?

    public var domainWebSocketStatus: String?

    public var groupId: String?

    public var requestId: String?

    public var subDomain: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainBindingStatus != nil {
            map["DomainBindingStatus"] = self.domainBindingStatus!
        }
        if self.domainLegalStatus != nil {
            map["DomainLegalStatus"] = self.domainLegalStatus!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.domainRemark != nil {
            map["DomainRemark"] = self.domainRemark!
        }
        if self.domainWebSocketStatus != nil {
            map["DomainWebSocketStatus"] = self.domainWebSocketStatus!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.subDomain != nil {
            map["SubDomain"] = self.subDomain!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainBindingStatus"] as? String {
            self.domainBindingStatus = value
        }
        if let value = dict["DomainLegalStatus"] as? String {
            self.domainLegalStatus = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["DomainRemark"] as? String {
            self.domainRemark = value
        }
        if let value = dict["DomainWebSocketStatus"] as? String {
            self.domainWebSocketStatus = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["SubDomain"] as? String {
            self.subDomain = value
        }
    }
}

public class SetDomainResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetDomainResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetDomainResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetDomainCertificateRequest : Tea.TeaModel {
    public var caCertificateBody: String?

    public var certificateBody: String?

    public var certificateName: String?

    public var certificatePrivateKey: String?

    public var clientCertSDnPassThrough: Bool?

    public var domainName: String?

    public var groupId: String?

    public var securityToken: String?

    public var sslOcspCacheEnable: Bool?

    public var sslOcspEnable: Bool?

    public var sslVerifyDepth: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.caCertificateBody != nil {
            map["CaCertificateBody"] = self.caCertificateBody!
        }
        if self.certificateBody != nil {
            map["CertificateBody"] = self.certificateBody!
        }
        if self.certificateName != nil {
            map["CertificateName"] = self.certificateName!
        }
        if self.certificatePrivateKey != nil {
            map["CertificatePrivateKey"] = self.certificatePrivateKey!
        }
        if self.clientCertSDnPassThrough != nil {
            map["ClientCertSDnPassThrough"] = self.clientCertSDnPassThrough!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.sslOcspCacheEnable != nil {
            map["SslOcspCacheEnable"] = self.sslOcspCacheEnable!
        }
        if self.sslOcspEnable != nil {
            map["SslOcspEnable"] = self.sslOcspEnable!
        }
        if self.sslVerifyDepth != nil {
            map["SslVerifyDepth"] = self.sslVerifyDepth!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["CaCertificateBody"] as? String {
            self.caCertificateBody = value
        }
        if let value = dict["CertificateBody"] as? String {
            self.certificateBody = value
        }
        if let value = dict["CertificateName"] as? String {
            self.certificateName = value
        }
        if let value = dict["CertificatePrivateKey"] as? String {
            self.certificatePrivateKey = value
        }
        if let value = dict["ClientCertSDnPassThrough"] as? Bool {
            self.clientCertSDnPassThrough = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["SslOcspCacheEnable"] as? Bool {
            self.sslOcspCacheEnable = value
        }
        if let value = dict["SslOcspEnable"] as? Bool {
            self.sslOcspEnable = value
        }
        if let value = dict["SslVerifyDepth"] as? String {
            self.sslVerifyDepth = value
        }
    }
}

public class SetDomainCertificateResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetDomainCertificateResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetDomainCertificateResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetDomainCertificateResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetDomainWebSocketStatusRequest : Tea.TeaModel {
    public var actionValue: String?

    public var domainName: String?

    public var groupId: String?

    public var securityToken: String?

    public var WSSEnable: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.actionValue != nil {
            map["ActionValue"] = self.actionValue!
        }
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.WSSEnable != nil {
            map["WSSEnable"] = self.WSSEnable!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ActionValue"] as? String {
            self.actionValue = value
        }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["WSSEnable"] as? String {
            self.WSSEnable = value
        }
    }
}

public class SetDomainWebSocketStatusResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetDomainWebSocketStatusResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetDomainWebSocketStatusResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetDomainWebSocketStatusResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetGroupAuthAppCodeRequest : Tea.TeaModel {
    public var authAppCode: String?

    public var groupId: String?

    public var securityToken: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.authAppCode != nil {
            map["AuthAppCode"] = self.authAppCode!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["AuthAppCode"] as? String {
            self.authAppCode = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
    }
}

public class SetGroupAuthAppCodeResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetGroupAuthAppCodeResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetGroupAuthAppCodeResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetGroupAuthAppCodeResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetIpControlApisRequest : Tea.TeaModel {
    public var apiIds: String?

    public var groupId: String?

    public var ipControlId: String?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiIds != nil {
            map["ApiIds"] = self.apiIds!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.ipControlId != nil {
            map["IpControlId"] = self.ipControlId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiIds"] as? String {
            self.apiIds = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["IpControlId"] as? String {
            self.ipControlId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class SetIpControlApisResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetIpControlApisResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetIpControlApisResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetIpControlApisResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetSignatureApisRequest : Tea.TeaModel {
    public var apiIds: String?

    public var groupId: String?

    public var securityToken: String?

    public var signatureId: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiIds != nil {
            map["ApiIds"] = self.apiIds!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.signatureId != nil {
            map["SignatureId"] = self.signatureId!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiIds"] as? String {
            self.apiIds = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["SignatureId"] as? String {
            self.signatureId = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class SetSignatureApisResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetSignatureApisResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetSignatureApisResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetSignatureApisResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetTrafficControlApisRequest : Tea.TeaModel {
    public var apiIds: String?

    public var groupId: String?

    public var securityToken: String?

    public var stageName: String?

    public var trafficControlId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiIds != nil {
            map["ApiIds"] = self.apiIds!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        if self.trafficControlId != nil {
            map["TrafficControlId"] = self.trafficControlId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiIds"] as? String {
            self.apiIds = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
        if let value = dict["TrafficControlId"] as? String {
            self.trafficControlId = value
        }
    }
}

public class SetTrafficControlApisResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetTrafficControlApisResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetTrafficControlApisResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetTrafficControlApisResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetVpcAccessRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var description_: String?

    public var instanceId: String?

    public var name: String?

    public var port: Int32?

    public var securityToken: String?

    public var tag: [SetVpcAccessRequest.Tag]?

    public var vpcId: String?

    public var vpcTargetHostName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.name != nil {
            map["Name"] = self.name!
        }
        if self.port != nil {
            map["Port"] = self.port!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        if self.vpcId != nil {
            map["VpcId"] = self.vpcId!
        }
        if self.vpcTargetHostName != nil {
            map["VpcTargetHostName"] = self.vpcTargetHostName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["Name"] as? String {
            self.name = value
        }
        if let value = dict["Port"] as? Int32 {
            self.port = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [SetVpcAccessRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = SetVpcAccessRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
        if let value = dict["VpcId"] as? String {
            self.vpcId = value
        }
        if let value = dict["VpcTargetHostName"] as? String {
            self.vpcTargetHostName = value
        }
    }
}

public class SetVpcAccessResponseBody : Tea.TeaModel {
    public var requestId: String?

    public var vpcAccessId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        if self.vpcAccessId != nil {
            map["VpcAccessId"] = self.vpcAccessId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
        if let value = dict["VpcAccessId"] as? String {
            self.vpcAccessId = value
        }
    }
}

public class SetVpcAccessResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetVpcAccessResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetVpcAccessResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SetWildcardDomainPatternsRequest : Tea.TeaModel {
    public var domainName: String?

    public var groupId: String?

    public var securityToken: String?

    public var wildcardDomainPatterns: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.domainName != nil {
            map["DomainName"] = self.domainName!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.wildcardDomainPatterns != nil {
            map["WildcardDomainPatterns"] = self.wildcardDomainPatterns!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["DomainName"] as? String {
            self.domainName = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["WildcardDomainPatterns"] as? String {
            self.wildcardDomainPatterns = value
        }
    }
}

public class SetWildcardDomainPatternsResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SetWildcardDomainPatternsResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SetWildcardDomainPatternsResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SetWildcardDomainPatternsResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class SwitchApiRequest : Tea.TeaModel {
    public var apiId: String?

    public var description_: String?

    public var groupId: String?

    public var historyVersion: String?

    public var securityToken: String?

    public var stageName: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.apiId != nil {
            map["ApiId"] = self.apiId!
        }
        if self.description_ != nil {
            map["Description"] = self.description_!
        }
        if self.groupId != nil {
            map["GroupId"] = self.groupId!
        }
        if self.historyVersion != nil {
            map["HistoryVersion"] = self.historyVersion!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.stageName != nil {
            map["StageName"] = self.stageName!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ApiId"] as? String {
            self.apiId = value
        }
        if let value = dict["Description"] as? String {
            self.description_ = value
        }
        if let value = dict["GroupId"] as? String {
            self.groupId = value
        }
        if let value = dict["HistoryVersion"] as? String {
            self.historyVersion = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["StageName"] as? String {
            self.stageName = value
        }
    }
}

public class SwitchApiResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class SwitchApiResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: SwitchApiResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = SwitchApiResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class TagResourcesRequest : Tea.TeaModel {
    public class Tag : Tea.TeaModel {
        public var key: String?

        public var value: String?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.key != nil {
                map["Key"] = self.key!
            }
            if self.value != nil {
                map["Value"] = self.value!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Key"] as? String {
                self.key = value
            }
            if let value = dict["Value"] as? String {
                self.value = value
            }
        }
    }
    public var resourceId: [String]?

    public var resourceType: String?

    public var securityToken: String?

    public var tag: [TagResourcesRequest.Tag]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.resourceId != nil {
            map["ResourceId"] = self.resourceId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.tag != nil {
            var tmp : [Any] = []
            for k in self.tag! {
                tmp.append(k.toMap())
            }
            map["Tag"] = tmp
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["ResourceId"] as? [String] {
            self.resourceId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Tag"] as? [Any?] {
            var tmp : [TagResourcesRequest.Tag] = []
            for v in value {
                if v != nil {
                    var model = TagResourcesRequest.Tag()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.tag = tmp
        }
    }
}

public class TagResourcesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class TagResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: TagResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = TagResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UntagResourcesRequest : Tea.TeaModel {
    public var all: Bool?

    public var resourceId: [String]?

    public var resourceType: String?

    public var securityToken: String?

    public var tagKey: [String]?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.all != nil {
            map["All"] = self.all!
        }
        if self.resourceId != nil {
            map["ResourceId"] = self.resourceId!
        }
        if self.resourceType != nil {
            map["ResourceType"] = self.resourceType!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.tagKey != nil {
            map["TagKey"] = self.tagKey!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["All"] as? Bool {
            self.all = value
        }
        if let value = dict["ResourceId"] as? [String] {
            self.resourceId = value
        }
        if let value = dict["ResourceType"] as? String {
            self.resourceType = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["TagKey"] as? [String] {
            self.tagKey = value
        }
    }
}

public class UntagResourcesResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UntagResourcesResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UntagResourcesResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UntagResourcesResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class UpdatePrivateDNSRequest : Tea.TeaModel {
    public class Records : Tea.TeaModel {
        public var record: String?

        public var weight: Int32?

        public override init() {
            super.init()
        }

        public init(_ dict: [String: Any]) {
            super.init()
            self.fromMap(dict)
        }

        public override func validate() throws -> Void {
        }

        public override func toMap() -> [String : Any] {
            var map = super.toMap()
            if self.record != nil {
                map["Record"] = self.record!
            }
            if self.weight != nil {
                map["Weight"] = self.weight!
            }
            return map
        }

        public override func fromMap(_ dict: [String: Any?]?) -> Void {
            guard let dict else { return }
            if let value = dict["Record"] as? String {
                self.record = value
            }
            if let value = dict["Weight"] as? Int32 {
                self.weight = value
            }
        }
    }
    public var intranetDomain: String?

    public var records: [UpdatePrivateDNSRequest.Records]?

    public var securityToken: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.intranetDomain != nil {
            map["IntranetDomain"] = self.intranetDomain!
        }
        if self.records != nil {
            var tmp : [Any] = []
            for k in self.records! {
                tmp.append(k.toMap())
            }
            map["Records"] = tmp
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IntranetDomain"] as? String {
            self.intranetDomain = value
        }
        if let value = dict["Records"] as? [Any?] {
            var tmp : [UpdatePrivateDNSRequest.Records] = []
            for v in value {
                if v != nil {
                    var model = UpdatePrivateDNSRequest.Records()
                    if v != nil {
                        model.fromMap(v as? [String: Any?])
                    }
                    tmp.append(model)
                }
            }
            self.records = tmp
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class UpdatePrivateDNSShrinkRequest : Tea.TeaModel {
    public var intranetDomain: String?

    public var recordsShrink: String?

    public var securityToken: String?

    public var type: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.intranetDomain != nil {
            map["IntranetDomain"] = self.intranetDomain!
        }
        if self.recordsShrink != nil {
            map["Records"] = self.recordsShrink!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.type != nil {
            map["Type"] = self.type!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["IntranetDomain"] as? String {
            self.intranetDomain = value
        }
        if let value = dict["Records"] as? String {
            self.recordsShrink = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["Type"] as? String {
            self.type = value
        }
    }
}

public class UpdatePrivateDNSResponseBody : Tea.TeaModel {
    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class UpdatePrivateDNSResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: UpdatePrivateDNSResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = UpdatePrivateDNSResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}

public class ValidateVpcConnectivityRequest : Tea.TeaModel {
    public var instanceId: String?

    public var securityToken: String?

    public var vpcAccessId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.instanceId != nil {
            map["InstanceId"] = self.instanceId!
        }
        if self.securityToken != nil {
            map["SecurityToken"] = self.securityToken!
        }
        if self.vpcAccessId != nil {
            map["VpcAccessId"] = self.vpcAccessId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["InstanceId"] as? String {
            self.instanceId = value
        }
        if let value = dict["SecurityToken"] as? String {
            self.securityToken = value
        }
        if let value = dict["VpcAccessId"] as? String {
            self.vpcAccessId = value
        }
    }
}

public class ValidateVpcConnectivityResponseBody : Tea.TeaModel {
    public var connected: Bool?

    public var ipType: String?

    public var requestId: String?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.connected != nil {
            map["Connected"] = self.connected!
        }
        if self.ipType != nil {
            map["IpType"] = self.ipType!
        }
        if self.requestId != nil {
            map["RequestId"] = self.requestId!
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["Connected"] as? Bool {
            self.connected = value
        }
        if let value = dict["IpType"] as? String {
            self.ipType = value
        }
        if let value = dict["RequestId"] as? String {
            self.requestId = value
        }
    }
}

public class ValidateVpcConnectivityResponse : Tea.TeaModel {
    public var headers: [String: String]?

    public var statusCode: Int32?

    public var body: ValidateVpcConnectivityResponseBody?

    public override init() {
        super.init()
    }

    public init(_ dict: [String: Any]) {
        super.init()
        self.fromMap(dict)
    }

    public override func validate() throws -> Void {
        try self.body?.validate()
    }

    public override func toMap() -> [String : Any] {
        var map = super.toMap()
        if self.headers != nil {
            map["headers"] = self.headers!
        }
        if self.statusCode != nil {
            map["statusCode"] = self.statusCode!
        }
        if self.body != nil {
            map["body"] = self.body?.toMap()
        }
        return map
    }

    public override func fromMap(_ dict: [String: Any?]?) -> Void {
        guard let dict else { return }
        if let value = dict["headers"] as? [String: String] {
            self.headers = value
        }
        if let value = dict["statusCode"] as? Int32 {
            self.statusCode = value
        }
        if let value = dict["body"] as? [String: Any?] {
            var model = ValidateVpcConnectivityResponseBody()
            model.fromMap(value)
            self.body = model
        }
    }
}
